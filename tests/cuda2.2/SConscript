# \file SConstruct
#
# \author Andrew Kerr <arkerr@gatech.edu>
# \date December 13, 2011
#
# \brief SConstruct for CUDA 2.2 examples to be used as a model for other tools
#

import os
import sys

import inspect
import platform
import re
import subprocess

from SCons import SConf

#
#
## The script begins here
# try to import an environment first
print "Building rules for Ocelot CUDA 2.2 SDK...."
try:
	Import('env')
	import builder
	print " Imported environment from higher level SCons script."
except:
	sys.path.append('../../scripts')	
	import builder
	env = builder.InitializeEnvironment(Environment(), Builder)
	print " Created a new environment."
	
	env['CUDA_PATH'] = '.'

#
# libsdk
#

sources = [
	'sdk/stopwatch_linux.cpp',
	'sdk/cmd_arg_reader.cpp',
	'sdk/cutil.cpp',
	'sdk/stopwatch.cpp',
	'sdk/bank_checker.cpp',
	'sdk/param.cpp',
	'sdk/paramgl.cpp',
	'sdk/rendercheck_gl.cpp',
	'sdk/multithreading.cpp',
]

libsdk2_2 = env.StaticLibrary('sdk2_2', sources)

# Declare test applications here.
#
# (appname, [sources])   -- assumes sources in "tests/{appname}/"
# (appname, [sources], path)   -- assumes sources in "tests/{path}/"
#
testApplications = [
	('AlignedTypes', ['alignedTypes.cu',]),
	('AsyncAPI', ['asyncAPI.cu',]),
	('BandwidthTest', ['bandwidthTest.cu',]),
	('BicubicTexture', ['bicubicTexture.cu','bicubicTexture-host.cpp']),
	('BinomialOptions', 
		['binomialOptions.cpp', 'binomialOptions_gold.cpp', 'binomialOptions_SM13.cu', 'binomialOptions_SM10.cu']),
	('Bitonic', ['bitonic.cu',]),
	('BlackScholes', ['BlackScholes.cu','BlackScholes_gold.cpp']),
	('BoxFilter', ['boxFilter_kernel.cu', 'boxFilter_gold.cpp', 'boxFilter.cpp']),
	('Clock', ['clock.cu',]),
	('ConvolutionFFT2D', ['convolutionFFT2D.cu','convolutionFFT2D_gold.cpp']),
	('ConvolutionSeparable', ['convolutionSeparable.cu','convolutionSeparable_gold.cpp']),
	('ConvolutionTexture', ['convolutionTexture.cu', 'convolutionTexture_gold.cpp']),
	('CppIntegration', ['cppIntegration.cu', 'cppIntegration_gold.cpp', 'main.cpp']),
	('Dct8x8', ['dct8x8.cu', 'DCT8x8_Gold.cpp', 'BmpUtil.cpp']),
	('DeviceQuery', ['deviceQuery.cpp',]),
	('DwtHaar1D', ['dwtHaar1D.cu',]),
	('Dxtc', ['tests.cu', 'dxtc.cu']),
	('Eigenvalues', ['main.cu', 'matlab.cpp', 'gerschgorin.cpp', 'bisect_large.cu', 'bisect_small.cu']),
	('FluidsGL', ['fluidsGL.cu',]),
	('FastWalshTransform', ['fastWalshTransform.cu', 'fastWalshTransform_gold.cpp']),
	('Histogram256', 
		['histogram256_SM10.cu', 'histogram256_SM11.cu', 'histogram256_SM12.cu', 'histogram256_gold.cpp', 'histogram256.cpp']),
	('Histogram64', ['histogram64.cu', 'histogram64_gold.cpp']),
	('ImageDenoising', ['imageDenoising.cu', 'bmploader.cpp', 'imageDenoisingGL.cpp']),
	('Mandelbrot', ['Mandelbrot.cpp', 'Mandelbrot_sm10.cu', 'Mandelbrot_sm13.cu', 'Mandelbrot_gold.cpp']),
	('UnstructuredMandelbrot', ['Mandelbrot_sm10.cu', 'Mandelbrot_sm13.cu', 'Mandelbrot.cpp', 'Mandelbrot_gold.cpp']),
	('MatrixMul', ['matrixMul.cu', 'matrixMul_gold.cpp']),
	('MersenneTwister', ['MersenneTwister.cu', 'MersenneTwister_gold.cpp', 'genmtrand.c']),
	('MonteCarlo', ['MonteCarlo_SM13.cu', 'MonteCarlo_SM10.cu', 'MonteCarlo_gold.cpp', 'MonteCarlo.cpp']),
	('Nbody', 
		['nbody.cpp', 'bodysystemcuda.cu', 'bodysystemcpu.cpp', 'bodysystemcuda-host.cpp', 'nbody_gold.cpp', 'render_particles.cpp']),
	('OceanFFT', ['oceanFFT_kernel.cu', 'oceanFFT.cpp']),
	('Particles', ['particleSystem.cu', 'particles.cpp', 'particleSystem-host.cpp', 'render_particles.cpp', 'shaders.cpp']),
	('PostProcessGL', ['postProcessGL.cu', 'main.cpp']),
	('QuasirandomGenerator', 
		['quasirandomGenerator_SM13.cu', 'quasirandomGenerator_SM10.cu', 'quasirandomGenerator_gold.cpp', 'quasirandomGenerator.cpp' ]),
	('RecursiveGaussian', ['recursiveGaussian.cu', 'recursiveGaussian-host.cpp']),
	('Reduction', ['reduction_kernel_sm13.cu', 'reduction_kernel_sm10.cu', 'reduction.cu']),
	('ScalarProd', ['scalarProd.cu', 'scalarProd_gold.cpp']),
	('Scan', ['scan.cu', 'scan_gold.cpp']),
	('ScanLargeArray', ['scanLargeArray.cu', 'scan_gold.cpp']),
	('SimpleAtomicIntrinsics', ['simpleAtomicIntrinsics.cu', 'simpleAtomicIntrinsics_gold.cpp']),
	('SimpleCUBLAS', ['simpleCUBLAS.c',]),
	('SimpleCUFFT', ['simpleCUFFT.cu',]),
	('SimpleGL', ['simpleGL_kernel.cu', 'simpleGL.cpp']),
	('SimpleMultiGPU', ['simpleMultiGPU_kernel.cu', 'simpleMultiGPU.cpp']),
	('SimpleStreams', ['simpleStreams.cu',]),
	('SimpleTemplates', ['simpleTemplates.cu',]),
	('SimpleTexture', ['simpleTexture.cu',]),
	('SimpleTexture3D', ['simpleTexture3D_kernel.cu', 'simpleTexture3D-host.cpp']),
	('SimpleVoteIntrinsics', ['simpleVoteIntrinsics.cu',]),
	('SimpleZeroCopy', ['simpleZeroCopy.cu',]),
#	('SobelFilter', ['SobelFilter_kernels.cu', 'SobelFilter.cpp']),
	('SobolQRNG', ['sobol.cpp', 'sobol_gold.cpp', 'sobol_gpu.cu', 'sobol_primitives.cpp']),
	('Template', ['template.cu', 'template_gold.cpp']),
	('ThreadFenceReduction', ['threadFenceReduction.cu',]),
	('Transpose', ['transpose.cu','transpose_gold.cpp']),
	('TransposeNew', ['transposeNew.cu',]),
	('VolumeRender', ['volumeRender_kernel.cu', 'volumeRender.cpp']),
]

#
# Identify applications requiring CUFFT or CUBLAS that lack "FFT" or "BLAS" in their names 
#
specificallyRequiresCufft = ('FluidsGL',)
specificallyRequiresCublas = ()

#
# Construct build rules for all tests
#
(bin_path,lib_path,inc_path) = env['CUDA_PATHS']

env.Append(LIBPATH=[lib_path])

env.Append(LIBPATH = [os.path.join(env['install_path'], 'lib')])

tests = []

paths = [ '-I' + env['CUDA_PATH'] + '/shared', 
          '-I' + env['CUDA_PATH'] + '/sdk',
          '-I' + env['CUDA_PATH'] ]
		
env.Append(CPPFLAGS = paths)

for testApplication in testApplications:
	path = testApplication[0] if len(testApplication) == 2 else testApplication[2]
	additionalLibs = []
	if "FFT" in testApplication[0] or testApplication[0] in specificallyRequiresCufft:
		additionalLibs.append('-lcufft')
	if "BLAS" in testApplication[0] or testApplication[0] in specificallyRequiresCublas:
		additionalLibs.append('-lcublas')
		
	testApp = env.Program(testApplication[0], 
		[builder.MapSource(env, 
			"tests/%s/%s" % (path, x),options=paths) for x in testApplication[1]], 
		LIBS=additionalLibs + ['-lglut', '-locelot', '-lGLEW', libsdk2_2, '-lGLU'])
	tests.append(testApp)

	env.Alias('tests', testApp)

