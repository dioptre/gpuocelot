.version 2.0
.target sm_20

  .reg .u32 %mainloop_rv1;
.extern .shared .align 4 .b8 __rt_internal_shared[];
.global .texref tex0;
.local .align 16 .b8 $stack[2912];
.global .align 4 .s32 _ZN19rti_internal_device16execution_failedE;
.const .align 16 .b8 object_records[532];
.global .align 1 .b8 __constant983_optix_0[47] = {67, 97, 117, 103, 104, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 48, 120, 37, 88, 32, 97, 116, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 40, 37, 100, 44, 37, 100, 41, 10, 0};
.global .align 1 .b8 __constant908[64] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 83, 84, 65, 67, 75, 95, 79, 86, 69, 82, 70, 76, 79, 87, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0};
.global .align 1 .b8 __constant910[204] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 66, 85, 70, 70, 69, 82, 95, 73, 78, 68, 69, 88, 95, 79, 85, 84, 95, 79, 70, 95, 66, 79, 85, 78, 68, 83, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 97, 100, 100, 114, 101, 115, 115, 32, 58, 32, 48, 120, 37, 88, 10, 32, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 97, 108, 105, 116, 121, 32, 58, 32, 37, 100, 10, 32, 32, 115, 105, 122, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 100, 120, 37, 100, 120, 37, 100, 10, 32, 32, 101, 108, 101, 109, 101, 110, 116, 32, 115, 105, 122, 101, 32, 32, 32, 58, 32, 37, 100, 10, 32, 32, 97, 99, 99, 101, 115, 115, 101, 100, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0};
.global .align 1 .b8 __constant912[179] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 73, 78, 86, 65, 76, 73, 68, 95, 82, 65, 89, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 114, 97, 121, 32, 111, 114, 105, 103, 105, 110, 32, 32, 32, 32, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 116, 121, 112, 101, 32, 32, 32, 32, 32, 32, 58, 32, 37, 100, 10, 32, 32, 114, 97, 121, 32, 116, 109, 105, 110, 32, 32, 32, 32, 32, 32, 58, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 116, 109, 97, 120, 32, 32, 32, 32, 32, 32, 58, 32, 37, 102, 10, 0};
.global .align 1 .b8 __constant914[84] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 73, 78, 84, 69, 82, 78, 65, 76, 95, 69, 82, 82, 79, 82, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 101, 114, 114, 111, 114, 32, 105, 100, 32, 32, 32, 32, 32, 58, 32, 37, 100, 10, 0};
.global .align 1 .b8 __constant915[57] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 85, 83, 69, 82, 43, 37, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0};
.global .align 1 .b8 __constant916[54] = {67, 97, 117, 103, 104, 116, 32, 117, 110, 107, 110, 111, 119, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0};
.shared .align 16 .b8 __cuda_local_var_67407_79_non_const_shared__0[4096];
.const .align 8 .b8 kparams[168];
.global .align 1 .b8 humperDebugBuffer[1];
.global .align 4 .s32 _ZN19rti_internal_device15num_ring_stacksE;
.global .align 1 .b8 __constant950[37] = {84, 104, 114, 101, 97, 100, 32, 37, 100, 32, 103, 101, 116, 116, 105, 110, 103, 32, 111, 117, 116, 32, 97, 102, 116, 101, 114, 32, 112, 97, 115, 115, 32, 37, 100, 10, 0};
.global .align 4 .u32 _ZN19rti_internal_device10unfinishedE;
.global .align 1 .b8 __constant956[22] = {66, 65, 67, 75, 32, 70, 82, 79, 77, 32, 68, 82, 65, 73, 78, 32, 82, 73, 78, 71, 10, 0};
.global .align 1 .b8 __constant957[43] = {72, 101, 121, 44, 32, 101, 118, 101, 114, 121, 111, 110, 101, 32, 118, 111, 116, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 121, 32, 110, 101, 101, 100, 101, 100, 32, 119, 111, 114, 107, 10, 0};
.global .align 1 .b8 __constant958[25] = {79, 104, 32, 103, 111, 100, 44, 32, 115, 111, 109, 101, 111, 110, 101, 32, 121, 105, 101, 108, 100, 101, 100, 46, 0};
.global .align 1 .b8 __constant959[42] = {73, 116, 32, 119, 97, 115, 32, 109, 101, 44, 32, 112, 117, 115, 104, 105, 110, 103, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 114, 105, 110, 103, 33, 0};
.global .align 1 .b8 __constant960[32] = {72, 109, 109, 44, 32, 118, 111, 116, 101, 95, 97, 108, 108, 32, 102, 111, 114, 32, 119, 111, 114, 107, 32, 102, 97, 105, 108, 101, 100, 33, 10, 0};
.global .align 1 .b8 __constant961[30] = {72, 79, 76, 89, 32, 83, 72, 73, 84, 32, 68, 82, 65, 73, 78, 73, 78, 71, 32, 84, 72, 69, 32, 82, 73, 78, 71, 33, 32, 0};
.global .align 1 .b8 __constant963[9] = {32, 71, 79, 84, 32, 37, 100, 10, 0};
.global .align 1 .b8 __constant964[56] = {84, 104, 101, 32, 114, 105, 110, 103, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 100, 114, 97, 105, 110, 101, 100, 44, 32, 115, 111, 32, 119, 101, 32, 97, 114, 101, 32, 103, 101, 116, 116, 105, 110, 103, 32, 110, 101, 119, 32, 119, 111, 114, 107, 46, 10, 0};
.global .align 4 .s32 _ZN19rti_internal_device13nextReadStackE;
.global .align 1 .b8 vpc_timer_output[1];
.shared .align 4 .b8 __T2154__18[128];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__17[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__10[4096];
.shared .align 4 .b8 __T2174__6[4096];
.global .align 16 .b8 state_capture_window_size[16];
.global .align 1 .b8 state_history[1];
.global .align 1 .b8 per_device_base_warpid[1];
.global .align 4 .b8 _ZN19rti_internal_device9sm_clocksE[1024];
.global .align 1 .b8 warpFinishedBuffer[1];
.global .align 1 .b8 vpc_to_priority[1];
.global .align 1 .b8 priority_to_vpc[1];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__1[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__3[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__5[4096];
.shared .align 4 .b8 __cuda_local_var_68291_53_non_const_shared__8[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__13[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__19[4096];
.shared .align 4 .b8 __cuda_local_var_69684_49_non_const_shared__21[4096];
.shared .align 4 .b8 __cuda_local_var_69487_49_non_const_shared__23[4096];
.shared .align 4 .b8 __cuda_local_var_69293_49_non_const_shared__25[4096];
.shared .align 4 .b8 __cuda_local_var_69217_49_non_const_shared__27[4096];
.global .align 4 .b8 _ZN21rti_internal_typeinfo25state_capture_window_sizeE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename25state_capture_window_sizeE[6] = {117, 105, 110, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic25state_capture_window_sizeE[1] = {0};
.global .align 1 .b8 _ZN23rti_internal_annotation25state_capture_window_sizeE[1] = {0};

// kernel: trace
.entry __globfunc__Z5tracev
{
  .param .align 4 .s32 __cudaparma1__ZN5optix16rt_undefined_useEi;
  .reg .u32 $object_records;
  .reg .u32 $page_table;
  .reg .u32 $page_request_bits;
  .reg .u32 $current_program_ptr;
  .reg .u32 $virtual_pc;
  .reg .u32 $current_vpc;
  .reg .u32 $return_vpc;
  .reg .u32 $current_node;
  .reg .u32 $current_geometry;
  .reg .u32 $current_instance;
  .reg .u32 $current_material;
  .reg .u32 $closest_instance;
  .reg .u32 $closest_material;
  .reg .u32 $current_attribute_frame;
  .reg .u32 $closest_attribute_frame;
  .reg .u32 $rayIndex_x;
  .reg .u32 $rayIndex_y;
  .reg .u32 $rayIndex_z;
  .reg .u32 $launchDim_x;
  .reg .u32 $launchDim_y;
  .reg .u32 $launchDim_z;
  .reg .u32 $current_prd;
  .reg .s32 $current_primitive;
  .reg .u32 $stack_cur;
  .reg .u32 $terminate_closure;
  .reg .f32 $ray_ox;
  .reg .f32 $ray_oy;
  .reg .f32 $ray_oz;
  .reg .f32 $ray_dx;
  .reg .f32 $ray_dy;
  .reg .f32 $ray_dz;
  .reg .f32 $ray_tmin;
  .reg .f32 $ray_tmax;
  .reg .s32 $ray_type;
  .reg .f32 $saved_tmax;
  .reg .u32 $vpc_visitation;
  .reg .u32 $warp_activation;
  .reg .u32 $device_id;
  .reg .u32 $trav_bvh_cur;
  .reg .u32 $trav_bvh_sp;
  .reg .u32 $trav_bvh_prim_begin;
  .reg .u32 $trav_bvh_prim_end;
  .reg .u32 $trav_bvh_stack;
  .reg .s32 $tmpint0;
  .reg .s32 $zero0;
  .reg .u32 $tmpint1;
  .reg .u32 $zero1;
  .reg .u32 $tmpint2;
  .reg .u32 $tmpint3;
  .reg .u32 $tmpint4;
  .reg .u32 $tmpint5;
  .reg .u32 $tmpint6;
  .reg .u32 $tmpint7;
  .reg .u32 $attribute_bottom<1>;
  .reg .u32 $buffer_address<86>;
  .reg .u32 $bufsize<1>;
  .reg .u32 $current_program<23>;
  .reg .u32 $deref<1>;
  .reg .u64 $exception_64_detail<10>;
  .reg .u32 $exception_detail<10>;
  .reg .u32 $mask<1>;
  .reg .u32 $newsz<1>;
  .reg .u32 $num_vpcs<1>;
  .reg .u32 $offset<56>;
  .reg .pred $oob<55>;
  .reg .pred $p<1>;
  .reg .pred $pred<9>;
  .reg .u32 $print_buffer_address<7>;
  .reg .u32 $print_buffer_object<7>;
  .reg .u32 $record_address<32>;
  .reg .u32 $record_ptr<32>;
  .reg .u32 $size<56>;
  .reg .u32 $stacktop<1>;
  .reg .u32 $stride<24>;
  .reg .u32 $sz_x<55>;
  .reg .u32 $sz_y<55>;
  .reg .u32 $sz_z<55>;
  .reg .u32 $target<7>;
  .reg .u32 $tmp<7>;
  .reg .u32 $tmp_u32_<3>;
  .reg .u32 $tmpptr<7>;
  .reg .pred $vpc_is_invalid<1>;
  .reg .pred $vpred<15>;
  .reg .pred %compute_aabb_p<5>;
  .reg .u32 %compute_aabb_r<109>;
  .reg .pred %exception_p<4>;
  .reg .u32 %exception_r<48>;
  .reg .pred %mainloop_p<14>;
  .reg .u32 %mainloop_r<153>;
  .reg .u64 %mainloop_rd<3>;
  .reg .u16 %mainloop_rh<5>;
  .reg .u32 %rti_builtin_exception_r<9>;
  .reg .f32 %zp_adaptive_resample_f<296>;
  .reg .pred %zp_adaptive_resample_p<41>;
  .reg .u32 %zp_adaptive_resample_r<175>;
  .reg .f32 %zp_color_only_f<49>;
  .reg .pred %zp_color_only_p<4>;
  .reg .u32 %zp_color_only_r<45>;
  .reg .f32 %zp_find_contrast_locations_f<5>;
  .reg .pred %zp_find_contrast_locations_p<7>;
  .reg .u32 %zp_find_contrast_locations_r<72>;
  .reg .f32 %zp_gather_samples_f<148>;
  .reg .pred %zp_gather_samples_p<17>;
  .reg .u32 %zp_gather_samples_r<110>;
  .reg .f32 %zp_generate_samples_f<44>;
  .reg .pred %zp_generate_samples_p<4>;
  .reg .u32 %zp_generate_samples_r<77>;
  .reg .f32 %zp_scatter_do_divide_f<7>;
  .reg .u32 %zp_scatter_do_divide_r<55>;
  .reg .f32 %zp_scatter_samples_f<296>;
  .reg .pred %zp_scatter_samples_p<40>;
  .reg .u32 %zp_scatter_samples_r<156>;
  .reg .f32 %zp_zero_scatter_buffers_f<3>;
  .reg .u32 %zp_zero_scatter_buffers_r<35>;
  .reg .b32 A<8>;
// This BB is not part of any VPC.
  // Begin initialize statistics
  // End initialize statistics
  mov.b32	$stack_cur, $stack;
  mov.b32	$closest_attribute_frame, $stack+2912;
  mov.b32	$current_attribute_frame, $stack+2912;
  mov.b32	$object_records, object_records;
  mov.u32	%mainloop_r1, %smid;
  mov.s32	%mainloop_r2, %mainloop_r1;
  mul.lo.u32	%mainloop_r3, %mainloop_r2, 4;
  cvta.global.u32	%mainloop_r4, _ZN19rti_internal_device9sm_clocksE;
  add.u32	%mainloop_r5, %mainloop_r3, %mainloop_r4;
  ldu.u32	%mainloop_r6, [%mainloop_r5+0];
  mov.u32	%mainloop_r7, 0;
  setp.ne.u32	%mainloop_p1, %mainloop_r6, %mainloop_r7;
  @%mainloop_p1 bra	mainloop_$Lt_57_10754;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r8, %clock;
  mov.s32	%mainloop_r9, %mainloop_r8;
  st.u32	[%mainloop_r5+0], %mainloop_r9;
  mov.u32	%mainloop_r10, 0;
  setp.ne.u32	%mainloop_p2, %mainloop_r9, %mainloop_r10;
  @%mainloop_p2 bra	mainloop_$Lt_57_10754;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r11, %clock;
  mov.s32	%mainloop_r12, %mainloop_r11;
  st.u32	[%mainloop_r5+0], %mainloop_r12;

mainloop_$Lt_57_10754:
// This BB is not part of any VPC.
  ld.const.u32	%mainloop_r13, [kparams+16];
  mov.b32	$device_id, %mainloop_r13;
  ld.const.u32	%mainloop_r14, [kparams+4];
  mov.b32	$launchDim_x, %mainloop_r14;
  ld.const.u32	%mainloop_r15, [kparams+8];
  mov.b32	$launchDim_y, %mainloop_r15;
  ld.const.u32	%mainloop_r16, [kparams+12];
  mov.b32	$launchDim_z, %mainloop_r16;
  ld.const.u64	%mainloop_rd1, [kparams+136];
  cvt.u32.u64	%mainloop_r17, %mainloop_rd1;
  mov.b32	$page_table, %mainloop_r17;
  ld.const.u64	%mainloop_rd2, [kparams+144];
  cvt.u32.u64	%mainloop_r18, %mainloop_rd2;
  mov.b32	$page_request_bits, %mainloop_r18;
  mov.b32	%mainloop_r19, $object_records;
  add.u32	%mainloop_r20, %mainloop_r19, 8;
  ld.const.u32	%mainloop_r21, [kparams+0];
  mul.lo.u32	%mainloop_r22, %mainloop_r21, 16;
  add.u32	%mainloop_r23, %mainloop_r22, %mainloop_r20;
  ld.const.u32	%mainloop_r24, [%mainloop_r23];
  mov.b32	$virtual_pc, %mainloop_r24;
  add.u32	%mainloop_r25, %mainloop_r23, 4;
  mov.b32	$current_program_ptr, %mainloop_r25;
  mov.u32	%mainloop_r26, 1;
  mov.b32	$return_vpc, %mainloop_r26;
  mov.u32	%mainloop_r27, %clock;
  mov.s32	%mainloop_r28, %mainloop_r27;
  ld.const.u32	%mainloop_r29, [kparams+152];
  ld.u32	%mainloop_r30, [%mainloop_r5+0];
  sub.u32	%mainloop_r31, %mainloop_r28, %mainloop_r30;
  setp.ge.u32	%mainloop_p3, %mainloop_r29, %mainloop_r31;
  @%mainloop_p3 bra	mainloop_$Lt_57_11266;
// This BB is not part of any VPC.
  ld.global.u32	%mainloop_r32, [_ZN19rti_internal_device10unfinishedE];
  mov.u32	%mainloop_r33, 0;
  setp.ne.u32	%mainloop_p4, %mainloop_r32, %mainloop_r33;
  @%mainloop_p4 bra	$exit;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r34, %laneid;
  mov.s32	%mainloop_r35, %mainloop_r34;
  mov.u32	%mainloop_r36, 0;
  setp.ne.u32	%mainloop_p5, %mainloop_r35, %mainloop_r36;
  @%mainloop_p5 bra	$exit;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r37, 1;
  st.global.u32	[_ZN19rti_internal_device10unfinishedE], %mainloop_r37;
  bra.uni	$exit;

mainloop_$Lt_57_11266:
// This BB is not part of any VPC.
  mov.b16	%mainloop_rh1, %ntid.x;
  cvt.u32.u16	%mainloop_r38, %mainloop_rh1;
  mov.s32	%mainloop_r39, %mainloop_r38;
  mov.b16	%mainloop_rh2, %ntid.y;
  cvt.u32.u16	%mainloop_r40, %mainloop_rh2;
  mov.b16	%mainloop_rh3, %tid.y;
  cvt.u32.u16	%mainloop_r41, %mainloop_rh3;
  mov.b16	%mainloop_rh4, %ntid.x;
  cvt.u32.u16	%mainloop_r42, %mainloop_rh4;
  mov.u32	%mainloop_r43, %laneid;
  mov.s32	%mainloop_r44, %mainloop_r43;
  ld.const.u32	%mainloop_r45, [kparams+20];
  mov.u32	%mainloop_r46, %ctaid.x;
  cvt.u16.u32	%mainloop_r47, %mainloop_r39;
  mul.lo.s32	%mainloop_r48, %mainloop_r40, %mainloop_r47;
  mul.lo.u32	%mainloop_r49, %mainloop_r46, %mainloop_r48;
  mul.lo.u32	%mainloop_r50, %mainloop_r41, %mainloop_r42;
  add.u32	%mainloop_r51, %mainloop_r49, %mainloop_r50;
  add.u32	%mainloop_r52, %mainloop_r44, %mainloop_r51;
  shr.s32	%mainloop_r53, %mainloop_r52, 31;
  mov.s32	%mainloop_r54, 31;
  and.b32	%mainloop_r55, %mainloop_r53, %mainloop_r54;
  add.s32	%mainloop_r56, %mainloop_r55, %mainloop_r52;
  shr.s32	%mainloop_r57, %mainloop_r56, 5;
  mul.lo.u32	%mainloop_r58, %mainloop_r45, %mainloop_r57;
  add.u32	%mainloop_r59, %mainloop_r13, %mainloop_r58;
  mov.u32	%mainloop_r60, %laneid;
  mov.s32	%mainloop_r61, %mainloop_r60;
  mov.u32	%mainloop_r62, 1;
  setp.eq.u32	%mainloop_p6, %mainloop_r16, %mainloop_r62;
  mul.lo.s32	%mainloop_r63, %mainloop_r59, 32;
  add.u32	%mainloop_r64, %mainloop_r63, %mainloop_r61;
  selp.s32	%mainloop_r65, 1, 0, %mainloop_p6;
  mov.u32	%mainloop_r66, 1;
  set.eq.u32.u32	%mainloop_r67, %mainloop_r15, %mainloop_r66;
  neg.s32	%mainloop_r68, %mainloop_r67;
  and.b32	%mainloop_r69, %mainloop_r65, %mainloop_r68;
  mov.u32	%mainloop_r70, 0;
  setp.eq.s32	%mainloop_p7, %mainloop_r69, %mainloop_r70;
  @%mainloop_p7 bra	mainloop_$Lt_57_12034;
// This BB is not part of any VPC.
  mov.b32	$rayIndex_x, %mainloop_r64;
  mov.u32	%mainloop_r71, 0;
  mov.b32	$rayIndex_y, %mainloop_r71;
  mov.u32	%mainloop_r72, 0;
  mov.b32	$rayIndex_z, %mainloop_r72;
  bra.uni	mainloop_$Lt_57_11778;

mainloop_$Lt_57_12034:
// This BB is not part of any VPC.
  @!%mainloop_p6 bra	mainloop_$Lt_57_12546;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r73, 1;
  setp.le.u32	%mainloop_p8, %mainloop_r45, %mainloop_r73;
  @%mainloop_p8 bra	mainloop_$Lt_57_13058;
// This BB is not part of any VPC.
  mov.u32	%mainloop_r74, 16;
  mov.u32	%mainloop_r75, 2;
  bra.uni	mainloop_$Lt_57_12802;

mainloop_$Lt_57_13058:
// This BB is not part of any VPC.
  mov.u32	%mainloop_r74, 4;
  mov.u32	%mainloop_r75, 8;

mainloop_$Lt_57_12802:
// This BB is not part of any VPC.
  mul.lo.u32	%mainloop_r76, %mainloop_r75, %mainloop_r74;
  add.u32	%mainloop_r77, %mainloop_r74, %mainloop_r14;
  sub.u32	%mainloop_r78, %mainloop_r77, 1;
  div.u32	%mainloop_r79, %mainloop_r64, %mainloop_r76;
  div.u32	%mainloop_r80, %mainloop_r78, %mainloop_r74;
  rem.u32	%mainloop_r81, %mainloop_r79, %mainloop_r80;
  mul.lo.u32	%mainloop_r82, %mainloop_r74, %mainloop_r81;
  rem.u32	%mainloop_r83, %mainloop_r64, %mainloop_r74;
  add.u32	%mainloop_r84, %mainloop_r82, %mainloop_r83;
  mov.b32	$rayIndex_x, %mainloop_r84;
  div.u32	%mainloop_r85, %mainloop_r79, %mainloop_r80;
  mul.lo.u32	%mainloop_r86, %mainloop_r75, %mainloop_r85;
  div.u32	%mainloop_r87, %mainloop_r64, %mainloop_r74;
  rem.u32	%mainloop_r88, %mainloop_r87, %mainloop_r75;
  add.u32	%mainloop_r89, %mainloop_r86, %mainloop_r88;
  mov.b32	$rayIndex_y, %mainloop_r89;
  mov.u32	%mainloop_r90, 0;
  mov.b32	$rayIndex_z, %mainloop_r90;
  bra.uni	mainloop_$Lt_57_11778;

mainloop_$Lt_57_12546:
// This BB is not part of any VPC.
  add.u32	%mainloop_r91, %mainloop_r14, 3;
  shr.u32	%mainloop_r92, %mainloop_r91, 2;
  shr.u32	%mainloop_r93, %mainloop_r64, 5;
  and.b32	%mainloop_r94, %mainloop_r64, 3;
  rem.u32	%mainloop_r95, %mainloop_r93, %mainloop_r92;
  mul.lo.u32	%mainloop_r96, %mainloop_r95, 4;
  add.u32	%mainloop_r97, %mainloop_r94, %mainloop_r96;
  mov.b32	$rayIndex_x, %mainloop_r97;
  add.u32	%mainloop_r98, %mainloop_r15, 3;
  shr.u32	%mainloop_r99, %mainloop_r98, 2;
  shr.u32	%mainloop_r100, %mainloop_r64, 2;
  and.b32	%mainloop_r101, %mainloop_r100, 3;
  div.u32	%mainloop_r102, %mainloop_r93, %mainloop_r92;
  rem.u32	%mainloop_r103, %mainloop_r102, %mainloop_r99;
  mul.lo.u32	%mainloop_r104, %mainloop_r103, 4;
  add.u32	%mainloop_r105, %mainloop_r101, %mainloop_r104;
  mov.b32	$rayIndex_y, %mainloop_r105;
  shr.u32	%mainloop_r106, %mainloop_r64, 4;
  and.b32	%mainloop_r107, %mainloop_r106, 1;
  mul.lo.u32	%mainloop_r108, %mainloop_r92, %mainloop_r99;
  div.u32	%mainloop_r109, %mainloop_r93, %mainloop_r108;
  mul.lo.u32	%mainloop_r110, %mainloop_r109, 2;
  add.u32	%mainloop_r111, %mainloop_r107, %mainloop_r110;
  mov.b32	$rayIndex_z, %mainloop_r111;

mainloop_$Lt_57_11778:
// This BB is not part of any VPC.
  mov.b32	%mainloop_r112, $rayIndex_x;
  setp.ge.u32	%mainloop_p9, %mainloop_r112, %mainloop_r14;
  @%mainloop_p9 bra	$exit;
// This BB is not part of any VPC.
  mov.b32	%mainloop_r113, $rayIndex_y;
  setp.ge.u32	%mainloop_p10, %mainloop_r113, %mainloop_r15;
  @%mainloop_p10 bra	$exit;
// This BB is not part of any VPC.
  mov.b32	%mainloop_r114, $rayIndex_z;
  setp.lt.u32	%mainloop_p11, %mainloop_r114, %mainloop_r16;
  @%mainloop_p11 bra	mainloop_$L_57_9474;
// This BB is not part of any VPC.
  bra.uni	$exit;

mainloop_$L_57_9474:
// This BB is not part of any VPC.
  add.u32	%mainloop_r115, $object_records, 188;
  mov.u32	%mainloop_r116, %mainloop_r115;
  mov.u32	%mainloop_r117, 1;
  mov.u32	%mainloop_r118, %mainloop_r117;
  mov.u32	%mainloop_r119, 1;
  mov.u32	%mainloop_r120, %mainloop_r119;
  mov.u32	%mainloop_r121, %mainloop_r59;
  mov.u32	%mainloop_r122, 0;
  mov.u32	%mainloop_r123, %mainloop_r122;
  mov.u32	%mainloop_r124, 0;
  mov.u32	%mainloop_r125, %mainloop_r124;
  mov.u32	%mainloop_r126, 0;
  mov.u32	%mainloop_r127, %mainloop_r126;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr30, [%mainloop_r116];
  add.u32	$record_address30, $record_ptr30, $object_records;
  ld.const.u32	$buffer_address82, [$record_address30];
  ld.const.u32	$size54, [$record_address30+4];
  setp.ge.u32	$oob53, %mainloop_r121, $size54;
  ld.const.u32	$sz_x53, [$record_address30+4];
  mov.u32	$sz_y53, 3735927486;
  mov.u32	$sz_z53, 3735927486;
  @$oob53 mov.u32	$exception_detail0, $buffer_address82;
  @$oob53 mov.b32	$exception_detail1, %mainloop_r118;
  @$oob53 mov.u32	$exception_detail2, $sz_x53;
  @$oob53 mov.u32	$exception_detail3, $sz_y53;
  @$oob53 mov.u32	$exception_detail4, $sz_z53;
  @$oob53 mov.b32	$exception_detail5, %mainloop_r120;
  @$oob53 mov.b32	$exception_detail6, %mainloop_r121;
  @$oob53 mov.b32	$exception_detail7, %mainloop_r123;
  @$oob53 mov.b32	$exception_detail8, %mainloop_r125;
  @$oob53 mov.u32	$current_instance, 1021;
  @$oob53 bra	$stack_overflow;
// This BB is not part of any VPC.
  mul.lo.u32	$offset54, %mainloop_r121, 1;
  add.u32	$buffer_address83, $buffer_address82, $offset54;
  cvta.global.u32	%mainloop_r128, $buffer_address83;
  // Call to _rt_buffer_get ends
  
  mov.s32	%mainloop_r129, %mainloop_r128;
  mov.s32	%mainloop_r130, %mainloop_r129;
  st.param.u32	[__cudaparma1__ZN5optix16rt_undefined_useEi], %mainloop_r130;
  
  // Call to _ZN5optix16rt_undefined_useEi begins
  // Call to _ZN5optix16rt_undefined_useEi ends
  
  ld.u8	%mainloop_r131, [%mainloop_r129+0];
  mov.u32	%mainloop_r132, 1;
  setp.ne.u32	%mainloop_p12, %mainloop_r131, %mainloop_r132;
  @%mainloop_p12 bra	mainloop_$Lt_57_13314;

$exit:
// This BB is not part of any VPC.
  // Begin finalize statistics
  // End finalize statistics
  exit;

mainloop_$Lt_57_13314:
// This BB is not part of any VPC.
  mov.u32	%mainloop_r133, %laneid;
  mov.s32	%mainloop_r134, %mainloop_r133;
  mov.u32	%mainloop_r135, 0;
  setp.ne.u32	%mainloop_p13, %mainloop_r134, %mainloop_r135;
  @%mainloop_p13 bra	mainloop_$Lt_57_13826;
// This BB is not part of any VPC.
  add.u32	%mainloop_r136, $object_records, 188;
  mov.u32	%mainloop_r137, %mainloop_r136;
  mov.u32	%mainloop_r138, 1;
  mov.u32	%mainloop_r139, %mainloop_r138;
  mov.u32	%mainloop_r140, 1;
  mov.u32	%mainloop_r141, %mainloop_r140;
  mov.u32	%mainloop_r142, %mainloop_r59;
  mov.u32	%mainloop_r143, 0;
  mov.u32	%mainloop_r144, %mainloop_r143;
  mov.u32	%mainloop_r145, 0;
  mov.u32	%mainloop_r146, %mainloop_r145;
  mov.u32	%mainloop_r147, 0;
  mov.u32	%mainloop_r148, %mainloop_r147;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr31, [%mainloop_r137];
  add.u32	$record_address31, $record_ptr31, $object_records;
  ld.const.u32	$buffer_address84, [$record_address31];
  ld.const.u32	$size55, [$record_address31+4];
  setp.ge.u32	$oob54, %mainloop_r142, $size55;
  ld.const.u32	$sz_x54, [$record_address31+4];
  mov.u32	$sz_y54, 3735927486;
  mov.u32	$sz_z54, 3735927486;
  @$oob54 mov.u32	$exception_detail0, $buffer_address84;
  @$oob54 mov.b32	$exception_detail1, %mainloop_r139;
  @$oob54 mov.u32	$exception_detail2, $sz_x54;
  @$oob54 mov.u32	$exception_detail3, $sz_y54;
  @$oob54 mov.u32	$exception_detail4, $sz_z54;
  @$oob54 mov.b32	$exception_detail5, %mainloop_r141;
  @$oob54 mov.b32	$exception_detail6, %mainloop_r142;
  @$oob54 mov.b32	$exception_detail7, %mainloop_r144;
  @$oob54 mov.b32	$exception_detail8, %mainloop_r146;
  @$oob54 mov.u32	$current_instance, 1021;
  @$oob54 bra	$stack_overflow;
// This BB is not part of any VPC.
  mul.lo.u32	$offset55, %mainloop_r142, 1;
  add.u32	$buffer_address85, $buffer_address84, $offset55;
  cvta.global.u32	%mainloop_r149, $buffer_address85;
  // Call to _rt_buffer_get ends
  
  mov.s32	%mainloop_r150, %mainloop_r149;
  mov.s32	%mainloop_r151, %mainloop_r150;
  st.param.u32	[__cudaparma1__ZN5optix16rt_undefined_useEi], %mainloop_r151;
  
  // Call to _ZN5optix16rt_undefined_useEi begins
  // Call to _ZN5optix16rt_undefined_useEi ends
  
  mov.u32	%mainloop_r152, 1;
  st.u8	[%mainloop_r150+0], %mainloop_r152;

mainloop_$Lt_57_13826:
// This BB is not part of any VPC.
  
  // Call to _rti_main_switch begins
  mov.u32	$num_vpcs0, 15;
  setp.ge.u32	$vpc_is_invalid0, $virtual_pc, $num_vpcs0;
  @$vpc_is_invalid0 mov.u32	$exception_detail0, 1;
  @$vpc_is_invalid0 mov.u32	$current_instance, 1023;
  @$vpc_is_invalid0 bra	$stack_overflow;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred0, $virtual_pc, 0;
  @$vpred0 bra	$vpc0;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred1, $virtual_pc, 1;
  @$vpred1 bra	$vpc1;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred2, $virtual_pc, 2;
  @$vpred2 bra	$vpc2;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred3, $virtual_pc, 3;
  @$vpred3 bra	$vpc3;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred4, $virtual_pc, 4;
  @$vpred4 bra	$vpc4;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred5, $virtual_pc, 5;
  @$vpred5 bra	$vpc5;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred6, $virtual_pc, 6;
  @$vpred6 bra	$vpc6;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred7, $virtual_pc, 7;
  @$vpred7 bra	$vpc7;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred8, $virtual_pc, 8;
  @$vpred8 bra	$vpc8;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred9, $virtual_pc, 9;
  @$vpred9 bra	$vpc9;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred10, $virtual_pc, 10;
  @$vpred10 bra	$vpc10;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred11, $virtual_pc, 11;
  @$vpred11 bra	$vpc11;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred12, $virtual_pc, 12;
  @$vpred12 bra	$vpc12;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred13, $virtual_pc, 13;
  @$vpred13 bra	$vpc13;
// This BB is not part of any VPC.
  setp.eq.u32	$vpred14, $virtual_pc, 14;
  @$vpred14 bra	$vpc14;
// This BB is not part of any VPC.
  mov.u32	$tmp_u32_2, 1;
  st.global.u32	[_ZN19rti_internal_device16execution_failedE], $tmp_u32_2;
  bra.uni	$exit;

$vpc0:
// This BB is not part of any VPC.
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;

$vpc1:
// This BB is not part of any VPC.
  bra.uni	$exit;

$stack_overflow:
// This BB is not part of any VPC.
  mov.b32	$stack_cur, $stack;
  mov.b32	$closest_attribute_frame, $stack+2912;
  mov.b32	$current_attribute_frame, $stack+2912;
  mov.u32	$virtual_pc, 2;

$mainloop:
// This BB is not part of any VPC.
  // Call to _rti_main_switch ends
  
  bra.uni	mainloop_$Lt_57_13826;

  // Builtin function "exception"

$vpc2:
// This BB is part of VPC 2.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  mov.b32	%rti_builtin_exception_r1, $object_records;
  add.u32	%rti_builtin_exception_r2, %rti_builtin_exception_r1, 8;
  ld.const.u32	%rti_builtin_exception_r3, [kparams+0];
  mul.lo.u32	%rti_builtin_exception_r4, %rti_builtin_exception_r3, 16;
  add.u32	%rti_builtin_exception_r5, %rti_builtin_exception_r4, %rti_builtin_exception_r2;
  ld.const.u32	%rti_builtin_exception_r6, [%rti_builtin_exception_r5+8];
  mov.b32	$virtual_pc, %rti_builtin_exception_r6;
  add.u32	%rti_builtin_exception_r7, %rti_builtin_exception_r5, 12;
  mov.b32	$current_program_ptr, %rti_builtin_exception_r7;
  mov.u32	%rti_builtin_exception_r8, 1;
  mov.b32	$return_vpc, %rti_builtin_exception_r8;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "compute_aabb"
  //    from /Users/greg/Perforce/rtmain/src/AS/ComputeAabb.cu
  //    sm target = sm_20

$vpc3:
// This BB is part of VPC 3.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  add.u32	$stacktop0, $stack_cur, 16;
  min.u32	$attribute_bottom0, $current_attribute_frame, $closest_attribute_frame;
  setp.gt.u32	$p0, $stacktop0, $attribute_bottom0;
  @$p0 mov.u32	$current_instance, 1020;
  @$p0 bra	$stack_overflow;
// This BB is part of VPC 3.
  mov.u32	$stack_cur, $stacktop0;
  ld.const.u32	$tmp_u32_0, [$current_program_ptr];
  add.u32	$current_program1, $tmp_u32_0, $object_records;
  // Dead code: mov.b32	%_r1, $rayIndex_x;
  // Dead code: mov.b32	%_r2, $rayIndex_y;
  ld.const.u32	%compute_aabb_r3, [$current_program1+4];
  mul.lo.u32	%compute_aabb_r4, %compute_aabb_r3, $rayIndex_y;
  add.u32	%compute_aabb_r5, $rayIndex_x, %compute_aabb_r4;
  // Dead code: mov.b32	%_r6, $current_program1;
  // Dead code: mov.u32	%_r7, $current_program1;
  // Dead code: mov.u32	%_r8, 1;
  // Dead code: mov.u32	%_r9, %_r8;
  // Dead code: mov.u32	%_r10, 16;
  // Dead code: mov.u32	%_r11, %_r10;
  
  // Call to _rt_buffer_get_size begins
  ld.const.u32	$record_ptr0, [$current_program1];
  add.u32	$record_address0, $record_ptr0, $object_records;
  ld.const.u32	$size0, [$record_address0+4];
  // Dead code: mov.b32	%_r12, $size0;
  // Call to _rt_buffer_get_size ends
  
  // Dead code: mov.s32	%_r16, $size0;
  sub.s32	%compute_aabb_r17, $size0, 1;
  mov.s32	%compute_aabb_r18, %compute_aabb_r17;
  // Dead code: mov.b32	%_r19, $current_program1;
  // Dead code: mov.u32	%_r20, $current_program1;
  mov.u32	%compute_aabb_r21, 1;
  // Dead code: mov.u32	%_r22, %_r21;
  mov.u32	%compute_aabb_r23, 16;
  // Dead code: mov.u32	%_r24, %_r23;
  // Dead code: mov.u32	%_r25, %_r17;
  mov.u32	%compute_aabb_r26, 0;
  // Dead code: mov.u32	%_r27, %_r26;
  mov.u32	%compute_aabb_r28, 0;
  // Dead code: mov.u32	%_r29, %_r28;
  // Dead code: mov.u32	%_r30, 0;
  // Dead code: mov.u32	%_r31, %_r30;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr1, [$current_program1];
  add.u32	$record_address1, $record_ptr1, $object_records;
  ld.const.u32	$buffer_address0, [$record_address1];
  ld.const.u32	$size1, [$record_address1+4];
  setp.ge.u32	$oob0, %compute_aabb_r17, $size1;
  ld.const.u32	$sz_x0, [$record_address1+4];
  mov.u32	$sz_y0, 3735927486;
  mov.u32	$sz_z0, 3735927486;
  @$oob0 mov.u32	$exception_detail0, $buffer_address0;
  @$oob0 mov.b32	$exception_detail1, %compute_aabb_r21;
  @$oob0 mov.u32	$exception_detail2, $sz_x0;
  @$oob0 mov.u32	$exception_detail3, $sz_y0;
  @$oob0 mov.u32	$exception_detail4, $sz_z0;
  @$oob0 mov.b32	$exception_detail5, %compute_aabb_r23;
  @$oob0 mov.b32	$exception_detail6, %compute_aabb_r17;
  @$oob0 mov.b32	$exception_detail7, %compute_aabb_r26;
  @$oob0 mov.b32	$exception_detail8, %compute_aabb_r28;
  @$oob0 mov.u32	$current_instance, 1021;
  @$oob0 bra	$stack_overflow;
// This BB is part of VPC 3.
  mul.lo.u32	$offset0, %compute_aabb_r17, 16;
  add.u32	$buffer_address1, $buffer_address0, $offset0;
  cvta.global.u32	%compute_aabb_r32, $buffer_address1;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r32;
  // Dead code: mov.s32	%_r34, %_r32;
  ld.u32	%compute_aabb_r35, [%compute_aabb_r32+0];
  setp.gt.u32	%compute_aabb_p1, %compute_aabb_r35, %compute_aabb_r5;
  @%compute_aabb_p1 bra	compute_aabb_$Lt_0_2818_vpc3;
// This BB is part of VPC 3.
  bra.uni	compute_aabb_$LBB21__Z12compute_aabbv_vpc3;

compute_aabb_$Lt_0_2818_vpc3:
// This BB is part of VPC 3.
  mov.s32	%compute_aabb_r36, 0;
  mov.u32	%compute_aabb_r37, 2;
  setp.eq.s32	%compute_aabb_p2, $size0, %compute_aabb_r37;
  @%compute_aabb_p2 bra	compute_aabb_$Lt_0_3330_vpc3;
  bra.uni	compute_aabbpreheader0_vpc3;

compute_aabb_$Lt_0_3842_vpc3:
// This BB is part of VPC 3.
  add.u32	%compute_aabb_r38, %compute_aabb_r36, %compute_aabb_r18;
  shr.u32	%compute_aabb_r39, %compute_aabb_r38, 1;
  // Dead code: mov.b32	%_r40, $current_program1;
  // Dead code: mov.u32	%_r41, $current_program1;
  mov.u32	%compute_aabb_r42, 1;
  // Dead code: mov.u32	%_r43, %_r42;
  mov.u32	%compute_aabb_r44, 16;
  // Dead code: mov.u32	%_r45, %_r44;
  // Dead code: mov.u32	%_r46, %_r39;
  mov.u32	%compute_aabb_r47, 0;
  // Dead code: mov.u32	%_r48, %_r47;
  mov.u32	%compute_aabb_r49, 0;
  // Dead code: mov.u32	%_r50, %_r49;
  // Dead code: mov.u32	%_r51, 0;
  // Dead code: mov.u32	%_r52, %_r51;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr2, [$current_program1];
  add.u32	$record_address2, $record_ptr2, $object_records;
  ld.const.u32	$buffer_address2, [$record_address2];
  ld.const.u32	$size2, [$record_address2+4];
  setp.ge.u32	$oob1, %compute_aabb_r39, $size2;
  ld.const.u32	$sz_x1, [$record_address2+4];
  mov.u32	$sz_y1, 3735927486;
  mov.u32	$sz_z1, 3735927486;
  @$oob1 mov.u32	$exception_detail0, $buffer_address2;
  @$oob1 mov.b32	$exception_detail1, %compute_aabb_r42;
  @$oob1 mov.u32	$exception_detail2, $sz_x1;
  @$oob1 mov.u32	$exception_detail3, $sz_y1;
  @$oob1 mov.u32	$exception_detail4, $sz_z1;
  @$oob1 mov.b32	$exception_detail5, %compute_aabb_r44;
  @$oob1 mov.b32	$exception_detail6, %compute_aabb_r39;
  @$oob1 mov.b32	$exception_detail7, %compute_aabb_r47;
  @$oob1 mov.b32	$exception_detail8, %compute_aabb_r49;
  @$oob1 mov.u32	$current_instance, 1021;
  @$oob1 bra	$stack_overflow;
  bra.uni	$compute_aabb_successor_0_vpc3;

compute_aabbpreheader0_vpc3:
// This BB is part of VPC 3.
  bra.uni	compute_aabb_$Lt_0_3842_vpc3;

$compute_aabb_successor_0_vpc3:
// This BB is part of VPC 3.
  mul.lo.u32	$offset1, %compute_aabb_r39, 16;
  add.u32	$buffer_address3, $buffer_address2, $offset1;
  cvta.global.u32	%compute_aabb_r53, $buffer_address3;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r53;
  // Dead code: mov.s32	%_r54, %_r53;
  ld.u32	%compute_aabb_r55, [%compute_aabb_r53+0];
  setp.gt.u32	%compute_aabb_p3, %compute_aabb_r55, %compute_aabb_r5;
  @%compute_aabb_p3 bra	compute_aabb_$Lt_0_4354_vpc3;
// This BB is part of VPC 3.
  mov.s32	%compute_aabb_r36, %compute_aabb_r39;
  bra.uni	compute_aabb_$Lt_0_4098_vpc3;

compute_aabb_$Lt_0_4354_vpc3:
// This BB is part of VPC 3.
  mov.s32	%compute_aabb_r18, %compute_aabb_r39;

compute_aabb_$Lt_0_4098_vpc3:
// This BB is part of VPC 3.
  add.s32	%compute_aabb_r56, %compute_aabb_r36, 1;
  setp.ne.s32	%compute_aabb_p4, %compute_aabb_r18, %compute_aabb_r56;
  @%compute_aabb_p4 bra	compute_aabb_$Lt_0_3842_vpc3;

compute_aabbpostbody0_vpc3:
// This BB is part of VPC 3.

compute_aabb_$Lt_0_3330_vpc3:
// This BB is part of VPC 3.
  // Dead code: mov.b32	%_r57, $current_program1;
  // Dead code: mov.u32	%_r58, $current_program1;
  mov.u32	%compute_aabb_r59, 1;
  // Dead code: mov.u32	%_r60, %_r59;
  mov.u32	%compute_aabb_r61, 16;
  // Dead code: mov.u32	%_r62, %_r61;
  // Dead code: mov.u32	%_r63, %_r36;
  mov.u32	%compute_aabb_r64, 0;
  // Dead code: mov.u32	%_r65, %_r64;
  mov.u32	%compute_aabb_r66, 0;
  // Dead code: mov.u32	%_r67, %_r66;
  // Dead code: mov.u32	%_r68, 0;
  // Dead code: mov.u32	%_r69, %_r68;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr3, [$current_program1];
  add.u32	$record_address3, $record_ptr3, $object_records;
  ld.const.u32	$buffer_address4, [$record_address3];
  ld.const.u32	$size3, [$record_address3+4];
  setp.ge.u32	$oob2, %compute_aabb_r36, $size3;
  ld.const.u32	$sz_x2, [$record_address3+4];
  mov.u32	$sz_y2, 3735927486;
  mov.u32	$sz_z2, 3735927486;
  @$oob2 mov.u32	$exception_detail0, $buffer_address4;
  @$oob2 mov.b32	$exception_detail1, %compute_aabb_r59;
  @$oob2 mov.u32	$exception_detail2, $sz_x2;
  @$oob2 mov.u32	$exception_detail3, $sz_y2;
  @$oob2 mov.u32	$exception_detail4, $sz_z2;
  @$oob2 mov.b32	$exception_detail5, %compute_aabb_r61;
  @$oob2 mov.b32	$exception_detail6, %compute_aabb_r36;
  @$oob2 mov.b32	$exception_detail7, %compute_aabb_r64;
  @$oob2 mov.b32	$exception_detail8, %compute_aabb_r66;
  @$oob2 mov.u32	$current_instance, 1021;
  @$oob2 bra	$stack_overflow;
// This BB is part of VPC 3.
  mul.lo.u32	$offset2, %compute_aabb_r36, 16;
  add.u32	$buffer_address5, $buffer_address4, $offset2;
  cvta.global.u32	%compute_aabb_r70, $buffer_address5;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r70;
  // Dead code: mov.s32	%_r71, %_r70;
  ld.u32	%compute_aabb_r72, [%compute_aabb_r70+8];
  // Dead code: mov.b32	%_r73, $current_program1;
  // Dead code: mov.u32	%_r74, $current_program1;
  mov.u32	%compute_aabb_r75, 1;
  // Dead code: mov.u32	%_r76, %_r75;
  mov.u32	%compute_aabb_r77, 16;
  // Dead code: mov.u32	%_r78, %_r77;
  // Dead code: mov.u32	%_r79, %_r36;
  mov.u32	%compute_aabb_r80, 0;
  // Dead code: mov.u32	%_r81, %_r80;
  mov.u32	%compute_aabb_r82, 0;
  // Dead code: mov.u32	%_r83, %_r82;
  // Dead code: mov.u32	%_r84, 0;
  // Dead code: mov.u32	%_r85, %_r84;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr4, [$current_program1];
  add.u32	$record_address4, $record_ptr4, $object_records;
  ld.const.u32	$buffer_address6, [$record_address4];
  ld.const.u32	$size4, [$record_address4+4];
  setp.ge.u32	$oob3, %compute_aabb_r36, $size4;
  ld.const.u32	$sz_x3, [$record_address4+4];
  mov.u32	$sz_y3, 3735927486;
  mov.u32	$sz_z3, 3735927486;
  @$oob3 mov.u32	$exception_detail0, $buffer_address6;
  @$oob3 mov.b32	$exception_detail1, %compute_aabb_r75;
  @$oob3 mov.u32	$exception_detail2, $sz_x3;
  @$oob3 mov.u32	$exception_detail3, $sz_y3;
  @$oob3 mov.u32	$exception_detail4, $sz_z3;
  @$oob3 mov.b32	$exception_detail5, %compute_aabb_r77;
  @$oob3 mov.b32	$exception_detail6, %compute_aabb_r36;
  @$oob3 mov.b32	$exception_detail7, %compute_aabb_r80;
  @$oob3 mov.b32	$exception_detail8, %compute_aabb_r82;
  @$oob3 mov.u32	$current_instance, 1021;
  @$oob3 bra	$stack_overflow;
// This BB is part of VPC 3.
  mul.lo.u32	$offset3, %compute_aabb_r36, 16;
  add.u32	$buffer_address7, $buffer_address6, $offset3;
  cvta.global.u32	%compute_aabb_r86, $buffer_address7;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r86;
  // Dead code: mov.s32	%_r87, %_r86;
  ld.u32	%compute_aabb_r88, [%compute_aabb_r86+0];
  sub.u32	%compute_aabb_r89, %compute_aabb_r5, %compute_aabb_r88;
  // Dead code: mov.b32	%_r90, $current_program1;
  // Dead code: mov.u32	%_r91, $current_program1;
  mov.u32	%compute_aabb_r92, 1;
  // Dead code: mov.u32	%_r93, %_r92;
  mov.u32	%compute_aabb_r94, 16;
  // Dead code: mov.u32	%_r95, %_r94;
  // Dead code: mov.u32	%_r96, %_r36;
  mov.u32	%compute_aabb_r97, 0;
  // Dead code: mov.u32	%_r98, %_r97;
  mov.u32	%compute_aabb_r99, 0;
  // Dead code: mov.u32	%_r100, %_r99;
  // Dead code: mov.u32	%_r101, 0;
  // Dead code: mov.u32	%_r102, %_r101;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr5, [$current_program1];
  add.u32	$record_address5, $record_ptr5, $object_records;
  ld.const.u32	$buffer_address8, [$record_address5];
  ld.const.u32	$size5, [$record_address5+4];
  setp.ge.u32	$oob4, %compute_aabb_r36, $size5;
  ld.const.u32	$sz_x4, [$record_address5+4];
  mov.u32	$sz_y4, 3735927486;
  mov.u32	$sz_z4, 3735927486;
  @$oob4 mov.u32	$exception_detail0, $buffer_address8;
  @$oob4 mov.b32	$exception_detail1, %compute_aabb_r92;
  @$oob4 mov.u32	$exception_detail2, $sz_x4;
  @$oob4 mov.u32	$exception_detail3, $sz_y4;
  @$oob4 mov.u32	$exception_detail4, $sz_z4;
  @$oob4 mov.b32	$exception_detail5, %compute_aabb_r94;
  @$oob4 mov.b32	$exception_detail6, %compute_aabb_r36;
  @$oob4 mov.b32	$exception_detail7, %compute_aabb_r97;
  @$oob4 mov.b32	$exception_detail8, %compute_aabb_r99;
  @$oob4 mov.u32	$current_instance, 1021;
  @$oob4 bra	$stack_overflow;
// This BB is part of VPC 3.
  mul.lo.u32	$offset4, %compute_aabb_r36, 16;
  add.u32	$buffer_address9, $buffer_address8, $offset4;
  cvta.global.u32	%compute_aabb_r103, $buffer_address9;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r103;
  // Dead code: mov.s32	%_r104, %_r103;
  ld.u32	%compute_aabb_r105, [%compute_aabb_r103+4];
  // Dead code: mov.u32	%_r106, %_r105;
  // Dead code: mov.u32	%_r107, %_r89;
  // Dead code: mov.u32	%_r108, %_r72;
  st.local.v2.u32	[$stack_cur+-8], {$return_vpc, $current_program_ptr};
  
  // Call to _rti_compute_aabb_geometry_instance begins
  // $current_instance = instance
  cvt.u32.u32	$tmp_u32_1, %compute_aabb_r105;
  add.u32	$current_instance, $tmp_u32_1, $object_records;
  // $current_geometry = current_instance->geometry
  ld.const.u32	$current_geometry, [$current_instance];
  add.u32	$current_geometry, $current_geometry, $object_records;
  // $current_primitive = primitiveIndex
  mov.b32	$current_primitive, %compute_aabb_r89;
  mul.lo.u32	$offset5, %compute_aabb_r89, 24;
  add.u32	$current_material, %compute_aabb_r72, $offset5;
  // current_geometry->computeAabb()
  ld.const.u32	$virtual_pc, [$current_geometry+12];
  add.u32	$current_program_ptr, $current_geometry, 16;
  mov.u32	$return_vpc, 4;
  bra.uni	$mainloop;

compute_aabb_$LBB21__Z12compute_aabbv_vpc3:
// This BB is part of VPC 3.
  add.u32	$stack_cur, $stack_cur, -16;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;

$vpc4:
// This BB is part of VPC 4.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  // Call to _rti_compute_aabb_geometry_instance ends
  
  ld.local.v2.u32	{$return_vpc, $current_program_ptr}, [$stack_cur+-8];

compute_aabb_$LBB21__Z12compute_aabbv_vpc4:
// This BB is part of VPC 4.
  add.u32	$stack_cur, $stack_cur, -16;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;

  // Function "compute_aabb_exception"
  //    from /Users/greg/Perforce/rtmain/src/AS/ComputeAabb.cu
  //    sm target = sm_20

$vpc5:
// This BB is part of VPC 5.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "exception"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc6:
// This BB is part of VPC 6.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  
  // Call to _rt_get_exception_code begins
  cvt.u32.u32	%exception_r1, $current_instance;
  // Call to _rt_get_exception_code ends
  
  // Dead code: mov.s32	%_r2, %_r1;
  
  // Call to _rt_print_active begins
  mov.u32	%exception_r3, 1;
  mov.s32	$zero0, 0;
  mov.s32	$tmpint0, 1;
  setp.eq.s32	$pred0, $tmpint0, $zero0;
  @$pred0 mov.u32	%exception_r3, 0;
  // Call to _rt_print_active ends
  
  // Dead code: mov.s32	%_r4, %_r3;
  mov.u32	%exception_r5, 0;
  setp.eq.s32	%exception_p1, %exception_r3, %exception_r5;
  @%exception_p1 bra	exception_$Lt_18_11778;
// This BB is part of VPC 6.
  // Global user variable (__constant983) replaced with __constant983_optix_0
  mov.u32	%exception_r6, __constant983_optix_0;

exception_$Lt_18_8194:
// This BB is part of VPC 6.
  add.u32	%exception_r6, %exception_r6, 1;
  ld.global.s8	%exception_r7, [%exception_r6+0];
  mov.u32	%exception_r8, 0;
  setp.ne.s32	%exception_p2, %exception_r7, %exception_r8;
  @%exception_p2 bra	exception_$Lt_18_8194;
// This BB is part of VPC 6.
  // Global user variable (__constant983) replaced with __constant983_optix_0
  mov.u32	%exception_r9, __constant983_optix_0;
  mov.u32	%exception_r10, %exception_r9;
  // Global user variable (__constant983) replaced with __constant983_optix_0
  mov.u32	%exception_r11, __constant983_optix_0;
  sub.s32	%exception_r12, %exception_r6, %exception_r11;
  add.s32	%exception_r13, %exception_r12, 8;
  and.b32	%exception_r14, %exception_r13, -4;
  add.s32	%exception_r15, %exception_r14, 24;
  // Dead code: mov.u32	%_r16, %_r15;
  
  // Call to _rt_print_start begins
  mov.u32	$print_buffer_address0, 3735927486;
  mov.u32	$tmpint1, 0;
  setp.ne.u32	$pred1, $device_id, $tmpint1;
  @$pred1 bra	$skip0label0;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object0, $object_records, 420;
  ld.const.u32	$print_buffer_address0, [$print_buffer_object0];

$skip0label0:
// This BB is part of VPC 6.
  mov.u32	$tmpptr0, 3735927486;
  setp.eq.u32	$pred1, $print_buffer_address0, $tmpptr0;
  @$pred1 mov.u32	$exception_detail0, 2;
  @$pred1 mov.u32	$current_instance, 1023;
  @$pred1 bra	$stack_overflow;
// This BB is part of VPC 6.
  atom.global.add.u32	%exception_r17, [$print_buffer_address0], %exception_r15;
  mov.u32	$bufsize0, 4096;
  add.u32	$newsz0, %exception_r17, %exception_r15;
  setp.lt.u32	$pred2, $newsz0, $bufsize0;
  @$pred2 bra	$ok0;
// This BB is part of VPC 6.
  mov.u32	%exception_r17, 2147483648;
  st.global.u32	[$print_buffer_address0], %exception_r17;
  mov.u32	%exception_r17, 0;
  bra.uni	$ret0;

$ok0:
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp0, %exception_r17;
  add.u32	$target0, $print_buffer_address0, $tmp0;
  st.global.u32	[$target0], %exception_r15;
  add.u32	%exception_r17, %exception_r17, 4;

$loop0:
// This BB is part of VPC 6.
  ld.b8	$deref0, [%exception_r10];
  mov.u32	$zero1, 0;
  setp.eq.u32	$pred2, $deref0, $zero1;
  @$pred2 bra	$break0;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp0, %exception_r17;
  add.u32	$target0, $print_buffer_address0, $tmp0;
  st.global.b8	[$target0], $deref0;
  add.u32	%exception_r10, %exception_r10, 1;
  add.u32	%exception_r17, %exception_r17, 1;
  bra.uni	$loop0;

$break0:
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp0, %exception_r17;
  add.u32	$target0, $print_buffer_address0, $tmp0;
  st.global.b8	[$target0], $zero1;
  add.u32	%exception_r17, %exception_r17, 4;
  mov.u32	$mask0, -4;
  and.b32	%exception_r17, %exception_r17, $mask0;

$ret0:
// This BB is part of VPC 6.
  // Call to _rt_print_start ends
  
  // Dead code: mov.s32	%_r18, %_r17;
  mov.u32	%exception_r19, 0;
  setp.eq.s32	%exception_p3, %exception_r17, %exception_r19;
  @%exception_p3 bra	exception_$Lt_18_11778;
// This BB is part of VPC 6.
  // Dead code: mov.s32	%_r20, %_r1;
  mov.s32	%exception_r21, 0;
  // Dead code: mov.u32	%_r22, %_r21;
  // Dead code: mov.u32	%_r23, %_r17;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address1, 3735927486;
  mov.u32	$tmpint2, 0;
  setp.ne.u32	$pred3, $device_id, $tmpint2;
  @$pred3 bra	$skip0label1;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object1, $object_records, 420;
  ld.const.u32	$print_buffer_address1, [$print_buffer_object1];

$skip0label1:
// This BB is part of VPC 6.
  mov.u32	$tmpptr1, 3735927486;
  setp.eq.u32	$pred3, $print_buffer_address1, $tmpptr1;
  @$pred3 mov.u32	$exception_detail0, 2;
  @$pred3 mov.u32	$current_instance, 1023;
  @$pred3 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp1, %exception_r17;
  add.u32	$target1, $print_buffer_address1, $tmp1;
  st.global.u32	[$target1], %exception_r21;
  // Call to _rt_print_write32 ends
  
  // Dead code: mov.s32	%_r24, %_r1;
  // Dead code: mov.u32	%_r25, %_r1;
  add.s32	%exception_r26, %exception_r17, 4;
  // Dead code: mov.u32	%_r27, %_r26;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address2, 3735927486;
  mov.u32	$tmpint3, 0;
  setp.ne.u32	$pred4, $device_id, $tmpint3;
  @$pred4 bra	$skip0label2;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object2, $object_records, 420;
  ld.const.u32	$print_buffer_address2, [$print_buffer_object2];

$skip0label2:
// This BB is part of VPC 6.
  mov.u32	$tmpptr2, 3735927486;
  setp.eq.u32	$pred4, $print_buffer_address2, $tmpptr2;
  @$pred4 mov.u32	$exception_detail0, 2;
  @$pred4 mov.u32	$current_instance, 1023;
  @$pred4 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp2, %exception_r26;
  add.u32	$target2, $print_buffer_address2, $tmp2;
  st.global.u32	[$target2], %exception_r1;
  // Call to _rt_print_write32 ends
  
  // Dead code: mov.b32	%_r28, $rayIndex_x;
  // Dead code: mov.s32	%_r29, $rayIndex_x;
  mov.s32	%exception_r30, 0;
  // Dead code: mov.u32	%_r31, %_r30;
  add.s32	%exception_r32, %exception_r17, 8;
  // Dead code: mov.u32	%_r33, %_r32;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address3, 3735927486;
  mov.u32	$tmpint4, 0;
  setp.ne.u32	$pred5, $device_id, $tmpint4;
  @$pred5 bra	$skip0label3;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object3, $object_records, 420;
  ld.const.u32	$print_buffer_address3, [$print_buffer_object3];

$skip0label3:
// This BB is part of VPC 6.
  mov.u32	$tmpptr3, 3735927486;
  setp.eq.u32	$pred5, $print_buffer_address3, $tmpptr3;
  @$pred5 mov.u32	$exception_detail0, 2;
  @$pred5 mov.u32	$current_instance, 1023;
  @$pred5 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp3, %exception_r32;
  add.u32	$target3, $print_buffer_address3, $tmp3;
  st.global.u32	[$target3], %exception_r30;
  // Call to _rt_print_write32 ends
  
  // Dead code: mov.s32	%_r34, $rayIndex_x;
  // Dead code: mov.u32	%_r35, $rayIndex_x;
  add.s32	%exception_r36, %exception_r17, 12;
  // Dead code: mov.u32	%_r37, %_r36;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address4, 3735927486;
  mov.u32	$tmpint5, 0;
  setp.ne.u32	$pred6, $device_id, $tmpint5;
  @$pred6 bra	$skip0label4;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object4, $object_records, 420;
  ld.const.u32	$print_buffer_address4, [$print_buffer_object4];

$skip0label4:
// This BB is part of VPC 6.
  mov.u32	$tmpptr4, 3735927486;
  setp.eq.u32	$pred6, $print_buffer_address4, $tmpptr4;
  @$pred6 mov.u32	$exception_detail0, 2;
  @$pred6 mov.u32	$current_instance, 1023;
  @$pred6 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp4, %exception_r36;
  add.u32	$target4, $print_buffer_address4, $tmp4;
  st.global.u32	[$target4], $rayIndex_x;
  // Call to _rt_print_write32 ends
  
  // Dead code: mov.b32	%_r38, $rayIndex_y;
  // Dead code: mov.s32	%_r39, $rayIndex_y;
  mov.s32	%exception_r40, 0;
  // Dead code: mov.u32	%_r41, %_r40;
  add.s32	%exception_r42, %exception_r17, 16;
  // Dead code: mov.u32	%_r43, %_r42;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address5, 3735927486;
  mov.u32	$tmpint6, 0;
  setp.ne.u32	$pred7, $device_id, $tmpint6;
  @$pred7 bra	$skip0label5;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object5, $object_records, 420;
  ld.const.u32	$print_buffer_address5, [$print_buffer_object5];

$skip0label5:
// This BB is part of VPC 6.
  mov.u32	$tmpptr5, 3735927486;
  setp.eq.u32	$pred7, $print_buffer_address5, $tmpptr5;
  @$pred7 mov.u32	$exception_detail0, 2;
  @$pred7 mov.u32	$current_instance, 1023;
  @$pred7 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp5, %exception_r42;
  add.u32	$target5, $print_buffer_address5, $tmp5;
  st.global.u32	[$target5], %exception_r40;
  // Call to _rt_print_write32 ends
  
  // Dead code: mov.s32	%_r44, $rayIndex_y;
  // Dead code: mov.u32	%_r45, $rayIndex_y;
  add.s32	%exception_r46, %exception_r17, 20;
  // Dead code: mov.u32	%_r47, %_r46;
  
  // Call to _rt_print_write32 begins
  mov.u32	$print_buffer_address6, 3735927486;
  mov.u32	$tmpint7, 0;
  setp.ne.u32	$pred8, $device_id, $tmpint7;
  @$pred8 bra	$skip0label6;
// This BB is part of VPC 6.
  add.u32	$print_buffer_object6, $object_records, 420;
  ld.const.u32	$print_buffer_address6, [$print_buffer_object6];

$skip0label6:
// This BB is part of VPC 6.
  mov.u32	$tmpptr6, 3735927486;
  setp.eq.u32	$pred8, $print_buffer_address6, $tmpptr6;
  @$pred8 mov.u32	$exception_detail0, 2;
  @$pred8 mov.u32	$current_instance, 1023;
  @$pred8 bra	$stack_overflow;
// This BB is part of VPC 6.
  cvt.u32.u32	$tmp6, %exception_r46;
  add.u32	$target6, $print_buffer_address6, $tmp6;
  st.global.u32	[$target6], $rayIndex_y;
  // Call to _rt_print_write32 ends
  

exception_$Lt_18_11778:
// This BB is part of VPC 6.
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_color_only"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc7:
// This BB is part of VPC 7.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  // Dead code: mov.b32	%_r1, $rayIndex_x;
  // Dead code: mov.b32	%_r2, $rayIndex_y;
  ld.const.s32	%zp_color_only_r3, [$object_records+208];
  mov.u32	%zp_color_only_r4, 0;
  setp.ne.s32	%zp_color_only_p1, %zp_color_only_r3, %zp_color_only_r4;
  @%zp_color_only_p1 bra	zp_color_only_$Lt_9_3842;
// This BB is part of VPC 7.
  cvt.rn.f32.u32	%zp_color_only_f1, $rayIndex_y;
  cvt.rn.f32.u32	%zp_color_only_f2, $rayIndex_x;
  ld.const.u32	%zp_color_only_r5, [$object_records+160];
  ld.const.u32	%zp_color_only_r6, [$object_records+164];
  cvt.rn.f32.u32	%zp_color_only_f3, %zp_color_only_r5;
  cvt.rn.f32.u32	%zp_color_only_f4, %zp_color_only_r6;
  mov.f32	%zp_color_only_f5, 0F3f000000; //  0.5
  add.ftz.f32	%zp_color_only_f6, %zp_color_only_f1, %zp_color_only_f5;
  mov.f32	%zp_color_only_f7, 0F3f000000; //  0.5
  add.ftz.f32	%zp_color_only_f8, %zp_color_only_f2, %zp_color_only_f7;
  div.approx.ftz.f32	%zp_color_only_f9, %zp_color_only_f6, %zp_color_only_f4;
  div.approx.ftz.f32	%zp_color_only_f10, %zp_color_only_f8, %zp_color_only_f3;
  mul.ftz.f32	%zp_color_only_f11, %zp_color_only_f10, %zp_color_only_f10;
  fma.rn.ftz.f32	%zp_color_only_f12, %zp_color_only_f9, %zp_color_only_f9, %zp_color_only_f11;
  sqrt.approx.ftz.f32	%zp_color_only_f13, %zp_color_only_f12;
  mov.f32	%zp_color_only_f14, 0F44fa0000; //  2000
  mul.ftz.f32	%zp_color_only_f15, %zp_color_only_f13, %zp_color_only_f14;
  mul.ftz.f32	%zp_color_only_f16, %zp_color_only_f13, %zp_color_only_f15;
  cos.approx.ftz.f32	%zp_color_only_f17, %zp_color_only_f16;
  mov.f32	%zp_color_only_f18, 0F3f800000; //  1
  add.ftz.f32	%zp_color_only_f19, %zp_color_only_f17, %zp_color_only_f18;
  mov.f32	%zp_color_only_f20, 0F40000000; //  2
  div.approx.ftz.f32	%zp_color_only_f21, %zp_color_only_f19, %zp_color_only_f20;
  bra.uni	zp_color_only_$LDWendi__Z9zoneplate6float2_195_1;

zp_color_only_$Lt_9_3842:
// This BB is part of VPC 7.
  mov.u32	%zp_color_only_r7, 1;
  setp.ne.s32	%zp_color_only_p2, %zp_color_only_r3, %zp_color_only_r7;
  @%zp_color_only_p2 bra	zp_color_only_$Lt_9_3586;
// This BB is part of VPC 7.
  cvt.rn.f32.u32	%zp_color_only_f22, $rayIndex_y;
  ld.const.f32	%zp_color_only_f23, [$object_records+204];
  mov.f32	%zp_color_only_f24, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_color_only_f25, %zp_color_only_f23, %zp_color_only_f24;
  cvt.rn.f32.u32	%zp_color_only_f26, $rayIndex_x;
  ld.const.s32	%zp_color_only_r8, [$object_records+232];
  cvt.rn.f32.s32	%zp_color_only_f27, %zp_color_only_r8;
  mov.f32	%zp_color_only_f28, 0F3f000000; //  0.5
  add.ftz.f32	%zp_color_only_f29, %zp_color_only_f22, %zp_color_only_f28;
  mov.f32	%zp_color_only_f30, 0F43340000; //  180
  div.approx.ftz.f32	%zp_color_only_f31, %zp_color_only_f25, %zp_color_only_f30;
  mov.f32	%zp_color_only_f32, 0F3f000000; //  0.5
  add.ftz.f32	%zp_color_only_f33, %zp_color_only_f26, %zp_color_only_f32;
  sin.approx.ftz.f32	%zp_color_only_f34, %zp_color_only_f31;
  cos.approx.ftz.f32	%zp_color_only_f35, %zp_color_only_f31;
  mul.ftz.f32	%zp_color_only_f36, %zp_color_only_f34, %zp_color_only_f29;
  fma.rn.ftz.f32	%zp_color_only_f37, %zp_color_only_f33, %zp_color_only_f35, %zp_color_only_f36;
  div.approx.ftz.f32	%zp_color_only_f38, %zp_color_only_f37, %zp_color_only_f27;
  cvt.rmi.ftz.f32.f32	%zp_color_only_f39, %zp_color_only_f38;
  cvt.rzi.ftz.sat.s32.f32	%zp_color_only_r9, %zp_color_only_f39;
  abs.s32	%zp_color_only_r10, %zp_color_only_r9;
  mul.ftz.f32	%zp_color_only_f40, %zp_color_only_f34, %zp_color_only_f33;
  mul.ftz.f32	%zp_color_only_f41, %zp_color_only_f29, %zp_color_only_f35;
  sub.ftz.f32	%zp_color_only_f42, %zp_color_only_f41, %zp_color_only_f40;
  div.approx.ftz.f32	%zp_color_only_f43, %zp_color_only_f42, %zp_color_only_f27;
  cvt.rmi.ftz.f32.f32	%zp_color_only_f44, %zp_color_only_f43;
  cvt.rzi.ftz.sat.s32.f32	%zp_color_only_r11, %zp_color_only_f44;
  abs.s32	%zp_color_only_r12, %zp_color_only_r11;
  shr.s32	%zp_color_only_r13, %zp_color_only_r12, 31;
  mov.s32	%zp_color_only_r14, 1;
  and.b32	%zp_color_only_r15, %zp_color_only_r13, %zp_color_only_r14;
  add.s32	%zp_color_only_r16, %zp_color_only_r15, %zp_color_only_r12;
  shr.s32	%zp_color_only_r17, %zp_color_only_r16, 1;
  mul.lo.s32	%zp_color_only_r18, %zp_color_only_r17, 2;
  sub.s32	%zp_color_only_r19, %zp_color_only_r12, %zp_color_only_r18;
  shr.s32	%zp_color_only_r20, %zp_color_only_r10, 31;
  mov.s32	%zp_color_only_r21, 1;
  and.b32	%zp_color_only_r22, %zp_color_only_r20, %zp_color_only_r21;
  add.s32	%zp_color_only_r23, %zp_color_only_r22, %zp_color_only_r10;
  shr.s32	%zp_color_only_r24, %zp_color_only_r23, 1;
  mul.lo.s32	%zp_color_only_r25, %zp_color_only_r24, 2;
  sub.s32	%zp_color_only_r26, %zp_color_only_r10, %zp_color_only_r25;
  setp.ne.s32	%zp_color_only_p3, %zp_color_only_r19, %zp_color_only_r26;
  @%zp_color_only_p3 bra	zp_color_only_$Lt_9_4610;
// This BB is part of VPC 7.
  mov.f32	%zp_color_only_f45, 0F3f800000; //  1
  bra.uni	zp_color_only_$LDWendi_fdividef_195_2;

zp_color_only_$Lt_9_4610:
// This BB is part of VPC 7.
  mov.f32	%zp_color_only_f45, 0F00000000; //  0

zp_color_only_$LDWendi_fdividef_195_2:
// This BB is part of VPC 7.
  mov.f32	%zp_color_only_f21, %zp_color_only_f45;
  bra.uni	zp_color_only_$LDWendi__Z9zoneplate6float2_195_1;

zp_color_only_$Lt_9_3586:
// This BB is part of VPC 7.
  mov.f32	%zp_color_only_f21, 0F00000000; //  0

zp_color_only_$LDWendi__Z9zoneplate6float2_195_1:
// This BB is part of VPC 7.
  add.u32	%zp_color_only_r27, $object_records, 212;
  // Dead code: mov.u32	%_r28, %_r27;
  mov.u32	%zp_color_only_r29, 2;
  // Dead code: mov.u32	%_r30, %_r29;
  mov.u32	%zp_color_only_r31, 4;
  // Dead code: mov.u32	%_r32, %_r31;
  // Dead code: mov.u32	%_r33, $rayIndex_x;
  // Dead code: mov.u32	%_r34, $rayIndex_y;
  mov.u32	%zp_color_only_r35, 0;
  // Dead code: mov.u32	%_r36, %_r35;
  // Dead code: mov.u32	%_r37, 0;
  // Dead code: mov.u32	%_r38, %_r37;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr6, [%zp_color_only_r27];
  add.u32	$record_address6, $record_ptr6, $object_records;
  ld.const.u32	$buffer_address10, [$record_address6];
  ld.const.u32	$size6, [$record_address6+4];
  setp.ge.u32	$oob5, $rayIndex_x, $size6;
  ld.const.u32	$sz_x5, [$record_address6+4];
  ld.const.u32	$sz_y5, [$record_address6+8];
  mov.u32	$sz_z5, 3735927486;
  @$oob5 mov.u32	$exception_detail0, $buffer_address10;
  @$oob5 mov.b32	$exception_detail1, %zp_color_only_r29;
  @$oob5 mov.u32	$exception_detail2, $sz_x5;
  @$oob5 mov.u32	$exception_detail3, $sz_y5;
  @$oob5 mov.u32	$exception_detail4, $sz_z5;
  @$oob5 mov.b32	$exception_detail5, %zp_color_only_r31;
  @$oob5 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob5 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob5 mov.b32	$exception_detail8, %zp_color_only_r35;
  @$oob5 mov.u32	$current_instance, 1021;
  @$oob5 bra	$stack_overflow;
// This BB is part of VPC 7.
  mul.lo.u32	$offset6, $rayIndex_x, 4;
  add.u32	$buffer_address11, $buffer_address10, $offset6;
  ld.const.u32	$size7, [$record_address6+8];
  setp.ge.u32	$oob6, $rayIndex_y, $size7;
  ld.const.u32	$sz_x6, [$record_address6+4];
  ld.const.u32	$sz_y6, [$record_address6+8];
  mov.u32	$sz_z6, 3735927486;
  @$oob6 mov.u32	$exception_detail0, $buffer_address11;
  @$oob6 mov.b32	$exception_detail1, %zp_color_only_r29;
  @$oob6 mov.u32	$exception_detail2, $sz_x6;
  @$oob6 mov.u32	$exception_detail3, $sz_y6;
  @$oob6 mov.u32	$exception_detail4, $sz_z6;
  @$oob6 mov.b32	$exception_detail5, %zp_color_only_r31;
  @$oob6 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob6 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob6 mov.b32	$exception_detail8, %zp_color_only_r35;
  @$oob6 mov.u32	$current_instance, 1021;
  @$oob6 bra	$stack_overflow;
// This BB is part of VPC 7.
  ld.const.u32	$stride0, [$record_address6+16];
  mul.lo.u32	$offset7, $rayIndex_y, $stride0;
  add.u32	$buffer_address12, $buffer_address11, $offset7;
  cvta.global.u32	%zp_color_only_r39, $buffer_address12;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r40, %_r39;
  // Dead code: mov.s32	%_r41, %_r39;
  cvt.ftz.sat.f32.f32	%zp_color_only_f46, %zp_color_only_f21;
  mov.f32	%zp_color_only_f47, 0F437ffd71; //  255.99
  mul.ftz.f32	%zp_color_only_f48, %zp_color_only_f46, %zp_color_only_f47;
  cvt.rzi.ftz.sat.u32.f32	%zp_color_only_r42, %zp_color_only_f48;
  // Dead code: mov.s32	%_r43, %_r42;
  mov.u32	%zp_color_only_r44, 255;
  st.v4.u8	[%zp_color_only_r39+0], {%zp_color_only_r42, %zp_color_only_r42, %zp_color_only_r42, %zp_color_only_r44};
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_generate_samples"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc8:
// This BB is part of VPC 8.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  ld.const.u32	%zp_generate_samples_r1, [$object_records+216];
  cvt.rn.f32.u32	%zp_generate_samples_f1, %zp_generate_samples_r1;
  // Dead code: mov.b32	%_r2, $rayIndex_x;
  // Dead code: mov.b32	%_r3, $rayIndex_y;
  cvt.rn.f32.u32	%zp_generate_samples_f2, $rayIndex_x;
  mov.f32	%zp_generate_samples_f3, 0F3f000000; //  0.5
  add.ftz.f32	%zp_generate_samples_f4, %zp_generate_samples_f2, %zp_generate_samples_f3;
  div.approx.ftz.f32	%zp_generate_samples_f5, %zp_generate_samples_f4, %zp_generate_samples_f1;
  cvt.rn.f32.u32	%zp_generate_samples_f6, $rayIndex_y;
  mov.f32	%zp_generate_samples_f7, 0F3f000000; //  0.5
  add.ftz.f32	%zp_generate_samples_f8, %zp_generate_samples_f6, %zp_generate_samples_f7;
  div.approx.ftz.f32	%zp_generate_samples_f9, %zp_generate_samples_f8, %zp_generate_samples_f1;
  add.u32	%zp_generate_samples_r4, $object_records, 192;
  // Dead code: mov.u32	%_r5, %_r4;
  mov.u32	%zp_generate_samples_r6, 2;
  // Dead code: mov.u32	%_r7, %_r6;
  mov.u32	%zp_generate_samples_r8, 12;
  // Dead code: mov.u32	%_r9, %_r8;
  // Dead code: mov.u32	%_r10, $rayIndex_x;
  // Dead code: mov.u32	%_r11, $rayIndex_y;
  mov.u32	%zp_generate_samples_r12, 0;
  // Dead code: mov.u32	%_r13, %_r12;
  // Dead code: mov.u32	%_r14, 0;
  // Dead code: mov.u32	%_r15, %_r14;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr7, [%zp_generate_samples_r4];
  add.u32	$record_address7, $record_ptr7, $object_records;
  ld.const.u32	$buffer_address13, [$record_address7];
  ld.const.u32	$size8, [$record_address7+4];
  setp.ge.u32	$oob7, $rayIndex_x, $size8;
  ld.const.u32	$sz_x7, [$record_address7+4];
  ld.const.u32	$sz_y7, [$record_address7+8];
  mov.u32	$sz_z7, 3735927486;
  @$oob7 mov.u32	$exception_detail0, $buffer_address13;
  @$oob7 mov.b32	$exception_detail1, %zp_generate_samples_r6;
  @$oob7 mov.u32	$exception_detail2, $sz_x7;
  @$oob7 mov.u32	$exception_detail3, $sz_y7;
  @$oob7 mov.u32	$exception_detail4, $sz_z7;
  @$oob7 mov.b32	$exception_detail5, %zp_generate_samples_r8;
  @$oob7 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob7 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob7 mov.b32	$exception_detail8, %zp_generate_samples_r12;
  @$oob7 mov.u32	$current_instance, 1021;
  @$oob7 bra	$stack_overflow;
// This BB is part of VPC 8.
  mul.lo.u32	$offset8, $rayIndex_x, 12;
  add.u32	$buffer_address14, $buffer_address13, $offset8;
  ld.const.u32	$size9, [$record_address7+8];
  setp.ge.u32	$oob8, $rayIndex_y, $size9;
  ld.const.u32	$sz_x8, [$record_address7+4];
  ld.const.u32	$sz_y8, [$record_address7+8];
  mov.u32	$sz_z8, 3735927486;
  @$oob8 mov.u32	$exception_detail0, $buffer_address14;
  @$oob8 mov.b32	$exception_detail1, %zp_generate_samples_r6;
  @$oob8 mov.u32	$exception_detail2, $sz_x8;
  @$oob8 mov.u32	$exception_detail3, $sz_y8;
  @$oob8 mov.u32	$exception_detail4, $sz_z8;
  @$oob8 mov.b32	$exception_detail5, %zp_generate_samples_r8;
  @$oob8 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob8 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob8 mov.b32	$exception_detail8, %zp_generate_samples_r12;
  @$oob8 mov.u32	$current_instance, 1021;
  @$oob8 bra	$stack_overflow;
// This BB is part of VPC 8.
  ld.const.u32	$stride1, [$record_address7+16];
  mul.lo.u32	$offset9, $rayIndex_y, $stride1;
  add.u32	$buffer_address15, $buffer_address14, $offset9;
  cvta.global.u32	%zp_generate_samples_r16, $buffer_address15;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r17, %_r16;
  // Dead code: mov.s32	%_r18, %_r16;
  st.f32	[%zp_generate_samples_r16+4], %zp_generate_samples_f5;
  add.u32	%zp_generate_samples_r19, $object_records, 192;
  // Dead code: mov.u32	%_r20, %_r19;
  mov.u32	%zp_generate_samples_r21, 2;
  // Dead code: mov.u32	%_r22, %_r21;
  mov.u32	%zp_generate_samples_r23, 12;
  // Dead code: mov.u32	%_r24, %_r23;
  // Dead code: mov.b32	%_r25, $rayIndex_x;
  // Dead code: mov.b32	%_r26, $rayIndex_y;
  // Dead code: mov.u32	%_r27, $rayIndex_x;
  // Dead code: mov.u32	%_r28, $rayIndex_y;
  mov.u32	%zp_generate_samples_r29, 0;
  // Dead code: mov.u32	%_r30, %_r29;
  // Dead code: mov.u32	%_r31, 0;
  // Dead code: mov.u32	%_r32, %_r31;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr8, [%zp_generate_samples_r19];
  add.u32	$record_address8, $record_ptr8, $object_records;
  ld.const.u32	$buffer_address16, [$record_address8];
  ld.const.u32	$size10, [$record_address8+4];
  setp.ge.u32	$oob9, $rayIndex_x, $size10;
  ld.const.u32	$sz_x9, [$record_address8+4];
  ld.const.u32	$sz_y9, [$record_address8+8];
  mov.u32	$sz_z9, 3735927486;
  @$oob9 mov.u32	$exception_detail0, $buffer_address16;
  @$oob9 mov.b32	$exception_detail1, %zp_generate_samples_r21;
  @$oob9 mov.u32	$exception_detail2, $sz_x9;
  @$oob9 mov.u32	$exception_detail3, $sz_y9;
  @$oob9 mov.u32	$exception_detail4, $sz_z9;
  @$oob9 mov.b32	$exception_detail5, %zp_generate_samples_r23;
  @$oob9 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob9 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob9 mov.b32	$exception_detail8, %zp_generate_samples_r29;
  @$oob9 mov.u32	$current_instance, 1021;
  @$oob9 bra	$stack_overflow;
// This BB is part of VPC 8.
  mul.lo.u32	$offset10, $rayIndex_x, 12;
  add.u32	$buffer_address17, $buffer_address16, $offset10;
  ld.const.u32	$size11, [$record_address8+8];
  setp.ge.u32	$oob10, $rayIndex_y, $size11;
  ld.const.u32	$sz_x10, [$record_address8+4];
  ld.const.u32	$sz_y10, [$record_address8+8];
  mov.u32	$sz_z10, 3735927486;
  @$oob10 mov.u32	$exception_detail0, $buffer_address17;
  @$oob10 mov.b32	$exception_detail1, %zp_generate_samples_r21;
  @$oob10 mov.u32	$exception_detail2, $sz_x10;
  @$oob10 mov.u32	$exception_detail3, $sz_y10;
  @$oob10 mov.u32	$exception_detail4, $sz_z10;
  @$oob10 mov.b32	$exception_detail5, %zp_generate_samples_r23;
  @$oob10 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob10 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob10 mov.b32	$exception_detail8, %zp_generate_samples_r29;
  @$oob10 mov.u32	$current_instance, 1021;
  @$oob10 bra	$stack_overflow;
// This BB is part of VPC 8.
  ld.const.u32	$stride2, [$record_address8+16];
  mul.lo.u32	$offset11, $rayIndex_y, $stride2;
  add.u32	$buffer_address18, $buffer_address17, $offset11;
  cvta.global.u32	%zp_generate_samples_r33, $buffer_address18;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r34, %_r33;
  // Dead code: mov.s32	%_r35, %_r33;
  st.f32	[%zp_generate_samples_r33+8], %zp_generate_samples_f9;
  ld.const.s32	%zp_generate_samples_r36, [$object_records+208];
  mov.u32	%zp_generate_samples_r37, 0;
  setp.ne.s32	%zp_generate_samples_p1, %zp_generate_samples_r36, %zp_generate_samples_r37;
  @%zp_generate_samples_p1 bra	zp_generate_samples_$Lt_10_3842;
// This BB is part of VPC 8.
  ld.const.u32	%zp_generate_samples_r38, [$object_records+160];
  ld.const.u32	%zp_generate_samples_r39, [$object_records+164];
  cvt.rn.f32.u32	%zp_generate_samples_f10, %zp_generate_samples_r38;
  cvt.rn.f32.u32	%zp_generate_samples_f11, %zp_generate_samples_r39;
  div.approx.ftz.f32	%zp_generate_samples_f12, %zp_generate_samples_f5, %zp_generate_samples_f10;
  div.approx.ftz.f32	%zp_generate_samples_f13, %zp_generate_samples_f9, %zp_generate_samples_f11;
  mul.ftz.f32	%zp_generate_samples_f14, %zp_generate_samples_f12, %zp_generate_samples_f12;
  fma.rn.ftz.f32	%zp_generate_samples_f15, %zp_generate_samples_f13, %zp_generate_samples_f13, %zp_generate_samples_f14;
  sqrt.approx.ftz.f32	%zp_generate_samples_f16, %zp_generate_samples_f15;
  mov.f32	%zp_generate_samples_f17, 0F44fa0000; //  2000
  mul.ftz.f32	%zp_generate_samples_f18, %zp_generate_samples_f16, %zp_generate_samples_f17;
  mul.ftz.f32	%zp_generate_samples_f19, %zp_generate_samples_f16, %zp_generate_samples_f18;
  cos.approx.ftz.f32	%zp_generate_samples_f20, %zp_generate_samples_f19;
  mov.f32	%zp_generate_samples_f21, 0F3f800000; //  1
  add.ftz.f32	%zp_generate_samples_f22, %zp_generate_samples_f20, %zp_generate_samples_f21;
  mov.f32	%zp_generate_samples_f23, 0F40000000; //  2
  div.approx.ftz.f32	%zp_generate_samples_f24, %zp_generate_samples_f22, %zp_generate_samples_f23;
  mov.f32	%zp_generate_samples_f25, %zp_generate_samples_f24;
  bra.uni	zp_generate_samples_$LDWendi__Z9zoneplate6float2_197_1;

zp_generate_samples_$Lt_10_3842:
// This BB is part of VPC 8.
  mov.u32	%zp_generate_samples_r40, 1;
  setp.ne.s32	%zp_generate_samples_p2, %zp_generate_samples_r36, %zp_generate_samples_r40;
  @%zp_generate_samples_p2 bra	zp_generate_samples_$Lt_10_3586;
// This BB is part of VPC 8.
  ld.const.f32	%zp_generate_samples_f26, [$object_records+204];
  mov.f32	%zp_generate_samples_f27, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_generate_samples_f28, %zp_generate_samples_f26, %zp_generate_samples_f27;
  ld.const.s32	%zp_generate_samples_r41, [$object_records+232];
  cvt.rn.f32.s32	%zp_generate_samples_f29, %zp_generate_samples_r41;
  mov.f32	%zp_generate_samples_f30, 0F43340000; //  180
  div.approx.ftz.f32	%zp_generate_samples_f31, %zp_generate_samples_f28, %zp_generate_samples_f30;
  cos.approx.ftz.f32	%zp_generate_samples_f32, %zp_generate_samples_f31;
  sin.approx.ftz.f32	%zp_generate_samples_f33, %zp_generate_samples_f31;
  mul.ftz.f32	%zp_generate_samples_f34, %zp_generate_samples_f5, %zp_generate_samples_f32;
  fma.rn.ftz.f32	%zp_generate_samples_f35, %zp_generate_samples_f33, %zp_generate_samples_f9, %zp_generate_samples_f34;
  div.approx.ftz.f32	%zp_generate_samples_f36, %zp_generate_samples_f35, %zp_generate_samples_f29;
  cvt.rmi.ftz.f32.f32	%zp_generate_samples_f37, %zp_generate_samples_f36;
  cvt.rzi.ftz.sat.s32.f32	%zp_generate_samples_r42, %zp_generate_samples_f37;
  abs.s32	%zp_generate_samples_r43, %zp_generate_samples_r42;
  mul.ftz.f32	%zp_generate_samples_f38, %zp_generate_samples_f5, %zp_generate_samples_f33;
  mul.ftz.f32	%zp_generate_samples_f39, %zp_generate_samples_f32, %zp_generate_samples_f9;
  sub.ftz.f32	%zp_generate_samples_f40, %zp_generate_samples_f39, %zp_generate_samples_f38;
  div.approx.ftz.f32	%zp_generate_samples_f41, %zp_generate_samples_f40, %zp_generate_samples_f29;
  cvt.rmi.ftz.f32.f32	%zp_generate_samples_f42, %zp_generate_samples_f41;
  cvt.rzi.ftz.sat.s32.f32	%zp_generate_samples_r44, %zp_generate_samples_f42;
  abs.s32	%zp_generate_samples_r45, %zp_generate_samples_r44;
  shr.s32	%zp_generate_samples_r46, %zp_generate_samples_r45, 31;
  mov.s32	%zp_generate_samples_r47, 1;
  and.b32	%zp_generate_samples_r48, %zp_generate_samples_r46, %zp_generate_samples_r47;
  add.s32	%zp_generate_samples_r49, %zp_generate_samples_r48, %zp_generate_samples_r45;
  shr.s32	%zp_generate_samples_r50, %zp_generate_samples_r49, 1;
  mul.lo.s32	%zp_generate_samples_r51, %zp_generate_samples_r50, 2;
  sub.s32	%zp_generate_samples_r52, %zp_generate_samples_r45, %zp_generate_samples_r51;
  shr.s32	%zp_generate_samples_r53, %zp_generate_samples_r43, 31;
  mov.s32	%zp_generate_samples_r54, 1;
  and.b32	%zp_generate_samples_r55, %zp_generate_samples_r53, %zp_generate_samples_r54;
  add.s32	%zp_generate_samples_r56, %zp_generate_samples_r55, %zp_generate_samples_r43;
  shr.s32	%zp_generate_samples_r57, %zp_generate_samples_r56, 1;
  mul.lo.s32	%zp_generate_samples_r58, %zp_generate_samples_r57, 2;
  sub.s32	%zp_generate_samples_r59, %zp_generate_samples_r43, %zp_generate_samples_r58;
  setp.ne.s32	%zp_generate_samples_p3, %zp_generate_samples_r52, %zp_generate_samples_r59;
  @%zp_generate_samples_p3 bra	zp_generate_samples_$Lt_10_4610;
// This BB is part of VPC 8.
  mov.f32	%zp_generate_samples_f43, 0F3f800000; //  1
  bra.uni	zp_generate_samples_$LDWendi_fdividef_197_2;

zp_generate_samples_$Lt_10_4610:
// This BB is part of VPC 8.
  mov.f32	%zp_generate_samples_f43, 0F00000000; //  0

zp_generate_samples_$LDWendi_fdividef_197_2:
// This BB is part of VPC 8.
  mov.f32	%zp_generate_samples_f25, %zp_generate_samples_f43;
  bra.uni	zp_generate_samples_$LDWendi__Z9zoneplate6float2_197_1;

zp_generate_samples_$Lt_10_3586:
// This BB is part of VPC 8.
  mov.f32	%zp_generate_samples_f25, 0F00000000; //  0

zp_generate_samples_$LDWendi__Z9zoneplate6float2_197_1:
// This BB is part of VPC 8.
  add.u32	%zp_generate_samples_r60, $object_records, 192;
  // Dead code: mov.u32	%_r61, %_r60;
  mov.u32	%zp_generate_samples_r62, 2;
  // Dead code: mov.u32	%_r63, %_r62;
  mov.u32	%zp_generate_samples_r64, 12;
  // Dead code: mov.u32	%_r65, %_r64;
  // Dead code: mov.b32	%_r66, $rayIndex_x;
  // Dead code: mov.b32	%_r67, $rayIndex_y;
  // Dead code: mov.u32	%_r68, $rayIndex_x;
  // Dead code: mov.u32	%_r69, $rayIndex_y;
  mov.u32	%zp_generate_samples_r70, 0;
  // Dead code: mov.u32	%_r71, %_r70;
  // Dead code: mov.u32	%_r72, 0;
  // Dead code: mov.u32	%_r73, %_r72;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr9, [%zp_generate_samples_r60];
  add.u32	$record_address9, $record_ptr9, $object_records;
  ld.const.u32	$buffer_address19, [$record_address9];
  ld.const.u32	$size12, [$record_address9+4];
  setp.ge.u32	$oob11, $rayIndex_x, $size12;
  ld.const.u32	$sz_x11, [$record_address9+4];
  ld.const.u32	$sz_y11, [$record_address9+8];
  mov.u32	$sz_z11, 3735927486;
  @$oob11 mov.u32	$exception_detail0, $buffer_address19;
  @$oob11 mov.b32	$exception_detail1, %zp_generate_samples_r62;
  @$oob11 mov.u32	$exception_detail2, $sz_x11;
  @$oob11 mov.u32	$exception_detail3, $sz_y11;
  @$oob11 mov.u32	$exception_detail4, $sz_z11;
  @$oob11 mov.b32	$exception_detail5, %zp_generate_samples_r64;
  @$oob11 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob11 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob11 mov.b32	$exception_detail8, %zp_generate_samples_r70;
  @$oob11 mov.u32	$current_instance, 1021;
  @$oob11 bra	$stack_overflow;
// This BB is part of VPC 8.
  mul.lo.u32	$offset12, $rayIndex_x, 12;
  add.u32	$buffer_address20, $buffer_address19, $offset12;
  ld.const.u32	$size13, [$record_address9+8];
  setp.ge.u32	$oob12, $rayIndex_y, $size13;
  ld.const.u32	$sz_x12, [$record_address9+4];
  ld.const.u32	$sz_y12, [$record_address9+8];
  mov.u32	$sz_z12, 3735927486;
  @$oob12 mov.u32	$exception_detail0, $buffer_address20;
  @$oob12 mov.b32	$exception_detail1, %zp_generate_samples_r62;
  @$oob12 mov.u32	$exception_detail2, $sz_x12;
  @$oob12 mov.u32	$exception_detail3, $sz_y12;
  @$oob12 mov.u32	$exception_detail4, $sz_z12;
  @$oob12 mov.b32	$exception_detail5, %zp_generate_samples_r64;
  @$oob12 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob12 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob12 mov.b32	$exception_detail8, %zp_generate_samples_r70;
  @$oob12 mov.u32	$current_instance, 1021;
  @$oob12 bra	$stack_overflow;
// This BB is part of VPC 8.
  ld.const.u32	$stride3, [$record_address9+16];
  mul.lo.u32	$offset13, $rayIndex_y, $stride3;
  add.u32	$buffer_address21, $buffer_address20, $offset13;
  cvta.global.u32	%zp_generate_samples_r74, $buffer_address21;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r75, %_r74;
  // Dead code: mov.s32	%_r76, %_r74;
  st.f32	[%zp_generate_samples_r74+0], %zp_generate_samples_f25;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_gather_samples"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc9:
// This BB is part of VPC 9.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  ld.const.u32	%zp_gather_samples_r1, [$object_records+216];
  cvt.rn.f32.u32	%zp_gather_samples_f1, %zp_gather_samples_r1;
  mov.b32	%zp_gather_samples_r2, $rayIndex_x;
  mov.b32	%zp_gather_samples_r3, $rayIndex_y;
  cvt.rn.f32.u32	%zp_gather_samples_f2, $rayIndex_x;
  mov.f32	%zp_gather_samples_f3, 0F3f000000; //  0.5
  add.ftz.f32	%zp_gather_samples_f4, %zp_gather_samples_f2, %zp_gather_samples_f3;
  ld.const.f32	%zp_gather_samples_f5, [$object_records+180];
  sub.ftz.f32	%zp_gather_samples_f6, %zp_gather_samples_f4, %zp_gather_samples_f5;
  mul.ftz.f32	%zp_gather_samples_f7, %zp_gather_samples_f1, %zp_gather_samples_f6;
  cvt.rmi.ftz.f32.f32	%zp_gather_samples_f8, %zp_gather_samples_f7;
  cvt.rzi.ftz.sat.s32.f32	%zp_gather_samples_r4, %zp_gather_samples_f8;
  mov.s32	%zp_gather_samples_r5, 0;
  max.s32	%zp_gather_samples_r6, %zp_gather_samples_r4, %zp_gather_samples_r5;
  cvt.rn.f32.u32	%zp_gather_samples_f9, $rayIndex_y;
  mov.f32	%zp_gather_samples_f10, 0F3f000000; //  0.5
  add.ftz.f32	%zp_gather_samples_f11, %zp_gather_samples_f9, %zp_gather_samples_f10;
  sub.ftz.f32	%zp_gather_samples_f12, %zp_gather_samples_f11, %zp_gather_samples_f5;
  mul.ftz.f32	%zp_gather_samples_f13, %zp_gather_samples_f1, %zp_gather_samples_f12;
  cvt.rmi.ftz.f32.f32	%zp_gather_samples_f14, %zp_gather_samples_f13;
  cvt.rzi.ftz.sat.s32.f32	%zp_gather_samples_r7, %zp_gather_samples_f14;
  mov.s32	%zp_gather_samples_r8, 0;
  max.s32	%zp_gather_samples_r9, %zp_gather_samples_r7, %zp_gather_samples_r8;
  mov.f32	%zp_gather_samples_f15, 0F00000000; //  0
  mov.f32	%zp_gather_samples_f16, 0F00000000; //  0
  ld.const.u32	%zp_gather_samples_r10, [$object_records+160];
  mul.lo.u32	%zp_gather_samples_r11, %zp_gather_samples_r10, %zp_gather_samples_r1;
  sub.u32	%zp_gather_samples_r12, %zp_gather_samples_r11, 1;
  add.ftz.f32	%zp_gather_samples_f17, %zp_gather_samples_f4, %zp_gather_samples_f5;
  mul.ftz.f32	%zp_gather_samples_f18, %zp_gather_samples_f1, %zp_gather_samples_f17;
  cvt.rpi.ftz.f32.f32	%zp_gather_samples_f19, %zp_gather_samples_f18;
  cvt.rzi.ftz.sat.s32.f32	%zp_gather_samples_r13, %zp_gather_samples_f19;
  min.u32	%zp_gather_samples_r14, %zp_gather_samples_r13, %zp_gather_samples_r12;
  sub.u32	%zp_gather_samples_r15, %zp_gather_samples_r14, 1;
  setp.gt.u32	%zp_gather_samples_p1, %zp_gather_samples_r6, %zp_gather_samples_r14;
  @%zp_gather_samples_p1 bra	zp_gather_samples_$Lt_11_12802;
// This BB is part of VPC 9.
  // Dead code: sub.u32	%_r16, %_r15, %_r6;
  // Dead code: add.u32	%_r17, %_r16, 2;
  // Dead code: mov.u32	%_r18, 1;
  // Dead code: max.u32	%_r19, %_r17, %_r18;
  // Dead code: mov.s32	%_r20, %_r19;

zp_gather_samples_$Lt_11_13314:
// This BB is part of VPC 9.
  ld.const.u32	%zp_gather_samples_r1, [$object_records+216];
  cvt.rn.f32.u32	%zp_gather_samples_f1, %zp_gather_samples_r1;
  // Dead code: mov.b32	%_r21, $rayIndex_y;
  cvt.rn.f32.u32	%zp_gather_samples_f20, $rayIndex_y;
  ld.const.u32	%zp_gather_samples_r22, [$object_records+164];
  mul.lo.u32	%zp_gather_samples_r23, %zp_gather_samples_r22, %zp_gather_samples_r1;
  mov.f32	%zp_gather_samples_f21, 0F3f000000; //  0.5
  add.ftz.f32	%zp_gather_samples_f22, %zp_gather_samples_f20, %zp_gather_samples_f21;
  sub.u32	%zp_gather_samples_r24, %zp_gather_samples_r23, 1;
  ld.const.f32	%zp_gather_samples_f23, [$object_records+180];
  add.ftz.f32	%zp_gather_samples_f24, %zp_gather_samples_f23, %zp_gather_samples_f22;
  mul.ftz.f32	%zp_gather_samples_f25, %zp_gather_samples_f1, %zp_gather_samples_f24;
  cvt.rpi.ftz.f32.f32	%zp_gather_samples_f26, %zp_gather_samples_f25;
  cvt.rzi.ftz.sat.s32.f32	%zp_gather_samples_r25, %zp_gather_samples_f26;
  min.u32	%zp_gather_samples_r26, %zp_gather_samples_r25, %zp_gather_samples_r24;
  sub.u32	%zp_gather_samples_r27, %zp_gather_samples_r26, 1;
  setp.lt.u32	%zp_gather_samples_p2, %zp_gather_samples_r26, %zp_gather_samples_r9;
  @%zp_gather_samples_p2 bra	zp_gather_samples_$Lt_11_13570;
// This BB is part of VPC 9.
  // Dead code: sub.u32	%_r28, %_r27, %_r9;
  // Dead code: add.u32	%_r29, %_r28, 2;
  // Dead code: mov.u32	%_r30, 1;
  // Dead code: max.u32	%_r31, %_r29, %_r30;
  // Dead code: mov.s32	%_r32, %_r31;

zp_gather_samples_$Lt_11_14082:
// This BB is part of VPC 9.
  add.u32	%zp_gather_samples_r33, $object_records, 192;
  // Dead code: mov.u32	%_r34, %_r33;
  mov.u32	%zp_gather_samples_r35, 2;
  // Dead code: mov.u32	%_r36, %_r35;
  mov.u32	%zp_gather_samples_r37, 12;
  // Dead code: mov.u32	%_r38, %_r37;
  // Dead code: mov.u32	%_r39, %_r15;
  // Dead code: mov.u32	%_r40, %_r27;
  mov.u32	%zp_gather_samples_r41, 0;
  // Dead code: mov.u32	%_r42, %_r41;
  // Dead code: mov.u32	%_r43, 0;
  // Dead code: mov.u32	%_r44, %_r43;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr10, [%zp_gather_samples_r33];
  add.u32	$record_address10, $record_ptr10, $object_records;
  ld.const.u32	$buffer_address22, [$record_address10];
  ld.const.u32	$size14, [$record_address10+4];
  setp.ge.u32	$oob13, %zp_gather_samples_r15, $size14;
  ld.const.u32	$sz_x13, [$record_address10+4];
  ld.const.u32	$sz_y13, [$record_address10+8];
  mov.u32	$sz_z13, 3735927486;
  @$oob13 mov.u32	$exception_detail0, $buffer_address22;
  @$oob13 mov.b32	$exception_detail1, %zp_gather_samples_r35;
  @$oob13 mov.u32	$exception_detail2, $sz_x13;
  @$oob13 mov.u32	$exception_detail3, $sz_y13;
  @$oob13 mov.u32	$exception_detail4, $sz_z13;
  @$oob13 mov.b32	$exception_detail5, %zp_gather_samples_r37;
  @$oob13 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob13 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob13 mov.b32	$exception_detail8, %zp_gather_samples_r41;
  @$oob13 mov.u32	$current_instance, 1021;
  @$oob13 bra	$stack_overflow;
// This BB is part of VPC 9.
  mul.lo.u32	$offset14, %zp_gather_samples_r15, 12;
  add.u32	$buffer_address23, $buffer_address22, $offset14;
  ld.const.u32	$size15, [$record_address10+8];
  setp.ge.u32	$oob14, %zp_gather_samples_r27, $size15;
  ld.const.u32	$sz_x14, [$record_address10+4];
  ld.const.u32	$sz_y14, [$record_address10+8];
  mov.u32	$sz_z14, 3735927486;
  @$oob14 mov.u32	$exception_detail0, $buffer_address23;
  @$oob14 mov.b32	$exception_detail1, %zp_gather_samples_r35;
  @$oob14 mov.u32	$exception_detail2, $sz_x14;
  @$oob14 mov.u32	$exception_detail3, $sz_y14;
  @$oob14 mov.u32	$exception_detail4, $sz_z14;
  @$oob14 mov.b32	$exception_detail5, %zp_gather_samples_r37;
  @$oob14 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob14 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob14 mov.b32	$exception_detail8, %zp_gather_samples_r41;
  @$oob14 mov.u32	$current_instance, 1021;
  @$oob14 bra	$stack_overflow;
// This BB is part of VPC 9.
  ld.const.u32	$stride4, [$record_address10+16];
  mul.lo.u32	$offset15, %zp_gather_samples_r27, $stride4;
  add.u32	$buffer_address24, $buffer_address23, $offset15;
  cvta.global.u32	%zp_gather_samples_r45, $buffer_address24;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r46, %_r45;
  // Dead code: mov.s32	%_r47, %_r45;
  ld.f32	%zp_gather_samples_f27, [%zp_gather_samples_r45+4];
  add.u32	%zp_gather_samples_r48, $object_records, 192;
  // Dead code: mov.u32	%_r49, %_r48;
  mov.u32	%zp_gather_samples_r50, 2;
  // Dead code: mov.u32	%_r51, %_r50;
  mov.u32	%zp_gather_samples_r52, 12;
  // Dead code: mov.u32	%_r53, %_r52;
  // Dead code: mov.u32	%_r54, %_r15;
  // Dead code: mov.u32	%_r55, %_r27;
  mov.u32	%zp_gather_samples_r56, 0;
  // Dead code: mov.u32	%_r57, %_r56;
  // Dead code: mov.u32	%_r58, 0;
  // Dead code: mov.u32	%_r59, %_r58;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr11, [%zp_gather_samples_r48];
  add.u32	$record_address11, $record_ptr11, $object_records;
  ld.const.u32	$buffer_address25, [$record_address11];
  ld.const.u32	$size16, [$record_address11+4];
  setp.ge.u32	$oob15, %zp_gather_samples_r15, $size16;
  ld.const.u32	$sz_x15, [$record_address11+4];
  ld.const.u32	$sz_y15, [$record_address11+8];
  mov.u32	$sz_z15, 3735927486;
  @$oob15 mov.u32	$exception_detail0, $buffer_address25;
  @$oob15 mov.b32	$exception_detail1, %zp_gather_samples_r50;
  @$oob15 mov.u32	$exception_detail2, $sz_x15;
  @$oob15 mov.u32	$exception_detail3, $sz_y15;
  @$oob15 mov.u32	$exception_detail4, $sz_z15;
  @$oob15 mov.b32	$exception_detail5, %zp_gather_samples_r52;
  @$oob15 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob15 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob15 mov.b32	$exception_detail8, %zp_gather_samples_r56;
  @$oob15 mov.u32	$current_instance, 1021;
  @$oob15 bra	$stack_overflow;
// This BB is part of VPC 9.
  mul.lo.u32	$offset16, %zp_gather_samples_r15, 12;
  add.u32	$buffer_address26, $buffer_address25, $offset16;
  ld.const.u32	$size17, [$record_address11+8];
  setp.ge.u32	$oob16, %zp_gather_samples_r27, $size17;
  ld.const.u32	$sz_x16, [$record_address11+4];
  ld.const.u32	$sz_y16, [$record_address11+8];
  mov.u32	$sz_z16, 3735927486;
  @$oob16 mov.u32	$exception_detail0, $buffer_address26;
  @$oob16 mov.b32	$exception_detail1, %zp_gather_samples_r50;
  @$oob16 mov.u32	$exception_detail2, $sz_x16;
  @$oob16 mov.u32	$exception_detail3, $sz_y16;
  @$oob16 mov.u32	$exception_detail4, $sz_z16;
  @$oob16 mov.b32	$exception_detail5, %zp_gather_samples_r52;
  @$oob16 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob16 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob16 mov.b32	$exception_detail8, %zp_gather_samples_r56;
  @$oob16 mov.u32	$current_instance, 1021;
  @$oob16 bra	$stack_overflow;
// This BB is part of VPC 9.
  ld.const.u32	$stride5, [$record_address11+16];
  mul.lo.u32	$offset17, %zp_gather_samples_r27, $stride5;
  add.u32	$buffer_address27, $buffer_address26, $offset17;
  cvta.global.u32	%zp_gather_samples_r60, $buffer_address27;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r46, %_r60;
  // Dead code: mov.s32	%_r61, %_r60;
  ld.f32	%zp_gather_samples_f28, [%zp_gather_samples_r60+8];
  // Dead code: mov.b32	%_r62, $rayIndex_x;
  // Dead code: mov.b32	%_r63, $rayIndex_y;
  cvt.rn.f32.u32	%zp_gather_samples_f2, $rayIndex_x;
  cvt.rn.f32.u32	%zp_gather_samples_f29, $rayIndex_y;
  mov.f32	%zp_gather_samples_f30, 0F3f000000; //  0.5
  add.ftz.f32	%zp_gather_samples_f4, %zp_gather_samples_f2, %zp_gather_samples_f30;
  mov.f32	%zp_gather_samples_f31, 0F3f000000; //  0.5
  add.ftz.f32	%zp_gather_samples_f32, %zp_gather_samples_f29, %zp_gather_samples_f31;
  sub.ftz.f32	%zp_gather_samples_f33, %zp_gather_samples_f27, %zp_gather_samples_f4;
  sub.ftz.f32	%zp_gather_samples_f34, %zp_gather_samples_f28, %zp_gather_samples_f32;
  abs.ftz.f32	%zp_gather_samples_f35, %zp_gather_samples_f33;
  abs.ftz.f32	%zp_gather_samples_f36, %zp_gather_samples_f34;
  ld.const.f32	%zp_gather_samples_f5, [$object_records+180];
  set.ftz.gt.u32.f32	%zp_gather_samples_r64, %zp_gather_samples_f35, %zp_gather_samples_f5;
  neg.s32	%zp_gather_samples_r65, %zp_gather_samples_r64;
  set.ftz.gt.u32.f32	%zp_gather_samples_r66, %zp_gather_samples_f36, %zp_gather_samples_f5;
  neg.s32	%zp_gather_samples_r67, %zp_gather_samples_r66;
  or.b32	%zp_gather_samples_r68, %zp_gather_samples_r65, %zp_gather_samples_r67;
  mov.u32	%zp_gather_samples_r69, 0;
  setp.eq.s32	%zp_gather_samples_p3, %zp_gather_samples_r68, %zp_gather_samples_r69;
  @%zp_gather_samples_p3 bra	zp_gather_samples_$Lt_11_14338;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f37, 0F00000000; //  0
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_14338:
// This BB is part of VPC 9.
  ld.const.s32	%zp_gather_samples_r70, [$object_records+200];
  mov.u32	%zp_gather_samples_r71, 0;
  setp.eq.s32	%zp_gather_samples_p4, %zp_gather_samples_r70, %zp_gather_samples_r71;
  @%zp_gather_samples_p4 bra	zp_gather_samples_$Lt_11_514;
// This BB is part of VPC 9.
  mov.u32	%zp_gather_samples_r72, 1;
  setp.eq.s32	%zp_gather_samples_p5, %zp_gather_samples_r70, %zp_gather_samples_r72;
  @%zp_gather_samples_p5 bra	zp_gather_samples_$Lt_11_770;
// This BB is part of VPC 9.
  mov.u32	%zp_gather_samples_r73, 2;
  setp.eq.s32	%zp_gather_samples_p6, %zp_gather_samples_r70, %zp_gather_samples_r73;
  @%zp_gather_samples_p6 bra	zp_gather_samples_$Lt_11_1026;
// This BB is part of VPC 9.
  mov.u32	%zp_gather_samples_r74, 3;
  setp.eq.s32	%zp_gather_samples_p7, %zp_gather_samples_r70, %zp_gather_samples_r74;
  @%zp_gather_samples_p7 bra	zp_gather_samples_$Lt_11_1282;
// This BB is part of VPC 9.
  mov.u32	%zp_gather_samples_r75, 4;
  setp.eq.s32	%zp_gather_samples_p8, %zp_gather_samples_r70, %zp_gather_samples_r75;
  @%zp_gather_samples_p8 bra	zp_gather_samples_$Lt_11_1538;
// This BB is part of VPC 9.
  bra.uni	zp_gather_samples_$Lt_11_2050;

zp_gather_samples_$Lt_11_514:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f37, 0F3f800000; //  1
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_770:
// This BB is part of VPC 9.
  sub.ftz.f32	%zp_gather_samples_f38, %zp_gather_samples_f5, %zp_gather_samples_f35;
  mov.f32	%zp_gather_samples_f39, 0F00000000; //  0
  max.ftz.f32	%zp_gather_samples_f40, %zp_gather_samples_f38, %zp_gather_samples_f39;
  sub.ftz.f32	%zp_gather_samples_f41, %zp_gather_samples_f5, %zp_gather_samples_f36;
  mov.f32	%zp_gather_samples_f42, 0F00000000; //  0
  max.ftz.f32	%zp_gather_samples_f43, %zp_gather_samples_f41, %zp_gather_samples_f42;
  mul.ftz.f32	%zp_gather_samples_f37, %zp_gather_samples_f40, %zp_gather_samples_f43;
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_1026:
// This BB is part of VPC 9.
  ld.const.f32	%zp_gather_samples_f44, [$object_records+220];
  mul.ftz.f32	%zp_gather_samples_f45, %zp_gather_samples_f44, %zp_gather_samples_f5;
  mul.ftz.f32	%zp_gather_samples_f46, %zp_gather_samples_f45, %zp_gather_samples_f5;
  neg.ftz.f32	%zp_gather_samples_f47, %zp_gather_samples_f46;
  mov.f32	%zp_gather_samples_f48, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_gather_samples_f49, %zp_gather_samples_f47, %zp_gather_samples_f48;
  ex2.approx.ftz.f32	%zp_gather_samples_f50, %zp_gather_samples_f49;
  mul.ftz.f32	%zp_gather_samples_f51, %zp_gather_samples_f35, %zp_gather_samples_f44;
  mul.ftz.f32	%zp_gather_samples_f52, %zp_gather_samples_f35, %zp_gather_samples_f51;
  neg.ftz.f32	%zp_gather_samples_f53, %zp_gather_samples_f52;
  mov.f32	%zp_gather_samples_f54, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_gather_samples_f55, %zp_gather_samples_f53, %zp_gather_samples_f54;
  ex2.approx.ftz.f32	%zp_gather_samples_f56, %zp_gather_samples_f55;
  sub.ftz.f32	%zp_gather_samples_f57, %zp_gather_samples_f56, %zp_gather_samples_f50;
  mov.f32	%zp_gather_samples_f58, 0F00000000; //  0
  max.ftz.f32	%zp_gather_samples_f59, %zp_gather_samples_f57, %zp_gather_samples_f58;
  mul.ftz.f32	%zp_gather_samples_f60, %zp_gather_samples_f36, %zp_gather_samples_f44;
  mul.ftz.f32	%zp_gather_samples_f61, %zp_gather_samples_f36, %zp_gather_samples_f60;
  neg.ftz.f32	%zp_gather_samples_f62, %zp_gather_samples_f61;
  mov.f32	%zp_gather_samples_f63, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_gather_samples_f64, %zp_gather_samples_f62, %zp_gather_samples_f63;
  ex2.approx.ftz.f32	%zp_gather_samples_f65, %zp_gather_samples_f64;
  sub.ftz.f32	%zp_gather_samples_f66, %zp_gather_samples_f65, %zp_gather_samples_f50;
  mov.f32	%zp_gather_samples_f67, 0F00000000; //  0
  max.ftz.f32	%zp_gather_samples_f68, %zp_gather_samples_f66, %zp_gather_samples_f67;
  mul.ftz.f32	%zp_gather_samples_f37, %zp_gather_samples_f59, %zp_gather_samples_f68;
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_1282:
// This BB is part of VPC 9.
  div.approx.ftz.f32	%zp_gather_samples_f69, %zp_gather_samples_f35, %zp_gather_samples_f5;
  mov.f32	%zp_gather_samples_f70, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_gather_samples_p9, %zp_gather_samples_f69, %zp_gather_samples_f70;
  @!%zp_gather_samples_p9 bra	zp_gather_samples_$Lt_11_10754;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f71, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_gather_samples_f72, %zp_gather_samples_f69, %zp_gather_samples_f71;
  mul.ftz.f32	%zp_gather_samples_f73, %zp_gather_samples_f69, %zp_gather_samples_f72;
  mul.ftz.f32	%zp_gather_samples_f74, %zp_gather_samples_f69, %zp_gather_samples_f73;
  mov.f32	%zp_gather_samples_f75, 0F41400000; //  12
  mul.ftz.f32	%zp_gather_samples_f76, %zp_gather_samples_f69, %zp_gather_samples_f75;
  mul.ftz.f32	%zp_gather_samples_f77, %zp_gather_samples_f69, %zp_gather_samples_f76;
  sub.ftz.f32	%zp_gather_samples_f78, %zp_gather_samples_f77, %zp_gather_samples_f74;
  mov.f32	%zp_gather_samples_f79, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_gather_samples_f80, %zp_gather_samples_f69, %zp_gather_samples_f79, %zp_gather_samples_f78;
  mov.f32	%zp_gather_samples_f81, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_gather_samples_f82, %zp_gather_samples_f80, %zp_gather_samples_f81;
  mov.f32	%zp_gather_samples_f83, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_gather_samples_f84, %zp_gather_samples_f82, %zp_gather_samples_f83;
  bra.uni	zp_gather_samples_$LDWendi__Z10mitchell1Df_199_15;

zp_gather_samples_$Lt_11_10754:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f85, 0F40e00000; //  7
  mul.ftz.f32	%zp_gather_samples_f86, %zp_gather_samples_f69, %zp_gather_samples_f85;
  mul.ftz.f32	%zp_gather_samples_f87, %zp_gather_samples_f69, %zp_gather_samples_f86;
  mul.ftz.f32	%zp_gather_samples_f88, %zp_gather_samples_f69, %zp_gather_samples_f87;
  mov.f32	%zp_gather_samples_f89, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_gather_samples_f90, %zp_gather_samples_f69, %zp_gather_samples_f89;
  fma.rn.ftz.f32	%zp_gather_samples_f91, %zp_gather_samples_f69, %zp_gather_samples_f90, %zp_gather_samples_f88;
  mov.f32	%zp_gather_samples_f92, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_gather_samples_f93, %zp_gather_samples_f91, %zp_gather_samples_f92;
  mov.f32	%zp_gather_samples_f94, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_gather_samples_f84, %zp_gather_samples_f93, %zp_gather_samples_f94;

zp_gather_samples_$LDWendi__Z10mitchell1Df_199_15:
// This BB is part of VPC 9.
  div.approx.ftz.f32	%zp_gather_samples_f95, %zp_gather_samples_f36, %zp_gather_samples_f5;
  mov.f32	%zp_gather_samples_f96, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_gather_samples_p10, %zp_gather_samples_f95, %zp_gather_samples_f96;
  @!%zp_gather_samples_p10 bra	zp_gather_samples_$Lt_11_11010;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f97, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_gather_samples_f98, %zp_gather_samples_f95, %zp_gather_samples_f97;
  mul.ftz.f32	%zp_gather_samples_f99, %zp_gather_samples_f95, %zp_gather_samples_f98;
  mul.ftz.f32	%zp_gather_samples_f100, %zp_gather_samples_f95, %zp_gather_samples_f99;
  mov.f32	%zp_gather_samples_f101, 0F41400000; //  12
  mul.ftz.f32	%zp_gather_samples_f102, %zp_gather_samples_f95, %zp_gather_samples_f101;
  mul.ftz.f32	%zp_gather_samples_f103, %zp_gather_samples_f95, %zp_gather_samples_f102;
  sub.ftz.f32	%zp_gather_samples_f104, %zp_gather_samples_f103, %zp_gather_samples_f100;
  mov.f32	%zp_gather_samples_f105, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_gather_samples_f106, %zp_gather_samples_f95, %zp_gather_samples_f105, %zp_gather_samples_f104;
  mov.f32	%zp_gather_samples_f107, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_gather_samples_f108, %zp_gather_samples_f106, %zp_gather_samples_f107;
  mov.f32	%zp_gather_samples_f109, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_gather_samples_f110, %zp_gather_samples_f108, %zp_gather_samples_f109;
  bra.uni	zp_gather_samples_$LDWendi__Z10mitchell1Df_199_13;

zp_gather_samples_$Lt_11_11010:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f111, 0F40e00000; //  7
  mul.ftz.f32	%zp_gather_samples_f112, %zp_gather_samples_f95, %zp_gather_samples_f111;
  mul.ftz.f32	%zp_gather_samples_f113, %zp_gather_samples_f95, %zp_gather_samples_f112;
  mul.ftz.f32	%zp_gather_samples_f114, %zp_gather_samples_f95, %zp_gather_samples_f113;
  mov.f32	%zp_gather_samples_f115, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_gather_samples_f116, %zp_gather_samples_f95, %zp_gather_samples_f115;
  fma.rn.ftz.f32	%zp_gather_samples_f117, %zp_gather_samples_f95, %zp_gather_samples_f116, %zp_gather_samples_f114;
  mov.f32	%zp_gather_samples_f118, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_gather_samples_f119, %zp_gather_samples_f117, %zp_gather_samples_f118;
  mov.f32	%zp_gather_samples_f120, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_gather_samples_f110, %zp_gather_samples_f119, %zp_gather_samples_f120;

zp_gather_samples_$LDWendi__Z10mitchell1Df_199_13:
// This BB is part of VPC 9.
  mul.ftz.f32	%zp_gather_samples_f37, %zp_gather_samples_f110, %zp_gather_samples_f84;
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_1538:
// This BB is part of VPC 9.
  div.approx.ftz.f32	%zp_gather_samples_f69, %zp_gather_samples_f35, %zp_gather_samples_f5;
  mov.f32	%zp_gather_samples_f121, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_gather_samples_p11, %zp_gather_samples_f69, %zp_gather_samples_f121;
  @!%zp_gather_samples_p11 bra	zp_gather_samples_$Lt_11_14850;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f122, 0F3f800000; //  1
  bra.uni	zp_gather_samples_$LDWendi_fdividef_199_11;

zp_gather_samples_$Lt_11_14850:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f123, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_gather_samples_p12, %zp_gather_samples_f69, %zp_gather_samples_f123;
  @!%zp_gather_samples_p12 bra	zp_gather_samples_$Lt_11_15362;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f122, 0F00000000; //  0
  bra.uni	zp_gather_samples_$LDWendi_fdividef_199_11;

zp_gather_samples_$Lt_11_15362:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f124, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_gather_samples_f125, %zp_gather_samples_f69, %zp_gather_samples_f124;
  ld.const.f32	%zp_gather_samples_f126, [$object_records+168];
  mul.ftz.f32	%zp_gather_samples_f127, %zp_gather_samples_f126, %zp_gather_samples_f125;
  sin.approx.ftz.f32	%zp_gather_samples_f128, %zp_gather_samples_f127;
  div.approx.ftz.f32	%zp_gather_samples_f129, %zp_gather_samples_f128, %zp_gather_samples_f127;
  sin.approx.ftz.f32	%zp_gather_samples_f130, %zp_gather_samples_f125;
  div.approx.ftz.f32	%zp_gather_samples_f131, %zp_gather_samples_f130, %zp_gather_samples_f125;
  mul.ftz.f32	%zp_gather_samples_f122, %zp_gather_samples_f129, %zp_gather_samples_f131;

zp_gather_samples_$LDWendi_fdividef_199_11:
// This BB is part of VPC 9.
  div.approx.ftz.f32	%zp_gather_samples_f95, %zp_gather_samples_f36, %zp_gather_samples_f5;
  mov.f32	%zp_gather_samples_f132, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_gather_samples_p13, %zp_gather_samples_f95, %zp_gather_samples_f132;
  @!%zp_gather_samples_p13 bra	zp_gather_samples_$Lt_11_15874;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f133, 0F3f800000; //  1
  bra.uni	zp_gather_samples_$LDWendi_fdividef_199_9;

zp_gather_samples_$Lt_11_15874:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f134, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_gather_samples_p14, %zp_gather_samples_f95, %zp_gather_samples_f134;
  @!%zp_gather_samples_p14 bra	zp_gather_samples_$Lt_11_16386;
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f133, 0F00000000; //  0
  bra.uni	zp_gather_samples_$LDWendi_fdividef_199_9;

zp_gather_samples_$Lt_11_16386:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f135, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_gather_samples_f136, %zp_gather_samples_f95, %zp_gather_samples_f135;
  ld.const.f32	%zp_gather_samples_f137, [$object_records+168];
  mul.ftz.f32	%zp_gather_samples_f138, %zp_gather_samples_f137, %zp_gather_samples_f136;
  sin.approx.ftz.f32	%zp_gather_samples_f139, %zp_gather_samples_f138;
  div.approx.ftz.f32	%zp_gather_samples_f140, %zp_gather_samples_f139, %zp_gather_samples_f138;
  sin.approx.ftz.f32	%zp_gather_samples_f141, %zp_gather_samples_f136;
  div.approx.ftz.f32	%zp_gather_samples_f142, %zp_gather_samples_f141, %zp_gather_samples_f136;
  mul.ftz.f32	%zp_gather_samples_f133, %zp_gather_samples_f140, %zp_gather_samples_f142;

zp_gather_samples_$LDWendi_fdividef_199_9:
// This BB is part of VPC 9.
  mul.ftz.f32	%zp_gather_samples_f37, %zp_gather_samples_f133, %zp_gather_samples_f122;
  bra.uni	zp_gather_samples_$LDWendi_expf_199_1;

zp_gather_samples_$Lt_11_2050:
// This BB is part of VPC 9.
  mov.f32	%zp_gather_samples_f37, 0F3f800000; //  1

zp_gather_samples_$LDWendi_expf_199_1:
// This BB is part of VPC 9.
  add.u32	%zp_gather_samples_r76, $object_records, 192;
  // Dead code: mov.u32	%_r77, %_r76;
  mov.u32	%zp_gather_samples_r78, 2;
  // Dead code: mov.u32	%_r79, %_r78;
  mov.u32	%zp_gather_samples_r80, 12;
  // Dead code: mov.u32	%_r81, %_r80;
  // Dead code: mov.u32	%_r82, %_r15;
  // Dead code: mov.u32	%_r83, %_r27;
  mov.u32	%zp_gather_samples_r84, 0;
  // Dead code: mov.u32	%_r85, %_r84;
  // Dead code: mov.u32	%_r86, 0;
  // Dead code: mov.u32	%_r87, %_r86;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr12, [%zp_gather_samples_r76];
  add.u32	$record_address12, $record_ptr12, $object_records;
  ld.const.u32	$buffer_address28, [$record_address12];
  ld.const.u32	$size18, [$record_address12+4];
  setp.ge.u32	$oob17, %zp_gather_samples_r15, $size18;
  ld.const.u32	$sz_x17, [$record_address12+4];
  ld.const.u32	$sz_y17, [$record_address12+8];
  mov.u32	$sz_z17, 3735927486;
  @$oob17 mov.u32	$exception_detail0, $buffer_address28;
  @$oob17 mov.b32	$exception_detail1, %zp_gather_samples_r78;
  @$oob17 mov.u32	$exception_detail2, $sz_x17;
  @$oob17 mov.u32	$exception_detail3, $sz_y17;
  @$oob17 mov.u32	$exception_detail4, $sz_z17;
  @$oob17 mov.b32	$exception_detail5, %zp_gather_samples_r80;
  @$oob17 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob17 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob17 mov.b32	$exception_detail8, %zp_gather_samples_r84;
  @$oob17 mov.u32	$current_instance, 1021;
  @$oob17 bra	$stack_overflow;
// This BB is part of VPC 9.
  mul.lo.u32	$offset18, %zp_gather_samples_r15, 12;
  add.u32	$buffer_address29, $buffer_address28, $offset18;
  ld.const.u32	$size19, [$record_address12+8];
  setp.ge.u32	$oob18, %zp_gather_samples_r27, $size19;
  ld.const.u32	$sz_x18, [$record_address12+4];
  ld.const.u32	$sz_y18, [$record_address12+8];
  mov.u32	$sz_z18, 3735927486;
  @$oob18 mov.u32	$exception_detail0, $buffer_address29;
  @$oob18 mov.b32	$exception_detail1, %zp_gather_samples_r78;
  @$oob18 mov.u32	$exception_detail2, $sz_x18;
  @$oob18 mov.u32	$exception_detail3, $sz_y18;
  @$oob18 mov.u32	$exception_detail4, $sz_z18;
  @$oob18 mov.b32	$exception_detail5, %zp_gather_samples_r80;
  @$oob18 mov.b32	$exception_detail6, %zp_gather_samples_r15;
  @$oob18 mov.b32	$exception_detail7, %zp_gather_samples_r27;
  @$oob18 mov.b32	$exception_detail8, %zp_gather_samples_r84;
  @$oob18 mov.u32	$current_instance, 1021;
  @$oob18 bra	$stack_overflow;
// This BB is part of VPC 9.
  ld.const.u32	$stride6, [$record_address12+16];
  mul.lo.u32	$offset19, %zp_gather_samples_r27, $stride6;
  add.u32	$buffer_address30, $buffer_address29, $offset19;
  cvta.global.u32	%zp_gather_samples_r88, $buffer_address30;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r46, %_r88;
  // Dead code: mov.s32	%_r89, %_r88;
  ld.f32	%zp_gather_samples_f143, [%zp_gather_samples_r88+0];
  fma.rn.ftz.f32	%zp_gather_samples_f15, %zp_gather_samples_f143, %zp_gather_samples_f37, %zp_gather_samples_f15;
  add.ftz.f32	%zp_gather_samples_f16, %zp_gather_samples_f37, %zp_gather_samples_f16;
  mov.s32	%zp_gather_samples_r90, %zp_gather_samples_r27;
  sub.u32	%zp_gather_samples_r27, %zp_gather_samples_r27, 1;
  setp.ge.u32	%zp_gather_samples_p15, %zp_gather_samples_r90, %zp_gather_samples_r9;
  @%zp_gather_samples_p15 bra	zp_gather_samples_$Lt_11_14082;

zp_gather_samplespostbody0:
// This BB is part of VPC 9.

zp_gather_samples_$Lt_11_13570:
// This BB is part of VPC 9.
  mov.s32	%zp_gather_samples_r91, %zp_gather_samples_r15;
  sub.u32	%zp_gather_samples_r15, %zp_gather_samples_r15, 1;
  setp.le.u32	%zp_gather_samples_p16, %zp_gather_samples_r6, %zp_gather_samples_r91;
  @%zp_gather_samples_p16 bra	zp_gather_samples_$Lt_11_13314;
// This BB is part of VPC 9.
  mov.b32	%zp_gather_samples_r2, $rayIndex_x;
  mov.b32	%zp_gather_samples_r3, $rayIndex_y;

zp_gather_samples_$Lt_11_12802:
// This BB is part of VPC 9.
  add.u32	%zp_gather_samples_r92, $object_records, 212;
  // Dead code: mov.u32	%_r93, %_r92;
  mov.u32	%zp_gather_samples_r94, 2;
  // Dead code: mov.u32	%_r95, %_r94;
  mov.u32	%zp_gather_samples_r96, 4;
  // Dead code: mov.u32	%_r97, %_r96;
  // Dead code: mov.u32	%_r98, %_r2;
  // Dead code: mov.u32	%_r99, %_r3;
  mov.u32	%zp_gather_samples_r100, 0;
  // Dead code: mov.u32	%_r101, %_r100;
  // Dead code: mov.u32	%_r102, 0;
  // Dead code: mov.u32	%_r103, %_r102;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr13, [%zp_gather_samples_r92];
  add.u32	$record_address13, $record_ptr13, $object_records;
  ld.const.u32	$buffer_address31, [$record_address13];
  ld.const.u32	$size20, [$record_address13+4];
  setp.ge.u32	$oob19, %zp_gather_samples_r2, $size20;
  ld.const.u32	$sz_x19, [$record_address13+4];
  ld.const.u32	$sz_y19, [$record_address13+8];
  mov.u32	$sz_z19, 3735927486;
  @$oob19 mov.u32	$exception_detail0, $buffer_address31;
  @$oob19 mov.b32	$exception_detail1, %zp_gather_samples_r94;
  @$oob19 mov.u32	$exception_detail2, $sz_x19;
  @$oob19 mov.u32	$exception_detail3, $sz_y19;
  @$oob19 mov.u32	$exception_detail4, $sz_z19;
  @$oob19 mov.b32	$exception_detail5, %zp_gather_samples_r96;
  @$oob19 mov.b32	$exception_detail6, %zp_gather_samples_r2;
  @$oob19 mov.b32	$exception_detail7, %zp_gather_samples_r3;
  @$oob19 mov.b32	$exception_detail8, %zp_gather_samples_r100;
  @$oob19 mov.u32	$current_instance, 1021;
  @$oob19 bra	$stack_overflow;
// This BB is part of VPC 9.
  mul.lo.u32	$offset20, %zp_gather_samples_r2, 4;
  add.u32	$buffer_address32, $buffer_address31, $offset20;
  ld.const.u32	$size21, [$record_address13+8];
  setp.ge.u32	$oob20, %zp_gather_samples_r3, $size21;
  ld.const.u32	$sz_x20, [$record_address13+4];
  ld.const.u32	$sz_y20, [$record_address13+8];
  mov.u32	$sz_z20, 3735927486;
  @$oob20 mov.u32	$exception_detail0, $buffer_address32;
  @$oob20 mov.b32	$exception_detail1, %zp_gather_samples_r94;
  @$oob20 mov.u32	$exception_detail2, $sz_x20;
  @$oob20 mov.u32	$exception_detail3, $sz_y20;
  @$oob20 mov.u32	$exception_detail4, $sz_z20;
  @$oob20 mov.b32	$exception_detail5, %zp_gather_samples_r96;
  @$oob20 mov.b32	$exception_detail6, %zp_gather_samples_r2;
  @$oob20 mov.b32	$exception_detail7, %zp_gather_samples_r3;
  @$oob20 mov.b32	$exception_detail8, %zp_gather_samples_r100;
  @$oob20 mov.u32	$current_instance, 1021;
  @$oob20 bra	$stack_overflow;
// This BB is part of VPC 9.
  ld.const.u32	$stride7, [$record_address13+16];
  mul.lo.u32	$offset21, %zp_gather_samples_r3, $stride7;
  add.u32	$buffer_address33, $buffer_address32, $offset21;
  cvta.global.u32	%zp_gather_samples_r104, $buffer_address33;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r105, %_r104;
  // Dead code: mov.s32	%_r106, %_r104;
  div.approx.ftz.f32	%zp_gather_samples_f144, %zp_gather_samples_f15, %zp_gather_samples_f16;
  cvt.ftz.sat.f32.f32	%zp_gather_samples_f145, %zp_gather_samples_f144;
  mov.f32	%zp_gather_samples_f146, 0F437ffd71; //  255.99
  mul.ftz.f32	%zp_gather_samples_f147, %zp_gather_samples_f145, %zp_gather_samples_f146;
  cvt.rzi.ftz.sat.u32.f32	%zp_gather_samples_r107, %zp_gather_samples_f147;
  // Dead code: mov.s32	%_r108, %_r107;
  mov.u32	%zp_gather_samples_r109, 255;
  st.v4.u8	[%zp_gather_samples_r104+0], {%zp_gather_samples_r107, %zp_gather_samples_r107, %zp_gather_samples_r107, %zp_gather_samples_r109};
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_scatter_samples"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc10:
// This BB is part of VPC 10.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  mov.s32	%zp_scatter_samples_r1, 0;
  ld.const.u32	%zp_scatter_samples_r2, [$object_records+216];
  mov.u32	%zp_scatter_samples_r3, 0;
  setp.eq.u32	%zp_scatter_samples_p1, %zp_scatter_samples_r2, %zp_scatter_samples_r3;
  @%zp_scatter_samples_p1 bra	zp_scatter_samples_$Lt_13_31234;
  bra.uni	zp_scatter_samplespreheader1;

zp_scatter_samples_$Lt_13_31746:
// This BB is part of VPC 10.
  mov.s32	%zp_scatter_samples_r4, 0;
  mov.u32	%zp_scatter_samples_r5, 0;
  setp.eq.u32	%zp_scatter_samples_p2, %zp_scatter_samples_r2, %zp_scatter_samples_r5;
  @%zp_scatter_samples_p2 bra	zp_scatter_samples_$Lt_13_32002;
  bra.uni	zp_scatter_samplespreheader0;

zp_scatter_samplespreheader1:
// This BB is part of VPC 10.
  bra.uni	zp_scatter_samples_$Lt_13_31746;

zp_scatter_samples_$Lt_13_32514:
// This BB is part of VPC 10.
  // Dead code: mov.b32	%_r6, $rayIndex_x;
  // Dead code: mov.b32	%_r7, $rayIndex_y;
  mul.lo.u32	%zp_scatter_samples_r8, $rayIndex_x, %zp_scatter_samples_r2;
  cvt.rn.f32.u32	%zp_scatter_samples_f1, %zp_scatter_samples_r2;
  add.u32	%zp_scatter_samples_r9, %zp_scatter_samples_r1, %zp_scatter_samples_r8;
  cvt.rn.f32.u32	%zp_scatter_samples_f2, %zp_scatter_samples_r9;
  mov.f32	%zp_scatter_samples_f3, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f4, %zp_scatter_samples_f2, %zp_scatter_samples_f3;
  div.approx.ftz.f32	%zp_scatter_samples_f5, %zp_scatter_samples_f4, %zp_scatter_samples_f1;
  mul.lo.u32	%zp_scatter_samples_r10, $rayIndex_y, %zp_scatter_samples_r2;
  add.u32	%zp_scatter_samples_r11, %zp_scatter_samples_r4, %zp_scatter_samples_r10;
  cvt.rn.f32.u32	%zp_scatter_samples_f6, %zp_scatter_samples_r11;
  mov.f32	%zp_scatter_samples_f7, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f8, %zp_scatter_samples_f6, %zp_scatter_samples_f7;
  div.approx.ftz.f32	%zp_scatter_samples_f9, %zp_scatter_samples_f8, %zp_scatter_samples_f1;
  ld.const.s32	%zp_scatter_samples_r12, [$object_records+208];
  mov.u32	%zp_scatter_samples_r13, 0;
  setp.ne.s32	%zp_scatter_samples_p3, %zp_scatter_samples_r12, %zp_scatter_samples_r13;
  @%zp_scatter_samples_p3 bra	zp_scatter_samples_$Lt_13_33026;
  bra.uni	$zp_scatter_samples_successor_0;

zp_scatter_samplespreheader0:
// This BB is part of VPC 10.
  bra.uni	zp_scatter_samples_$Lt_13_32514;

$zp_scatter_samples_successor_0:
// This BB is part of VPC 10.
  ld.const.u32	%zp_scatter_samples_r14, [$object_records+160];
  ld.const.u32	%zp_scatter_samples_r15, [$object_records+164];
  cvt.rn.f32.u32	%zp_scatter_samples_f10, %zp_scatter_samples_r14;
  cvt.rn.f32.u32	%zp_scatter_samples_f11, %zp_scatter_samples_r15;
  div.approx.ftz.f32	%zp_scatter_samples_f12, %zp_scatter_samples_f5, %zp_scatter_samples_f10;
  div.approx.ftz.f32	%zp_scatter_samples_f13, %zp_scatter_samples_f9, %zp_scatter_samples_f11;
  mul.ftz.f32	%zp_scatter_samples_f14, %zp_scatter_samples_f12, %zp_scatter_samples_f12;
  fma.rn.ftz.f32	%zp_scatter_samples_f15, %zp_scatter_samples_f13, %zp_scatter_samples_f13, %zp_scatter_samples_f14;
  sqrt.approx.ftz.f32	%zp_scatter_samples_f16, %zp_scatter_samples_f15;
  mov.f32	%zp_scatter_samples_f17, 0F44fa0000; //  2000
  mul.ftz.f32	%zp_scatter_samples_f18, %zp_scatter_samples_f16, %zp_scatter_samples_f17;
  mul.ftz.f32	%zp_scatter_samples_f19, %zp_scatter_samples_f16, %zp_scatter_samples_f18;
  cos.approx.ftz.f32	%zp_scatter_samples_f20, %zp_scatter_samples_f19;
  mov.f32	%zp_scatter_samples_f21, 0F3f800000; //  1
  add.ftz.f32	%zp_scatter_samples_f22, %zp_scatter_samples_f20, %zp_scatter_samples_f21;
  mov.f32	%zp_scatter_samples_f23, 0F40000000; //  2
  div.approx.ftz.f32	%zp_scatter_samples_f24, %zp_scatter_samples_f22, %zp_scatter_samples_f23;
  bra.uni	zp_scatter_samples_$LDWendi__Z9zoneplate6float2_201_35;

zp_scatter_samples_$Lt_13_33026:
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r16, 1;
  setp.ne.s32	%zp_scatter_samples_p4, %zp_scatter_samples_r12, %zp_scatter_samples_r16;
  @%zp_scatter_samples_p4 bra	zp_scatter_samples_$Lt_13_32770;
// This BB is part of VPC 10.
  ld.const.f32	%zp_scatter_samples_f25, [$object_records+204];
  mov.f32	%zp_scatter_samples_f26, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_scatter_samples_f27, %zp_scatter_samples_f25, %zp_scatter_samples_f26;
  ld.const.s32	%zp_scatter_samples_r17, [$object_records+232];
  cvt.rn.f32.s32	%zp_scatter_samples_f28, %zp_scatter_samples_r17;
  mov.f32	%zp_scatter_samples_f29, 0F43340000; //  180
  div.approx.ftz.f32	%zp_scatter_samples_f30, %zp_scatter_samples_f27, %zp_scatter_samples_f29;
  cos.approx.ftz.f32	%zp_scatter_samples_f31, %zp_scatter_samples_f30;
  sin.approx.ftz.f32	%zp_scatter_samples_f32, %zp_scatter_samples_f30;
  mul.ftz.f32	%zp_scatter_samples_f33, %zp_scatter_samples_f31, %zp_scatter_samples_f5;
  fma.rn.ftz.f32	%zp_scatter_samples_f34, %zp_scatter_samples_f32, %zp_scatter_samples_f9, %zp_scatter_samples_f33;
  div.approx.ftz.f32	%zp_scatter_samples_f35, %zp_scatter_samples_f34, %zp_scatter_samples_f28;
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f36, %zp_scatter_samples_f35;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r18, %zp_scatter_samples_f36;
  abs.s32	%zp_scatter_samples_r19, %zp_scatter_samples_r18;
  mul.ftz.f32	%zp_scatter_samples_f37, %zp_scatter_samples_f32, %zp_scatter_samples_f5;
  mul.ftz.f32	%zp_scatter_samples_f38, %zp_scatter_samples_f31, %zp_scatter_samples_f9;
  sub.ftz.f32	%zp_scatter_samples_f39, %zp_scatter_samples_f38, %zp_scatter_samples_f37;
  div.approx.ftz.f32	%zp_scatter_samples_f40, %zp_scatter_samples_f39, %zp_scatter_samples_f28;
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f41, %zp_scatter_samples_f40;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r20, %zp_scatter_samples_f41;
  abs.s32	%zp_scatter_samples_r21, %zp_scatter_samples_r20;
  shr.s32	%zp_scatter_samples_r22, %zp_scatter_samples_r21, 31;
  mov.s32	%zp_scatter_samples_r23, 1;
  and.b32	%zp_scatter_samples_r24, %zp_scatter_samples_r22, %zp_scatter_samples_r23;
  add.s32	%zp_scatter_samples_r25, %zp_scatter_samples_r24, %zp_scatter_samples_r21;
  shr.s32	%zp_scatter_samples_r26, %zp_scatter_samples_r25, 1;
  mul.lo.s32	%zp_scatter_samples_r27, %zp_scatter_samples_r26, 2;
  sub.s32	%zp_scatter_samples_r28, %zp_scatter_samples_r21, %zp_scatter_samples_r27;
  shr.s32	%zp_scatter_samples_r29, %zp_scatter_samples_r19, 31;
  mov.s32	%zp_scatter_samples_r30, 1;
  and.b32	%zp_scatter_samples_r31, %zp_scatter_samples_r29, %zp_scatter_samples_r30;
  add.s32	%zp_scatter_samples_r32, %zp_scatter_samples_r31, %zp_scatter_samples_r19;
  shr.s32	%zp_scatter_samples_r33, %zp_scatter_samples_r32, 1;
  mul.lo.s32	%zp_scatter_samples_r34, %zp_scatter_samples_r33, 2;
  sub.s32	%zp_scatter_samples_r35, %zp_scatter_samples_r19, %zp_scatter_samples_r34;
  setp.ne.s32	%zp_scatter_samples_p5, %zp_scatter_samples_r28, %zp_scatter_samples_r35;
  @%zp_scatter_samples_p5 bra	zp_scatter_samples_$Lt_13_33794;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f42, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_36;

zp_scatter_samples_$Lt_13_33794:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f42, 0F00000000; //  0

zp_scatter_samples_$LDWendi_fdividef_201_36:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f24, %zp_scatter_samples_f42;
  bra.uni	zp_scatter_samples_$LDWendi__Z9zoneplate6float2_201_35;

zp_scatter_samples_$Lt_13_32770:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f24, 0F00000000; //  0

zp_scatter_samples_$LDWendi__Z9zoneplate6float2_201_35:
// This BB is part of VPC 10.
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f43, %zp_scatter_samples_f5;
  setp.ftz.eq.f32	%zp_scatter_samples_p6, %zp_scatter_samples_f43, %zp_scatter_samples_f5;
  @%zp_scatter_samples_p6 bra	zp_scatter_samples_$L_13_30978;
// This BB is part of VPC 10.
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f44, %zp_scatter_samples_f9;
  setp.ftz.eq.f32	%zp_scatter_samples_p7, %zp_scatter_samples_f44, %zp_scatter_samples_f9;
  @!%zp_scatter_samples_p7 bra	zp_scatter_samples_$L_13_30722;

zp_scatter_samples_$L_13_30978:
// This BB is part of VPC 10.
  mov.s32	%zp_scatter_samples_r36, 1;
  bra.uni	zp_scatter_samples_$L_13_30466;

zp_scatter_samples_$L_13_30722:
// This BB is part of VPC 10.
  mov.s32	%zp_scatter_samples_r36, 0;

zp_scatter_samples_$L_13_30466:
// This BB is part of VPC 10.
  ld.const.f32	%zp_scatter_samples_f45, [$object_records+180];
  mov.f32	%zp_scatter_samples_f46, 0F3f000000; //  0.5
  setp.ftz.gt.f32	%zp_scatter_samples_p8, %zp_scatter_samples_f45, %zp_scatter_samples_f46;
  selp.s32	%zp_scatter_samples_r37, 0, 1, %zp_scatter_samples_p8;
  cvt.s8.s32	%zp_scatter_samples_r38, %zp_scatter_samples_r36;
  mov.s32	%zp_scatter_samples_r39, 0;
  set.eq.u32.s32	%zp_scatter_samples_r40, %zp_scatter_samples_r38, %zp_scatter_samples_r39;
  neg.s32	%zp_scatter_samples_r41, %zp_scatter_samples_r40;
  and.b32	%zp_scatter_samples_r42, %zp_scatter_samples_r37, %zp_scatter_samples_r41;
  mov.u32	%zp_scatter_samples_r43, 0;
  setp.eq.s32	%zp_scatter_samples_p9, %zp_scatter_samples_r42, %zp_scatter_samples_r43;
  @%zp_scatter_samples_p9 bra	zp_scatter_samples_$Lt_13_34562;
// This BB is part of VPC 10.
  cvt.rzi.ftz.sat.u32.f32	%zp_scatter_samples_r44, %zp_scatter_samples_f43;
  // Dead code: mov.s32	%_r45, %_r44;
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f47, %zp_scatter_samples_f9;
  cvt.rzi.ftz.sat.u32.f32	%zp_scatter_samples_r46, %zp_scatter_samples_f47;
  // Dead code: mov.s32	%_r47, %_r46;
  cvt.rn.f32.u32	%zp_scatter_samples_f48, %zp_scatter_samples_r44;
  mov.f32	%zp_scatter_samples_f49, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f50, %zp_scatter_samples_f48, %zp_scatter_samples_f49;
  sub.ftz.f32	%zp_scatter_samples_f51, %zp_scatter_samples_f5, %zp_scatter_samples_f50;
  cvt.rn.f32.u32	%zp_scatter_samples_f52, %zp_scatter_samples_r46;
  mov.f32	%zp_scatter_samples_f53, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f54, %zp_scatter_samples_f52, %zp_scatter_samples_f53;
  sub.ftz.f32	%zp_scatter_samples_f55, %zp_scatter_samples_f9, %zp_scatter_samples_f54;
  abs.ftz.f32	%zp_scatter_samples_f56, %zp_scatter_samples_f51;
  abs.ftz.f32	%zp_scatter_samples_f57, %zp_scatter_samples_f55;
  set.ftz.gt.u32.f32	%zp_scatter_samples_r48, %zp_scatter_samples_f56, %zp_scatter_samples_f45;
  neg.s32	%zp_scatter_samples_r49, %zp_scatter_samples_r48;
  set.ftz.gt.u32.f32	%zp_scatter_samples_r50, %zp_scatter_samples_f57, %zp_scatter_samples_f45;
  neg.s32	%zp_scatter_samples_r51, %zp_scatter_samples_r50;
  or.b32	%zp_scatter_samples_r52, %zp_scatter_samples_r49, %zp_scatter_samples_r51;
  mov.u32	%zp_scatter_samples_r53, 0;
  setp.eq.s32	%zp_scatter_samples_p10, %zp_scatter_samples_r52, %zp_scatter_samples_r53;
  @%zp_scatter_samples_p10 bra	zp_scatter_samples_$Lt_13_34818;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f58, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_34818:
// This BB is part of VPC 10.
  ld.const.s32	%zp_scatter_samples_r54, [$object_records+200];
  mov.u32	%zp_scatter_samples_r55, 0;
  setp.eq.s32	%zp_scatter_samples_p11, %zp_scatter_samples_r54, %zp_scatter_samples_r55;
  @%zp_scatter_samples_p11 bra	zp_scatter_samples_$Lt_13_4866;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r56, 1;
  setp.eq.s32	%zp_scatter_samples_p12, %zp_scatter_samples_r54, %zp_scatter_samples_r56;
  @%zp_scatter_samples_p12 bra	zp_scatter_samples_$Lt_13_5122;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r57, 2;
  setp.eq.s32	%zp_scatter_samples_p13, %zp_scatter_samples_r54, %zp_scatter_samples_r57;
  @%zp_scatter_samples_p13 bra	zp_scatter_samples_$Lt_13_5378;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r58, 3;
  setp.eq.s32	%zp_scatter_samples_p14, %zp_scatter_samples_r54, %zp_scatter_samples_r58;
  @%zp_scatter_samples_p14 bra	zp_scatter_samples_$Lt_13_5634;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r59, 4;
  setp.eq.s32	%zp_scatter_samples_p15, %zp_scatter_samples_r54, %zp_scatter_samples_r59;
  @%zp_scatter_samples_p15 bra	zp_scatter_samples_$Lt_13_5890;
// This BB is part of VPC 10.
  bra.uni	zp_scatter_samples_$Lt_13_6402;

zp_scatter_samples_$Lt_13_4866:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f58, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_5122:
// This BB is part of VPC 10.
  sub.ftz.f32	%zp_scatter_samples_f59, %zp_scatter_samples_f45, %zp_scatter_samples_f56;
  mov.f32	%zp_scatter_samples_f60, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f61, %zp_scatter_samples_f59, %zp_scatter_samples_f60;
  sub.ftz.f32	%zp_scatter_samples_f62, %zp_scatter_samples_f45, %zp_scatter_samples_f57;
  mov.f32	%zp_scatter_samples_f63, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f64, %zp_scatter_samples_f62, %zp_scatter_samples_f63;
  mul.ftz.f32	%zp_scatter_samples_f58, %zp_scatter_samples_f61, %zp_scatter_samples_f64;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_5378:
// This BB is part of VPC 10.
  ld.const.f32	%zp_scatter_samples_f65, [$object_records+220];
  mul.ftz.f32	%zp_scatter_samples_f66, %zp_scatter_samples_f65, %zp_scatter_samples_f45;
  mul.ftz.f32	%zp_scatter_samples_f67, %zp_scatter_samples_f66, %zp_scatter_samples_f45;
  neg.ftz.f32	%zp_scatter_samples_f68, %zp_scatter_samples_f67;
  mov.f32	%zp_scatter_samples_f69, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f70, %zp_scatter_samples_f68, %zp_scatter_samples_f69;
  ex2.approx.ftz.f32	%zp_scatter_samples_f71, %zp_scatter_samples_f70;
  mul.ftz.f32	%zp_scatter_samples_f72, %zp_scatter_samples_f56, %zp_scatter_samples_f65;
  mul.ftz.f32	%zp_scatter_samples_f73, %zp_scatter_samples_f56, %zp_scatter_samples_f72;
  neg.ftz.f32	%zp_scatter_samples_f74, %zp_scatter_samples_f73;
  mov.f32	%zp_scatter_samples_f75, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f76, %zp_scatter_samples_f74, %zp_scatter_samples_f75;
  ex2.approx.ftz.f32	%zp_scatter_samples_f77, %zp_scatter_samples_f76;
  sub.ftz.f32	%zp_scatter_samples_f78, %zp_scatter_samples_f77, %zp_scatter_samples_f71;
  mov.f32	%zp_scatter_samples_f79, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f80, %zp_scatter_samples_f78, %zp_scatter_samples_f79;
  mul.ftz.f32	%zp_scatter_samples_f81, %zp_scatter_samples_f57, %zp_scatter_samples_f65;
  mul.ftz.f32	%zp_scatter_samples_f82, %zp_scatter_samples_f57, %zp_scatter_samples_f81;
  neg.ftz.f32	%zp_scatter_samples_f83, %zp_scatter_samples_f82;
  mov.f32	%zp_scatter_samples_f84, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f85, %zp_scatter_samples_f83, %zp_scatter_samples_f84;
  ex2.approx.ftz.f32	%zp_scatter_samples_f86, %zp_scatter_samples_f85;
  sub.ftz.f32	%zp_scatter_samples_f87, %zp_scatter_samples_f86, %zp_scatter_samples_f71;
  mov.f32	%zp_scatter_samples_f88, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f89, %zp_scatter_samples_f87, %zp_scatter_samples_f88;
  mul.ftz.f32	%zp_scatter_samples_f58, %zp_scatter_samples_f80, %zp_scatter_samples_f89;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_5634:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f90, %zp_scatter_samples_f56, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f91, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p16, %zp_scatter_samples_f90, %zp_scatter_samples_f91;
  @!%zp_scatter_samples_p16 bra	zp_scatter_samples_$Lt_13_25090;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f92, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_scatter_samples_f93, %zp_scatter_samples_f90, %zp_scatter_samples_f92;
  mul.ftz.f32	%zp_scatter_samples_f94, %zp_scatter_samples_f90, %zp_scatter_samples_f93;
  mul.ftz.f32	%zp_scatter_samples_f95, %zp_scatter_samples_f90, %zp_scatter_samples_f94;
  mov.f32	%zp_scatter_samples_f96, 0F41400000; //  12
  mul.ftz.f32	%zp_scatter_samples_f97, %zp_scatter_samples_f90, %zp_scatter_samples_f96;
  mul.ftz.f32	%zp_scatter_samples_f98, %zp_scatter_samples_f90, %zp_scatter_samples_f97;
  sub.ftz.f32	%zp_scatter_samples_f99, %zp_scatter_samples_f98, %zp_scatter_samples_f95;
  mov.f32	%zp_scatter_samples_f100, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_scatter_samples_f101, %zp_scatter_samples_f90, %zp_scatter_samples_f100, %zp_scatter_samples_f99;
  mov.f32	%zp_scatter_samples_f102, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_scatter_samples_f103, %zp_scatter_samples_f101, %zp_scatter_samples_f102;
  mov.f32	%zp_scatter_samples_f104, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f105, %zp_scatter_samples_f103, %zp_scatter_samples_f104;
  bra.uni	zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_32;

zp_scatter_samples_$Lt_13_25090:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f106, 0F40e00000; //  7
  mul.ftz.f32	%zp_scatter_samples_f107, %zp_scatter_samples_f90, %zp_scatter_samples_f106;
  mul.ftz.f32	%zp_scatter_samples_f108, %zp_scatter_samples_f90, %zp_scatter_samples_f107;
  mul.ftz.f32	%zp_scatter_samples_f109, %zp_scatter_samples_f90, %zp_scatter_samples_f108;
  mov.f32	%zp_scatter_samples_f110, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_scatter_samples_f111, %zp_scatter_samples_f90, %zp_scatter_samples_f110;
  fma.rn.ftz.f32	%zp_scatter_samples_f112, %zp_scatter_samples_f90, %zp_scatter_samples_f111, %zp_scatter_samples_f109;
  mov.f32	%zp_scatter_samples_f113, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_scatter_samples_f114, %zp_scatter_samples_f112, %zp_scatter_samples_f113;
  mov.f32	%zp_scatter_samples_f115, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f105, %zp_scatter_samples_f114, %zp_scatter_samples_f115;

zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_32:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f116, %zp_scatter_samples_f57, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f117, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p17, %zp_scatter_samples_f116, %zp_scatter_samples_f117;
  @!%zp_scatter_samples_p17 bra	zp_scatter_samples_$Lt_13_25346;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f118, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_scatter_samples_f119, %zp_scatter_samples_f116, %zp_scatter_samples_f118;
  mul.ftz.f32	%zp_scatter_samples_f120, %zp_scatter_samples_f116, %zp_scatter_samples_f119;
  mul.ftz.f32	%zp_scatter_samples_f121, %zp_scatter_samples_f116, %zp_scatter_samples_f120;
  mov.f32	%zp_scatter_samples_f122, 0F41400000; //  12
  mul.ftz.f32	%zp_scatter_samples_f123, %zp_scatter_samples_f116, %zp_scatter_samples_f122;
  mul.ftz.f32	%zp_scatter_samples_f124, %zp_scatter_samples_f116, %zp_scatter_samples_f123;
  sub.ftz.f32	%zp_scatter_samples_f125, %zp_scatter_samples_f124, %zp_scatter_samples_f121;
  mov.f32	%zp_scatter_samples_f126, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_scatter_samples_f127, %zp_scatter_samples_f116, %zp_scatter_samples_f126, %zp_scatter_samples_f125;
  mov.f32	%zp_scatter_samples_f128, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_scatter_samples_f129, %zp_scatter_samples_f127, %zp_scatter_samples_f128;
  mov.f32	%zp_scatter_samples_f130, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f131, %zp_scatter_samples_f129, %zp_scatter_samples_f130;
  bra.uni	zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_30;

zp_scatter_samples_$Lt_13_25346:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f132, 0F40e00000; //  7
  mul.ftz.f32	%zp_scatter_samples_f133, %zp_scatter_samples_f116, %zp_scatter_samples_f132;
  mul.ftz.f32	%zp_scatter_samples_f134, %zp_scatter_samples_f116, %zp_scatter_samples_f133;
  mul.ftz.f32	%zp_scatter_samples_f135, %zp_scatter_samples_f116, %zp_scatter_samples_f134;
  mov.f32	%zp_scatter_samples_f136, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_scatter_samples_f137, %zp_scatter_samples_f116, %zp_scatter_samples_f136;
  fma.rn.ftz.f32	%zp_scatter_samples_f138, %zp_scatter_samples_f116, %zp_scatter_samples_f137, %zp_scatter_samples_f135;
  mov.f32	%zp_scatter_samples_f139, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_scatter_samples_f140, %zp_scatter_samples_f138, %zp_scatter_samples_f139;
  mov.f32	%zp_scatter_samples_f141, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f131, %zp_scatter_samples_f140, %zp_scatter_samples_f141;

zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_30:
// This BB is part of VPC 10.
  mul.ftz.f32	%zp_scatter_samples_f58, %zp_scatter_samples_f131, %zp_scatter_samples_f105;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_5890:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f90, %zp_scatter_samples_f56, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f142, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_scatter_samples_p18, %zp_scatter_samples_f90, %zp_scatter_samples_f142;
  @!%zp_scatter_samples_p18 bra	zp_scatter_samples_$Lt_13_35330;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f143, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_28;

zp_scatter_samples_$Lt_13_35330:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f144, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p19, %zp_scatter_samples_f90, %zp_scatter_samples_f144;
  @!%zp_scatter_samples_p19 bra	zp_scatter_samples_$Lt_13_35842;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f143, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_28;

zp_scatter_samples_$Lt_13_35842:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f145, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_scatter_samples_f146, %zp_scatter_samples_f90, %zp_scatter_samples_f145;
  ld.const.f32	%zp_scatter_samples_f147, [$object_records+168];
  mul.ftz.f32	%zp_scatter_samples_f148, %zp_scatter_samples_f147, %zp_scatter_samples_f146;
  sin.approx.ftz.f32	%zp_scatter_samples_f149, %zp_scatter_samples_f146;
  div.approx.ftz.f32	%zp_scatter_samples_f150, %zp_scatter_samples_f149, %zp_scatter_samples_f146;
  sin.approx.ftz.f32	%zp_scatter_samples_f151, %zp_scatter_samples_f148;
  div.approx.ftz.f32	%zp_scatter_samples_f152, %zp_scatter_samples_f151, %zp_scatter_samples_f148;
  mul.ftz.f32	%zp_scatter_samples_f143, %zp_scatter_samples_f150, %zp_scatter_samples_f152;

zp_scatter_samples_$LDWendi_fdividef_201_28:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f116, %zp_scatter_samples_f57, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f153, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_scatter_samples_p20, %zp_scatter_samples_f116, %zp_scatter_samples_f153;
  @!%zp_scatter_samples_p20 bra	zp_scatter_samples_$Lt_13_36354;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f154, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_26;

zp_scatter_samples_$Lt_13_36354:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f155, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p21, %zp_scatter_samples_f116, %zp_scatter_samples_f155;
  @!%zp_scatter_samples_p21 bra	zp_scatter_samples_$Lt_13_36866;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f154, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_26;

zp_scatter_samples_$Lt_13_36866:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f156, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_scatter_samples_f157, %zp_scatter_samples_f116, %zp_scatter_samples_f156;
  ld.const.f32	%zp_scatter_samples_f158, [$object_records+168];
  mul.ftz.f32	%zp_scatter_samples_f159, %zp_scatter_samples_f158, %zp_scatter_samples_f157;
  sin.approx.ftz.f32	%zp_scatter_samples_f160, %zp_scatter_samples_f157;
  div.approx.ftz.f32	%zp_scatter_samples_f161, %zp_scatter_samples_f160, %zp_scatter_samples_f157;
  sin.approx.ftz.f32	%zp_scatter_samples_f162, %zp_scatter_samples_f159;
  div.approx.ftz.f32	%zp_scatter_samples_f163, %zp_scatter_samples_f162, %zp_scatter_samples_f159;
  mul.ftz.f32	%zp_scatter_samples_f154, %zp_scatter_samples_f161, %zp_scatter_samples_f163;

zp_scatter_samples_$LDWendi_fdividef_201_26:
// This BB is part of VPC 10.
  mul.ftz.f32	%zp_scatter_samples_f58, %zp_scatter_samples_f154, %zp_scatter_samples_f143;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_18;

zp_scatter_samples_$Lt_13_6402:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f58, 0F3f800000; //  1

zp_scatter_samples_$LDWendi_expf_201_18:
// This BB is part of VPC 10.
  add.u32	%zp_scatter_samples_r60, $object_records, 172;
  // Dead code: mov.u32	%_r61, %_r60;
  mov.u32	%zp_scatter_samples_r62, 2;
  // Dead code: mov.u32	%_r63, %_r62;
  mov.u32	%zp_scatter_samples_r64, 4;
  // Dead code: mov.u32	%_r65, %_r64;
  // Dead code: mov.u32	%_r66, %_r44;
  // Dead code: mov.u32	%_r67, %_r46;
  mov.u32	%zp_scatter_samples_r68, 0;
  // Dead code: mov.u32	%_r69, %_r68;
  // Dead code: mov.u32	%_r70, 0;
  // Dead code: mov.u32	%_r71, %_r70;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr14, [%zp_scatter_samples_r60];
  add.u32	$record_address14, $record_ptr14, $object_records;
  ld.const.u32	$buffer_address34, [$record_address14];
  ld.const.u32	$size22, [$record_address14+4];
  setp.ge.u32	$oob21, %zp_scatter_samples_r44, $size22;
  ld.const.u32	$sz_x21, [$record_address14+4];
  ld.const.u32	$sz_y21, [$record_address14+8];
  mov.u32	$sz_z21, 3735927486;
  @$oob21 mov.u32	$exception_detail0, $buffer_address34;
  @$oob21 mov.b32	$exception_detail1, %zp_scatter_samples_r62;
  @$oob21 mov.u32	$exception_detail2, $sz_x21;
  @$oob21 mov.u32	$exception_detail3, $sz_y21;
  @$oob21 mov.u32	$exception_detail4, $sz_z21;
  @$oob21 mov.b32	$exception_detail5, %zp_scatter_samples_r64;
  @$oob21 mov.b32	$exception_detail6, %zp_scatter_samples_r44;
  @$oob21 mov.b32	$exception_detail7, %zp_scatter_samples_r46;
  @$oob21 mov.b32	$exception_detail8, %zp_scatter_samples_r68;
  @$oob21 mov.u32	$current_instance, 1021;
  @$oob21 bra	$stack_overflow;
// This BB is part of VPC 10.
  mul.lo.u32	$offset22, %zp_scatter_samples_r44, 4;
  add.u32	$buffer_address35, $buffer_address34, $offset22;
  ld.const.u32	$size23, [$record_address14+8];
  setp.ge.u32	$oob22, %zp_scatter_samples_r46, $size23;
  ld.const.u32	$sz_x22, [$record_address14+4];
  ld.const.u32	$sz_y22, [$record_address14+8];
  mov.u32	$sz_z22, 3735927486;
  @$oob22 mov.u32	$exception_detail0, $buffer_address35;
  @$oob22 mov.b32	$exception_detail1, %zp_scatter_samples_r62;
  @$oob22 mov.u32	$exception_detail2, $sz_x22;
  @$oob22 mov.u32	$exception_detail3, $sz_y22;
  @$oob22 mov.u32	$exception_detail4, $sz_z22;
  @$oob22 mov.b32	$exception_detail5, %zp_scatter_samples_r64;
  @$oob22 mov.b32	$exception_detail6, %zp_scatter_samples_r44;
  @$oob22 mov.b32	$exception_detail7, %zp_scatter_samples_r46;
  @$oob22 mov.b32	$exception_detail8, %zp_scatter_samples_r68;
  @$oob22 mov.u32	$current_instance, 1021;
  @$oob22 bra	$stack_overflow;
// This BB is part of VPC 10.
  ld.const.u32	$stride8, [$record_address14+16];
  mul.lo.u32	$offset23, %zp_scatter_samples_r46, $stride8;
  add.u32	$buffer_address36, $buffer_address35, $offset23;
  cvta.global.u32	%zp_scatter_samples_r72, $buffer_address36;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r73, %_r72;
  // Dead code: mov.s32	%_r74, %_r72;
  ld.f32	%zp_scatter_samples_f164, [%zp_scatter_samples_r72+0];
  fma.rn.ftz.f32	%zp_scatter_samples_f165, %zp_scatter_samples_f58, %zp_scatter_samples_f24, %zp_scatter_samples_f164;
  st.f32	[%zp_scatter_samples_r72+0], %zp_scatter_samples_f165;
  add.u32	%zp_scatter_samples_r75, $object_records, 176;
  // Dead code: mov.u32	%_r76, %_r75;
  mov.u32	%zp_scatter_samples_r77, 2;
  // Dead code: mov.u32	%_r78, %_r77;
  mov.u32	%zp_scatter_samples_r79, 4;
  // Dead code: mov.u32	%_r80, %_r79;
  // Dead code: mov.u32	%_r81, %_r44;
  // Dead code: mov.u32	%_r82, %_r46;
  mov.u32	%zp_scatter_samples_r83, 0;
  // Dead code: mov.u32	%_r84, %_r83;
  // Dead code: mov.u32	%_r85, 0;
  // Dead code: mov.u32	%_r86, %_r85;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr15, [%zp_scatter_samples_r75];
  add.u32	$record_address15, $record_ptr15, $object_records;
  ld.const.u32	$buffer_address37, [$record_address15];
  ld.const.u32	$size24, [$record_address15+4];
  setp.ge.u32	$oob23, %zp_scatter_samples_r44, $size24;
  ld.const.u32	$sz_x23, [$record_address15+4];
  ld.const.u32	$sz_y23, [$record_address15+8];
  mov.u32	$sz_z23, 3735927486;
  @$oob23 mov.u32	$exception_detail0, $buffer_address37;
  @$oob23 mov.b32	$exception_detail1, %zp_scatter_samples_r77;
  @$oob23 mov.u32	$exception_detail2, $sz_x23;
  @$oob23 mov.u32	$exception_detail3, $sz_y23;
  @$oob23 mov.u32	$exception_detail4, $sz_z23;
  @$oob23 mov.b32	$exception_detail5, %zp_scatter_samples_r79;
  @$oob23 mov.b32	$exception_detail6, %zp_scatter_samples_r44;
  @$oob23 mov.b32	$exception_detail7, %zp_scatter_samples_r46;
  @$oob23 mov.b32	$exception_detail8, %zp_scatter_samples_r83;
  @$oob23 mov.u32	$current_instance, 1021;
  @$oob23 bra	$stack_overflow;
// This BB is part of VPC 10.
  mul.lo.u32	$offset24, %zp_scatter_samples_r44, 4;
  add.u32	$buffer_address38, $buffer_address37, $offset24;
  ld.const.u32	$size25, [$record_address15+8];
  setp.ge.u32	$oob24, %zp_scatter_samples_r46, $size25;
  ld.const.u32	$sz_x24, [$record_address15+4];
  ld.const.u32	$sz_y24, [$record_address15+8];
  mov.u32	$sz_z24, 3735927486;
  @$oob24 mov.u32	$exception_detail0, $buffer_address38;
  @$oob24 mov.b32	$exception_detail1, %zp_scatter_samples_r77;
  @$oob24 mov.u32	$exception_detail2, $sz_x24;
  @$oob24 mov.u32	$exception_detail3, $sz_y24;
  @$oob24 mov.u32	$exception_detail4, $sz_z24;
  @$oob24 mov.b32	$exception_detail5, %zp_scatter_samples_r79;
  @$oob24 mov.b32	$exception_detail6, %zp_scatter_samples_r44;
  @$oob24 mov.b32	$exception_detail7, %zp_scatter_samples_r46;
  @$oob24 mov.b32	$exception_detail8, %zp_scatter_samples_r83;
  @$oob24 mov.u32	$current_instance, 1021;
  @$oob24 bra	$stack_overflow;
// This BB is part of VPC 10.
  ld.const.u32	$stride9, [$record_address15+16];
  mul.lo.u32	$offset25, %zp_scatter_samples_r46, $stride9;
  add.u32	$buffer_address39, $buffer_address38, $offset25;
  cvta.global.u32	%zp_scatter_samples_r87, $buffer_address39;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r73, %_r87;
  // Dead code: mov.s32	%_r88, %_r87;
  ld.f32	%zp_scatter_samples_f166, [%zp_scatter_samples_r87+0];
  add.ftz.f32	%zp_scatter_samples_f167, %zp_scatter_samples_f166, %zp_scatter_samples_f58;
  st.f32	[%zp_scatter_samples_r87+0], %zp_scatter_samples_f167;
  ld.const.s32	%zp_scatter_samples_r2, [$object_records+216];
  bra.uni	zp_scatter_samples_$Lt_13_37378;

zp_scatter_samples_$Lt_13_34562:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f168, 0Fbf000000; //  -0.5
  add.ftz.f32	%zp_scatter_samples_f169, %zp_scatter_samples_f9, %zp_scatter_samples_f168;
  mov.f32	%zp_scatter_samples_f170, 0Fbf000000; //  -0.5
  add.ftz.f32	%zp_scatter_samples_f171, %zp_scatter_samples_f5, %zp_scatter_samples_f170;
  sub.ftz.f32	%zp_scatter_samples_f172, %zp_scatter_samples_f171, %zp_scatter_samples_f45;
  cvt.rpi.ftz.f32.f32	%zp_scatter_samples_f173, %zp_scatter_samples_f172;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r89, %zp_scatter_samples_f173;
  mov.s32	%zp_scatter_samples_r90, 0;
  max.s32	%zp_scatter_samples_r91, %zp_scatter_samples_r89, %zp_scatter_samples_r90;
  add.ftz.f32	%zp_scatter_samples_f174, %zp_scatter_samples_f171, %zp_scatter_samples_f45;
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f175, %zp_scatter_samples_f174;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r92, %zp_scatter_samples_f175;
  ld.const.u32	%zp_scatter_samples_r93, [$object_records+160];
  sub.u32	%zp_scatter_samples_r94, %zp_scatter_samples_r93, 1;
  min.u32	%zp_scatter_samples_r95, %zp_scatter_samples_r92, %zp_scatter_samples_r94;
  sub.ftz.f32	%zp_scatter_samples_f176, %zp_scatter_samples_f169, %zp_scatter_samples_f45;
  cvt.rpi.ftz.f32.f32	%zp_scatter_samples_f177, %zp_scatter_samples_f176;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r96, %zp_scatter_samples_f177;
  mov.s32	%zp_scatter_samples_r97, 0;
  max.s32	%zp_scatter_samples_r98, %zp_scatter_samples_r96, %zp_scatter_samples_r97;
  sub.s32	%zp_scatter_samples_r99, %zp_scatter_samples_r95, 1;
  setp.gt.s32	%zp_scatter_samples_p22, %zp_scatter_samples_r91, %zp_scatter_samples_r95;
  @%zp_scatter_samples_p22 bra	zp_scatter_samples_$Lt_13_37378;
// This BB is part of VPC 10.
  // Dead code: sub.s32	%_r100, %_r99, %_r91;
  // Dead code: add.s32	%_r101, %_r100, 2;
  // Dead code: mov.s32	%_r102, 1;
  // Dead code: max.s32	%_r103, %_r101, %_r102;
  // Dead code: mov.s32	%_r104, %_r103;

zp_scatter_samples_$Lt_13_37890:
// This BB is part of VPC 10.
  ld.const.f32	%zp_scatter_samples_f178, [$object_records+180];
  add.ftz.f32	%zp_scatter_samples_f179, %zp_scatter_samples_f178, %zp_scatter_samples_f169;
  ld.const.u32	%zp_scatter_samples_r105, [$object_records+164];
  sub.u32	%zp_scatter_samples_r106, %zp_scatter_samples_r105, 1;
  cvt.rmi.ftz.f32.f32	%zp_scatter_samples_f180, %zp_scatter_samples_f179;
  cvt.rzi.ftz.sat.s32.f32	%zp_scatter_samples_r107, %zp_scatter_samples_f180;
  min.u32	%zp_scatter_samples_r108, %zp_scatter_samples_r107, %zp_scatter_samples_r106;
  sub.s32	%zp_scatter_samples_r109, %zp_scatter_samples_r108, 1;
  setp.gt.s32	%zp_scatter_samples_p23, %zp_scatter_samples_r98, %zp_scatter_samples_r108;
  @%zp_scatter_samples_p23 bra	zp_scatter_samples_$Lt_13_38146;
// This BB is part of VPC 10.
  // Dead code: sub.s32	%_r110, %_r109, %_r98;
  // Dead code: add.s32	%_r111, %_r110, 2;
  // Dead code: mov.s32	%_r112, 1;
  // Dead code: max.s32	%_r113, %_r111, %_r112;
  cvt.rn.f32.u32	%zp_scatter_samples_f181, %zp_scatter_samples_r99;
  mov.f32	%zp_scatter_samples_f182, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f183, %zp_scatter_samples_f181, %zp_scatter_samples_f182;
  sub.ftz.f32	%zp_scatter_samples_f184, %zp_scatter_samples_f5, %zp_scatter_samples_f183;
  abs.ftz.f32	%zp_scatter_samples_f185, %zp_scatter_samples_f184;
  // Dead code: mov.s32	%_r114, %_r113;

zp_scatter_samples_$Lt_13_38658:
// This BB is part of VPC 10.
  mov.s32	%zp_scatter_samples_r115, %zp_scatter_samples_r109;
  cvt.rn.f32.u32	%zp_scatter_samples_f186, %zp_scatter_samples_r109;
  mov.f32	%zp_scatter_samples_f187, 0F3f000000; //  0.5
  add.ftz.f32	%zp_scatter_samples_f188, %zp_scatter_samples_f186, %zp_scatter_samples_f187;
  sub.ftz.f32	%zp_scatter_samples_f189, %zp_scatter_samples_f9, %zp_scatter_samples_f188;
  abs.ftz.f32	%zp_scatter_samples_f190, %zp_scatter_samples_f189;
  ld.const.f32	%zp_scatter_samples_f45, [$object_records+180];
  set.ftz.gt.u32.f32	%zp_scatter_samples_r116, %zp_scatter_samples_f190, %zp_scatter_samples_f45;
  neg.s32	%zp_scatter_samples_r117, %zp_scatter_samples_r116;
  set.ftz.gt.u32.f32	%zp_scatter_samples_r118, %zp_scatter_samples_f185, %zp_scatter_samples_f45;
  neg.s32	%zp_scatter_samples_r119, %zp_scatter_samples_r118;
  or.b32	%zp_scatter_samples_r120, %zp_scatter_samples_r117, %zp_scatter_samples_r119;
  mov.u32	%zp_scatter_samples_r121, 0;
  setp.eq.s32	%zp_scatter_samples_p24, %zp_scatter_samples_r120, %zp_scatter_samples_r121;
  @%zp_scatter_samples_p24 bra	zp_scatter_samples_$Lt_13_38914;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f191, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_38914:
// This BB is part of VPC 10.
  ld.const.s32	%zp_scatter_samples_r54, [$object_records+200];
  mov.u32	%zp_scatter_samples_r122, 0;
  setp.eq.s32	%zp_scatter_samples_p25, %zp_scatter_samples_r54, %zp_scatter_samples_r122;
  @%zp_scatter_samples_p25 bra	zp_scatter_samples_$Lt_13_514;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r123, 1;
  setp.eq.s32	%zp_scatter_samples_p26, %zp_scatter_samples_r54, %zp_scatter_samples_r123;
  @%zp_scatter_samples_p26 bra	zp_scatter_samples_$Lt_13_770;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r124, 2;
  setp.eq.s32	%zp_scatter_samples_p27, %zp_scatter_samples_r54, %zp_scatter_samples_r124;
  @%zp_scatter_samples_p27 bra	zp_scatter_samples_$Lt_13_1026;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r125, 3;
  setp.eq.s32	%zp_scatter_samples_p28, %zp_scatter_samples_r54, %zp_scatter_samples_r125;
  @%zp_scatter_samples_p28 bra	zp_scatter_samples_$Lt_13_1282;
// This BB is part of VPC 10.
  mov.u32	%zp_scatter_samples_r126, 4;
  setp.eq.s32	%zp_scatter_samples_p29, %zp_scatter_samples_r54, %zp_scatter_samples_r126;
  @%zp_scatter_samples_p29 bra	zp_scatter_samples_$Lt_13_1538;
// This BB is part of VPC 10.
  bra.uni	zp_scatter_samples_$Lt_13_2050;

zp_scatter_samples_$Lt_13_514:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f191, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_770:
// This BB is part of VPC 10.
  sub.ftz.f32	%zp_scatter_samples_f192, %zp_scatter_samples_f45, %zp_scatter_samples_f190;
  mov.f32	%zp_scatter_samples_f193, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f194, %zp_scatter_samples_f192, %zp_scatter_samples_f193;
  sub.ftz.f32	%zp_scatter_samples_f195, %zp_scatter_samples_f45, %zp_scatter_samples_f185;
  mov.f32	%zp_scatter_samples_f196, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f197, %zp_scatter_samples_f195, %zp_scatter_samples_f196;
  mul.ftz.f32	%zp_scatter_samples_f191, %zp_scatter_samples_f194, %zp_scatter_samples_f197;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_1026:
// This BB is part of VPC 10.
  ld.const.f32	%zp_scatter_samples_f198, [$object_records+220];
  mul.ftz.f32	%zp_scatter_samples_f199, %zp_scatter_samples_f198, %zp_scatter_samples_f45;
  mul.ftz.f32	%zp_scatter_samples_f200, %zp_scatter_samples_f199, %zp_scatter_samples_f45;
  neg.ftz.f32	%zp_scatter_samples_f201, %zp_scatter_samples_f200;
  mov.f32	%zp_scatter_samples_f202, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f203, %zp_scatter_samples_f201, %zp_scatter_samples_f202;
  ex2.approx.ftz.f32	%zp_scatter_samples_f204, %zp_scatter_samples_f203;
  mul.ftz.f32	%zp_scatter_samples_f205, %zp_scatter_samples_f190, %zp_scatter_samples_f198;
  mul.ftz.f32	%zp_scatter_samples_f206, %zp_scatter_samples_f190, %zp_scatter_samples_f205;
  neg.ftz.f32	%zp_scatter_samples_f207, %zp_scatter_samples_f206;
  mov.f32	%zp_scatter_samples_f208, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f209, %zp_scatter_samples_f207, %zp_scatter_samples_f208;
  ex2.approx.ftz.f32	%zp_scatter_samples_f210, %zp_scatter_samples_f209;
  sub.ftz.f32	%zp_scatter_samples_f211, %zp_scatter_samples_f210, %zp_scatter_samples_f204;
  mov.f32	%zp_scatter_samples_f212, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f213, %zp_scatter_samples_f211, %zp_scatter_samples_f212;
  mul.ftz.f32	%zp_scatter_samples_f214, %zp_scatter_samples_f185, %zp_scatter_samples_f198;
  mul.ftz.f32	%zp_scatter_samples_f215, %zp_scatter_samples_f185, %zp_scatter_samples_f214;
  neg.ftz.f32	%zp_scatter_samples_f216, %zp_scatter_samples_f215;
  mov.f32	%zp_scatter_samples_f217, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_scatter_samples_f218, %zp_scatter_samples_f216, %zp_scatter_samples_f217;
  ex2.approx.ftz.f32	%zp_scatter_samples_f219, %zp_scatter_samples_f218;
  sub.ftz.f32	%zp_scatter_samples_f220, %zp_scatter_samples_f219, %zp_scatter_samples_f204;
  mov.f32	%zp_scatter_samples_f221, 0F00000000; //  0
  max.ftz.f32	%zp_scatter_samples_f222, %zp_scatter_samples_f220, %zp_scatter_samples_f221;
  mul.ftz.f32	%zp_scatter_samples_f191, %zp_scatter_samples_f213, %zp_scatter_samples_f222;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_1282:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f223, %zp_scatter_samples_f185, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f224, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p30, %zp_scatter_samples_f223, %zp_scatter_samples_f224;
  @!%zp_scatter_samples_p30 bra	zp_scatter_samples_$Lt_13_27906;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f225, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_scatter_samples_f226, %zp_scatter_samples_f223, %zp_scatter_samples_f225;
  mul.ftz.f32	%zp_scatter_samples_f227, %zp_scatter_samples_f223, %zp_scatter_samples_f226;
  mul.ftz.f32	%zp_scatter_samples_f228, %zp_scatter_samples_f223, %zp_scatter_samples_f227;
  mov.f32	%zp_scatter_samples_f229, 0F41400000; //  12
  mul.ftz.f32	%zp_scatter_samples_f230, %zp_scatter_samples_f223, %zp_scatter_samples_f229;
  mul.ftz.f32	%zp_scatter_samples_f231, %zp_scatter_samples_f223, %zp_scatter_samples_f230;
  sub.ftz.f32	%zp_scatter_samples_f232, %zp_scatter_samples_f231, %zp_scatter_samples_f228;
  mov.f32	%zp_scatter_samples_f233, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_scatter_samples_f234, %zp_scatter_samples_f223, %zp_scatter_samples_f233, %zp_scatter_samples_f232;
  mov.f32	%zp_scatter_samples_f235, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_scatter_samples_f236, %zp_scatter_samples_f234, %zp_scatter_samples_f235;
  mov.f32	%zp_scatter_samples_f237, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f105, %zp_scatter_samples_f236, %zp_scatter_samples_f237;
  bra.uni	zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_15;

zp_scatter_samples_$Lt_13_27906:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f238, 0F40e00000; //  7
  mul.ftz.f32	%zp_scatter_samples_f239, %zp_scatter_samples_f223, %zp_scatter_samples_f238;
  mul.ftz.f32	%zp_scatter_samples_f240, %zp_scatter_samples_f223, %zp_scatter_samples_f239;
  mul.ftz.f32	%zp_scatter_samples_f241, %zp_scatter_samples_f223, %zp_scatter_samples_f240;
  mov.f32	%zp_scatter_samples_f242, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_scatter_samples_f243, %zp_scatter_samples_f223, %zp_scatter_samples_f242;
  fma.rn.ftz.f32	%zp_scatter_samples_f244, %zp_scatter_samples_f223, %zp_scatter_samples_f243, %zp_scatter_samples_f241;
  mov.f32	%zp_scatter_samples_f245, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_scatter_samples_f246, %zp_scatter_samples_f244, %zp_scatter_samples_f245;
  mov.f32	%zp_scatter_samples_f247, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f105, %zp_scatter_samples_f246, %zp_scatter_samples_f247;

zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_15:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f248, %zp_scatter_samples_f190, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f249, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p31, %zp_scatter_samples_f248, %zp_scatter_samples_f249;
  @!%zp_scatter_samples_p31 bra	zp_scatter_samples_$Lt_13_28162;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f250, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_scatter_samples_f251, %zp_scatter_samples_f248, %zp_scatter_samples_f250;
  mul.ftz.f32	%zp_scatter_samples_f252, %zp_scatter_samples_f248, %zp_scatter_samples_f251;
  mul.ftz.f32	%zp_scatter_samples_f253, %zp_scatter_samples_f248, %zp_scatter_samples_f252;
  mov.f32	%zp_scatter_samples_f254, 0F41400000; //  12
  mul.ftz.f32	%zp_scatter_samples_f255, %zp_scatter_samples_f248, %zp_scatter_samples_f254;
  mul.ftz.f32	%zp_scatter_samples_f256, %zp_scatter_samples_f248, %zp_scatter_samples_f255;
  sub.ftz.f32	%zp_scatter_samples_f257, %zp_scatter_samples_f256, %zp_scatter_samples_f253;
  mov.f32	%zp_scatter_samples_f258, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_scatter_samples_f259, %zp_scatter_samples_f248, %zp_scatter_samples_f258, %zp_scatter_samples_f257;
  mov.f32	%zp_scatter_samples_f260, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_scatter_samples_f261, %zp_scatter_samples_f259, %zp_scatter_samples_f260;
  mov.f32	%zp_scatter_samples_f262, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f131, %zp_scatter_samples_f261, %zp_scatter_samples_f262;
  bra.uni	zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_13;

zp_scatter_samples_$Lt_13_28162:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f263, 0F40e00000; //  7
  mul.ftz.f32	%zp_scatter_samples_f264, %zp_scatter_samples_f248, %zp_scatter_samples_f263;
  mul.ftz.f32	%zp_scatter_samples_f265, %zp_scatter_samples_f248, %zp_scatter_samples_f264;
  mul.ftz.f32	%zp_scatter_samples_f266, %zp_scatter_samples_f248, %zp_scatter_samples_f265;
  mov.f32	%zp_scatter_samples_f267, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_scatter_samples_f268, %zp_scatter_samples_f248, %zp_scatter_samples_f267;
  fma.rn.ftz.f32	%zp_scatter_samples_f269, %zp_scatter_samples_f248, %zp_scatter_samples_f268, %zp_scatter_samples_f266;
  mov.f32	%zp_scatter_samples_f270, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_scatter_samples_f271, %zp_scatter_samples_f269, %zp_scatter_samples_f270;
  mov.f32	%zp_scatter_samples_f272, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_scatter_samples_f131, %zp_scatter_samples_f271, %zp_scatter_samples_f272;

zp_scatter_samples_$LDWendi__Z10mitchell1Df_201_13:
// This BB is part of VPC 10.
  mul.ftz.f32	%zp_scatter_samples_f191, %zp_scatter_samples_f131, %zp_scatter_samples_f105;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_1538:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f223, %zp_scatter_samples_f185, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f273, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_scatter_samples_p32, %zp_scatter_samples_f223, %zp_scatter_samples_f273;
  @!%zp_scatter_samples_p32 bra	zp_scatter_samples_$Lt_13_39426;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f143, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_11;

zp_scatter_samples_$Lt_13_39426:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f274, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p33, %zp_scatter_samples_f223, %zp_scatter_samples_f274;
  @!%zp_scatter_samples_p33 bra	zp_scatter_samples_$Lt_13_39938;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f143, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_11;

zp_scatter_samples_$Lt_13_39938:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f275, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_scatter_samples_f276, %zp_scatter_samples_f223, %zp_scatter_samples_f275;
  ld.const.f32	%zp_scatter_samples_f277, [$object_records+168];
  mul.ftz.f32	%zp_scatter_samples_f278, %zp_scatter_samples_f277, %zp_scatter_samples_f276;
  sin.approx.ftz.f32	%zp_scatter_samples_f279, %zp_scatter_samples_f278;
  div.approx.ftz.f32	%zp_scatter_samples_f280, %zp_scatter_samples_f279, %zp_scatter_samples_f278;
  sin.approx.ftz.f32	%zp_scatter_samples_f281, %zp_scatter_samples_f276;
  div.approx.ftz.f32	%zp_scatter_samples_f282, %zp_scatter_samples_f281, %zp_scatter_samples_f276;
  mul.ftz.f32	%zp_scatter_samples_f143, %zp_scatter_samples_f280, %zp_scatter_samples_f282;

zp_scatter_samples_$LDWendi_fdividef_201_11:
// This BB is part of VPC 10.
  div.approx.ftz.f32	%zp_scatter_samples_f248, %zp_scatter_samples_f190, %zp_scatter_samples_f45;
  mov.f32	%zp_scatter_samples_f283, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_scatter_samples_p34, %zp_scatter_samples_f248, %zp_scatter_samples_f283;
  @!%zp_scatter_samples_p34 bra	zp_scatter_samples_$Lt_13_40450;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f154, 0F3f800000; //  1
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_9;

zp_scatter_samples_$Lt_13_40450:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f284, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_scatter_samples_p35, %zp_scatter_samples_f248, %zp_scatter_samples_f284;
  @!%zp_scatter_samples_p35 bra	zp_scatter_samples_$Lt_13_40962;
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f154, 0F00000000; //  0
  bra.uni	zp_scatter_samples_$LDWendi_fdividef_201_9;

zp_scatter_samples_$Lt_13_40962:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f285, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_scatter_samples_f286, %zp_scatter_samples_f248, %zp_scatter_samples_f285;
  ld.const.f32	%zp_scatter_samples_f287, [$object_records+168];
  mul.ftz.f32	%zp_scatter_samples_f288, %zp_scatter_samples_f287, %zp_scatter_samples_f286;
  sin.approx.ftz.f32	%zp_scatter_samples_f289, %zp_scatter_samples_f288;
  div.approx.ftz.f32	%zp_scatter_samples_f290, %zp_scatter_samples_f289, %zp_scatter_samples_f288;
  sin.approx.ftz.f32	%zp_scatter_samples_f291, %zp_scatter_samples_f286;
  div.approx.ftz.f32	%zp_scatter_samples_f292, %zp_scatter_samples_f291, %zp_scatter_samples_f286;
  mul.ftz.f32	%zp_scatter_samples_f154, %zp_scatter_samples_f290, %zp_scatter_samples_f292;

zp_scatter_samples_$LDWendi_fdividef_201_9:
// This BB is part of VPC 10.
  mul.ftz.f32	%zp_scatter_samples_f191, %zp_scatter_samples_f154, %zp_scatter_samples_f143;
  bra.uni	zp_scatter_samples_$LDWendi_expf_201_1;

zp_scatter_samples_$Lt_13_2050:
// This BB is part of VPC 10.
  mov.f32	%zp_scatter_samples_f191, 0F3f800000; //  1

zp_scatter_samples_$LDWendi_expf_201_1:
// This BB is part of VPC 10.
  add.u32	%zp_scatter_samples_r127, $object_records, 172;
  // Dead code: mov.u32	%_r128, %_r127;
  mov.u32	%zp_scatter_samples_r129, 2;
  // Dead code: mov.u32	%_r130, %_r129;
  mov.u32	%zp_scatter_samples_r131, 4;
  // Dead code: mov.u32	%_r132, %_r131;
  // Dead code: mov.u32	%_r133, %_r99;
  // Dead code: mov.u32	%_r134, %_r109;
  mov.u32	%zp_scatter_samples_r135, 0;
  // Dead code: mov.u32	%_r136, %_r135;
  // Dead code: mov.u32	%_r137, 0;
  // Dead code: mov.u32	%_r138, %_r137;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr16, [%zp_scatter_samples_r127];
  add.u32	$record_address16, $record_ptr16, $object_records;
  ld.const.u32	$buffer_address40, [$record_address16];
  ld.const.u32	$size26, [$record_address16+4];
  setp.ge.u32	$oob25, %zp_scatter_samples_r99, $size26;
  ld.const.u32	$sz_x25, [$record_address16+4];
  ld.const.u32	$sz_y25, [$record_address16+8];
  mov.u32	$sz_z25, 3735927486;
  @$oob25 mov.u32	$exception_detail0, $buffer_address40;
  @$oob25 mov.b32	$exception_detail1, %zp_scatter_samples_r129;
  @$oob25 mov.u32	$exception_detail2, $sz_x25;
  @$oob25 mov.u32	$exception_detail3, $sz_y25;
  @$oob25 mov.u32	$exception_detail4, $sz_z25;
  @$oob25 mov.b32	$exception_detail5, %zp_scatter_samples_r131;
  @$oob25 mov.b32	$exception_detail6, %zp_scatter_samples_r99;
  @$oob25 mov.b32	$exception_detail7, %zp_scatter_samples_r109;
  @$oob25 mov.b32	$exception_detail8, %zp_scatter_samples_r135;
  @$oob25 mov.u32	$current_instance, 1021;
  @$oob25 bra	$stack_overflow;
// This BB is part of VPC 10.
  mul.lo.u32	$offset26, %zp_scatter_samples_r99, 4;
  add.u32	$buffer_address41, $buffer_address40, $offset26;
  ld.const.u32	$size27, [$record_address16+8];
  setp.ge.u32	$oob26, %zp_scatter_samples_r109, $size27;
  ld.const.u32	$sz_x26, [$record_address16+4];
  ld.const.u32	$sz_y26, [$record_address16+8];
  mov.u32	$sz_z26, 3735927486;
  @$oob26 mov.u32	$exception_detail0, $buffer_address41;
  @$oob26 mov.b32	$exception_detail1, %zp_scatter_samples_r129;
  @$oob26 mov.u32	$exception_detail2, $sz_x26;
  @$oob26 mov.u32	$exception_detail3, $sz_y26;
  @$oob26 mov.u32	$exception_detail4, $sz_z26;
  @$oob26 mov.b32	$exception_detail5, %zp_scatter_samples_r131;
  @$oob26 mov.b32	$exception_detail6, %zp_scatter_samples_r99;
  @$oob26 mov.b32	$exception_detail7, %zp_scatter_samples_r109;
  @$oob26 mov.b32	$exception_detail8, %zp_scatter_samples_r135;
  @$oob26 mov.u32	$current_instance, 1021;
  @$oob26 bra	$stack_overflow;
// This BB is part of VPC 10.
  ld.const.u32	$stride10, [$record_address16+16];
  mul.lo.u32	$offset27, %zp_scatter_samples_r109, $stride10;
  add.u32	$buffer_address42, $buffer_address41, $offset27;
  cvta.global.u32	%zp_scatter_samples_r139, $buffer_address42;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r73, %_r139;
  // Dead code: mov.s32	%_r140, %_r139;
  mul.ftz.f32	%zp_scatter_samples_f293, %zp_scatter_samples_f191, %zp_scatter_samples_f24;
  atom.add.f32	%zp_scatter_samples_f294, [%zp_scatter_samples_r139], %zp_scatter_samples_f293;
  add.u32	%zp_scatter_samples_r141, $object_records, 176;
  // Dead code: mov.u32	%_r142, %_r141;
  mov.u32	%zp_scatter_samples_r143, 2;
  // Dead code: mov.u32	%_r144, %_r143;
  mov.u32	%zp_scatter_samples_r145, 4;
  // Dead code: mov.u32	%_r146, %_r145;
  // Dead code: mov.u32	%_r147, %_r99;
  // Dead code: mov.u32	%_r148, %_r109;
  mov.u32	%zp_scatter_samples_r149, 0;
  // Dead code: mov.u32	%_r150, %_r149;
  // Dead code: mov.u32	%_r151, 0;
  // Dead code: mov.u32	%_r152, %_r151;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr17, [%zp_scatter_samples_r141];
  add.u32	$record_address17, $record_ptr17, $object_records;
  ld.const.u32	$buffer_address43, [$record_address17];
  ld.const.u32	$size28, [$record_address17+4];
  setp.ge.u32	$oob27, %zp_scatter_samples_r99, $size28;
  ld.const.u32	$sz_x27, [$record_address17+4];
  ld.const.u32	$sz_y27, [$record_address17+8];
  mov.u32	$sz_z27, 3735927486;
  @$oob27 mov.u32	$exception_detail0, $buffer_address43;
  @$oob27 mov.b32	$exception_detail1, %zp_scatter_samples_r143;
  @$oob27 mov.u32	$exception_detail2, $sz_x27;
  @$oob27 mov.u32	$exception_detail3, $sz_y27;
  @$oob27 mov.u32	$exception_detail4, $sz_z27;
  @$oob27 mov.b32	$exception_detail5, %zp_scatter_samples_r145;
  @$oob27 mov.b32	$exception_detail6, %zp_scatter_samples_r99;
  @$oob27 mov.b32	$exception_detail7, %zp_scatter_samples_r109;
  @$oob27 mov.b32	$exception_detail8, %zp_scatter_samples_r149;
  @$oob27 mov.u32	$current_instance, 1021;
  @$oob27 bra	$stack_overflow;
// This BB is part of VPC 10.
  mul.lo.u32	$offset28, %zp_scatter_samples_r99, 4;
  add.u32	$buffer_address44, $buffer_address43, $offset28;
  ld.const.u32	$size29, [$record_address17+8];
  setp.ge.u32	$oob28, %zp_scatter_samples_r109, $size29;
  ld.const.u32	$sz_x28, [$record_address17+4];
  ld.const.u32	$sz_y28, [$record_address17+8];
  mov.u32	$sz_z28, 3735927486;
  @$oob28 mov.u32	$exception_detail0, $buffer_address44;
  @$oob28 mov.b32	$exception_detail1, %zp_scatter_samples_r143;
  @$oob28 mov.u32	$exception_detail2, $sz_x28;
  @$oob28 mov.u32	$exception_detail3, $sz_y28;
  @$oob28 mov.u32	$exception_detail4, $sz_z28;
  @$oob28 mov.b32	$exception_detail5, %zp_scatter_samples_r145;
  @$oob28 mov.b32	$exception_detail6, %zp_scatter_samples_r99;
  @$oob28 mov.b32	$exception_detail7, %zp_scatter_samples_r109;
  @$oob28 mov.b32	$exception_detail8, %zp_scatter_samples_r149;
  @$oob28 mov.u32	$current_instance, 1021;
  @$oob28 bra	$stack_overflow;
// This BB is part of VPC 10.
  ld.const.u32	$stride11, [$record_address17+16];
  mul.lo.u32	$offset29, %zp_scatter_samples_r109, $stride11;
  add.u32	$buffer_address45, $buffer_address44, $offset29;
  cvta.global.u32	%zp_scatter_samples_r153, $buffer_address45;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r73, %_r153;
  // Dead code: mov.s32	%_r154, %_r153;
  atom.add.f32	%zp_scatter_samples_f295, [%zp_scatter_samples_r153], %zp_scatter_samples_f191;
  sub.s32	%zp_scatter_samples_r109, %zp_scatter_samples_r109, 1;
  setp.le.s32	%zp_scatter_samples_p36, %zp_scatter_samples_r98, %zp_scatter_samples_r115;
  @%zp_scatter_samples_p36 bra	zp_scatter_samples_$Lt_13_38658;

zp_scatter_samplespostbody0:
// This BB is part of VPC 10.

zp_scatter_samples_$Lt_13_38146:
// This BB is part of VPC 10.
  mov.s32	%zp_scatter_samples_r155, %zp_scatter_samples_r99;
  sub.s32	%zp_scatter_samples_r99, %zp_scatter_samples_r99, 1;
  setp.le.s32	%zp_scatter_samples_p37, %zp_scatter_samples_r91, %zp_scatter_samples_r155;
  @%zp_scatter_samples_p37 bra	zp_scatter_samples_$Lt_13_37890;
// This BB is part of VPC 10.
  ld.const.s32	%zp_scatter_samples_r2, [$object_records+216];

zp_scatter_samples_$Lt_13_37378:
// This BB is part of VPC 10.
  add.s32	%zp_scatter_samples_r4, %zp_scatter_samples_r4, 1;
  setp.lt.u32	%zp_scatter_samples_p38, %zp_scatter_samples_r4, %zp_scatter_samples_r2;
  @%zp_scatter_samples_p38 bra	zp_scatter_samples_$Lt_13_32514;

zp_scatter_samplespostbody1:
// This BB is part of VPC 10.

zp_scatter_samples_$Lt_13_32002:
// This BB is part of VPC 10.
  add.s32	%zp_scatter_samples_r1, %zp_scatter_samples_r1, 1;
  setp.lt.u32	%zp_scatter_samples_p39, %zp_scatter_samples_r1, %zp_scatter_samples_r2;
  @%zp_scatter_samples_p39 bra	zp_scatter_samples_$Lt_13_31746;

zp_scatter_samplespostbody2:
// This BB is part of VPC 10.

zp_scatter_samples_$Lt_13_31234:
// This BB is part of VPC 10.
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_zero_scatter_buffers"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc11:
// This BB is part of VPC 11.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  add.u32	%zp_zero_scatter_buffers_r1, $object_records, 172;
  // Dead code: mov.u32	%_r2, %_r1;
  mov.u32	%zp_zero_scatter_buffers_r3, 2;
  // Dead code: mov.u32	%_r4, %_r3;
  mov.u32	%zp_zero_scatter_buffers_r5, 4;
  // Dead code: mov.u32	%_r6, %_r5;
  // Dead code: mov.b32	%_r7, $rayIndex_x;
  // Dead code: mov.b32	%_r8, $rayIndex_y;
  // Dead code: mov.u32	%_r9, $rayIndex_x;
  // Dead code: mov.u32	%_r10, $rayIndex_y;
  mov.u32	%zp_zero_scatter_buffers_r11, 0;
  // Dead code: mov.u32	%_r12, %_r11;
  // Dead code: mov.u32	%_r13, 0;
  // Dead code: mov.u32	%_r14, %_r13;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr18, [%zp_zero_scatter_buffers_r1];
  add.u32	$record_address18, $record_ptr18, $object_records;
  ld.const.u32	$buffer_address46, [$record_address18];
  ld.const.u32	$size30, [$record_address18+4];
  setp.ge.u32	$oob29, $rayIndex_x, $size30;
  ld.const.u32	$sz_x29, [$record_address18+4];
  ld.const.u32	$sz_y29, [$record_address18+8];
  mov.u32	$sz_z29, 3735927486;
  @$oob29 mov.u32	$exception_detail0, $buffer_address46;
  @$oob29 mov.b32	$exception_detail1, %zp_zero_scatter_buffers_r3;
  @$oob29 mov.u32	$exception_detail2, $sz_x29;
  @$oob29 mov.u32	$exception_detail3, $sz_y29;
  @$oob29 mov.u32	$exception_detail4, $sz_z29;
  @$oob29 mov.b32	$exception_detail5, %zp_zero_scatter_buffers_r5;
  @$oob29 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob29 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob29 mov.b32	$exception_detail8, %zp_zero_scatter_buffers_r11;
  @$oob29 mov.u32	$current_instance, 1021;
  @$oob29 bra	$stack_overflow;
// This BB is part of VPC 11.
  mul.lo.u32	$offset30, $rayIndex_x, 4;
  add.u32	$buffer_address47, $buffer_address46, $offset30;
  ld.const.u32	$size31, [$record_address18+8];
  setp.ge.u32	$oob30, $rayIndex_y, $size31;
  ld.const.u32	$sz_x30, [$record_address18+4];
  ld.const.u32	$sz_y30, [$record_address18+8];
  mov.u32	$sz_z30, 3735927486;
  @$oob30 mov.u32	$exception_detail0, $buffer_address47;
  @$oob30 mov.b32	$exception_detail1, %zp_zero_scatter_buffers_r3;
  @$oob30 mov.u32	$exception_detail2, $sz_x30;
  @$oob30 mov.u32	$exception_detail3, $sz_y30;
  @$oob30 mov.u32	$exception_detail4, $sz_z30;
  @$oob30 mov.b32	$exception_detail5, %zp_zero_scatter_buffers_r5;
  @$oob30 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob30 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob30 mov.b32	$exception_detail8, %zp_zero_scatter_buffers_r11;
  @$oob30 mov.u32	$current_instance, 1021;
  @$oob30 bra	$stack_overflow;
// This BB is part of VPC 11.
  ld.const.u32	$stride12, [$record_address18+16];
  mul.lo.u32	$offset31, $rayIndex_y, $stride12;
  add.u32	$buffer_address48, $buffer_address47, $offset31;
  cvta.global.u32	%zp_zero_scatter_buffers_r15, $buffer_address48;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r16, %_r15;
  // Dead code: mov.s32	%_r17, %_r15;
  mov.f32	%zp_zero_scatter_buffers_f1, 0F00000000; //  0
  st.f32	[%zp_zero_scatter_buffers_r15+0], %zp_zero_scatter_buffers_f1;
  add.u32	%zp_zero_scatter_buffers_r18, $object_records, 176;
  // Dead code: mov.u32	%_r19, %_r18;
  mov.u32	%zp_zero_scatter_buffers_r20, 2;
  // Dead code: mov.u32	%_r21, %_r20;
  mov.u32	%zp_zero_scatter_buffers_r22, 4;
  // Dead code: mov.u32	%_r23, %_r22;
  // Dead code: mov.b32	%_r24, $rayIndex_x;
  // Dead code: mov.b32	%_r25, $rayIndex_y;
  // Dead code: mov.u32	%_r26, $rayIndex_x;
  // Dead code: mov.u32	%_r27, $rayIndex_y;
  mov.u32	%zp_zero_scatter_buffers_r28, 0;
  // Dead code: mov.u32	%_r29, %_r28;
  // Dead code: mov.u32	%_r30, 0;
  // Dead code: mov.u32	%_r31, %_r30;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr19, [%zp_zero_scatter_buffers_r18];
  add.u32	$record_address19, $record_ptr19, $object_records;
  ld.const.u32	$buffer_address49, [$record_address19];
  ld.const.u32	$size32, [$record_address19+4];
  setp.ge.u32	$oob31, $rayIndex_x, $size32;
  ld.const.u32	$sz_x31, [$record_address19+4];
  ld.const.u32	$sz_y31, [$record_address19+8];
  mov.u32	$sz_z31, 3735927486;
  @$oob31 mov.u32	$exception_detail0, $buffer_address49;
  @$oob31 mov.b32	$exception_detail1, %zp_zero_scatter_buffers_r20;
  @$oob31 mov.u32	$exception_detail2, $sz_x31;
  @$oob31 mov.u32	$exception_detail3, $sz_y31;
  @$oob31 mov.u32	$exception_detail4, $sz_z31;
  @$oob31 mov.b32	$exception_detail5, %zp_zero_scatter_buffers_r22;
  @$oob31 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob31 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob31 mov.b32	$exception_detail8, %zp_zero_scatter_buffers_r28;
  @$oob31 mov.u32	$current_instance, 1021;
  @$oob31 bra	$stack_overflow;
// This BB is part of VPC 11.
  mul.lo.u32	$offset32, $rayIndex_x, 4;
  add.u32	$buffer_address50, $buffer_address49, $offset32;
  ld.const.u32	$size33, [$record_address19+8];
  setp.ge.u32	$oob32, $rayIndex_y, $size33;
  ld.const.u32	$sz_x32, [$record_address19+4];
  ld.const.u32	$sz_y32, [$record_address19+8];
  mov.u32	$sz_z32, 3735927486;
  @$oob32 mov.u32	$exception_detail0, $buffer_address50;
  @$oob32 mov.b32	$exception_detail1, %zp_zero_scatter_buffers_r20;
  @$oob32 mov.u32	$exception_detail2, $sz_x32;
  @$oob32 mov.u32	$exception_detail3, $sz_y32;
  @$oob32 mov.u32	$exception_detail4, $sz_z32;
  @$oob32 mov.b32	$exception_detail5, %zp_zero_scatter_buffers_r22;
  @$oob32 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob32 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob32 mov.b32	$exception_detail8, %zp_zero_scatter_buffers_r28;
  @$oob32 mov.u32	$current_instance, 1021;
  @$oob32 bra	$stack_overflow;
// This BB is part of VPC 11.
  ld.const.u32	$stride13, [$record_address19+16];
  mul.lo.u32	$offset33, $rayIndex_y, $stride13;
  add.u32	$buffer_address51, $buffer_address50, $offset33;
  cvta.global.u32	%zp_zero_scatter_buffers_r32, $buffer_address51;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r32;
  // Dead code: mov.s32	%_r34, %_r32;
  mov.f32	%zp_zero_scatter_buffers_f2, 0F00000000; //  0
  st.f32	[%zp_zero_scatter_buffers_r32+0], %zp_zero_scatter_buffers_f2;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_scatter_do_divide"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc12:
// This BB is part of VPC 12.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  add.u32	%zp_scatter_do_divide_r1, $object_records, 172;
  // Dead code: mov.u32	%_r2, %_r1;
  mov.u32	%zp_scatter_do_divide_r3, 2;
  // Dead code: mov.u32	%_r4, %_r3;
  mov.u32	%zp_scatter_do_divide_r5, 4;
  // Dead code: mov.u32	%_r6, %_r5;
  // Dead code: mov.b32	%_r7, $rayIndex_x;
  // Dead code: mov.b32	%_r8, $rayIndex_y;
  // Dead code: mov.u32	%_r9, $rayIndex_x;
  // Dead code: mov.u32	%_r10, $rayIndex_y;
  mov.u32	%zp_scatter_do_divide_r11, 0;
  // Dead code: mov.u32	%_r12, %_r11;
  // Dead code: mov.u32	%_r13, 0;
  // Dead code: mov.u32	%_r14, %_r13;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr20, [%zp_scatter_do_divide_r1];
  add.u32	$record_address20, $record_ptr20, $object_records;
  ld.const.u32	$buffer_address52, [$record_address20];
  ld.const.u32	$size34, [$record_address20+4];
  setp.ge.u32	$oob33, $rayIndex_x, $size34;
  ld.const.u32	$sz_x33, [$record_address20+4];
  ld.const.u32	$sz_y33, [$record_address20+8];
  mov.u32	$sz_z33, 3735927486;
  @$oob33 mov.u32	$exception_detail0, $buffer_address52;
  @$oob33 mov.b32	$exception_detail1, %zp_scatter_do_divide_r3;
  @$oob33 mov.u32	$exception_detail2, $sz_x33;
  @$oob33 mov.u32	$exception_detail3, $sz_y33;
  @$oob33 mov.u32	$exception_detail4, $sz_z33;
  @$oob33 mov.b32	$exception_detail5, %zp_scatter_do_divide_r5;
  @$oob33 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob33 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob33 mov.b32	$exception_detail8, %zp_scatter_do_divide_r11;
  @$oob33 mov.u32	$current_instance, 1021;
  @$oob33 bra	$stack_overflow;
// This BB is part of VPC 12.
  mul.lo.u32	$offset34, $rayIndex_x, 4;
  add.u32	$buffer_address53, $buffer_address52, $offset34;
  ld.const.u32	$size35, [$record_address20+8];
  setp.ge.u32	$oob34, $rayIndex_y, $size35;
  ld.const.u32	$sz_x34, [$record_address20+4];
  ld.const.u32	$sz_y34, [$record_address20+8];
  mov.u32	$sz_z34, 3735927486;
  @$oob34 mov.u32	$exception_detail0, $buffer_address53;
  @$oob34 mov.b32	$exception_detail1, %zp_scatter_do_divide_r3;
  @$oob34 mov.u32	$exception_detail2, $sz_x34;
  @$oob34 mov.u32	$exception_detail3, $sz_y34;
  @$oob34 mov.u32	$exception_detail4, $sz_z34;
  @$oob34 mov.b32	$exception_detail5, %zp_scatter_do_divide_r5;
  @$oob34 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob34 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob34 mov.b32	$exception_detail8, %zp_scatter_do_divide_r11;
  @$oob34 mov.u32	$current_instance, 1021;
  @$oob34 bra	$stack_overflow;
// This BB is part of VPC 12.
  ld.const.u32	$stride14, [$record_address20+16];
  mul.lo.u32	$offset35, $rayIndex_y, $stride14;
  add.u32	$buffer_address54, $buffer_address53, $offset35;
  cvta.global.u32	%zp_scatter_do_divide_r15, $buffer_address54;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r16, %_r15;
  // Dead code: mov.s32	%_r17, %_r15;
  ld.f32	%zp_scatter_do_divide_f1, [%zp_scatter_do_divide_r15+0];
  add.u32	%zp_scatter_do_divide_r18, $object_records, 176;
  // Dead code: mov.u32	%_r19, %_r18;
  mov.u32	%zp_scatter_do_divide_r20, 2;
  // Dead code: mov.u32	%_r21, %_r20;
  mov.u32	%zp_scatter_do_divide_r22, 4;
  // Dead code: mov.u32	%_r23, %_r22;
  // Dead code: mov.b32	%_r24, $rayIndex_x;
  // Dead code: mov.b32	%_r25, $rayIndex_y;
  // Dead code: mov.u32	%_r26, $rayIndex_x;
  // Dead code: mov.u32	%_r27, $rayIndex_y;
  mov.u32	%zp_scatter_do_divide_r28, 0;
  // Dead code: mov.u32	%_r29, %_r28;
  // Dead code: mov.u32	%_r30, 0;
  // Dead code: mov.u32	%_r31, %_r30;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr21, [%zp_scatter_do_divide_r18];
  add.u32	$record_address21, $record_ptr21, $object_records;
  ld.const.u32	$buffer_address55, [$record_address21];
  ld.const.u32	$size36, [$record_address21+4];
  setp.ge.u32	$oob35, $rayIndex_x, $size36;
  ld.const.u32	$sz_x35, [$record_address21+4];
  ld.const.u32	$sz_y35, [$record_address21+8];
  mov.u32	$sz_z35, 3735927486;
  @$oob35 mov.u32	$exception_detail0, $buffer_address55;
  @$oob35 mov.b32	$exception_detail1, %zp_scatter_do_divide_r20;
  @$oob35 mov.u32	$exception_detail2, $sz_x35;
  @$oob35 mov.u32	$exception_detail3, $sz_y35;
  @$oob35 mov.u32	$exception_detail4, $sz_z35;
  @$oob35 mov.b32	$exception_detail5, %zp_scatter_do_divide_r22;
  @$oob35 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob35 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob35 mov.b32	$exception_detail8, %zp_scatter_do_divide_r28;
  @$oob35 mov.u32	$current_instance, 1021;
  @$oob35 bra	$stack_overflow;
// This BB is part of VPC 12.
  mul.lo.u32	$offset36, $rayIndex_x, 4;
  add.u32	$buffer_address56, $buffer_address55, $offset36;
  ld.const.u32	$size37, [$record_address21+8];
  setp.ge.u32	$oob36, $rayIndex_y, $size37;
  ld.const.u32	$sz_x36, [$record_address21+4];
  ld.const.u32	$sz_y36, [$record_address21+8];
  mov.u32	$sz_z36, 3735927486;
  @$oob36 mov.u32	$exception_detail0, $buffer_address56;
  @$oob36 mov.b32	$exception_detail1, %zp_scatter_do_divide_r20;
  @$oob36 mov.u32	$exception_detail2, $sz_x36;
  @$oob36 mov.u32	$exception_detail3, $sz_y36;
  @$oob36 mov.u32	$exception_detail4, $sz_z36;
  @$oob36 mov.b32	$exception_detail5, %zp_scatter_do_divide_r22;
  @$oob36 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob36 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob36 mov.b32	$exception_detail8, %zp_scatter_do_divide_r28;
  @$oob36 mov.u32	$current_instance, 1021;
  @$oob36 bra	$stack_overflow;
// This BB is part of VPC 12.
  ld.const.u32	$stride15, [$record_address21+16];
  mul.lo.u32	$offset37, $rayIndex_y, $stride15;
  add.u32	$buffer_address57, $buffer_address56, $offset37;
  cvta.global.u32	%zp_scatter_do_divide_r32, $buffer_address57;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r33, %_r32;
  // Dead code: mov.s32	%_r34, %_r32;
  ld.f32	%zp_scatter_do_divide_f2, [%zp_scatter_do_divide_r32+0];
  add.u32	%zp_scatter_do_divide_r35, $object_records, 212;
  // Dead code: mov.u32	%_r36, %_r35;
  mov.u32	%zp_scatter_do_divide_r37, 2;
  // Dead code: mov.u32	%_r38, %_r37;
  mov.u32	%zp_scatter_do_divide_r39, 4;
  // Dead code: mov.u32	%_r40, %_r39;
  // Dead code: mov.b32	%_r41, $rayIndex_x;
  // Dead code: mov.b32	%_r42, $rayIndex_y;
  // Dead code: mov.u32	%_r43, $rayIndex_x;
  // Dead code: mov.u32	%_r44, $rayIndex_y;
  mov.u32	%zp_scatter_do_divide_r45, 0;
  // Dead code: mov.u32	%_r46, %_r45;
  // Dead code: mov.u32	%_r47, 0;
  // Dead code: mov.u32	%_r48, %_r47;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr22, [%zp_scatter_do_divide_r35];
  add.u32	$record_address22, $record_ptr22, $object_records;
  ld.const.u32	$buffer_address58, [$record_address22];
  ld.const.u32	$size38, [$record_address22+4];
  setp.ge.u32	$oob37, $rayIndex_x, $size38;
  ld.const.u32	$sz_x37, [$record_address22+4];
  ld.const.u32	$sz_y37, [$record_address22+8];
  mov.u32	$sz_z37, 3735927486;
  @$oob37 mov.u32	$exception_detail0, $buffer_address58;
  @$oob37 mov.b32	$exception_detail1, %zp_scatter_do_divide_r37;
  @$oob37 mov.u32	$exception_detail2, $sz_x37;
  @$oob37 mov.u32	$exception_detail3, $sz_y37;
  @$oob37 mov.u32	$exception_detail4, $sz_z37;
  @$oob37 mov.b32	$exception_detail5, %zp_scatter_do_divide_r39;
  @$oob37 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob37 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob37 mov.b32	$exception_detail8, %zp_scatter_do_divide_r45;
  @$oob37 mov.u32	$current_instance, 1021;
  @$oob37 bra	$stack_overflow;
// This BB is part of VPC 12.
  mul.lo.u32	$offset38, $rayIndex_x, 4;
  add.u32	$buffer_address59, $buffer_address58, $offset38;
  ld.const.u32	$size39, [$record_address22+8];
  setp.ge.u32	$oob38, $rayIndex_y, $size39;
  ld.const.u32	$sz_x38, [$record_address22+4];
  ld.const.u32	$sz_y38, [$record_address22+8];
  mov.u32	$sz_z38, 3735927486;
  @$oob38 mov.u32	$exception_detail0, $buffer_address59;
  @$oob38 mov.b32	$exception_detail1, %zp_scatter_do_divide_r37;
  @$oob38 mov.u32	$exception_detail2, $sz_x38;
  @$oob38 mov.u32	$exception_detail3, $sz_y38;
  @$oob38 mov.u32	$exception_detail4, $sz_z38;
  @$oob38 mov.b32	$exception_detail5, %zp_scatter_do_divide_r39;
  @$oob38 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob38 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob38 mov.b32	$exception_detail8, %zp_scatter_do_divide_r45;
  @$oob38 mov.u32	$current_instance, 1021;
  @$oob38 bra	$stack_overflow;
// This BB is part of VPC 12.
  ld.const.u32	$stride16, [$record_address22+16];
  mul.lo.u32	$offset39, $rayIndex_y, $stride16;
  add.u32	$buffer_address60, $buffer_address59, $offset39;
  cvta.global.u32	%zp_scatter_do_divide_r49, $buffer_address60;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r50, %_r49;
  // Dead code: mov.s32	%_r51, %_r49;
  div.approx.ftz.f32	%zp_scatter_do_divide_f3, %zp_scatter_do_divide_f1, %zp_scatter_do_divide_f2;
  cvt.ftz.sat.f32.f32	%zp_scatter_do_divide_f4, %zp_scatter_do_divide_f3;
  mov.f32	%zp_scatter_do_divide_f5, 0F437ffd71; //  255.99
  mul.ftz.f32	%zp_scatter_do_divide_f6, %zp_scatter_do_divide_f4, %zp_scatter_do_divide_f5;
  cvt.rzi.ftz.sat.u32.f32	%zp_scatter_do_divide_r52, %zp_scatter_do_divide_f6;
  // Dead code: mov.s32	%_r53, %_r52;
  mov.u32	%zp_scatter_do_divide_r54, 255;
  st.v4.u8	[%zp_scatter_do_divide_r49+0], {%zp_scatter_do_divide_r52, %zp_scatter_do_divide_r52, %zp_scatter_do_divide_r52, %zp_scatter_do_divide_r54};
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_find_contrast_locations"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc13:
// This BB is part of VPC 13.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  ld.const.u32	%zp_find_contrast_locations_r1, [$object_records+196];
  mov.b32	%zp_find_contrast_locations_r2, $rayIndex_x;
  mov.b32	%zp_find_contrast_locations_r3, $rayIndex_y;
  sub.u32	%zp_find_contrast_locations_r4, $rayIndex_x, %zp_find_contrast_locations_r1;
  mov.s32	%zp_find_contrast_locations_r5, 0;
  max.s32	%zp_find_contrast_locations_r6, %zp_find_contrast_locations_r4, %zp_find_contrast_locations_r5;
  sub.u32	%zp_find_contrast_locations_r7, $rayIndex_y, %zp_find_contrast_locations_r1;
  mov.s32	%zp_find_contrast_locations_r8, 0;
  max.s32	%zp_find_contrast_locations_r9, %zp_find_contrast_locations_r7, %zp_find_contrast_locations_r8;
  mov.u32	%zp_find_contrast_locations_r10, 0;
  mov.u32	%zp_find_contrast_locations_r11, 255;
  add.u32	%zp_find_contrast_locations_r12, %zp_find_contrast_locations_r1, $rayIndex_x;
  ld.const.u32	%zp_find_contrast_locations_r13, [$object_records+160];
  sub.u32	%zp_find_contrast_locations_r14, %zp_find_contrast_locations_r13, 1;
  min.u32	%zp_find_contrast_locations_r15, %zp_find_contrast_locations_r12, %zp_find_contrast_locations_r14;
  sub.u32	%zp_find_contrast_locations_r16, %zp_find_contrast_locations_r15, 1;
  setp.gt.u32	%zp_find_contrast_locations_p1, %zp_find_contrast_locations_r6, %zp_find_contrast_locations_r15;
  @%zp_find_contrast_locations_p1 bra	zp_find_contrast_locations_$Lt_15_3842;
// This BB is part of VPC 13.
  // Dead code: sub.u32	%_r17, %_r16, %_r6;
  // Dead code: add.u32	%_r18, %_r17, 2;
  // Dead code: mov.u32	%_r19, 1;
  // Dead code: max.u32	%_r20, %_r18, %_r19;
  // Dead code: mov.s32	%_r21, %_r20;

zp_find_contrast_locations_$Lt_15_4354:
// This BB is part of VPC 13.
  ld.const.u32	%zp_find_contrast_locations_r22, [$object_records+196];
  add.u32	%zp_find_contrast_locations_r23, %zp_find_contrast_locations_r22, %zp_find_contrast_locations_r3;
  ld.const.u32	%zp_find_contrast_locations_r24, [$object_records+164];
  sub.u32	%zp_find_contrast_locations_r25, %zp_find_contrast_locations_r24, 1;
  min.u32	%zp_find_contrast_locations_r26, %zp_find_contrast_locations_r23, %zp_find_contrast_locations_r25;
  sub.u32	%zp_find_contrast_locations_r27, %zp_find_contrast_locations_r26, 1;
  setp.lt.u32	%zp_find_contrast_locations_p2, %zp_find_contrast_locations_r26, %zp_find_contrast_locations_r9;
  @%zp_find_contrast_locations_p2 bra	zp_find_contrast_locations_$Lt_15_4610;
// This BB is part of VPC 13.
  // Dead code: sub.u32	%_r28, %_r27, %_r9;
  // Dead code: add.u32	%_r29, %_r28, 2;
  // Dead code: mov.u32	%_r30, 1;
  // Dead code: max.u32	%_r31, %_r29, %_r30;
  // Dead code: mov.s32	%_r32, %_r31;

zp_find_contrast_locations_$Lt_15_5122:
// This BB is part of VPC 13.
  add.u32	%zp_find_contrast_locations_r33, $object_records, 212;
  // Dead code: mov.u32	%_r34, %_r33;
  mov.u32	%zp_find_contrast_locations_r35, 2;
  // Dead code: mov.u32	%_r36, %_r35;
  mov.u32	%zp_find_contrast_locations_r37, 4;
  // Dead code: mov.u32	%_r38, %_r37;
  // Dead code: mov.u32	%_r39, %_r16;
  // Dead code: mov.u32	%_r40, %_r27;
  mov.u32	%zp_find_contrast_locations_r41, 0;
  // Dead code: mov.u32	%_r42, %_r41;
  // Dead code: mov.u32	%_r43, 0;
  // Dead code: mov.u32	%_r44, %_r43;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr23, [%zp_find_contrast_locations_r33];
  add.u32	$record_address23, $record_ptr23, $object_records;
  ld.const.u32	$buffer_address61, [$record_address23];
  ld.const.u32	$size40, [$record_address23+4];
  setp.ge.u32	$oob39, %zp_find_contrast_locations_r16, $size40;
  ld.const.u32	$sz_x39, [$record_address23+4];
  ld.const.u32	$sz_y39, [$record_address23+8];
  mov.u32	$sz_z39, 3735927486;
  @$oob39 mov.u32	$exception_detail0, $buffer_address61;
  @$oob39 mov.b32	$exception_detail1, %zp_find_contrast_locations_r35;
  @$oob39 mov.u32	$exception_detail2, $sz_x39;
  @$oob39 mov.u32	$exception_detail3, $sz_y39;
  @$oob39 mov.u32	$exception_detail4, $sz_z39;
  @$oob39 mov.b32	$exception_detail5, %zp_find_contrast_locations_r37;
  @$oob39 mov.b32	$exception_detail6, %zp_find_contrast_locations_r16;
  @$oob39 mov.b32	$exception_detail7, %zp_find_contrast_locations_r27;
  @$oob39 mov.b32	$exception_detail8, %zp_find_contrast_locations_r41;
  @$oob39 mov.u32	$current_instance, 1021;
  @$oob39 bra	$stack_overflow;
// This BB is part of VPC 13.
  mul.lo.u32	$offset40, %zp_find_contrast_locations_r16, 4;
  add.u32	$buffer_address62, $buffer_address61, $offset40;
  ld.const.u32	$size41, [$record_address23+8];
  setp.ge.u32	$oob40, %zp_find_contrast_locations_r27, $size41;
  ld.const.u32	$sz_x40, [$record_address23+4];
  ld.const.u32	$sz_y40, [$record_address23+8];
  mov.u32	$sz_z40, 3735927486;
  @$oob40 mov.u32	$exception_detail0, $buffer_address62;
  @$oob40 mov.b32	$exception_detail1, %zp_find_contrast_locations_r35;
  @$oob40 mov.u32	$exception_detail2, $sz_x40;
  @$oob40 mov.u32	$exception_detail3, $sz_y40;
  @$oob40 mov.u32	$exception_detail4, $sz_z40;
  @$oob40 mov.b32	$exception_detail5, %zp_find_contrast_locations_r37;
  @$oob40 mov.b32	$exception_detail6, %zp_find_contrast_locations_r16;
  @$oob40 mov.b32	$exception_detail7, %zp_find_contrast_locations_r27;
  @$oob40 mov.b32	$exception_detail8, %zp_find_contrast_locations_r41;
  @$oob40 mov.u32	$current_instance, 1021;
  @$oob40 bra	$stack_overflow;
// This BB is part of VPC 13.
  ld.const.u32	$stride17, [$record_address23+16];
  mul.lo.u32	$offset41, %zp_find_contrast_locations_r27, $stride17;
  add.u32	$buffer_address63, $buffer_address62, $offset41;
  cvta.global.u32	%zp_find_contrast_locations_r45, $buffer_address63;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r46, %_r45;
  // Dead code: mov.s32	%_r47, %_r45;
  ld.u8	%zp_find_contrast_locations_r48, [%zp_find_contrast_locations_r45+0];
  max.u32	%zp_find_contrast_locations_r10, %zp_find_contrast_locations_r48, %zp_find_contrast_locations_r10;
  min.u32	%zp_find_contrast_locations_r11, %zp_find_contrast_locations_r48, %zp_find_contrast_locations_r11;
  mov.s32	%zp_find_contrast_locations_r49, %zp_find_contrast_locations_r27;
  sub.u32	%zp_find_contrast_locations_r27, %zp_find_contrast_locations_r27, 1;
  setp.ge.u32	%zp_find_contrast_locations_p3, %zp_find_contrast_locations_r49, %zp_find_contrast_locations_r9;
  @%zp_find_contrast_locations_p3 bra	zp_find_contrast_locations_$Lt_15_5122;
// This BB is part of VPC 13.
  mov.b32	%zp_find_contrast_locations_r3, $rayIndex_y;

zp_find_contrast_locations_$Lt_15_4610:
// This BB is part of VPC 13.
  mov.s32	%zp_find_contrast_locations_r50, %zp_find_contrast_locations_r16;
  sub.u32	%zp_find_contrast_locations_r16, %zp_find_contrast_locations_r16, 1;
  setp.le.u32	%zp_find_contrast_locations_p4, %zp_find_contrast_locations_r6, %zp_find_contrast_locations_r50;
  @%zp_find_contrast_locations_p4 bra	zp_find_contrast_locations_$Lt_15_4354;
// This BB is part of VPC 13.
  mov.b32	%zp_find_contrast_locations_r2, $rayIndex_x;

zp_find_contrast_locations_$Lt_15_3842:
// This BB is part of VPC 13.
  mov.u32	%zp_find_contrast_locations_r51, 0;
  setp.ne.u32	%zp_find_contrast_locations_p5, %zp_find_contrast_locations_r10, %zp_find_contrast_locations_r51;
  @%zp_find_contrast_locations_p5 bra	zp_find_contrast_locations_$Lt_15_6146;
// This BB is part of VPC 13.
  mov.f32	%zp_find_contrast_locations_f1, 0F00000000; //  0
  bra.uni	zp_find_contrast_locations_$Lt_15_5890;

zp_find_contrast_locations_$Lt_15_6146:
// This BB is part of VPC 13.
  sub.u32	%zp_find_contrast_locations_r52, %zp_find_contrast_locations_r10, %zp_find_contrast_locations_r11;
  cvt.rn.f32.u32	%zp_find_contrast_locations_f2, %zp_find_contrast_locations_r52;
  add.u32	%zp_find_contrast_locations_r53, %zp_find_contrast_locations_r11, %zp_find_contrast_locations_r10;
  cvt.rn.f32.u32	%zp_find_contrast_locations_f3, %zp_find_contrast_locations_r53;
  div.approx.ftz.f32	%zp_find_contrast_locations_f1, %zp_find_contrast_locations_f2, %zp_find_contrast_locations_f3;

zp_find_contrast_locations_$Lt_15_5890:
// This BB is part of VPC 13.
  mov.u32	%zp_find_contrast_locations_r54, 255;
  mov.u32	%zp_find_contrast_locations_r55, 0;
  ld.const.f32	%zp_find_contrast_locations_f4, [$object_records+224];
  setp.ftz.le.f32	%zp_find_contrast_locations_p6, %zp_find_contrast_locations_f4, %zp_find_contrast_locations_f1;
  selp.u32	%zp_find_contrast_locations_r56, %zp_find_contrast_locations_r54, %zp_find_contrast_locations_r55, %zp_find_contrast_locations_p6;
  add.u32	%zp_find_contrast_locations_r57, $object_records, 268;
  // Dead code: mov.u32	%_r58, %_r57;
  mov.u32	%zp_find_contrast_locations_r59, 2;
  // Dead code: mov.u32	%_r60, %_r59;
  mov.u32	%zp_find_contrast_locations_r61, 1;
  // Dead code: mov.u32	%_r62, %_r61;
  // Dead code: mov.u32	%_r63, %_r2;
  // Dead code: mov.u32	%_r64, %_r3;
  mov.u32	%zp_find_contrast_locations_r65, 0;
  // Dead code: mov.u32	%_r66, %_r65;
  // Dead code: mov.u32	%_r67, 0;
  // Dead code: mov.u32	%_r68, %_r67;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr24, [%zp_find_contrast_locations_r57];
  add.u32	$record_address24, $record_ptr24, $object_records;
  ld.const.u32	$buffer_address64, [$record_address24];
  ld.const.u32	$size42, [$record_address24+4];
  setp.ge.u32	$oob41, %zp_find_contrast_locations_r2, $size42;
  ld.const.u32	$sz_x41, [$record_address24+4];
  ld.const.u32	$sz_y41, [$record_address24+8];
  mov.u32	$sz_z41, 3735927486;
  @$oob41 mov.u32	$exception_detail0, $buffer_address64;
  @$oob41 mov.b32	$exception_detail1, %zp_find_contrast_locations_r59;
  @$oob41 mov.u32	$exception_detail2, $sz_x41;
  @$oob41 mov.u32	$exception_detail3, $sz_y41;
  @$oob41 mov.u32	$exception_detail4, $sz_z41;
  @$oob41 mov.b32	$exception_detail5, %zp_find_contrast_locations_r61;
  @$oob41 mov.b32	$exception_detail6, %zp_find_contrast_locations_r2;
  @$oob41 mov.b32	$exception_detail7, %zp_find_contrast_locations_r3;
  @$oob41 mov.b32	$exception_detail8, %zp_find_contrast_locations_r65;
  @$oob41 mov.u32	$current_instance, 1021;
  @$oob41 bra	$stack_overflow;
// This BB is part of VPC 13.
  mul.lo.u32	$offset42, %zp_find_contrast_locations_r2, 1;
  add.u32	$buffer_address65, $buffer_address64, $offset42;
  ld.const.u32	$size43, [$record_address24+8];
  setp.ge.u32	$oob42, %zp_find_contrast_locations_r3, $size43;
  ld.const.u32	$sz_x42, [$record_address24+4];
  ld.const.u32	$sz_y42, [$record_address24+8];
  mov.u32	$sz_z42, 3735927486;
  @$oob42 mov.u32	$exception_detail0, $buffer_address65;
  @$oob42 mov.b32	$exception_detail1, %zp_find_contrast_locations_r59;
  @$oob42 mov.u32	$exception_detail2, $sz_x42;
  @$oob42 mov.u32	$exception_detail3, $sz_y42;
  @$oob42 mov.u32	$exception_detail4, $sz_z42;
  @$oob42 mov.b32	$exception_detail5, %zp_find_contrast_locations_r61;
  @$oob42 mov.b32	$exception_detail6, %zp_find_contrast_locations_r2;
  @$oob42 mov.b32	$exception_detail7, %zp_find_contrast_locations_r3;
  @$oob42 mov.b32	$exception_detail8, %zp_find_contrast_locations_r65;
  @$oob42 mov.u32	$current_instance, 1021;
  @$oob42 bra	$stack_overflow;
// This BB is part of VPC 13.
  ld.const.u32	$stride18, [$record_address24+16];
  mul.lo.u32	$offset43, %zp_find_contrast_locations_r3, $stride18;
  add.u32	$buffer_address66, $buffer_address65, $offset43;
  cvta.global.u32	%zp_find_contrast_locations_r69, $buffer_address66;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r70, %_r69;
  // Dead code: mov.s32	%_r71, %_r69;
  st.u8	[%zp_find_contrast_locations_r69+0], %zp_find_contrast_locations_r56;
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

  // Function "zp_adaptive_resample"
  //    from /Users/greg/Perforce/rtmain/build_32_32_debug/lib/ptx/zoneplate_generated_zoneplate.cu.ptx
  //    sm target = sm_20

$vpc14:
// This BB is part of VPC 14.
  // Save the value of $virtual_pc so it does not change while inside this function
  mov.u32	$current_vpc, $virtual_pc;
  add.u32	%zp_adaptive_resample_r1, $object_records, 268;
  // Dead code: mov.u32	%_r2, %_r1;
  mov.u32	%zp_adaptive_resample_r3, 2;
  // Dead code: mov.u32	%_r4, %_r3;
  mov.u32	%zp_adaptive_resample_r5, 1;
  // Dead code: mov.u32	%_r6, %_r5;
  // Dead code: mov.b32	%_r7, $rayIndex_x;
  // Dead code: mov.b32	%_r8, $rayIndex_y;
  // Dead code: mov.u32	%_r9, $rayIndex_x;
  // Dead code: mov.u32	%_r10, $rayIndex_y;
  mov.u32	%zp_adaptive_resample_r11, 0;
  // Dead code: mov.u32	%_r12, %_r11;
  // Dead code: mov.u32	%_r13, 0;
  // Dead code: mov.u32	%_r14, %_r13;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr25, [%zp_adaptive_resample_r1];
  add.u32	$record_address25, $record_ptr25, $object_records;
  ld.const.u32	$buffer_address67, [$record_address25];
  ld.const.u32	$size44, [$record_address25+4];
  setp.ge.u32	$oob43, $rayIndex_x, $size44;
  ld.const.u32	$sz_x43, [$record_address25+4];
  ld.const.u32	$sz_y43, [$record_address25+8];
  mov.u32	$sz_z43, 3735927486;
  @$oob43 mov.u32	$exception_detail0, $buffer_address67;
  @$oob43 mov.b32	$exception_detail1, %zp_adaptive_resample_r3;
  @$oob43 mov.u32	$exception_detail2, $sz_x43;
  @$oob43 mov.u32	$exception_detail3, $sz_y43;
  @$oob43 mov.u32	$exception_detail4, $sz_z43;
  @$oob43 mov.b32	$exception_detail5, %zp_adaptive_resample_r5;
  @$oob43 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob43 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob43 mov.b32	$exception_detail8, %zp_adaptive_resample_r11;
  @$oob43 mov.u32	$current_instance, 1021;
  @$oob43 bra	$stack_overflow;
// This BB is part of VPC 14.
  mul.lo.u32	$offset44, $rayIndex_x, 1;
  add.u32	$buffer_address68, $buffer_address67, $offset44;
  ld.const.u32	$size45, [$record_address25+8];
  setp.ge.u32	$oob44, $rayIndex_y, $size45;
  ld.const.u32	$sz_x44, [$record_address25+4];
  ld.const.u32	$sz_y44, [$record_address25+8];
  mov.u32	$sz_z44, 3735927486;
  @$oob44 mov.u32	$exception_detail0, $buffer_address68;
  @$oob44 mov.b32	$exception_detail1, %zp_adaptive_resample_r3;
  @$oob44 mov.u32	$exception_detail2, $sz_x44;
  @$oob44 mov.u32	$exception_detail3, $sz_y44;
  @$oob44 mov.u32	$exception_detail4, $sz_z44;
  @$oob44 mov.b32	$exception_detail5, %zp_adaptive_resample_r5;
  @$oob44 mov.b32	$exception_detail6, $rayIndex_x;
  @$oob44 mov.b32	$exception_detail7, $rayIndex_y;
  @$oob44 mov.b32	$exception_detail8, %zp_adaptive_resample_r11;
  @$oob44 mov.u32	$current_instance, 1021;
  @$oob44 bra	$stack_overflow;
// This BB is part of VPC 14.
  ld.const.u32	$stride19, [$record_address25+16];
  mul.lo.u32	$offset45, $rayIndex_y, $stride19;
  add.u32	$buffer_address69, $buffer_address68, $offset45;
  cvta.global.u32	%zp_adaptive_resample_r15, $buffer_address69;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r16, %_r15;
  // Dead code: mov.s32	%_r17, %_r15;
  ld.u8	%zp_adaptive_resample_r18, [%zp_adaptive_resample_r15+0];
  mov.u32	%zp_adaptive_resample_r19, 0;
  setp.ne.u32	%zp_adaptive_resample_p1, %zp_adaptive_resample_r18, %zp_adaptive_resample_r19;
  @%zp_adaptive_resample_p1 bra	zp_adaptive_resample_$Lt_17_32002;
// This BB is part of VPC 14.
  bra.uni	zp_adaptive_resample_$LBB101__Z20zp_adaptive_resamplev;

zp_adaptive_resample_$Lt_17_32002:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r20, 0;
  ld.const.u32	%zp_adaptive_resample_r21, [$object_records+216];
  mov.u32	%zp_adaptive_resample_r22, 0;
  setp.eq.u32	%zp_adaptive_resample_p2, %zp_adaptive_resample_r21, %zp_adaptive_resample_r22;
  @%zp_adaptive_resample_p2 bra	zp_adaptive_resample_$LBB101__Z20zp_adaptive_resamplev;
  bra.uni	zp_adaptive_resamplepreheader1;

zp_adaptive_resample_$Lt_17_33026:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r23, 0;
  mov.u32	%zp_adaptive_resample_r24, 0;
  setp.eq.u32	%zp_adaptive_resample_p3, %zp_adaptive_resample_r21, %zp_adaptive_resample_r24;
  @%zp_adaptive_resample_p3 bra	zp_adaptive_resample_$Lt_17_33282;
  bra.uni	zp_adaptive_resamplepreheader0;

zp_adaptive_resamplepreheader1:
// This BB is part of VPC 14.
  bra.uni	zp_adaptive_resample_$Lt_17_33026;

zp_adaptive_resample_$Lt_17_33794:
// This BB is part of VPC 14.
  // Dead code: mov.b32	%_r25, $rayIndex_x;
  // Dead code: mov.b32	%_r26, $rayIndex_y;
  mul.lo.u32	%zp_adaptive_resample_r27, $rayIndex_x, %zp_adaptive_resample_r21;
  cvt.rn.f32.u32	%zp_adaptive_resample_f1, %zp_adaptive_resample_r21;
  add.u32	%zp_adaptive_resample_r28, %zp_adaptive_resample_r20, %zp_adaptive_resample_r27;
  cvt.rn.f32.u32	%zp_adaptive_resample_f2, %zp_adaptive_resample_r28;
  mov.f32	%zp_adaptive_resample_f3, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f4, %zp_adaptive_resample_f2, %zp_adaptive_resample_f3;
  div.approx.ftz.f32	%zp_adaptive_resample_f5, %zp_adaptive_resample_f4, %zp_adaptive_resample_f1;
  mul.lo.u32	%zp_adaptive_resample_r29, $rayIndex_y, %zp_adaptive_resample_r21;
  add.u32	%zp_adaptive_resample_r30, %zp_adaptive_resample_r23, %zp_adaptive_resample_r29;
  cvt.rn.f32.u32	%zp_adaptive_resample_f6, %zp_adaptive_resample_r30;
  mov.f32	%zp_adaptive_resample_f7, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f8, %zp_adaptive_resample_f6, %zp_adaptive_resample_f7;
  div.approx.ftz.f32	%zp_adaptive_resample_f9, %zp_adaptive_resample_f8, %zp_adaptive_resample_f1;
  ld.const.s32	%zp_adaptive_resample_r31, [$object_records+208];
  mov.u32	%zp_adaptive_resample_r32, 0;
  setp.ne.s32	%zp_adaptive_resample_p4, %zp_adaptive_resample_r31, %zp_adaptive_resample_r32;
  @%zp_adaptive_resample_p4 bra	zp_adaptive_resample_$Lt_17_34306;
  bra.uni	$zp_adaptive_resample_successor_0;

zp_adaptive_resamplepreheader0:
// This BB is part of VPC 14.
  bra.uni	zp_adaptive_resample_$Lt_17_33794;

$zp_adaptive_resample_successor_0:
// This BB is part of VPC 14.
  ld.const.u32	%zp_adaptive_resample_r33, [$object_records+160];
  ld.const.u32	%zp_adaptive_resample_r34, [$object_records+164];
  cvt.rn.f32.u32	%zp_adaptive_resample_f10, %zp_adaptive_resample_r33;
  cvt.rn.f32.u32	%zp_adaptive_resample_f11, %zp_adaptive_resample_r34;
  div.approx.ftz.f32	%zp_adaptive_resample_f12, %zp_adaptive_resample_f5, %zp_adaptive_resample_f10;
  div.approx.ftz.f32	%zp_adaptive_resample_f13, %zp_adaptive_resample_f9, %zp_adaptive_resample_f11;
  mul.ftz.f32	%zp_adaptive_resample_f14, %zp_adaptive_resample_f12, %zp_adaptive_resample_f12;
  fma.rn.ftz.f32	%zp_adaptive_resample_f15, %zp_adaptive_resample_f13, %zp_adaptive_resample_f13, %zp_adaptive_resample_f14;
  sqrt.approx.ftz.f32	%zp_adaptive_resample_f16, %zp_adaptive_resample_f15;
  mov.f32	%zp_adaptive_resample_f17, 0F44fa0000; //  2000
  mul.ftz.f32	%zp_adaptive_resample_f18, %zp_adaptive_resample_f16, %zp_adaptive_resample_f17;
  mul.ftz.f32	%zp_adaptive_resample_f19, %zp_adaptive_resample_f16, %zp_adaptive_resample_f18;
  cos.approx.ftz.f32	%zp_adaptive_resample_f20, %zp_adaptive_resample_f19;
  mov.f32	%zp_adaptive_resample_f21, 0F3f800000; //  1
  add.ftz.f32	%zp_adaptive_resample_f22, %zp_adaptive_resample_f20, %zp_adaptive_resample_f21;
  mov.f32	%zp_adaptive_resample_f23, 0F40000000; //  2
  div.approx.ftz.f32	%zp_adaptive_resample_f24, %zp_adaptive_resample_f22, %zp_adaptive_resample_f23;
  bra.uni	zp_adaptive_resample_$LDWendi__Z9zoneplate6float2_206_35;

zp_adaptive_resample_$Lt_17_34306:
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r35, 1;
  setp.ne.s32	%zp_adaptive_resample_p5, %zp_adaptive_resample_r31, %zp_adaptive_resample_r35;
  @%zp_adaptive_resample_p5 bra	zp_adaptive_resample_$Lt_17_34050;
// This BB is part of VPC 14.
  ld.const.f32	%zp_adaptive_resample_f25, [$object_records+204];
  mov.f32	%zp_adaptive_resample_f26, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_adaptive_resample_f27, %zp_adaptive_resample_f25, %zp_adaptive_resample_f26;
  ld.const.s32	%zp_adaptive_resample_r36, [$object_records+232];
  cvt.rn.f32.s32	%zp_adaptive_resample_f28, %zp_adaptive_resample_r36;
  mov.f32	%zp_adaptive_resample_f29, 0F43340000; //  180
  div.approx.ftz.f32	%zp_adaptive_resample_f30, %zp_adaptive_resample_f27, %zp_adaptive_resample_f29;
  cos.approx.ftz.f32	%zp_adaptive_resample_f31, %zp_adaptive_resample_f30;
  sin.approx.ftz.f32	%zp_adaptive_resample_f32, %zp_adaptive_resample_f30;
  mul.ftz.f32	%zp_adaptive_resample_f33, %zp_adaptive_resample_f31, %zp_adaptive_resample_f5;
  fma.rn.ftz.f32	%zp_adaptive_resample_f34, %zp_adaptive_resample_f32, %zp_adaptive_resample_f9, %zp_adaptive_resample_f33;
  div.approx.ftz.f32	%zp_adaptive_resample_f35, %zp_adaptive_resample_f34, %zp_adaptive_resample_f28;
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f36, %zp_adaptive_resample_f35;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r37, %zp_adaptive_resample_f36;
  abs.s32	%zp_adaptive_resample_r38, %zp_adaptive_resample_r37;
  mul.ftz.f32	%zp_adaptive_resample_f37, %zp_adaptive_resample_f32, %zp_adaptive_resample_f5;
  mul.ftz.f32	%zp_adaptive_resample_f38, %zp_adaptive_resample_f31, %zp_adaptive_resample_f9;
  sub.ftz.f32	%zp_adaptive_resample_f39, %zp_adaptive_resample_f38, %zp_adaptive_resample_f37;
  div.approx.ftz.f32	%zp_adaptive_resample_f40, %zp_adaptive_resample_f39, %zp_adaptive_resample_f28;
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f41, %zp_adaptive_resample_f40;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r39, %zp_adaptive_resample_f41;
  abs.s32	%zp_adaptive_resample_r40, %zp_adaptive_resample_r39;
  shr.s32	%zp_adaptive_resample_r41, %zp_adaptive_resample_r40, 31;
  mov.s32	%zp_adaptive_resample_r42, 1;
  and.b32	%zp_adaptive_resample_r43, %zp_adaptive_resample_r41, %zp_adaptive_resample_r42;
  add.s32	%zp_adaptive_resample_r44, %zp_adaptive_resample_r43, %zp_adaptive_resample_r40;
  shr.s32	%zp_adaptive_resample_r45, %zp_adaptive_resample_r44, 1;
  mul.lo.s32	%zp_adaptive_resample_r46, %zp_adaptive_resample_r45, 2;
  sub.s32	%zp_adaptive_resample_r47, %zp_adaptive_resample_r40, %zp_adaptive_resample_r46;
  shr.s32	%zp_adaptive_resample_r48, %zp_adaptive_resample_r38, 31;
  mov.s32	%zp_adaptive_resample_r49, 1;
  and.b32	%zp_adaptive_resample_r50, %zp_adaptive_resample_r48, %zp_adaptive_resample_r49;
  add.s32	%zp_adaptive_resample_r51, %zp_adaptive_resample_r50, %zp_adaptive_resample_r38;
  shr.s32	%zp_adaptive_resample_r52, %zp_adaptive_resample_r51, 1;
  mul.lo.s32	%zp_adaptive_resample_r53, %zp_adaptive_resample_r52, 2;
  sub.s32	%zp_adaptive_resample_r54, %zp_adaptive_resample_r38, %zp_adaptive_resample_r53;
  setp.ne.s32	%zp_adaptive_resample_p6, %zp_adaptive_resample_r47, %zp_adaptive_resample_r54;
  @%zp_adaptive_resample_p6 bra	zp_adaptive_resample_$Lt_17_35074;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f42, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_36;

zp_adaptive_resample_$Lt_17_35074:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f42, 0F00000000; //  0

zp_adaptive_resample_$LDWendi_fdividef_206_36:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f24, %zp_adaptive_resample_f42;
  bra.uni	zp_adaptive_resample_$LDWendi__Z9zoneplate6float2_206_35;

zp_adaptive_resample_$Lt_17_34050:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f24, 0F00000000; //  0

zp_adaptive_resample_$LDWendi__Z9zoneplate6float2_206_35:
// This BB is part of VPC 14.
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f43, %zp_adaptive_resample_f5;
  setp.ftz.eq.f32	%zp_adaptive_resample_p7, %zp_adaptive_resample_f43, %zp_adaptive_resample_f5;
  @%zp_adaptive_resample_p7 bra	zp_adaptive_resample_$L_17_31746;
// This BB is part of VPC 14.
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f44, %zp_adaptive_resample_f9;
  setp.ftz.eq.f32	%zp_adaptive_resample_p8, %zp_adaptive_resample_f44, %zp_adaptive_resample_f9;
  @!%zp_adaptive_resample_p8 bra	zp_adaptive_resample_$L_17_31490;

zp_adaptive_resample_$L_17_31746:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r55, 1;
  bra.uni	zp_adaptive_resample_$L_17_31234;

zp_adaptive_resample_$L_17_31490:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r55, 0;

zp_adaptive_resample_$L_17_31234:
// This BB is part of VPC 14.
  ld.const.f32	%zp_adaptive_resample_f45, [$object_records+180];
  mov.f32	%zp_adaptive_resample_f46, 0F3f000000; //  0.5
  setp.ftz.gt.f32	%zp_adaptive_resample_p9, %zp_adaptive_resample_f45, %zp_adaptive_resample_f46;
  selp.s32	%zp_adaptive_resample_r56, 0, 1, %zp_adaptive_resample_p9;
  cvt.s8.s32	%zp_adaptive_resample_r57, %zp_adaptive_resample_r55;
  mov.s32	%zp_adaptive_resample_r58, 0;
  set.eq.u32.s32	%zp_adaptive_resample_r59, %zp_adaptive_resample_r57, %zp_adaptive_resample_r58;
  neg.s32	%zp_adaptive_resample_r60, %zp_adaptive_resample_r59;
  and.b32	%zp_adaptive_resample_r61, %zp_adaptive_resample_r56, %zp_adaptive_resample_r60;
  mov.u32	%zp_adaptive_resample_r62, 0;
  setp.eq.s32	%zp_adaptive_resample_p10, %zp_adaptive_resample_r61, %zp_adaptive_resample_r62;
  @%zp_adaptive_resample_p10 bra	zp_adaptive_resample_$Lt_17_35842;
// This BB is part of VPC 14.
  cvt.rzi.ftz.sat.u32.f32	%zp_adaptive_resample_r63, %zp_adaptive_resample_f43;
  // Dead code: mov.s32	%_r64, %_r63;
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f47, %zp_adaptive_resample_f9;
  cvt.rzi.ftz.sat.u32.f32	%zp_adaptive_resample_r65, %zp_adaptive_resample_f47;
  // Dead code: mov.s32	%_r66, %_r65;
  cvt.rn.f32.u32	%zp_adaptive_resample_f48, %zp_adaptive_resample_r63;
  mov.f32	%zp_adaptive_resample_f49, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f50, %zp_adaptive_resample_f48, %zp_adaptive_resample_f49;
  sub.ftz.f32	%zp_adaptive_resample_f51, %zp_adaptive_resample_f5, %zp_adaptive_resample_f50;
  cvt.rn.f32.u32	%zp_adaptive_resample_f52, %zp_adaptive_resample_r65;
  mov.f32	%zp_adaptive_resample_f53, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f54, %zp_adaptive_resample_f52, %zp_adaptive_resample_f53;
  sub.ftz.f32	%zp_adaptive_resample_f55, %zp_adaptive_resample_f9, %zp_adaptive_resample_f54;
  abs.ftz.f32	%zp_adaptive_resample_f56, %zp_adaptive_resample_f51;
  abs.ftz.f32	%zp_adaptive_resample_f57, %zp_adaptive_resample_f55;
  set.ftz.gt.u32.f32	%zp_adaptive_resample_r67, %zp_adaptive_resample_f56, %zp_adaptive_resample_f45;
  neg.s32	%zp_adaptive_resample_r68, %zp_adaptive_resample_r67;
  set.ftz.gt.u32.f32	%zp_adaptive_resample_r69, %zp_adaptive_resample_f57, %zp_adaptive_resample_f45;
  neg.s32	%zp_adaptive_resample_r70, %zp_adaptive_resample_r69;
  or.b32	%zp_adaptive_resample_r71, %zp_adaptive_resample_r68, %zp_adaptive_resample_r70;
  mov.u32	%zp_adaptive_resample_r72, 0;
  setp.eq.s32	%zp_adaptive_resample_p11, %zp_adaptive_resample_r71, %zp_adaptive_resample_r72;
  @%zp_adaptive_resample_p11 bra	zp_adaptive_resample_$Lt_17_36098;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f58, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_36098:
// This BB is part of VPC 14.
  ld.const.s32	%zp_adaptive_resample_r73, [$object_records+200];
  mov.u32	%zp_adaptive_resample_r74, 0;
  setp.eq.s32	%zp_adaptive_resample_p12, %zp_adaptive_resample_r73, %zp_adaptive_resample_r74;
  @%zp_adaptive_resample_p12 bra	zp_adaptive_resample_$Lt_17_4866;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r75, 1;
  setp.eq.s32	%zp_adaptive_resample_p13, %zp_adaptive_resample_r73, %zp_adaptive_resample_r75;
  @%zp_adaptive_resample_p13 bra	zp_adaptive_resample_$Lt_17_5122;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r76, 2;
  setp.eq.s32	%zp_adaptive_resample_p14, %zp_adaptive_resample_r73, %zp_adaptive_resample_r76;
  @%zp_adaptive_resample_p14 bra	zp_adaptive_resample_$Lt_17_5378;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r77, 3;
  setp.eq.s32	%zp_adaptive_resample_p15, %zp_adaptive_resample_r73, %zp_adaptive_resample_r77;
  @%zp_adaptive_resample_p15 bra	zp_adaptive_resample_$Lt_17_5634;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r78, 4;
  setp.eq.s32	%zp_adaptive_resample_p16, %zp_adaptive_resample_r73, %zp_adaptive_resample_r78;
  @%zp_adaptive_resample_p16 bra	zp_adaptive_resample_$Lt_17_5890;
// This BB is part of VPC 14.
  bra.uni	zp_adaptive_resample_$Lt_17_6402;

zp_adaptive_resample_$Lt_17_4866:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f58, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_5122:
// This BB is part of VPC 14.
  sub.ftz.f32	%zp_adaptive_resample_f59, %zp_adaptive_resample_f45, %zp_adaptive_resample_f56;
  mov.f32	%zp_adaptive_resample_f60, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f61, %zp_adaptive_resample_f59, %zp_adaptive_resample_f60;
  sub.ftz.f32	%zp_adaptive_resample_f62, %zp_adaptive_resample_f45, %zp_adaptive_resample_f57;
  mov.f32	%zp_adaptive_resample_f63, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f64, %zp_adaptive_resample_f62, %zp_adaptive_resample_f63;
  mul.ftz.f32	%zp_adaptive_resample_f58, %zp_adaptive_resample_f61, %zp_adaptive_resample_f64;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_5378:
// This BB is part of VPC 14.
  ld.const.f32	%zp_adaptive_resample_f65, [$object_records+220];
  mul.ftz.f32	%zp_adaptive_resample_f66, %zp_adaptive_resample_f65, %zp_adaptive_resample_f45;
  mul.ftz.f32	%zp_adaptive_resample_f67, %zp_adaptive_resample_f66, %zp_adaptive_resample_f45;
  neg.ftz.f32	%zp_adaptive_resample_f68, %zp_adaptive_resample_f67;
  mov.f32	%zp_adaptive_resample_f69, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f70, %zp_adaptive_resample_f68, %zp_adaptive_resample_f69;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f71, %zp_adaptive_resample_f70;
  mul.ftz.f32	%zp_adaptive_resample_f72, %zp_adaptive_resample_f56, %zp_adaptive_resample_f65;
  mul.ftz.f32	%zp_adaptive_resample_f73, %zp_adaptive_resample_f56, %zp_adaptive_resample_f72;
  neg.ftz.f32	%zp_adaptive_resample_f74, %zp_adaptive_resample_f73;
  mov.f32	%zp_adaptive_resample_f75, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f76, %zp_adaptive_resample_f74, %zp_adaptive_resample_f75;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f77, %zp_adaptive_resample_f76;
  sub.ftz.f32	%zp_adaptive_resample_f78, %zp_adaptive_resample_f77, %zp_adaptive_resample_f71;
  mov.f32	%zp_adaptive_resample_f79, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f80, %zp_adaptive_resample_f78, %zp_adaptive_resample_f79;
  mul.ftz.f32	%zp_adaptive_resample_f81, %zp_adaptive_resample_f57, %zp_adaptive_resample_f65;
  mul.ftz.f32	%zp_adaptive_resample_f82, %zp_adaptive_resample_f57, %zp_adaptive_resample_f81;
  neg.ftz.f32	%zp_adaptive_resample_f83, %zp_adaptive_resample_f82;
  mov.f32	%zp_adaptive_resample_f84, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f85, %zp_adaptive_resample_f83, %zp_adaptive_resample_f84;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f86, %zp_adaptive_resample_f85;
  sub.ftz.f32	%zp_adaptive_resample_f87, %zp_adaptive_resample_f86, %zp_adaptive_resample_f71;
  mov.f32	%zp_adaptive_resample_f88, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f89, %zp_adaptive_resample_f87, %zp_adaptive_resample_f88;
  mul.ftz.f32	%zp_adaptive_resample_f58, %zp_adaptive_resample_f80, %zp_adaptive_resample_f89;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_5634:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f90, %zp_adaptive_resample_f56, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f91, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p17, %zp_adaptive_resample_f90, %zp_adaptive_resample_f91;
  @!%zp_adaptive_resample_p17 bra	zp_adaptive_resample_$Lt_17_25858;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f92, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_adaptive_resample_f93, %zp_adaptive_resample_f90, %zp_adaptive_resample_f92;
  mul.ftz.f32	%zp_adaptive_resample_f94, %zp_adaptive_resample_f90, %zp_adaptive_resample_f93;
  mul.ftz.f32	%zp_adaptive_resample_f95, %zp_adaptive_resample_f90, %zp_adaptive_resample_f94;
  mov.f32	%zp_adaptive_resample_f96, 0F41400000; //  12
  mul.ftz.f32	%zp_adaptive_resample_f97, %zp_adaptive_resample_f90, %zp_adaptive_resample_f96;
  mul.ftz.f32	%zp_adaptive_resample_f98, %zp_adaptive_resample_f90, %zp_adaptive_resample_f97;
  sub.ftz.f32	%zp_adaptive_resample_f99, %zp_adaptive_resample_f98, %zp_adaptive_resample_f95;
  mov.f32	%zp_adaptive_resample_f100, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_adaptive_resample_f101, %zp_adaptive_resample_f90, %zp_adaptive_resample_f100, %zp_adaptive_resample_f99;
  mov.f32	%zp_adaptive_resample_f102, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_adaptive_resample_f103, %zp_adaptive_resample_f101, %zp_adaptive_resample_f102;
  mov.f32	%zp_adaptive_resample_f104, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f105, %zp_adaptive_resample_f103, %zp_adaptive_resample_f104;
  bra.uni	zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_32;

zp_adaptive_resample_$Lt_17_25858:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f106, 0F40e00000; //  7
  mul.ftz.f32	%zp_adaptive_resample_f107, %zp_adaptive_resample_f90, %zp_adaptive_resample_f106;
  mul.ftz.f32	%zp_adaptive_resample_f108, %zp_adaptive_resample_f90, %zp_adaptive_resample_f107;
  mul.ftz.f32	%zp_adaptive_resample_f109, %zp_adaptive_resample_f90, %zp_adaptive_resample_f108;
  mov.f32	%zp_adaptive_resample_f110, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_adaptive_resample_f111, %zp_adaptive_resample_f90, %zp_adaptive_resample_f110;
  fma.rn.ftz.f32	%zp_adaptive_resample_f112, %zp_adaptive_resample_f90, %zp_adaptive_resample_f111, %zp_adaptive_resample_f109;
  mov.f32	%zp_adaptive_resample_f113, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_adaptive_resample_f114, %zp_adaptive_resample_f112, %zp_adaptive_resample_f113;
  mov.f32	%zp_adaptive_resample_f115, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f105, %zp_adaptive_resample_f114, %zp_adaptive_resample_f115;

zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_32:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f116, %zp_adaptive_resample_f57, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f117, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p18, %zp_adaptive_resample_f116, %zp_adaptive_resample_f117;
  @!%zp_adaptive_resample_p18 bra	zp_adaptive_resample_$Lt_17_26114;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f118, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_adaptive_resample_f119, %zp_adaptive_resample_f116, %zp_adaptive_resample_f118;
  mul.ftz.f32	%zp_adaptive_resample_f120, %zp_adaptive_resample_f116, %zp_adaptive_resample_f119;
  mul.ftz.f32	%zp_adaptive_resample_f121, %zp_adaptive_resample_f116, %zp_adaptive_resample_f120;
  mov.f32	%zp_adaptive_resample_f122, 0F41400000; //  12
  mul.ftz.f32	%zp_adaptive_resample_f123, %zp_adaptive_resample_f116, %zp_adaptive_resample_f122;
  mul.ftz.f32	%zp_adaptive_resample_f124, %zp_adaptive_resample_f116, %zp_adaptive_resample_f123;
  sub.ftz.f32	%zp_adaptive_resample_f125, %zp_adaptive_resample_f124, %zp_adaptive_resample_f121;
  mov.f32	%zp_adaptive_resample_f126, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_adaptive_resample_f127, %zp_adaptive_resample_f116, %zp_adaptive_resample_f126, %zp_adaptive_resample_f125;
  mov.f32	%zp_adaptive_resample_f128, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_adaptive_resample_f129, %zp_adaptive_resample_f127, %zp_adaptive_resample_f128;
  mov.f32	%zp_adaptive_resample_f130, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f131, %zp_adaptive_resample_f129, %zp_adaptive_resample_f130;
  bra.uni	zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_30;

zp_adaptive_resample_$Lt_17_26114:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f132, 0F40e00000; //  7
  mul.ftz.f32	%zp_adaptive_resample_f133, %zp_adaptive_resample_f116, %zp_adaptive_resample_f132;
  mul.ftz.f32	%zp_adaptive_resample_f134, %zp_adaptive_resample_f116, %zp_adaptive_resample_f133;
  mul.ftz.f32	%zp_adaptive_resample_f135, %zp_adaptive_resample_f116, %zp_adaptive_resample_f134;
  mov.f32	%zp_adaptive_resample_f136, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_adaptive_resample_f137, %zp_adaptive_resample_f116, %zp_adaptive_resample_f136;
  fma.rn.ftz.f32	%zp_adaptive_resample_f138, %zp_adaptive_resample_f116, %zp_adaptive_resample_f137, %zp_adaptive_resample_f135;
  mov.f32	%zp_adaptive_resample_f139, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_adaptive_resample_f140, %zp_adaptive_resample_f138, %zp_adaptive_resample_f139;
  mov.f32	%zp_adaptive_resample_f141, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f131, %zp_adaptive_resample_f140, %zp_adaptive_resample_f141;

zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_30:
// This BB is part of VPC 14.
  mul.ftz.f32	%zp_adaptive_resample_f58, %zp_adaptive_resample_f131, %zp_adaptive_resample_f105;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_5890:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f90, %zp_adaptive_resample_f56, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f142, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_adaptive_resample_p19, %zp_adaptive_resample_f90, %zp_adaptive_resample_f142;
  @!%zp_adaptive_resample_p19 bra	zp_adaptive_resample_$Lt_17_36610;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f143, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_28;

zp_adaptive_resample_$Lt_17_36610:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f144, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p20, %zp_adaptive_resample_f90, %zp_adaptive_resample_f144;
  @!%zp_adaptive_resample_p20 bra	zp_adaptive_resample_$Lt_17_37122;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f143, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_28;

zp_adaptive_resample_$Lt_17_37122:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f145, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_adaptive_resample_f146, %zp_adaptive_resample_f90, %zp_adaptive_resample_f145;
  ld.const.f32	%zp_adaptive_resample_f147, [$object_records+168];
  mul.ftz.f32	%zp_adaptive_resample_f148, %zp_adaptive_resample_f147, %zp_adaptive_resample_f146;
  sin.approx.ftz.f32	%zp_adaptive_resample_f149, %zp_adaptive_resample_f146;
  div.approx.ftz.f32	%zp_adaptive_resample_f150, %zp_adaptive_resample_f149, %zp_adaptive_resample_f146;
  sin.approx.ftz.f32	%zp_adaptive_resample_f151, %zp_adaptive_resample_f148;
  div.approx.ftz.f32	%zp_adaptive_resample_f152, %zp_adaptive_resample_f151, %zp_adaptive_resample_f148;
  mul.ftz.f32	%zp_adaptive_resample_f143, %zp_adaptive_resample_f150, %zp_adaptive_resample_f152;

zp_adaptive_resample_$LDWendi_fdividef_206_28:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f116, %zp_adaptive_resample_f57, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f153, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_adaptive_resample_p21, %zp_adaptive_resample_f116, %zp_adaptive_resample_f153;
  @!%zp_adaptive_resample_p21 bra	zp_adaptive_resample_$Lt_17_37634;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f154, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_26;

zp_adaptive_resample_$Lt_17_37634:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f155, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p22, %zp_adaptive_resample_f116, %zp_adaptive_resample_f155;
  @!%zp_adaptive_resample_p22 bra	zp_adaptive_resample_$Lt_17_38146;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f154, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_26;

zp_adaptive_resample_$Lt_17_38146:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f156, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_adaptive_resample_f157, %zp_adaptive_resample_f116, %zp_adaptive_resample_f156;
  ld.const.f32	%zp_adaptive_resample_f158, [$object_records+168];
  mul.ftz.f32	%zp_adaptive_resample_f159, %zp_adaptive_resample_f158, %zp_adaptive_resample_f157;
  sin.approx.ftz.f32	%zp_adaptive_resample_f160, %zp_adaptive_resample_f157;
  div.approx.ftz.f32	%zp_adaptive_resample_f161, %zp_adaptive_resample_f160, %zp_adaptive_resample_f157;
  sin.approx.ftz.f32	%zp_adaptive_resample_f162, %zp_adaptive_resample_f159;
  div.approx.ftz.f32	%zp_adaptive_resample_f163, %zp_adaptive_resample_f162, %zp_adaptive_resample_f159;
  mul.ftz.f32	%zp_adaptive_resample_f154, %zp_adaptive_resample_f161, %zp_adaptive_resample_f163;

zp_adaptive_resample_$LDWendi_fdividef_206_26:
// This BB is part of VPC 14.
  mul.ftz.f32	%zp_adaptive_resample_f58, %zp_adaptive_resample_f154, %zp_adaptive_resample_f143;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_18;

zp_adaptive_resample_$Lt_17_6402:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f58, 0F3f800000; //  1

zp_adaptive_resample_$LDWendi_expf_206_18:
// This BB is part of VPC 14.
  add.u32	%zp_adaptive_resample_r79, $object_records, 172;
  // Dead code: mov.u32	%_r80, %_r79;
  mov.u32	%zp_adaptive_resample_r81, 2;
  // Dead code: mov.u32	%_r82, %_r81;
  mov.u32	%zp_adaptive_resample_r83, 4;
  // Dead code: mov.u32	%_r84, %_r83;
  // Dead code: mov.u32	%_r85, %_r63;
  // Dead code: mov.u32	%_r86, %_r65;
  mov.u32	%zp_adaptive_resample_r87, 0;
  // Dead code: mov.u32	%_r88, %_r87;
  // Dead code: mov.u32	%_r89, 0;
  // Dead code: mov.u32	%_r90, %_r89;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr26, [%zp_adaptive_resample_r79];
  add.u32	$record_address26, $record_ptr26, $object_records;
  ld.const.u32	$buffer_address70, [$record_address26];
  ld.const.u32	$size46, [$record_address26+4];
  setp.ge.u32	$oob45, %zp_adaptive_resample_r63, $size46;
  ld.const.u32	$sz_x45, [$record_address26+4];
  ld.const.u32	$sz_y45, [$record_address26+8];
  mov.u32	$sz_z45, 3735927486;
  @$oob45 mov.u32	$exception_detail0, $buffer_address70;
  @$oob45 mov.b32	$exception_detail1, %zp_adaptive_resample_r81;
  @$oob45 mov.u32	$exception_detail2, $sz_x45;
  @$oob45 mov.u32	$exception_detail3, $sz_y45;
  @$oob45 mov.u32	$exception_detail4, $sz_z45;
  @$oob45 mov.b32	$exception_detail5, %zp_adaptive_resample_r83;
  @$oob45 mov.b32	$exception_detail6, %zp_adaptive_resample_r63;
  @$oob45 mov.b32	$exception_detail7, %zp_adaptive_resample_r65;
  @$oob45 mov.b32	$exception_detail8, %zp_adaptive_resample_r87;
  @$oob45 mov.u32	$current_instance, 1021;
  @$oob45 bra	$stack_overflow;
// This BB is part of VPC 14.
  mul.lo.u32	$offset46, %zp_adaptive_resample_r63, 4;
  add.u32	$buffer_address71, $buffer_address70, $offset46;
  ld.const.u32	$size47, [$record_address26+8];
  setp.ge.u32	$oob46, %zp_adaptive_resample_r65, $size47;
  ld.const.u32	$sz_x46, [$record_address26+4];
  ld.const.u32	$sz_y46, [$record_address26+8];
  mov.u32	$sz_z46, 3735927486;
  @$oob46 mov.u32	$exception_detail0, $buffer_address71;
  @$oob46 mov.b32	$exception_detail1, %zp_adaptive_resample_r81;
  @$oob46 mov.u32	$exception_detail2, $sz_x46;
  @$oob46 mov.u32	$exception_detail3, $sz_y46;
  @$oob46 mov.u32	$exception_detail4, $sz_z46;
  @$oob46 mov.b32	$exception_detail5, %zp_adaptive_resample_r83;
  @$oob46 mov.b32	$exception_detail6, %zp_adaptive_resample_r63;
  @$oob46 mov.b32	$exception_detail7, %zp_adaptive_resample_r65;
  @$oob46 mov.b32	$exception_detail8, %zp_adaptive_resample_r87;
  @$oob46 mov.u32	$current_instance, 1021;
  @$oob46 bra	$stack_overflow;
// This BB is part of VPC 14.
  ld.const.u32	$stride20, [$record_address26+16];
  mul.lo.u32	$offset47, %zp_adaptive_resample_r65, $stride20;
  add.u32	$buffer_address72, $buffer_address71, $offset47;
  cvta.global.u32	%zp_adaptive_resample_r91, $buffer_address72;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r92, %_r91;
  // Dead code: mov.s32	%_r93, %_r91;
  ld.f32	%zp_adaptive_resample_f164, [%zp_adaptive_resample_r91+0];
  fma.rn.ftz.f32	%zp_adaptive_resample_f165, %zp_adaptive_resample_f58, %zp_adaptive_resample_f24, %zp_adaptive_resample_f164;
  st.f32	[%zp_adaptive_resample_r91+0], %zp_adaptive_resample_f165;
  add.u32	%zp_adaptive_resample_r94, $object_records, 176;
  // Dead code: mov.u32	%_r95, %_r94;
  mov.u32	%zp_adaptive_resample_r96, 2;
  // Dead code: mov.u32	%_r97, %_r96;
  mov.u32	%zp_adaptive_resample_r98, 4;
  // Dead code: mov.u32	%_r99, %_r98;
  // Dead code: mov.u32	%_r100, %_r63;
  // Dead code: mov.u32	%_r101, %_r65;
  mov.u32	%zp_adaptive_resample_r102, 0;
  // Dead code: mov.u32	%_r103, %_r102;
  // Dead code: mov.u32	%_r104, 0;
  // Dead code: mov.u32	%_r105, %_r104;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr27, [%zp_adaptive_resample_r94];
  add.u32	$record_address27, $record_ptr27, $object_records;
  ld.const.u32	$buffer_address73, [$record_address27];
  ld.const.u32	$size48, [$record_address27+4];
  setp.ge.u32	$oob47, %zp_adaptive_resample_r63, $size48;
  ld.const.u32	$sz_x47, [$record_address27+4];
  ld.const.u32	$sz_y47, [$record_address27+8];
  mov.u32	$sz_z47, 3735927486;
  @$oob47 mov.u32	$exception_detail0, $buffer_address73;
  @$oob47 mov.b32	$exception_detail1, %zp_adaptive_resample_r96;
  @$oob47 mov.u32	$exception_detail2, $sz_x47;
  @$oob47 mov.u32	$exception_detail3, $sz_y47;
  @$oob47 mov.u32	$exception_detail4, $sz_z47;
  @$oob47 mov.b32	$exception_detail5, %zp_adaptive_resample_r98;
  @$oob47 mov.b32	$exception_detail6, %zp_adaptive_resample_r63;
  @$oob47 mov.b32	$exception_detail7, %zp_adaptive_resample_r65;
  @$oob47 mov.b32	$exception_detail8, %zp_adaptive_resample_r102;
  @$oob47 mov.u32	$current_instance, 1021;
  @$oob47 bra	$stack_overflow;
// This BB is part of VPC 14.
  mul.lo.u32	$offset48, %zp_adaptive_resample_r63, 4;
  add.u32	$buffer_address74, $buffer_address73, $offset48;
  ld.const.u32	$size49, [$record_address27+8];
  setp.ge.u32	$oob48, %zp_adaptive_resample_r65, $size49;
  ld.const.u32	$sz_x48, [$record_address27+4];
  ld.const.u32	$sz_y48, [$record_address27+8];
  mov.u32	$sz_z48, 3735927486;
  @$oob48 mov.u32	$exception_detail0, $buffer_address74;
  @$oob48 mov.b32	$exception_detail1, %zp_adaptive_resample_r96;
  @$oob48 mov.u32	$exception_detail2, $sz_x48;
  @$oob48 mov.u32	$exception_detail3, $sz_y48;
  @$oob48 mov.u32	$exception_detail4, $sz_z48;
  @$oob48 mov.b32	$exception_detail5, %zp_adaptive_resample_r98;
  @$oob48 mov.b32	$exception_detail6, %zp_adaptive_resample_r63;
  @$oob48 mov.b32	$exception_detail7, %zp_adaptive_resample_r65;
  @$oob48 mov.b32	$exception_detail8, %zp_adaptive_resample_r102;
  @$oob48 mov.u32	$current_instance, 1021;
  @$oob48 bra	$stack_overflow;
// This BB is part of VPC 14.
  ld.const.u32	$stride21, [$record_address27+16];
  mul.lo.u32	$offset49, %zp_adaptive_resample_r65, $stride21;
  add.u32	$buffer_address75, $buffer_address74, $offset49;
  cvta.global.u32	%zp_adaptive_resample_r106, $buffer_address75;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r92, %_r106;
  // Dead code: mov.s32	%_r107, %_r106;
  ld.f32	%zp_adaptive_resample_f166, [%zp_adaptive_resample_r106+0];
  add.ftz.f32	%zp_adaptive_resample_f167, %zp_adaptive_resample_f166, %zp_adaptive_resample_f58;
  st.f32	[%zp_adaptive_resample_r106+0], %zp_adaptive_resample_f167;
  ld.const.s32	%zp_adaptive_resample_r21, [$object_records+216];
  bra.uni	zp_adaptive_resample_$Lt_17_38658;

zp_adaptive_resample_$Lt_17_35842:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f168, 0Fbf000000; //  -0.5
  add.ftz.f32	%zp_adaptive_resample_f169, %zp_adaptive_resample_f9, %zp_adaptive_resample_f168;
  mov.f32	%zp_adaptive_resample_f170, 0Fbf000000; //  -0.5
  add.ftz.f32	%zp_adaptive_resample_f171, %zp_adaptive_resample_f5, %zp_adaptive_resample_f170;
  sub.ftz.f32	%zp_adaptive_resample_f172, %zp_adaptive_resample_f171, %zp_adaptive_resample_f45;
  cvt.rpi.ftz.f32.f32	%zp_adaptive_resample_f173, %zp_adaptive_resample_f172;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r108, %zp_adaptive_resample_f173;
  mov.s32	%zp_adaptive_resample_r109, 0;
  max.s32	%zp_adaptive_resample_r110, %zp_adaptive_resample_r108, %zp_adaptive_resample_r109;
  add.ftz.f32	%zp_adaptive_resample_f174, %zp_adaptive_resample_f171, %zp_adaptive_resample_f45;
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f175, %zp_adaptive_resample_f174;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r111, %zp_adaptive_resample_f175;
  ld.const.u32	%zp_adaptive_resample_r112, [$object_records+160];
  sub.u32	%zp_adaptive_resample_r113, %zp_adaptive_resample_r112, 1;
  min.u32	%zp_adaptive_resample_r114, %zp_adaptive_resample_r111, %zp_adaptive_resample_r113;
  sub.ftz.f32	%zp_adaptive_resample_f176, %zp_adaptive_resample_f169, %zp_adaptive_resample_f45;
  cvt.rpi.ftz.f32.f32	%zp_adaptive_resample_f177, %zp_adaptive_resample_f176;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r115, %zp_adaptive_resample_f177;
  mov.s32	%zp_adaptive_resample_r116, 0;
  max.s32	%zp_adaptive_resample_r117, %zp_adaptive_resample_r115, %zp_adaptive_resample_r116;
  sub.s32	%zp_adaptive_resample_r118, %zp_adaptive_resample_r114, 1;
  setp.gt.s32	%zp_adaptive_resample_p23, %zp_adaptive_resample_r110, %zp_adaptive_resample_r114;
  @%zp_adaptive_resample_p23 bra	zp_adaptive_resample_$Lt_17_38658;
// This BB is part of VPC 14.
  // Dead code: sub.s32	%_r119, %_r118, %_r110;
  // Dead code: add.s32	%_r120, %_r119, 2;
  // Dead code: mov.s32	%_r121, 1;
  // Dead code: max.s32	%_r122, %_r120, %_r121;
  // Dead code: mov.s32	%_r123, %_r122;

zp_adaptive_resample_$Lt_17_39170:
// This BB is part of VPC 14.
  ld.const.f32	%zp_adaptive_resample_f178, [$object_records+180];
  add.ftz.f32	%zp_adaptive_resample_f179, %zp_adaptive_resample_f178, %zp_adaptive_resample_f169;
  ld.const.u32	%zp_adaptive_resample_r124, [$object_records+164];
  sub.u32	%zp_adaptive_resample_r125, %zp_adaptive_resample_r124, 1;
  cvt.rmi.ftz.f32.f32	%zp_adaptive_resample_f180, %zp_adaptive_resample_f179;
  cvt.rzi.ftz.sat.s32.f32	%zp_adaptive_resample_r126, %zp_adaptive_resample_f180;
  min.u32	%zp_adaptive_resample_r127, %zp_adaptive_resample_r126, %zp_adaptive_resample_r125;
  sub.s32	%zp_adaptive_resample_r128, %zp_adaptive_resample_r127, 1;
  setp.gt.s32	%zp_adaptive_resample_p24, %zp_adaptive_resample_r117, %zp_adaptive_resample_r127;
  @%zp_adaptive_resample_p24 bra	zp_adaptive_resample_$Lt_17_39426;
// This BB is part of VPC 14.
  // Dead code: sub.s32	%_r129, %_r128, %_r117;
  // Dead code: add.s32	%_r130, %_r129, 2;
  // Dead code: mov.s32	%_r131, 1;
  // Dead code: max.s32	%_r132, %_r130, %_r131;
  cvt.rn.f32.u32	%zp_adaptive_resample_f181, %zp_adaptive_resample_r118;
  mov.f32	%zp_adaptive_resample_f182, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f183, %zp_adaptive_resample_f181, %zp_adaptive_resample_f182;
  sub.ftz.f32	%zp_adaptive_resample_f184, %zp_adaptive_resample_f5, %zp_adaptive_resample_f183;
  abs.ftz.f32	%zp_adaptive_resample_f185, %zp_adaptive_resample_f184;
  // Dead code: mov.s32	%_r133, %_r132;

zp_adaptive_resample_$Lt_17_39938:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r134, %zp_adaptive_resample_r128;
  cvt.rn.f32.u32	%zp_adaptive_resample_f186, %zp_adaptive_resample_r128;
  mov.f32	%zp_adaptive_resample_f187, 0F3f000000; //  0.5
  add.ftz.f32	%zp_adaptive_resample_f188, %zp_adaptive_resample_f186, %zp_adaptive_resample_f187;
  sub.ftz.f32	%zp_adaptive_resample_f189, %zp_adaptive_resample_f9, %zp_adaptive_resample_f188;
  abs.ftz.f32	%zp_adaptive_resample_f190, %zp_adaptive_resample_f189;
  ld.const.f32	%zp_adaptive_resample_f45, [$object_records+180];
  set.ftz.gt.u32.f32	%zp_adaptive_resample_r135, %zp_adaptive_resample_f190, %zp_adaptive_resample_f45;
  neg.s32	%zp_adaptive_resample_r136, %zp_adaptive_resample_r135;
  set.ftz.gt.u32.f32	%zp_adaptive_resample_r137, %zp_adaptive_resample_f185, %zp_adaptive_resample_f45;
  neg.s32	%zp_adaptive_resample_r138, %zp_adaptive_resample_r137;
  or.b32	%zp_adaptive_resample_r139, %zp_adaptive_resample_r136, %zp_adaptive_resample_r138;
  mov.u32	%zp_adaptive_resample_r140, 0;
  setp.eq.s32	%zp_adaptive_resample_p25, %zp_adaptive_resample_r139, %zp_adaptive_resample_r140;
  @%zp_adaptive_resample_p25 bra	zp_adaptive_resample_$Lt_17_40194;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f191, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_40194:
// This BB is part of VPC 14.
  ld.const.s32	%zp_adaptive_resample_r73, [$object_records+200];
  mov.u32	%zp_adaptive_resample_r141, 0;
  setp.eq.s32	%zp_adaptive_resample_p26, %zp_adaptive_resample_r73, %zp_adaptive_resample_r141;
  @%zp_adaptive_resample_p26 bra	zp_adaptive_resample_$Lt_17_514;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r142, 1;
  setp.eq.s32	%zp_adaptive_resample_p27, %zp_adaptive_resample_r73, %zp_adaptive_resample_r142;
  @%zp_adaptive_resample_p27 bra	zp_adaptive_resample_$Lt_17_770;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r143, 2;
  setp.eq.s32	%zp_adaptive_resample_p28, %zp_adaptive_resample_r73, %zp_adaptive_resample_r143;
  @%zp_adaptive_resample_p28 bra	zp_adaptive_resample_$Lt_17_1026;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r144, 3;
  setp.eq.s32	%zp_adaptive_resample_p29, %zp_adaptive_resample_r73, %zp_adaptive_resample_r144;
  @%zp_adaptive_resample_p29 bra	zp_adaptive_resample_$Lt_17_1282;
// This BB is part of VPC 14.
  mov.u32	%zp_adaptive_resample_r145, 4;
  setp.eq.s32	%zp_adaptive_resample_p30, %zp_adaptive_resample_r73, %zp_adaptive_resample_r145;
  @%zp_adaptive_resample_p30 bra	zp_adaptive_resample_$Lt_17_1538;
// This BB is part of VPC 14.
  bra.uni	zp_adaptive_resample_$Lt_17_2050;

zp_adaptive_resample_$Lt_17_514:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f191, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_770:
// This BB is part of VPC 14.
  sub.ftz.f32	%zp_adaptive_resample_f192, %zp_adaptive_resample_f45, %zp_adaptive_resample_f190;
  mov.f32	%zp_adaptive_resample_f193, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f194, %zp_adaptive_resample_f192, %zp_adaptive_resample_f193;
  sub.ftz.f32	%zp_adaptive_resample_f195, %zp_adaptive_resample_f45, %zp_adaptive_resample_f185;
  mov.f32	%zp_adaptive_resample_f196, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f197, %zp_adaptive_resample_f195, %zp_adaptive_resample_f196;
  mul.ftz.f32	%zp_adaptive_resample_f191, %zp_adaptive_resample_f194, %zp_adaptive_resample_f197;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_1026:
// This BB is part of VPC 14.
  ld.const.f32	%zp_adaptive_resample_f198, [$object_records+220];
  mul.ftz.f32	%zp_adaptive_resample_f199, %zp_adaptive_resample_f198, %zp_adaptive_resample_f45;
  mul.ftz.f32	%zp_adaptive_resample_f200, %zp_adaptive_resample_f199, %zp_adaptive_resample_f45;
  neg.ftz.f32	%zp_adaptive_resample_f201, %zp_adaptive_resample_f200;
  mov.f32	%zp_adaptive_resample_f202, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f203, %zp_adaptive_resample_f201, %zp_adaptive_resample_f202;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f204, %zp_adaptive_resample_f203;
  mul.ftz.f32	%zp_adaptive_resample_f205, %zp_adaptive_resample_f190, %zp_adaptive_resample_f198;
  mul.ftz.f32	%zp_adaptive_resample_f206, %zp_adaptive_resample_f190, %zp_adaptive_resample_f205;
  neg.ftz.f32	%zp_adaptive_resample_f207, %zp_adaptive_resample_f206;
  mov.f32	%zp_adaptive_resample_f208, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f209, %zp_adaptive_resample_f207, %zp_adaptive_resample_f208;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f210, %zp_adaptive_resample_f209;
  sub.ftz.f32	%zp_adaptive_resample_f211, %zp_adaptive_resample_f210, %zp_adaptive_resample_f204;
  mov.f32	%zp_adaptive_resample_f212, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f213, %zp_adaptive_resample_f211, %zp_adaptive_resample_f212;
  mul.ftz.f32	%zp_adaptive_resample_f214, %zp_adaptive_resample_f185, %zp_adaptive_resample_f198;
  mul.ftz.f32	%zp_adaptive_resample_f215, %zp_adaptive_resample_f185, %zp_adaptive_resample_f214;
  neg.ftz.f32	%zp_adaptive_resample_f216, %zp_adaptive_resample_f215;
  mov.f32	%zp_adaptive_resample_f217, 0F3fb8aa3b; //  1.4427
  mul.ftz.f32	%zp_adaptive_resample_f218, %zp_adaptive_resample_f216, %zp_adaptive_resample_f217;
  ex2.approx.ftz.f32	%zp_adaptive_resample_f219, %zp_adaptive_resample_f218;
  sub.ftz.f32	%zp_adaptive_resample_f220, %zp_adaptive_resample_f219, %zp_adaptive_resample_f204;
  mov.f32	%zp_adaptive_resample_f221, 0F00000000; //  0
  max.ftz.f32	%zp_adaptive_resample_f222, %zp_adaptive_resample_f220, %zp_adaptive_resample_f221;
  mul.ftz.f32	%zp_adaptive_resample_f191, %zp_adaptive_resample_f213, %zp_adaptive_resample_f222;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_1282:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f223, %zp_adaptive_resample_f185, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f224, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p31, %zp_adaptive_resample_f223, %zp_adaptive_resample_f224;
  @!%zp_adaptive_resample_p31 bra	zp_adaptive_resample_$Lt_17_28674;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f225, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_adaptive_resample_f226, %zp_adaptive_resample_f223, %zp_adaptive_resample_f225;
  mul.ftz.f32	%zp_adaptive_resample_f227, %zp_adaptive_resample_f223, %zp_adaptive_resample_f226;
  mul.ftz.f32	%zp_adaptive_resample_f228, %zp_adaptive_resample_f223, %zp_adaptive_resample_f227;
  mov.f32	%zp_adaptive_resample_f229, 0F41400000; //  12
  mul.ftz.f32	%zp_adaptive_resample_f230, %zp_adaptive_resample_f223, %zp_adaptive_resample_f229;
  mul.ftz.f32	%zp_adaptive_resample_f231, %zp_adaptive_resample_f223, %zp_adaptive_resample_f230;
  sub.ftz.f32	%zp_adaptive_resample_f232, %zp_adaptive_resample_f231, %zp_adaptive_resample_f228;
  mov.f32	%zp_adaptive_resample_f233, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_adaptive_resample_f234, %zp_adaptive_resample_f223, %zp_adaptive_resample_f233, %zp_adaptive_resample_f232;
  mov.f32	%zp_adaptive_resample_f235, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_adaptive_resample_f236, %zp_adaptive_resample_f234, %zp_adaptive_resample_f235;
  mov.f32	%zp_adaptive_resample_f237, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f105, %zp_adaptive_resample_f236, %zp_adaptive_resample_f237;
  bra.uni	zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_15;

zp_adaptive_resample_$Lt_17_28674:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f238, 0F40e00000; //  7
  mul.ftz.f32	%zp_adaptive_resample_f239, %zp_adaptive_resample_f223, %zp_adaptive_resample_f238;
  mul.ftz.f32	%zp_adaptive_resample_f240, %zp_adaptive_resample_f223, %zp_adaptive_resample_f239;
  mul.ftz.f32	%zp_adaptive_resample_f241, %zp_adaptive_resample_f223, %zp_adaptive_resample_f240;
  mov.f32	%zp_adaptive_resample_f242, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_adaptive_resample_f243, %zp_adaptive_resample_f223, %zp_adaptive_resample_f242;
  fma.rn.ftz.f32	%zp_adaptive_resample_f244, %zp_adaptive_resample_f223, %zp_adaptive_resample_f243, %zp_adaptive_resample_f241;
  mov.f32	%zp_adaptive_resample_f245, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_adaptive_resample_f246, %zp_adaptive_resample_f244, %zp_adaptive_resample_f245;
  mov.f32	%zp_adaptive_resample_f247, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f105, %zp_adaptive_resample_f246, %zp_adaptive_resample_f247;

zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_15:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f248, %zp_adaptive_resample_f190, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f249, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p32, %zp_adaptive_resample_f248, %zp_adaptive_resample_f249;
  @!%zp_adaptive_resample_p32 bra	zp_adaptive_resample_$Lt_17_28930;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f250, 0F40155555; //  2.33333
  mul.ftz.f32	%zp_adaptive_resample_f251, %zp_adaptive_resample_f248, %zp_adaptive_resample_f250;
  mul.ftz.f32	%zp_adaptive_resample_f252, %zp_adaptive_resample_f248, %zp_adaptive_resample_f251;
  mul.ftz.f32	%zp_adaptive_resample_f253, %zp_adaptive_resample_f248, %zp_adaptive_resample_f252;
  mov.f32	%zp_adaptive_resample_f254, 0F41400000; //  12
  mul.ftz.f32	%zp_adaptive_resample_f255, %zp_adaptive_resample_f248, %zp_adaptive_resample_f254;
  mul.ftz.f32	%zp_adaptive_resample_f256, %zp_adaptive_resample_f248, %zp_adaptive_resample_f255;
  sub.ftz.f32	%zp_adaptive_resample_f257, %zp_adaptive_resample_f256, %zp_adaptive_resample_f253;
  mov.f32	%zp_adaptive_resample_f258, 0Fc1a00000; //  -20
  fma.rn.ftz.f32	%zp_adaptive_resample_f259, %zp_adaptive_resample_f248, %zp_adaptive_resample_f258, %zp_adaptive_resample_f257;
  mov.f32	%zp_adaptive_resample_f260, 0F412aaaab; //  10.6667
  add.ftz.f32	%zp_adaptive_resample_f261, %zp_adaptive_resample_f259, %zp_adaptive_resample_f260;
  mov.f32	%zp_adaptive_resample_f262, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f131, %zp_adaptive_resample_f261, %zp_adaptive_resample_f262;
  bra.uni	zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_13;

zp_adaptive_resample_$Lt_17_28930:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f263, 0F40e00000; //  7
  mul.ftz.f32	%zp_adaptive_resample_f264, %zp_adaptive_resample_f248, %zp_adaptive_resample_f263;
  mul.ftz.f32	%zp_adaptive_resample_f265, %zp_adaptive_resample_f248, %zp_adaptive_resample_f264;
  mul.ftz.f32	%zp_adaptive_resample_f266, %zp_adaptive_resample_f248, %zp_adaptive_resample_f265;
  mov.f32	%zp_adaptive_resample_f267, 0Fc1400000; //  -12
  mul.ftz.f32	%zp_adaptive_resample_f268, %zp_adaptive_resample_f248, %zp_adaptive_resample_f267;
  fma.rn.ftz.f32	%zp_adaptive_resample_f269, %zp_adaptive_resample_f248, %zp_adaptive_resample_f268, %zp_adaptive_resample_f266;
  mov.f32	%zp_adaptive_resample_f270, 0F40aaaaab; //  5.33333
  add.ftz.f32	%zp_adaptive_resample_f271, %zp_adaptive_resample_f269, %zp_adaptive_resample_f270;
  mov.f32	%zp_adaptive_resample_f272, 0F3e2aaaab; //  0.166667
  mul.ftz.f32	%zp_adaptive_resample_f131, %zp_adaptive_resample_f271, %zp_adaptive_resample_f272;

zp_adaptive_resample_$LDWendi__Z10mitchell1Df_206_13:
// This BB is part of VPC 14.
  mul.ftz.f32	%zp_adaptive_resample_f191, %zp_adaptive_resample_f131, %zp_adaptive_resample_f105;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_1538:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f223, %zp_adaptive_resample_f185, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f273, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_adaptive_resample_p33, %zp_adaptive_resample_f223, %zp_adaptive_resample_f273;
  @!%zp_adaptive_resample_p33 bra	zp_adaptive_resample_$Lt_17_40706;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f143, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_11;

zp_adaptive_resample_$Lt_17_40706:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f274, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p34, %zp_adaptive_resample_f223, %zp_adaptive_resample_f274;
  @!%zp_adaptive_resample_p34 bra	zp_adaptive_resample_$Lt_17_41218;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f143, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_11;

zp_adaptive_resample_$Lt_17_41218:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f275, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_adaptive_resample_f276, %zp_adaptive_resample_f223, %zp_adaptive_resample_f275;
  ld.const.f32	%zp_adaptive_resample_f277, [$object_records+168];
  mul.ftz.f32	%zp_adaptive_resample_f278, %zp_adaptive_resample_f277, %zp_adaptive_resample_f276;
  sin.approx.ftz.f32	%zp_adaptive_resample_f279, %zp_adaptive_resample_f278;
  div.approx.ftz.f32	%zp_adaptive_resample_f280, %zp_adaptive_resample_f279, %zp_adaptive_resample_f278;
  sin.approx.ftz.f32	%zp_adaptive_resample_f281, %zp_adaptive_resample_f276;
  div.approx.ftz.f32	%zp_adaptive_resample_f282, %zp_adaptive_resample_f281, %zp_adaptive_resample_f276;
  mul.ftz.f32	%zp_adaptive_resample_f143, %zp_adaptive_resample_f280, %zp_adaptive_resample_f282;

zp_adaptive_resample_$LDWendi_fdividef_206_11:
// This BB is part of VPC 14.
  div.approx.ftz.f32	%zp_adaptive_resample_f248, %zp_adaptive_resample_f190, %zp_adaptive_resample_f45;
  mov.f32	%zp_adaptive_resample_f283, 0F3727c5ac; //  1e-05
  setp.ftz.lt.f32	%zp_adaptive_resample_p35, %zp_adaptive_resample_f248, %zp_adaptive_resample_f283;
  @!%zp_adaptive_resample_p35 bra	zp_adaptive_resample_$Lt_17_41730;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f154, 0F3f800000; //  1
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_9;

zp_adaptive_resample_$Lt_17_41730:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f284, 0F3f800000; //  1
  setp.ftz.gt.f32	%zp_adaptive_resample_p36, %zp_adaptive_resample_f248, %zp_adaptive_resample_f284;
  @!%zp_adaptive_resample_p36 bra	zp_adaptive_resample_$Lt_17_42242;
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f154, 0F00000000; //  0
  bra.uni	zp_adaptive_resample_$LDWendi_fdividef_206_9;

zp_adaptive_resample_$Lt_17_42242:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f285, 0F40490fdb; //  3.14159
  mul.ftz.f32	%zp_adaptive_resample_f286, %zp_adaptive_resample_f248, %zp_adaptive_resample_f285;
  ld.const.f32	%zp_adaptive_resample_f287, [$object_records+168];
  mul.ftz.f32	%zp_adaptive_resample_f288, %zp_adaptive_resample_f287, %zp_adaptive_resample_f286;
  sin.approx.ftz.f32	%zp_adaptive_resample_f289, %zp_adaptive_resample_f288;
  div.approx.ftz.f32	%zp_adaptive_resample_f290, %zp_adaptive_resample_f289, %zp_adaptive_resample_f288;
  sin.approx.ftz.f32	%zp_adaptive_resample_f291, %zp_adaptive_resample_f286;
  div.approx.ftz.f32	%zp_adaptive_resample_f292, %zp_adaptive_resample_f291, %zp_adaptive_resample_f286;
  mul.ftz.f32	%zp_adaptive_resample_f154, %zp_adaptive_resample_f290, %zp_adaptive_resample_f292;

zp_adaptive_resample_$LDWendi_fdividef_206_9:
// This BB is part of VPC 14.
  mul.ftz.f32	%zp_adaptive_resample_f191, %zp_adaptive_resample_f154, %zp_adaptive_resample_f143;
  bra.uni	zp_adaptive_resample_$LDWendi_expf_206_1;

zp_adaptive_resample_$Lt_17_2050:
// This BB is part of VPC 14.
  mov.f32	%zp_adaptive_resample_f191, 0F3f800000; //  1

zp_adaptive_resample_$LDWendi_expf_206_1:
// This BB is part of VPC 14.
  add.u32	%zp_adaptive_resample_r146, $object_records, 172;
  // Dead code: mov.u32	%_r147, %_r146;
  mov.u32	%zp_adaptive_resample_r148, 2;
  // Dead code: mov.u32	%_r149, %_r148;
  mov.u32	%zp_adaptive_resample_r150, 4;
  // Dead code: mov.u32	%_r151, %_r150;
  // Dead code: mov.u32	%_r152, %_r118;
  // Dead code: mov.u32	%_r153, %_r128;
  mov.u32	%zp_adaptive_resample_r154, 0;
  // Dead code: mov.u32	%_r155, %_r154;
  // Dead code: mov.u32	%_r156, 0;
  // Dead code: mov.u32	%_r157, %_r156;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr28, [%zp_adaptive_resample_r146];
  add.u32	$record_address28, $record_ptr28, $object_records;
  ld.const.u32	$buffer_address76, [$record_address28];
  ld.const.u32	$size50, [$record_address28+4];
  setp.ge.u32	$oob49, %zp_adaptive_resample_r118, $size50;
  ld.const.u32	$sz_x49, [$record_address28+4];
  ld.const.u32	$sz_y49, [$record_address28+8];
  mov.u32	$sz_z49, 3735927486;
  @$oob49 mov.u32	$exception_detail0, $buffer_address76;
  @$oob49 mov.b32	$exception_detail1, %zp_adaptive_resample_r148;
  @$oob49 mov.u32	$exception_detail2, $sz_x49;
  @$oob49 mov.u32	$exception_detail3, $sz_y49;
  @$oob49 mov.u32	$exception_detail4, $sz_z49;
  @$oob49 mov.b32	$exception_detail5, %zp_adaptive_resample_r150;
  @$oob49 mov.b32	$exception_detail6, %zp_adaptive_resample_r118;
  @$oob49 mov.b32	$exception_detail7, %zp_adaptive_resample_r128;
  @$oob49 mov.b32	$exception_detail8, %zp_adaptive_resample_r154;
  @$oob49 mov.u32	$current_instance, 1021;
  @$oob49 bra	$stack_overflow;
// This BB is part of VPC 14.
  mul.lo.u32	$offset50, %zp_adaptive_resample_r118, 4;
  add.u32	$buffer_address77, $buffer_address76, $offset50;
  ld.const.u32	$size51, [$record_address28+8];
  setp.ge.u32	$oob50, %zp_adaptive_resample_r128, $size51;
  ld.const.u32	$sz_x50, [$record_address28+4];
  ld.const.u32	$sz_y50, [$record_address28+8];
  mov.u32	$sz_z50, 3735927486;
  @$oob50 mov.u32	$exception_detail0, $buffer_address77;
  @$oob50 mov.b32	$exception_detail1, %zp_adaptive_resample_r148;
  @$oob50 mov.u32	$exception_detail2, $sz_x50;
  @$oob50 mov.u32	$exception_detail3, $sz_y50;
  @$oob50 mov.u32	$exception_detail4, $sz_z50;
  @$oob50 mov.b32	$exception_detail5, %zp_adaptive_resample_r150;
  @$oob50 mov.b32	$exception_detail6, %zp_adaptive_resample_r118;
  @$oob50 mov.b32	$exception_detail7, %zp_adaptive_resample_r128;
  @$oob50 mov.b32	$exception_detail8, %zp_adaptive_resample_r154;
  @$oob50 mov.u32	$current_instance, 1021;
  @$oob50 bra	$stack_overflow;
// This BB is part of VPC 14.
  ld.const.u32	$stride22, [$record_address28+16];
  mul.lo.u32	$offset51, %zp_adaptive_resample_r128, $stride22;
  add.u32	$buffer_address78, $buffer_address77, $offset51;
  cvta.global.u32	%zp_adaptive_resample_r158, $buffer_address78;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r92, %_r158;
  // Dead code: mov.s32	%_r159, %_r158;
  mul.ftz.f32	%zp_adaptive_resample_f293, %zp_adaptive_resample_f191, %zp_adaptive_resample_f24;
  atom.add.f32	%zp_adaptive_resample_f294, [%zp_adaptive_resample_r158], %zp_adaptive_resample_f293;
  add.u32	%zp_adaptive_resample_r160, $object_records, 176;
  // Dead code: mov.u32	%_r161, %_r160;
  mov.u32	%zp_adaptive_resample_r162, 2;
  // Dead code: mov.u32	%_r163, %_r162;
  mov.u32	%zp_adaptive_resample_r164, 4;
  // Dead code: mov.u32	%_r165, %_r164;
  // Dead code: mov.u32	%_r166, %_r118;
  // Dead code: mov.u32	%_r167, %_r128;
  mov.u32	%zp_adaptive_resample_r168, 0;
  // Dead code: mov.u32	%_r169, %_r168;
  // Dead code: mov.u32	%_r170, 0;
  // Dead code: mov.u32	%_r171, %_r170;
  
  // Call to _rt_buffer_get begins
  ld.const.u32	$record_ptr29, [%zp_adaptive_resample_r160];
  add.u32	$record_address29, $record_ptr29, $object_records;
  ld.const.u32	$buffer_address79, [$record_address29];
  ld.const.u32	$size52, [$record_address29+4];
  setp.ge.u32	$oob51, %zp_adaptive_resample_r118, $size52;
  ld.const.u32	$sz_x51, [$record_address29+4];
  ld.const.u32	$sz_y51, [$record_address29+8];
  mov.u32	$sz_z51, 3735927486;
  @$oob51 mov.u32	$exception_detail0, $buffer_address79;
  @$oob51 mov.b32	$exception_detail1, %zp_adaptive_resample_r162;
  @$oob51 mov.u32	$exception_detail2, $sz_x51;
  @$oob51 mov.u32	$exception_detail3, $sz_y51;
  @$oob51 mov.u32	$exception_detail4, $sz_z51;
  @$oob51 mov.b32	$exception_detail5, %zp_adaptive_resample_r164;
  @$oob51 mov.b32	$exception_detail6, %zp_adaptive_resample_r118;
  @$oob51 mov.b32	$exception_detail7, %zp_adaptive_resample_r128;
  @$oob51 mov.b32	$exception_detail8, %zp_adaptive_resample_r168;
  @$oob51 mov.u32	$current_instance, 1021;
  @$oob51 bra	$stack_overflow;
// This BB is part of VPC 14.
  mul.lo.u32	$offset52, %zp_adaptive_resample_r118, 4;
  add.u32	$buffer_address80, $buffer_address79, $offset52;
  ld.const.u32	$size53, [$record_address29+8];
  setp.ge.u32	$oob52, %zp_adaptive_resample_r128, $size53;
  ld.const.u32	$sz_x52, [$record_address29+4];
  ld.const.u32	$sz_y52, [$record_address29+8];
  mov.u32	$sz_z52, 3735927486;
  @$oob52 mov.u32	$exception_detail0, $buffer_address80;
  @$oob52 mov.b32	$exception_detail1, %zp_adaptive_resample_r162;
  @$oob52 mov.u32	$exception_detail2, $sz_x52;
  @$oob52 mov.u32	$exception_detail3, $sz_y52;
  @$oob52 mov.u32	$exception_detail4, $sz_z52;
  @$oob52 mov.b32	$exception_detail5, %zp_adaptive_resample_r164;
  @$oob52 mov.b32	$exception_detail6, %zp_adaptive_resample_r118;
  @$oob52 mov.b32	$exception_detail7, %zp_adaptive_resample_r128;
  @$oob52 mov.b32	$exception_detail8, %zp_adaptive_resample_r168;
  @$oob52 mov.u32	$current_instance, 1021;
  @$oob52 bra	$stack_overflow;
// This BB is part of VPC 14.
  ld.const.u32	$stride23, [$record_address29+16];
  mul.lo.u32	$offset53, %zp_adaptive_resample_r128, $stride23;
  add.u32	$buffer_address81, $buffer_address80, $offset53;
  cvta.global.u32	%zp_adaptive_resample_r172, $buffer_address81;
  // Call to _rt_buffer_get ends
  
  // Dead code: mov.s32	%_r92, %_r172;
  // Dead code: mov.s32	%_r173, %_r172;
  atom.add.f32	%zp_adaptive_resample_f295, [%zp_adaptive_resample_r172], %zp_adaptive_resample_f191;
  sub.s32	%zp_adaptive_resample_r128, %zp_adaptive_resample_r128, 1;
  setp.le.s32	%zp_adaptive_resample_p37, %zp_adaptive_resample_r117, %zp_adaptive_resample_r134;
  @%zp_adaptive_resample_p37 bra	zp_adaptive_resample_$Lt_17_39938;

zp_adaptive_resamplepostbody0:
// This BB is part of VPC 14.

zp_adaptive_resample_$Lt_17_39426:
// This BB is part of VPC 14.
  mov.s32	%zp_adaptive_resample_r174, %zp_adaptive_resample_r118;
  sub.s32	%zp_adaptive_resample_r118, %zp_adaptive_resample_r118, 1;
  setp.le.s32	%zp_adaptive_resample_p38, %zp_adaptive_resample_r110, %zp_adaptive_resample_r174;
  @%zp_adaptive_resample_p38 bra	zp_adaptive_resample_$Lt_17_39170;
// This BB is part of VPC 14.
  ld.const.s32	%zp_adaptive_resample_r21, [$object_records+216];

zp_adaptive_resample_$Lt_17_38658:
// This BB is part of VPC 14.
  add.s32	%zp_adaptive_resample_r23, %zp_adaptive_resample_r23, 1;
  setp.lt.u32	%zp_adaptive_resample_p39, %zp_adaptive_resample_r23, %zp_adaptive_resample_r21;
  @%zp_adaptive_resample_p39 bra	zp_adaptive_resample_$Lt_17_33794;

zp_adaptive_resamplepostbody1:
// This BB is part of VPC 14.

zp_adaptive_resample_$Lt_17_33282:
// This BB is part of VPC 14.
  add.s32	%zp_adaptive_resample_r20, %zp_adaptive_resample_r20, 1;
  setp.lt.u32	%zp_adaptive_resample_p40, %zp_adaptive_resample_r20, %zp_adaptive_resample_r21;
  @%zp_adaptive_resample_p40 bra	zp_adaptive_resample_$Lt_17_33026;

zp_adaptive_resamplepostbody2:
// This BB is part of VPC 14.

zp_adaptive_resample_$LBB101__Z20zp_adaptive_resamplev:
// This BB is part of VPC 14.
  mov.u32	$virtual_pc, $return_vpc;
  bra.uni	$mainloop;
// This BB is not part of any VPC.

}
