# \file SConstruct
#
# \author Andrew Kerr <arkerr@gatech.edu>
# \date December 13, 2011
#
# \brief SConstruct for CUDA 4.1 examples to be used as a model for other tools
#

import os
import sys

import inspect
import platform
import re
import subprocess

from SCons import SConf

#
#
## The script begins here
# try to import an environment first
print "Building rules for Ocelot CUDA 4.1 SDK...."
try:
	Import('env')
	import builder
	print " Imported environment from higher level SCons script."
except:
	sys.path.append('../../scripts')	
	import builder
	env = builder.InitializeEnvironment(Environment(), Builder)
	print " Created a new environment."
	
	env['CUDA_PATH'] = '.'


#
# libsdk
#

sources = [	
	'sdk/bank_checker.cpp',
	'sdk/multithreading.cpp',
	'sdk/paramgl.cpp',
	'sdk/rendercheck_gl.cpp',
	'sdk/stopwatch_linux.cpp',
	'sdk/cmd_arg_reader.cpp',
	'sdk/cutil.cpp',
	'sdk/param.cpp',
	'sdk/stopwatch.cpp',
	'sdk/shrUtils.cpp'
]

libsdk = env.StaticLibrary('sdk4_1', sources)

# Declare test applications here.
#
# (appname, [sources])   -- assumes sources in "tests/{appname}/"
# (appname, [sources], path)   -- assumes sources in "tests/{path}/"
#
testApplications = [
	('AlignedTypes', ['alignedTypes.cu',], 'alignedTypes'),
	('AsyncAPI', ['asyncAPI.cu',], 'asyncAPI'),
	('BandwidthTest', ['bandwidthTest.cu',], 'bandwidthTest'),
	('BicubicTexture', ['bicubicTexture.cu','bicubicTexture.cpp',], 'bicubicTexture'),
	('BilateralFilter', ['filter_kernel.cu','bilateralFilter.cpp','bilateralFilter_gold.cpp','bmploader.cpp',], 'bilateralFilter'),
	('BinomialOptions', ['binomialOptions_SM13.cu','binomialOptions_SM10.cu','binomialOptions_gold.cpp','binomialOptions.cpp',], 'binomialOptions'),
	('BlackScholes', ['BlackScholes.cu','BlackScholes_gold.cpp',], 'BlackScholes'),
	('BoxFilter', ['boxFilter_kernel.cu','boxFilter.cpp','boxFilter_gold.cpp',], 'boxFilter'),
	('Clock', ['clock_kernel.cu','clock.cu',], 'clock'),
	('ConcurrentKernels', ['concurrentKernels.cu',], 'concurrentKernels'),
	('ConvolutionFFT2D', ['convolutionFFT2D.cu','main.cpp','convolutionFFT2D_gold.cpp',], 'convolutionFFT2D'),
	('ConvolutionSeparable', ['convolutionSeparable.cu','convolutionSeparable_gold.cpp','main.cpp',], 'convolutionSeparable'),
	('ConvolutionTexture', ['convolutionTexture.cu','main.cpp','convolutionTexture_gold.cpp',], 'convolutionTexture'),
	('CppIntegration', ['cppIntegration.cu','main.cpp','cppIntegration_gold.cpp',], 'cppIntegration'),
	('Dct8x8', ['dct8x8.cu','DCT8x8_Gold.cpp','BmpUtil.cpp',], 'dct8x8'),
	('DeviceQuery', ['deviceQuery.cpp',], 'deviceQuery'),
#	('DeviceQueryDrv', ['deviceQueryDrv.cpp',], 'deviceQueryDrv'),
	('DwtHaar1D', ['dwtHaar1D.cu'], 'dwtHaar1D'),
	('Dxtc', ['dxtc.cu',], 'dxtc'),
	('Eigenvalues', ['main.cu','bisect_large.cu','bisect_small.cu','gerschgorin.cpp','matlab.cpp',], 'eigenvalues'),
	('FDTD3d', ['FDTD3dGPU.cu','FDTD3dReference.cpp','FDTD3d.cpp',], 'FDTD3d'),
	('FastWalshTransform', ['fastWalshTransform.cu','fastWalshTransform_gold.cpp',], 'fastWalshTransform'),
	('FluidsGL', ['fluidsGL_kernels.cu','fluidsGL.cpp',], 'fluidsGL'),
	('FunctionPointers', ['FunctionPointers_kernels.cu','FunctionPointers.cpp',], 'FunctionPointers'),
	('HSOpticalFlow', ['flowCUDA.cu','flowGold.cpp','main.cpp',], 'HSOpticalFlow'),
	('Histogram', ['histogram256.cu','histogram64.cu','main.cpp','histogram_gold.cpp',], 'histogram'),
	('ImageDenoising', ['imageDenoising.cu','imageDenoisingGL.cpp','bmploader.cpp',], 'imageDenoising'),
	('InlinePTX', ['inlinePTX.cu',], 'inlinePTX'),
	('Interval', ['interval.cu',], 'Interval'),
	('LineOfSight', ['lineOfSight.cu',], 'lineOfSight'),
	('Mandelbrot', ['Mandelbrot_sm13.cu','Mandelbrot_kernel.cu','Mandelbrot_sm11.cu','Mandelbrot_gold.cpp','Mandelbrot.cpp',], 'Mandelbrot'),
	('MarchingCubes', ['marchingCubes_kernel.cu','marchingCubes.cpp',], 'marchingCubes'),
	('MatrixMul', ['matrixMul.cu','matrixMul_gold.cpp',], 'matrixMul'),
#	('MatrixMulDrv', ['matrixMul_kernel.cu','matrixMul_gold.cpp','matrixMulDrv.cpp',], 'matrixMulDrv'),
#	('MatrixMulDynlinkJIT', ['matrixMulDynlinkJIT.cpp','matrixMul_gold.cpp',], 'matrixMulDynlinkJIT'),
	('MergeSort', ['mergeSort.cu','bitonic.cu','mergeSort_validate.cpp','main.cpp','mergeSort_host.cpp',], 'mergeSort'),
	('MersenneTwister', ['MersenneTwister.cu','MersenneTwister_gold.cpp','genmtrand.c'], 'MersenneTwister'),
	('MonteCarlo', ['MonteCarlo_SM13.cu','MonteCarlo_SM10.cu','MonteCarlo_gold.cpp','MonteCarlo.cpp',], 'MonteCarlo'),
	('MonteCarloMultiGPU', ['MonteCarlo_SM13.cu','MonteCarlo_SM10.cu','MonteCarlo_gold.cpp','MonteCarloMultiGPU.cpp',], 'MonteCarloMultiGPU'),
	('Nbody', ['bodysystemcuda.cu','nbody.cpp','render_particles.cpp',], 'nbody'),
	('Newdelete', ['newdelete.cu',], 'newdelete'),
	('OceanFFT', ['oceanFFT_kernel.cu','oceanFFT.cpp',], 'oceanFFT'),
	('Particles', ['particleSystem.cu','particles.cpp','shaders.cpp','particleSystem.cpp','render_particles.cpp',], 'particles'),
	('PostProcessGL', ['postProcessGL.cu','main.cpp',], 'postProcessGL'),
#	('Ptxjit', ['ptxjit.cpp',], 'ptxjit'),
	('QuasirandomGenerator', ['quasirandomGenerator_SM13.cu','quasirandomGenerator_SM10.cu','quasirandomGenerator.cpp','quasirandomGenerator_gold.cpp',], 'quasirandomGenerator'),
	('RadixSortThrust', ['radixSortThrust.cu',], 'radixSortThrust'),
	('RecursiveGaussian', ['recursiveGaussian.cu','recursiveGaussian.cpp',], 'recursiveGaussian'),
	('Reduction', ['reduction_kernel.cu','reduction.cpp',], 'reduction'),
	('ScalarProd', ['scalarProd.cu','scalarProd_gold.cpp',], 'scalarProd'),
	('Scan', ['scan.cu','main.cpp','scan_gold.cpp',], 'scan'),
	('SimpleAssert', ['simpleAssert.cu',], 'simpleAssert'),
	('SimpleAtomicIntrinsics', ['simpleAtomicIntrinsics.cu','simpleAtomicIntrinsics_gold.cpp',], 'simpleAtomicIntrinsics'),
	('SimpleCubemapTexture', ['simpleCubemapTexture.cu',], 'simpleCubemapTexture'),
	('SimpleGL', ['simpleGL_kernel.cu','simpleGL.cpp',], 'simpleGL'),
	('SimpleLayeredTexture', ['simpleLayeredTexture.cu',], 'simpleLayeredTexture'),
#	('SimpleMPI', ['simpleMPI.cu','simpleMPI.cpp',], 'simpleMPI'),
	('SimpleMultiCopy', ['simpleMultiCopy.cu',], 'simpleMultiCopy'),
	('SimpleMultiGPU', ['simpleMultiGPU_kernel.cu','simpleMultiGPU.cpp',], 'simpleMultiGPU'),
#	('SimpleP2P', ['simpleP2P.cu',], 'simpleP2P'),
	('SimplePitchLinearTexture', ['simplePitchLinearTexture.cu',], 'simplePitchLinearTexture'),
	('SimplePrintf', ['simplePrintf.cu'], 'simplePrintf'),
	('SimpleStreams', ['simpleStreams.cu',], 'simpleStreams'),
	#('SimpleSurfaceWrite', ['simpleSurfaceWrite_kernel.cu','simpleSurfaceWrite.cu',], 'simpleSurfaceWrite'),
	('SimpleTemplates', ['simpleTemplates_kernel.cu','simpleTemplates.cu',], 'simpleTemplates'),
	('SimpleTexture', ['simpleTexture.cu',], 'simpleTexture'),
	('SimpleTexture3D', ['simpleTexture3D_kernel.cu','simpleTexture3D.cpp',], 'simpleTexture3D'),
#	('SimpleTextureDrv', ['simpleTexture_kernel.cu','simpleTextureDrv.cpp',], 'simpleTextureDrv'),
	('SimpleVoteIntrinsics', ['simpleVoteIntrinsics.cu',], 'simpleVoteIntrinsics'),
	('SimpleZeroCopy', ['simpleZeroCopy.cu',], 'simpleZeroCopy'),
	('SmokeParticles', ['ParticleSystem.cu','SmokeShaders.cpp','ParticleSystem.cpp','GLSLProgram.cpp','SmokeRenderer.cpp','framebufferObject.cpp','renderbuffer.cpp','particleDemo.cpp',], 'smokeParticles'),
	('SobelFilter', ['SobelFilter_kernels.cu','SobelFilter.cpp',], 'SobelFilter'),
	('SobolQRNG', ['sobol_gpu.cu','sobol.cpp','sobol_gold.cpp','sobol_primitives.cpp',], 'SobolQRNG'),
	('SortingNetworks', ['oddEvenMergeSort.cu','bitonicSort.cu','sortingNetworks_validate.cpp','main.cpp',], 'sortingNetworks'),
	('Template', ['template.cu','template_gold.cpp',], 'template'),
	('ThreadFenceReduction', ['threadFenceReduction.cu',], 'threadFenceReduction'),
#	('ThreadMigration', ['threadMigration.cu','threadMigration.cpp',], 'threadMigration'),
	('Transpose', ['transpose.cu',], 'transpose'),
	('VectorAdd', ['vectorAdd.cu',], 'vectorAdd'),
#	('VectorAddDrv', ['vectorAddDrv.cpp',], 'vectorAddDrv'),
#	('VolumeFiltering', ['volumeFilter_kernel.cu','volumeRender_kernel.cu','volumeFiltering.cpp','volume.cpp',], 'volumeFiltering'),
   ('VolumeRender', ['volumeRender_kernel.cu','volumeRender.cpp',], 'volumeRender'),

]
#
# Identify applications requiring CUFFT or CUBLAS that lack "FFT" or "BLAS" in their names 
#
specificallyRequiresCufft = ('FluidsGL')
specificallyRequiresCublas = ('MatrixMul')

#
# Construct build rules for all tests
#

tests = []

paths = [ '-I' + env['CUDA_PATH'] + '/shared', 
          '-I' + env['CUDA_PATH'] + '/sdk',
          '-I' + env['CUDA_PATH'] ]

env.Append(CPPFLAGS = paths)
env.Append(LIBPATH = env['CUDA_PATHS'][1])
env.Append(LIBPATH = [os.path.join(env['install_path'], 'lib')])

for testApplication in testApplications:
	path = testApplication[0] if len(testApplication) == 2 else testApplication[2]
	additionalLibs = []
	if "FFT" in testApplication[0] or testApplication[0] in specificallyRequiresCufft:
		additionalLibs.append('-lcufft')
	if "BLAS" in testApplication[0] or testApplication[0] in specificallyRequiresCublas:
		additionalLibs.append('-lcublas')
		
	localEnv = env.Clone()
	appIncludePath = ['-I' + env['CUDA_PATH'] + '/tests/' + path] + paths
	localEnv.Append(CPPFLAGS=appIncludePath)
	testApp = localEnv.Program(testApplication[0], 
		[builder.MapSource(env, 
			"tests/%s/%s" % (path, x), appIncludePath) for x in testApplication[1]], 
		LIBS=additionalLibs + ['-lglut', '-locelot', libsdk, '-lGLEW', '-lGLU'])
	tests.append(testApp)

	env.Alias('tests', testApp)

