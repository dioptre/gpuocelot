# \file SConstruct
#
# \author Andrew Kerr <arkerr@gatech.edu>
# \date December 13, 2011
#
# \brief SConstruct for CUDA 3.2 examples to be used as a model for other tools
#

import os
import sys

import inspect
import platform
import re
import subprocess

from SCons import SConf

#
#
## The script begins here
# try to import an environment first
print "Building rules for Ocelot CUDA 3.2 SDK...."
try:
	Import('env')
	import builder
	print " Imported environment from higher level SCons script."
except:
	sys.path.append('../../scripts')	
	import builder
	env = builder.InitializeEnvironment(Environment(), Builder)
	print " Created a new environment."
	
	env['CUDA_PATH'] = '.'
	
#
# libsdk
#

sdkSources = [
	'sdk/stopwatch_linux.cpp',
	'sdk/cmd_arg_reader.cpp',
	'sdk/cutil.cpp',
	'sdk/stopwatch.cpp',
	'sdk/bank_checker.cpp',
	'sdk/param.cpp',
	'sdk/paramgl.cpp',
	'sdk/rendercheck_gl.cpp',
	'sdk/multithreading.cpp',
	'shared/cmd_arg_reader.cpp',
	'shared/rendercheckGL.cpp',
	'shared/stopwatch.cpp',
	'shared/multithreading.cpp',
	'shared/shrUtils.cpp',
	'shared/stopwatch_linux.cpp'
]

libsdk3_2 = env.StaticLibrary('sdk_3_2', sdkSources)

# Declare test applications here.
#
# (appname, [sources])   -- assumes sources in "tests/{appname}/"
# (appname, [sources], path)   -- assumes sources in "tests/{path}/"
#
testApplications = [
	('AlignedTypes', ['alignedTypes.cu',], 'alignedTypes'),
	('AsyncAPI', ['asyncAPI.cu',], 'asyncAPI'),
	('BandwidthTest', ['bandwidthTest.cu',], 'bandwidthTest'),
	('BicubicTexture', ['bicubicTexture.cu','bicubicTexture-host.cpp'], 'bicubicTexture'),
	('BinomialOptions', 
		['binomialOptions.cpp', 'binomialOptions_gold.cpp', 'binomialOptions_SM13.cu', 'binomialOptions_SM10.cu'], 'binomialOptions'),
	('BlackScholes', ['BlackScholes.cu','BlackScholes_gold.cpp'], 'BlackScholes'),
	('BoxFilter', ['boxFilter_kernel.cu', 'boxFilter_gold.cpp', 'boxFilter.cpp'], 'boxFilter'),
	('Clock', ['clock.cu',], 'clock'),
	('ConvolutionFFT2D', ['convolutionFFT2D.cu','convolutionFFT2D_gold.cpp','main.cpp'], 'convolutionFFT2D'),
	('ConvolutionSeparable', ['convolutionSeparable.cu','convolutionSeparable_gold.cpp','main.cpp'], 'convolutionSeparable'),
	('ConvolutionTexture', ['convolutionTexture.cu', 'convolutionTexture_gold.cpp','main.cpp'], 'convolutionTexture'),
	('CppIntegration', ['cppIntegration.cu', 'cppIntegration_gold.cpp', 'main.cpp'], 'cppIntegration'),
	('Dct8x8', ['dct8x8.cu', 'DCT8x8_Gold.cpp', 'BmpUtil.cpp'], 'dct8x8'),
	('DeviceQuery', ['deviceQuery.cpp',], 'deviceQuery'),
	('DwtHaar1D', ['dwtHaar1D.cu',], 'dwtHaar1D'),
	('Dxtc', ['tests.cu', 'dxtc.cu'], 'dxtc'),
	('Eigenvalues', ['main.cu', 'matlab.cpp', 'gerschgorin.cpp', 'bisect_large.cu', 'bisect_small.cu'], 'eigenvalues'),
	('FluidsGL', ['fluidsGL.cu',], 'fluidsGL'),
	('FastWalshTransform', ['fastWalshTransform.cu', 'fastWalshTransform_gold.cpp'], 'fastWalshTransform'),
	('Histogram256', 
		['histogram256.cu', 'histogram64.cu', 'histogram_gold.cpp', 'main.cpp'], 'histogram'),
	('ImageDenoising', ['imageDenoising.cu', 'bmploader.cpp', 'imageDenoisingGL.cpp'], 'imageDenoising'),
	('Mandelbrot', ['Mandelbrot.cpp', 'Mandelbrot_sm11.cu', 'Mandelbrot_sm13.cu', 'Mandelbrot_gold.cpp']),
	('MatrixMul', ['matrixMul.cu', 'matrixMul_gold.cpp'], 'matrixMul'),
	('MersenneTwister', ['MersenneTwister.cu', 'MersenneTwister_gold.cpp', 'genmtrand.c']),
	('MonteCarlo', ['MonteCarlo_SM13.cu', 'MonteCarlo_SM10.cu', 'MonteCarlo_gold.cpp', 'MonteCarlo.cpp']),
	('Nbody', 
		['nbody.cpp', 'bodysystemcuda.cu', 'render_particles.cpp'], 'nbody'),
	('OceanFFT', ['oceanFFT_kernel.cu', 'oceanFFT.cpp'], 'oceanFFT'),
	#('Particles', ['particleSystem.cu', 'particles.cpp', 'render_particles.cpp', 'shaders.cpp','particleSystem.cpp'], 'particles'),
	('PostProcessGL', ['postProcessGL.cu', 'main.cpp'], 'postProcessGL'),
	('QuasirandomGenerator', 
		['quasirandomGenerator_SM13.cu', 'quasirandomGenerator_SM10.cu', 'quasirandomGenerator_gold.cpp', 'quasirandomGenerator.cpp' ], 'quasirandomGenerator'),
	('RecursiveGaussian', ['recursiveGaussian.cu', 'recursiveGaussian.cpp'], 'recursiveGaussian'),
	('Reduction', ['reduction_kernel.cu','reduction.cpp'], 'reduction'),
	('ScalarProd', ['scalarProd.cu', 'scalarProd_gold.cpp'], 'scalarProd'),
	('Scan', ['scan.cu', 'scan_gold.cpp','main.cpp'], 'scan'),
	('SimpleAtomicIntrinsics', ['simpleAtomicIntrinsics.cu', 'simpleAtomicIntrinsics_gold.cpp'], 'simpleAtomicIntrinsics'),
	('SimpleCUBLAS', ['simpleCUBLAS.c',], 'simpleCUBLAS'),
	('SimpleCUFFT', ['simpleCUFFT.cu',], 'simpleCUFFT'),
	('SimpleGL', ['simpleGL_kernel.cu', 'simpleGL.cpp'], 'simpleGL'),
	('SimpleMultiGPU', ['simpleMultiGPU_kernel.cu', 'simpleMultiGPU.cpp'], 'simpleMultiGPU'),
	('SimpleStreams', ['simpleStreams.cu',], 'simpleStreams'),
	('SimpleTemplates', ['simpleTemplates.cu',], 'simpleTemplates'),
	('SimpleTexture', ['simpleTexture.cu',], 'simpleTexture'),
	('SimpleTexture3D', ['simpleTexture3D_kernel.cu', 'simpleTexture3D.cpp'], 'simpleTexture3D'),
	('SimpleVoteIntrinsics', ['simpleVoteIntrinsics.cu',], 'simpleVoteIntrinsics'),
	('SimpleZeroCopy', ['simpleZeroCopy.cu',], 'simpleZeroCopy'),
	('SobelFilter', ['SobelFilter_kernels.cu', 'SobelFilter.cpp']),
	('SobolQRNG', ['sobol.cpp', 'sobol_gold.cpp', 'sobol_gpu.cu', 'sobol_primitives.cpp'], 'SobolQRNG'),
	('Template', ['template.cu', 'template_gold.cpp'], 'template'),
	('ThreadFenceReduction', ['threadFenceReduction.cu',], 'threadFenceReduction'),
	('Transpose', ['transpose.cu'], 'transpose'),
	('VolumeRender', ['volumeRender_kernel.cu', 'volumeRender.cpp'], 'volumeRender'),
]

#
# Identify applications requiring CUFFT or CUBLAS that lack "FFT" or "BLAS" in their names 
#
specificallyRequiresCufft = ('FluidsGL',)
specificallyRequiresCublas = ()

#
# Construct build rules for all tests
#


tests = []

paths = [ '-I' + env['CUDA_PATH'] + '/shared', 
          '-I' + env['CUDA_PATH'] + '/sdk',
          '-I' + env['CUDA_PATH'] ]

env.Append(CPPFLAGS = paths)
env.Append(LIBPATH = env['CUDA_PATHS'][1])
env.Append(LIBPATH = [os.path.join(env['install_path'], 'lib')])
	
for testApplication in testApplications:
	path = testApplication[0] if len(testApplication) == 2 else testApplication[2]
	additionalLibs = []
	if "FFT" in testApplication[0] or testApplication[0] in specificallyRequiresCufft:
		additionalLibs.append('-lcufft')
	if "BLAS" in testApplication[0] or testApplication[0] in specificallyRequiresCublas:
		additionalLibs.append('-lcublas')
	
	testApp = env.Program(testApplication[0],
		[builder.MapSource(env, 
			"tests/%s/%s" % (path, x), 
			(" ".join(paths) + " -I./" + env['CUDA_PATH'] + "/tests/%s") % (path,)) for x in testApplication[1]], 
		LIBS=additionalLibs + ['-lglut', libsdk3_2, '-lGLU', '-locelot', '-lGLEW'])
	tests.append(testApp)

	env.Alias('tests', testApp)


