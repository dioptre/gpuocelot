# 1 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.cpp"
# 1 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
# 46 "/usr/local/cuda3.2/cuda/bin/../include/device_types.h"
# 149 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3
typedef long ptrdiff_t;
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3
typedef unsigned long size_t;
# 1 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 1 3
# 69 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 1 3
# 42 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/device_types.h" 1 3
# 46 "/usr/local/cuda3.2/cuda/bin/../include/device_types.h" 3
enum cudaRoundMode
{
  cudaRoundNearest,
  cudaRoundZero,
  cudaRoundPosInf,
  cudaRoundMinInf
};
# 43 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 1 3
# 96 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
enum cudaError
{





  cudaSuccess = 0,





  cudaErrorMissingConfiguration = 1,





  cudaErrorMemoryAllocation = 2,





  cudaErrorInitializationError = 3,
# 131 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchFailure = 4,
# 140 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorPriorLaunchFailure = 5,
# 150 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchTimeout = 6,
# 159 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchOutOfResources = 7,





  cudaErrorInvalidDeviceFunction = 8,
# 174 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorInvalidConfiguration = 9,





  cudaErrorInvalidDevice = 10,





  cudaErrorInvalidValue = 11,





  cudaErrorInvalidPitchValue = 12,





  cudaErrorInvalidSymbol = 13,




  cudaErrorMapBufferObjectFailed = 14,




  cudaErrorUnmapBufferObjectFailed = 15,





  cudaErrorInvalidHostPointer = 16,





  cudaErrorInvalidDevicePointer = 17,





  cudaErrorInvalidTexture = 18,





  cudaErrorInvalidTextureBinding = 19,






  cudaErrorInvalidChannelDescriptor = 20,





  cudaErrorInvalidMemcpyDirection = 21,
# 255 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorAddressOfConstant = 22,
# 264 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorTextureFetchFailed = 23,
# 273 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorTextureNotBound = 24,
# 282 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorSynchronizationError = 25,





  cudaErrorInvalidFilterSetting = 26,





  cudaErrorInvalidNormSetting = 27,







  cudaErrorMixedDeviceExecution = 28,







  cudaErrorCudartUnloading = 29,




  cudaErrorUnknown = 30,





  cudaErrorNotYetImplemented = 31,
# 330 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorMemoryValueTooLarge = 32,






  cudaErrorInvalidResourceHandle = 33,







  cudaErrorNotReady = 34,






  cudaErrorInsufficientDriver = 35,
# 365 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorSetOnActiveProcess = 36,





  cudaErrorInvalidSurface = 37,





  cudaErrorNoDevice = 38,





  cudaErrorECCUncorrectable = 39,




  cudaErrorSharedObjectSymbolNotFound = 40,




  cudaErrorSharedObjectInitFailed = 41,





  cudaErrorUnsupportedLimit = 42,





  cudaErrorDuplicateVariableName = 43,





  cudaErrorDuplicateTextureName = 44,





  cudaErrorDuplicateSurfaceName = 45,
# 426 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorDevicesUnavailable = 46,




  cudaErrorInvalidKernelImage = 47,







  cudaErrorNoKernelImageForDevice = 48,
# 448 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
  cudaErrorIncompatibleDriverContext = 49,




  cudaErrorStartupFailure = 0x7f,





  cudaErrorApiFailureBase = 10000
};





enum cudaChannelFormatKind
{
  cudaChannelFormatKindSigned = 0,
  cudaChannelFormatKindUnsigned = 1,
  cudaChannelFormatKindFloat = 2,
  cudaChannelFormatKindNone = 3
};





struct cudaChannelFormatDesc
{
  int x;
  int y;
  int z;
  int w;
  enum cudaChannelFormatKind f;
};





struct cudaArray;





enum cudaMemcpyKind
{
  cudaMemcpyHostToHost = 0,
  cudaMemcpyHostToDevice = 1,
  cudaMemcpyDeviceToHost = 2,
  cudaMemcpyDeviceToDevice = 3
};






struct cudaPitchedPtr
{
  void *ptr;
  size_t pitch;
  size_t xsize;
  size_t ysize;
};






struct cudaExtent
{
  size_t width;
  size_t height;
  size_t depth;
};






struct cudaPos
{
  size_t x;
  size_t y;
  size_t z;
};





struct cudaMemcpy3DParms
{
  struct cudaArray *srcArray;
  struct cudaPos srcPos;
  struct cudaPitchedPtr srcPtr;

  struct cudaArray *dstArray;
  struct cudaPos dstPos;
  struct cudaPitchedPtr dstPtr;

  struct cudaExtent extent;
  enum cudaMemcpyKind kind;
};





struct cudaGraphicsResource;





enum cudaGraphicsRegisterFlags
{
  cudaGraphicsRegisterFlagsNone = 0
};





enum cudaGraphicsMapFlags
{
  cudaGraphicsMapFlagsNone = 0,
  cudaGraphicsMapFlagsReadOnly = 1,
  cudaGraphicsMapFlagsWriteDiscard = 2
};





enum cudaGraphicsCubeFace {
  cudaGraphicsCubeFacePositiveX = 0x00,
  cudaGraphicsCubeFaceNegativeX = 0x01,
  cudaGraphicsCubeFacePositiveY = 0x02,
  cudaGraphicsCubeFaceNegativeY = 0x03,
  cudaGraphicsCubeFacePositiveZ = 0x04,
  cudaGraphicsCubeFaceNegativeZ = 0x05
};





struct cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;

   int __cudaReserved[6];
};





enum cudaFuncCache
{
  cudaFuncCachePreferNone = 0,
  cudaFuncCachePreferShared = 1,
  cudaFuncCachePreferL1 = 2
};





enum cudaComputeMode
{
  cudaComputeModeDefault = 0,
  cudaComputeModeExclusive = 1,
  cudaComputeModeProhibited = 2
};





enum cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02
};





struct cudaDeviceProp
{
  char name[256];
  size_t totalGlobalMem;
  size_t sharedMemPerBlock;
  int regsPerBlock;
  int warpSize;
  size_t memPitch;
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int clockRate;
  size_t totalConstMem;
  int major;
  int minor;
  size_t textureAlignment;
  int deviceOverlap;
  int multiProcessorCount;
  int kernelExecTimeoutEnabled;
  int integrated;
  int canMapHostMemory;
  int computeMode;
  int maxTexture1D;
  int maxTexture2D[2];
  int maxTexture3D[3];
  int maxTexture2DArray[3];
  size_t surfaceAlignment;
  int concurrentKernels;
  int ECCEnabled;
  int pciBusID;
  int pciDeviceID;
  int tccDriver;
  int __cudaReserved[21];
};
# 768 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h" 3
typedef enum cudaError cudaError_t;





typedef struct CUstream_st *cudaStream_t;





typedef struct CUevent_st *cudaEvent_t;





typedef struct cudaGraphicsResource *cudaGraphicsResource_t;





typedef struct CUuuid_st cudaUUID_t;
# 44 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/surface_types.h" 1 3
# 63 "/usr/local/cuda3.2/cuda/bin/../include/surface_types.h" 3
enum cudaSurfaceBoundaryMode
{
  cudaBoundaryModeZero = 0,
  cudaBoundaryModeClamp = 1,
  cudaBoundaryModeTrap = 2
};





enum cudaSurfaceFormatMode
{
  cudaFormatModeForced = 0,
  cudaFormatModeAuto = 1
};





struct surfaceReference
{



  struct cudaChannelFormatDesc channelDesc;
};
# 45 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h" 1 3
# 63 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h" 3
enum cudaTextureAddressMode
{
  cudaAddressModeWrap = 0,
  cudaAddressModeClamp = 1,
  cudaAddressModeMirror = 2,
  cudaAddressModeBorder = 3
};





enum cudaTextureFilterMode
{
  cudaFilterModePoint = 0,
  cudaFilterModeLinear = 1
};





enum cudaTextureReadMode
{
  cudaReadModeElementType = 0,
  cudaReadModeNormalizedFloat = 1
};





struct textureReference
{



  int normalized;



  enum cudaTextureFilterMode filterMode;



  enum cudaTextureAddressMode addressMode[3];



  struct cudaChannelFormatDesc channelDesc;
  int __cudaReserved[16];
};
# 46 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 1 3
# 45 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 1 3
# 46 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 1 3
# 46 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 46 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/host_defines.h" 1 3
# 47 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 2 3
# 75 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 3
struct char1
{
  signed char x;
};


struct uchar1
{
  unsigned char x;
};


struct __attribute__((aligned(2))) char2
{
  signed char x, y;
};


struct __attribute__((aligned(2))) uchar2
{
  unsigned char x, y;
};


struct char3
{
  signed char x, y, z;
};


struct uchar3
{
  unsigned char x, y, z;
};


struct __attribute__((aligned(4))) char4
{
  signed char x, y, z, w;
};


struct __attribute__((aligned(4))) uchar4
{
  unsigned char x, y, z, w;
};


struct short1
{
  short x;
};


struct ushort1
{
  unsigned short x;
};


struct __attribute__((aligned(4))) short2
{
  short x, y;
};


struct __attribute__((aligned(4))) ushort2
{
  unsigned short x, y;
};


struct short3
{
  short x, y, z;
};


struct ushort3
{
  unsigned short x, y, z;
};


struct __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };


struct __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };


struct int1
{
  int x;
};


struct uint1
{
  unsigned int x;
};


struct __attribute__((aligned(8))) int2 { int x; int y; };


struct __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };


struct int3
{
  int x, y, z;
};


struct uint3
{
  unsigned int x, y, z;
};


struct __attribute__((aligned(16))) int4
{
  int x, y, z, w;
};


struct __attribute__((aligned(16))) uint4
{
  unsigned int x, y, z, w;
};


struct long1
{
  long int x;
};


struct ulong1
{
  unsigned long x;
};
# 229 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 3
struct __attribute__((aligned(2*sizeof(long int)))) long2
{
  long int x, y;
};


struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
  unsigned long int x, y;
};




struct long3
{
  long int x, y, z;
};


struct ulong3
{
  unsigned long int x, y, z;
};


struct __attribute__((aligned(16))) long4
{
  long int x, y, z, w;
};


struct __attribute__((aligned(16))) ulong4
{
  unsigned long int x, y, z, w;
};


struct float1
{
  float x;
};


struct __attribute__((aligned(8))) float2 { float x; float y; };


struct float3
{
  float x, y, z;
};


struct __attribute__((aligned(16))) float4
{
  float x, y, z, w;
};


struct longlong1
{
  long long int x;
};


struct ulonglong1
{
  unsigned long long int x;
};


struct __attribute__((aligned(16))) longlong2
{
  long long int x, y;
};


struct __attribute__((aligned(16))) ulonglong2
{
  unsigned long long int x, y;
};


struct longlong3
{
  long long int x, y, z;
};


struct ulonglong3
{
  unsigned long long int x, y, z;
};


struct __attribute__((aligned(16))) longlong4
{
  long long int x, y, z ,w;
};


struct __attribute__((aligned(16))) ulonglong4
{
  unsigned long long int x, y, z, w;
};


struct double1
{
  double x;
};


struct __attribute__((aligned(16))) double2
{
  double x, y;
};


struct double3
{
  double x, y, z;
};


struct __attribute__((aligned(16))) double4
{
  double x, y, z, w;
};
# 366 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 3
typedef struct char1 char1;

typedef struct uchar1 uchar1;

typedef struct char2 char2;

typedef struct uchar2 uchar2;

typedef struct char3 char3;

typedef struct uchar3 uchar3;

typedef struct char4 char4;

typedef struct uchar4 uchar4;

typedef struct short1 short1;

typedef struct ushort1 ushort1;

typedef struct short2 short2;

typedef struct ushort2 ushort2;

typedef struct short3 short3;

typedef struct ushort3 ushort3;

typedef struct short4 short4;

typedef struct ushort4 ushort4;

typedef struct int1 int1;

typedef struct uint1 uint1;

typedef struct int2 int2;

typedef struct uint2 uint2;

typedef struct int3 int3;

typedef struct uint3 uint3;

typedef struct int4 int4;

typedef struct uint4 uint4;

typedef struct long1 long1;

typedef struct ulong1 ulong1;

typedef struct long2 long2;

typedef struct ulong2 ulong2;

typedef struct long3 long3;

typedef struct ulong3 ulong3;

typedef struct long4 long4;

typedef struct ulong4 ulong4;

typedef struct float1 float1;

typedef struct float2 float2;

typedef struct float3 float3;

typedef struct float4 float4;

typedef struct longlong1 longlong1;

typedef struct ulonglong1 ulonglong1;

typedef struct longlong2 longlong2;

typedef struct ulonglong2 ulonglong2;

typedef struct longlong3 longlong3;

typedef struct ulonglong3 ulonglong3;

typedef struct longlong4 longlong4;

typedef struct ulonglong4 ulonglong4;

typedef struct double1 double1;

typedef struct double2 double2;

typedef struct double3 double3;

typedef struct double4 double4;
# 469 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h" 3
struct dim3
{
    unsigned int x, y, z;

    dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};


typedef struct dim3 dim3;
# 46 "/usr/local/cuda3.2/cuda/bin/../include/builtin_types.h" 2 3
# 70 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 2 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/crt/storage_class.h" 1 3
# 71 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 2 3
# 213 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 2 3
# 96 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 466 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 478 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 491 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 497 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 510 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 523 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 535 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 546 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 564 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 570 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 579 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 590 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 603 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 656 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 667 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 678 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 689 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 768 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 774 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 780 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 786 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 792 "/usr/local/cuda3.2/cuda/bin/../include/driver_types.h"
# 63 "/usr/local/cuda3.2/cuda/bin/../include/surface_types.h"
# 74 "/usr/local/cuda3.2/cuda/bin/../include/surface_types.h"
# 84 "/usr/local/cuda3.2/cuda/bin/../include/surface_types.h"
# 63 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h"
# 75 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h"
# 85 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h"
# 95 "/usr/local/cuda3.2/cuda/bin/../include/texture_types.h"
# 75 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 81 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 87 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 93 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 99 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 105 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 111 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 117 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 123 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 129 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 135 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 141 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 147 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 153 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 159 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 162 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 165 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 171 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 177 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 180 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 183 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 189 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 195 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 201 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 207 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 213 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 229 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 235 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 243 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 249 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 255 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 261 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 267 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 273 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 276 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 282 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 288 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 294 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 300 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 306 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 312 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 318 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 324 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 330 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 336 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 342 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 348 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 354 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 366 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 368 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 370 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 372 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 374 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 376 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 378 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 380 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 382 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 384 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 386 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 388 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 390 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 392 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 394 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 396 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 398 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 400 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 402 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 404 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 406 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 408 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 410 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 412 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 414 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 416 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 418 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 420 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 422 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 424 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 426 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 428 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 430 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 432 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 434 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 436 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 438 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 440 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 442 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 444 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 446 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 448 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 450 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 452 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 454 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 456 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 458 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 460 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 469 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 480 "/usr/local/cuda3.2/cuda/bin/../include/vector_types.h"
# 115 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit();
# 131 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize();
# 183 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetLimit(cudaLimit, size_t);
# 207 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetLimit(size_t *, cudaLimit);
# 237 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetCacheConfig(cudaFuncCache *);
# 278 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetCacheConfig(cudaFuncCache);
# 330 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError();
# 373 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPeekAtLastError();
# 387 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t);
# 418 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int *);
# 536 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp *, int);
# 555 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int *, const cudaDeviceProp *);
# 579 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int);
# 597 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int *);
# 626 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int *, int);
# 677 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(unsigned);
# 703 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t *);
# 719 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t);
# 753 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t, cudaEvent_t, unsigned);
# 771 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t);
# 789 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t);
# 821 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t *);
# 852 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t *, unsigned);
# 885 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t, cudaStream_t = 0);
# 914 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t);
# 946 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t);
# 966 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t);
# 1007 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t);
# 1046 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3, dim3, size_t = (0), cudaStream_t = 0);
# 1073 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void *, size_t, size_t);
# 1119 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const char *, cudaFuncCache);
# 1154 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const char *);
# 1187 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes *, const char *);
# 1209 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double *);
# 1231 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double *);
# 1263 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void **, size_t);
# 1292 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void **, size_t);
# 1331 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void **, size_t *, size_t, size_t);
# 1370 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray **, const cudaChannelFormatDesc *, size_t, size_t = (0), unsigned = (0));
# 1394 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void *);
# 1414 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void *);
# 1436 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray *);
# 1495 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void **, size_t, unsigned);
# 1522 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void **, void *, unsigned);
# 1541 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned *, void *);
# 1576 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr *, cudaExtent);
# 1626 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray **, const cudaChannelFormatDesc *, cudaExtent, unsigned = (0));
# 1723 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms *);
# 1828 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms *, cudaStream_t = 0);
# 1847 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t *, size_t *);
# 1880 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void *, const void *, size_t, cudaMemcpyKind);
# 1913 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind);
# 1946 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind);
# 1981 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 2023 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 2064 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 2105 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind);
# 2144 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 2179 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const char *, const void *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyHostToDevice);
# 2213 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void *, const char *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyDeviceToHost);
# 2256 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void *, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2298 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2340 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2391 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2441 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2491 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2535 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2578 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2600 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void *, int, size_t);
# 2626 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void *, size_t, int, size_t, size_t);
# 2665 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr, int, cudaExtent);
# 2692 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemsetAsync(void *, int, size_t, cudaStream_t = 0);
# 2724 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2DAsync(void *, size_t, int, size_t, size_t, cudaStream_t = 0);
# 2769 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr, int, cudaExtent, cudaStream_t = 0);
# 2796 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void **, const char *);
# 2819 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t *, const char *);
# 2865 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t);
# 2897 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t, unsigned);
# 2932 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int, cudaGraphicsResource_t *, cudaStream_t = 0);
# 2963 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int, cudaGraphicsResource_t *, cudaStream_t = 0);
# 2992 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void **, size_t *, cudaGraphicsResource_t);
# 3026 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray **, cudaGraphicsResource_t, unsigned, unsigned);
# 3059 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc *, const cudaArray *);
# 3094 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int, int, int, int, cudaChannelFormatKind);
# 3136 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t = (((2147483647) * 2U) + 1U));
# 3179 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t, size_t, size_t);
# 3207 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 3228 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference *);
# 3253 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t *, const textureReference *);
# 3277 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference **, const char *);
# 3310 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindSurfaceToArray(const surfaceReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 3328 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceReference(const surfaceReference **, const char *);
# 3355 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int *);
# 3372 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int *);
# 3377 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetExportTable(const void **, const cudaUUID_t *);
# 93 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc()
# 94 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 95 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
# 96 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 98 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf()
# 99 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 100 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 102 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 103 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 105 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1()
# 106 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 107 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 109 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 110 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 112 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2()
# 113 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 114 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 116 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 117 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 119 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4()
# 120 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 121 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 123 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 124 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 126 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> ()
# 127 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 128 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(char)) * 8);
# 133 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 135 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 137 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> ()
# 138 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 139 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 141 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 142 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 144 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> ()
# 145 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 146 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 148 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 149 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 151 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> ()
# 152 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 153 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 155 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 156 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 158 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> ()
# 159 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 160 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 162 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 163 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 165 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> ()
# 166 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 167 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 169 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 170 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 172 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> ()
# 173 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 174 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 176 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 177 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 179 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> ()
# 180 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 181 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 183 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 184 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 186 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> ()
# 187 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 188 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 190 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 191 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 193 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> ()
# 194 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 195 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 197 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 198 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 200 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> ()
# 201 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 202 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 204 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 205 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 207 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> ()
# 208 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 209 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 211 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 212 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 214 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> ()
# 215 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 216 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 218 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 219 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 221 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> ()
# 222 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 223 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 225 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 226 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 228 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> ()
# 229 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 230 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 232 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 233 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 235 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> ()
# 236 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 237 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 239 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 240 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 242 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> ()
# 243 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 244 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 246 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 247 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 249 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> ()
# 250 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 251 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 253 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 254 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 256 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> ()
# 257 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 258 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 260 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 261 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 263 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> ()
# 264 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 265 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 267 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 268 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 270 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> ()
# 271 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 272 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 274 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 275 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 277 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> ()
# 278 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 279 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 281 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 282 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 284 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> ()
# 285 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 286 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 288 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 289 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 291 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> ()
# 292 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 293 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 295 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 296 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 298 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> ()
# 299 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 300 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 302 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 303 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 365 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> ()
# 366 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 367 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 369 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 370 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 372 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> ()
# 373 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 374 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 376 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 377 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 379 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> ()
# 380 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 381 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 383 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 384 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 386 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> ()
# 387 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
{
# 388 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 390 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 391 "/usr/local/cuda3.2/cuda/bin/../include/channel_descriptor.h"
}
# 65 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
# 66 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
{
# 67 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
cudaPitchedPtr s;
# 69 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(s.ptr) = d;
# 70 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(s.pitch) = p;
# 71 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(s.xsize) = xsz;
# 72 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(s.ysize) = ysz;
# 74 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
return s;
# 75 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
}
# 92 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z)
# 93 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
{
# 94 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
cudaPos p;
# 96 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(p.x) = x;
# 97 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(p.y) = y;
# 98 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(p.z) = z;
# 100 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
return p;
# 101 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
}
# 118 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
# 119 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
{
# 120 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
cudaExtent e;
# 122 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(e.width) = w;
# 123 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(e.height) = h;
# 124 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
(e.depth) = d;
# 126 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
return e;
# 127 "/usr/local/cuda3.2/cuda/bin/../include/driver_functions.h"
}
# 55 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline char1 make_char1(signed char x)
# 56 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 57 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
char1 t; (t.x) = x; return t;
# 58 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 60 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uchar1 make_uchar1(unsigned char x)
# 61 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 62 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uchar1 t; (t.x) = x; return t;
# 63 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 65 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline char2 make_char2(signed char x, signed char y)
# 66 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 67 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
char2 t; (t.x) = x; (t.y) = y; return t;
# 68 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 70 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uchar2 make_uchar2(unsigned char x, unsigned char y)
# 71 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 72 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uchar2 t; (t.x) = x; (t.y) = y; return t;
# 73 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 75 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline char3 make_char3(signed char x, signed char y, signed char z)
# 76 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 77 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 78 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 80 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
# 81 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 82 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 83 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 85 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w)
# 86 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 87 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 88 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 90 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
# 91 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 92 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 93 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 95 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline short1 make_short1(short x)
# 96 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 97 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
short1 t; (t.x) = x; return t;
# 98 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 100 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ushort1 make_ushort1(unsigned short x)
# 101 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 102 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ushort1 t; (t.x) = x; return t;
# 103 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 105 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline short2 make_short2(short x, short y)
# 106 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 107 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
short2 t; (t.x) = x; (t.y) = y; return t;
# 108 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 110 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ushort2 make_ushort2(unsigned short x, unsigned short y)
# 111 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 112 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ushort2 t; (t.x) = x; (t.y) = y; return t;
# 113 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 115 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline short3 make_short3(short x, short y, short z)
# 116 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 117 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 118 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 120 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
# 121 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 122 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 123 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 125 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline short4 make_short4(short x, short y, short z, short w)
# 126 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 127 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 128 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 130 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
# 131 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 132 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 133 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 135 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline int1 make_int1(int x)
# 136 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 137 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
int1 t; (t.x) = x; return t;
# 138 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 140 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uint1 make_uint1(unsigned x)
# 141 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 142 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uint1 t; (t.x) = x; return t;
# 143 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 145 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline int2 make_int2(int x, int y)
# 146 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 147 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
int2 t; (t.x) = x; (t.y) = y; return t;
# 148 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 150 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uint2 make_uint2(unsigned x, unsigned y)
# 151 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 152 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uint2 t; (t.x) = x; (t.y) = y; return t;
# 153 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 155 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline int3 make_int3(int x, int y, int z)
# 156 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 157 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 158 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 160 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z)
# 161 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 162 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 163 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 165 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline int4 make_int4(int x, int y, int z, int w)
# 166 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 167 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 168 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 170 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w)
# 171 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 172 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 173 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 175 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline long1 make_long1(long x)
# 176 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 177 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
long1 t; (t.x) = x; return t;
# 178 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 180 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulong1 make_ulong1(unsigned long x)
# 181 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 182 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulong1 t; (t.x) = x; return t;
# 183 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 185 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline long2 make_long2(long x, long y)
# 186 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 187 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
long2 t; (t.x) = x; (t.y) = y; return t;
# 188 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 190 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulong2 make_ulong2(unsigned long x, unsigned long y)
# 191 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 192 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulong2 t; (t.x) = x; (t.y) = y; return t;
# 193 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 195 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline long3 make_long3(long x, long y, long z)
# 196 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 197 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 198 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 200 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z)
# 201 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 202 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 203 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 205 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline long4 make_long4(long x, long y, long z, long w)
# 206 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 207 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 208 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 210 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w)
# 211 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 212 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 213 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 215 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline float1 make_float1(float x)
# 216 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 217 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
float1 t; (t.x) = x; return t;
# 218 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 220 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline float2 make_float2(float x, float y)
# 221 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 222 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
float2 t; (t.x) = x; (t.y) = y; return t;
# 223 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 225 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline float3 make_float3(float x, float y, float z)
# 226 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 227 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 228 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 230 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline float4 make_float4(float x, float y, float z, float w)
# 231 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 232 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 233 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 235 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline longlong1 make_longlong1(long long x)
# 236 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 237 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
longlong1 t; (t.x) = x; return t;
# 238 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 240 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulonglong1 make_ulonglong1(unsigned long long x)
# 241 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 242 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulonglong1 t; (t.x) = x; return t;
# 243 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 245 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline longlong2 make_longlong2(long long x, long long y)
# 246 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 247 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
longlong2 t; (t.x) = x; (t.y) = y; return t;
# 248 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 250 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y)
# 251 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 252 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulonglong2 t; (t.x) = x; (t.y) = y; return t;
# 253 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 255 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline longlong3 make_longlong3(long long x, long long y, long long z)
# 256 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 257 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 258 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 260 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z)
# 261 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 262 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 263 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 265 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w)
# 266 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 267 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 268 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 270 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w)
# 271 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 272 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 273 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 275 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline double1 make_double1(double x)
# 276 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 277 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
double1 t; (t.x) = x; return t;
# 278 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 280 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline double2 make_double2(double x, double y)
# 281 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 282 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
double2 t; (t.x) = x; (t.y) = y; return t;
# 283 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 285 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline double3 make_double3(double x, double y, double z)
# 286 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 287 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 288 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 290 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
static inline double4 make_double4(double x, double y, double z, double w)
# 291 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
{
# 292 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 293 "/usr/local/cuda3.2/cuda/bin/../include/vector_functions.h"
}
# 43 "/usr/include/string.h" 3
extern "C" __attribute__((weak)) void *memcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 48 "/usr/include/string.h" 3
extern "C" void *memmove(void *, const void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 56 "/usr/include/string.h" 3
extern "C" void *memccpy(void *__restrict__, const void *__restrict__, int, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 64 "/usr/include/string.h" 3
extern "C" __attribute__((weak)) void *memset(void *, int, size_t) throw() __attribute__((nonnull(1)));
# 67 "/usr/include/string.h" 3
extern "C" int memcmp(const void *, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 74 "/usr/include/string.h" 3
extern void *memchr(void *, int, size_t) throw() __asm__("memchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 76 "/usr/include/string.h" 3
extern const void *memchr(const void *, int, size_t) throw() __asm__("memchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 103 "/usr/include/string.h" 3
void *rawmemchr(void *, int) throw() __asm__("rawmemchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 105 "/usr/include/string.h" 3
const void *rawmemchr(const void *, int) throw() __asm__("rawmemchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 114 "/usr/include/string.h" 3
void *memrchr(void *, int, size_t) throw() __asm__("memrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 116 "/usr/include/string.h" 3
const void *memrchr(const void *, int, size_t) throw() __asm__("memrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 127 "/usr/include/string.h" 3
extern "C" char *strcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 130 "/usr/include/string.h" 3
extern "C" char *strncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 135 "/usr/include/string.h" 3
extern "C" char *strcat(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 138 "/usr/include/string.h" 3
extern "C" char *strncat(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 142 "/usr/include/string.h" 3
extern "C" int strcmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 145 "/usr/include/string.h" 3
extern "C" int strncmp(const char *, const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 149 "/usr/include/string.h" 3
extern "C" int strcoll(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 152 "/usr/include/string.h" 3
extern "C" size_t strxfrm(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(2)));
# 40 "/usr/include/xlocale.h" 3
extern "C" { typedef
# 28 "/usr/include/xlocale.h" 3
struct __locale_struct {
# 31 "/usr/include/xlocale.h" 3
struct locale_data *__locales[13];
# 34 "/usr/include/xlocale.h" 3
const unsigned short *__ctype_b;
# 35 "/usr/include/xlocale.h" 3
const int *__ctype_tolower;
# 36 "/usr/include/xlocale.h" 3
const int *__ctype_toupper;
# 39 "/usr/include/xlocale.h" 3
const char *__names[13];
# 40 "/usr/include/xlocale.h" 3
} *__locale_t; }
# 43 "/usr/include/xlocale.h" 3
extern "C" { typedef __locale_t locale_t; }
# 164 "/usr/include/string.h" 3
extern "C" int strcoll_l(const char *, const char *, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 167 "/usr/include/string.h" 3
extern "C" size_t strxfrm_l(char *, const char *, size_t, __locale_t) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 173 "/usr/include/string.h" 3
extern "C" char *strdup(const char *) throw() __attribute__((__malloc__)) __attribute__((nonnull(1)));
# 181 "/usr/include/string.h" 3
extern "C" char *strndup(const char *, size_t) throw() __attribute__((__malloc__)) __attribute__((nonnull(1)));
# 213 "/usr/include/string.h" 3
extern char *strchr(char *, int) throw() __asm__("strchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 215 "/usr/include/string.h" 3
extern const char *strchr(const char *, int) throw() __asm__("strchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 240 "/usr/include/string.h" 3
extern char *strrchr(char *, int) throw() __asm__("strrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 242 "/usr/include/string.h" 3
extern const char *strrchr(const char *, int) throw() __asm__("strrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 269 "/usr/include/string.h" 3
char *strchrnul(char *, int) throw() __asm__("strchrnul") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 271 "/usr/include/string.h" 3
const char *strchrnul(const char *, int) throw() __asm__("strchrnul") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 282 "/usr/include/string.h" 3
extern "C" size_t strcspn(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 286 "/usr/include/string.h" 3
extern "C" size_t strspn(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 292 "/usr/include/string.h" 3
extern char *strpbrk(char *, const char *) throw() __asm__("strpbrk") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 294 "/usr/include/string.h" 3
extern const char *strpbrk(const char *, const char *) throw() __asm__("strpbrk") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 319 "/usr/include/string.h" 3
extern char *strstr(char *, const char *) throw() __asm__("strstr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 321 "/usr/include/string.h" 3
extern const char *strstr(const char *, const char *) throw() __asm__("strstr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 346 "/usr/include/string.h" 3
extern "C" char *strtok(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(2)));
# 352 "/usr/include/string.h" 3
extern "C" char *__strtok_r(char *__restrict__, const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 357 "/usr/include/string.h" 3
extern "C" char *strtok_r(char *__restrict__, const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 365 "/usr/include/string.h" 3
char *strcasestr(char *, const char *) throw() __asm__("strcasestr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 367 "/usr/include/string.h" 3
const char *strcasestr(const char *, const char *) throw() __asm__("strcasestr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 380 "/usr/include/string.h" 3
extern "C" void *memmem(const void *, size_t, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 386 "/usr/include/string.h" 3
extern "C" void *__mempcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 389 "/usr/include/string.h" 3
extern "C" void *mempcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 397 "/usr/include/string.h" 3
extern "C" size_t strlen(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 404 "/usr/include/string.h" 3
extern "C" size_t strnlen(const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 411 "/usr/include/string.h" 3
extern "C" char *strerror(int) throw();
# 436 "/usr/include/string.h" 3
extern "C" char *strerror_r(int, char *, size_t) throw() __attribute__((nonnull(2)));
# 443 "/usr/include/string.h" 3
extern "C" char *strerror_l(int, __locale_t) throw();
# 449 "/usr/include/string.h" 3
extern "C" void __bzero(void *, size_t) throw() __attribute__((nonnull(1)));
# 453 "/usr/include/string.h" 3
extern "C" void bcopy(const void *, void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 457 "/usr/include/string.h" 3
extern "C" void bzero(void *, size_t) throw() __attribute__((nonnull(1)));
# 460 "/usr/include/string.h" 3
extern "C" int bcmp(const void *, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 467 "/usr/include/string.h" 3
extern char *index(char *, int) throw() __asm__("index") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 469 "/usr/include/string.h" 3
extern const char *index(const char *, int) throw() __asm__("index") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 495 "/usr/include/string.h" 3
extern char *rindex(char *, int) throw() __asm__("rindex") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 497 "/usr/include/string.h" 3
extern const char *rindex(const char *, int) throw() __asm__("rindex") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 521 "/usr/include/string.h" 3
extern "C" int ffs(int) throw() __attribute__((__const__));
# 526 "/usr/include/string.h" 3
extern "C" int ffsl(long) throw() __attribute__((__const__));
# 528 "/usr/include/string.h" 3
extern "C" int ffsll(long long) throw() __attribute__((__const__));
# 534 "/usr/include/string.h" 3
extern "C" int strcasecmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 538 "/usr/include/string.h" 3
extern "C" int strncasecmp(const char *, const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 545 "/usr/include/string.h" 3
extern "C" int strcasecmp_l(const char *, const char *, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 549 "/usr/include/string.h" 3
extern "C" int strncasecmp_l(const char *, const char *, size_t, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 557 "/usr/include/string.h" 3
extern "C" char *strsep(char **__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 564 "/usr/include/string.h" 3
extern "C" char *strsignal(int) throw();
# 567 "/usr/include/string.h" 3
extern "C" char *__stpcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 569 "/usr/include/string.h" 3
extern "C" char *stpcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 574 "/usr/include/string.h" 3
extern "C" char *__stpncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 577 "/usr/include/string.h" 3
extern "C" char *stpncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 584 "/usr/include/string.h" 3
extern "C" int strverscmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 588 "/usr/include/string.h" 3
extern "C" char *strfry(char *) throw() __attribute__((nonnull(1)));
# 591 "/usr/include/string.h" 3
extern "C" void *memfrob(void *, size_t) throw() __attribute__((nonnull(1)));
# 599 "/usr/include/string.h" 3
char *basename(char *) throw() __asm__("basename") __attribute__((nonnull(1)));
# 601 "/usr/include/string.h" 3
const char *basename(const char *) throw() __asm__("basename") __attribute__((nonnull(1)));
# 31 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned char __u_char; }
# 32 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned short __u_short; }
# 33 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __u_int; }
# 34 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __u_long; }
# 37 "/usr/include/bits/types.h" 3
extern "C" { typedef signed char __int8_t; }
# 38 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned char __uint8_t; }
# 39 "/usr/include/bits/types.h" 3
extern "C" { typedef signed short __int16_t; }
# 40 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned short __uint16_t; }
# 41 "/usr/include/bits/types.h" 3
extern "C" { typedef signed int __int32_t; }
# 42 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __uint32_t; }
# 44 "/usr/include/bits/types.h" 3
extern "C" { typedef signed long __int64_t; }
# 45 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __uint64_t; }
# 53 "/usr/include/bits/types.h" 3
extern "C" { typedef long __quad_t; }
# 54 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __u_quad_t; }
# 134 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __dev_t; }
# 135 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __uid_t; }
# 136 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __gid_t; }
# 137 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __ino_t; }
# 138 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __ino64_t; }
# 139 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __mode_t; }
# 140 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __nlink_t; }
# 141 "/usr/include/bits/types.h" 3
extern "C" { typedef long __off_t; }
# 142 "/usr/include/bits/types.h" 3
extern "C" { typedef long __off64_t; }
# 143 "/usr/include/bits/types.h" 3
extern "C" { typedef int __pid_t; }
# 144 "/usr/include/bits/types.h" 3
extern "C" { typedef struct { int __val[2]; } __fsid_t; }
# 145 "/usr/include/bits/types.h" 3
extern "C" { typedef long __clock_t; }
# 146 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __rlim_t; }
# 147 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __rlim64_t; }
# 148 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __id_t; }
# 149 "/usr/include/bits/types.h" 3
extern "C" { typedef long __time_t; }
# 150 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __useconds_t; }
# 151 "/usr/include/bits/types.h" 3
extern "C" { typedef long __suseconds_t; }
# 153 "/usr/include/bits/types.h" 3
extern "C" { typedef int __daddr_t; }
# 154 "/usr/include/bits/types.h" 3
extern "C" { typedef long __swblk_t; }
# 155 "/usr/include/bits/types.h" 3
extern "C" { typedef int __key_t; }
# 158 "/usr/include/bits/types.h" 3
extern "C" { typedef int __clockid_t; }
# 161 "/usr/include/bits/types.h" 3
extern "C" { typedef void *__timer_t; }
# 164 "/usr/include/bits/types.h" 3
extern "C" { typedef long __blksize_t; }
# 169 "/usr/include/bits/types.h" 3
extern "C" { typedef long __blkcnt_t; }
# 170 "/usr/include/bits/types.h" 3
extern "C" { typedef long __blkcnt64_t; }
# 173 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsblkcnt_t; }
# 174 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsblkcnt64_t; }
# 177 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsfilcnt_t; }
# 178 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsfilcnt64_t; }
# 180 "/usr/include/bits/types.h" 3
extern "C" { typedef long __ssize_t; }
# 184 "/usr/include/bits/types.h" 3
extern "C" { typedef __off64_t __loff_t; }
# 185 "/usr/include/bits/types.h" 3
extern "C" { typedef __quad_t *__qaddr_t; }
# 186 "/usr/include/bits/types.h" 3
extern "C" { typedef char *__caddr_t; }
# 189 "/usr/include/bits/types.h" 3
extern "C" { typedef long __intptr_t; }
# 192 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __socklen_t; }
# 60 "/usr/include/time.h" 3
extern "C" { typedef __clock_t clock_t; }
# 76 "/usr/include/time.h" 3
extern "C" { typedef __time_t time_t; }
# 92 "/usr/include/time.h" 3
extern "C" { typedef __clockid_t clockid_t; }
# 104 "/usr/include/time.h" 3
extern "C" { typedef __timer_t timer_t; }
# 120 "/usr/include/time.h" 3
extern "C" { struct __attribute__((visibility("default"))) timespec {
# 122 "/usr/include/time.h" 3
__time_t tv_sec;
# 123 "/usr/include/time.h" 3
long tv_nsec;
# 124 "/usr/include/time.h" 3
}; }
# 133 "/usr/include/time.h" 3
extern "C" { struct tm {
# 135 "/usr/include/time.h" 3
int tm_sec;
# 136 "/usr/include/time.h" 3
int tm_min;
# 137 "/usr/include/time.h" 3
int tm_hour;
# 138 "/usr/include/time.h" 3
int tm_mday;
# 139 "/usr/include/time.h" 3
int tm_mon;
# 140 "/usr/include/time.h" 3
int tm_year;
# 141 "/usr/include/time.h" 3
int tm_wday;
# 142 "/usr/include/time.h" 3
int tm_yday;
# 143 "/usr/include/time.h" 3
int tm_isdst;
# 146 "/usr/include/time.h" 3
long tm_gmtoff;
# 147 "/usr/include/time.h" 3
const char *tm_zone;
# 152 "/usr/include/time.h" 3
}; }
# 161 "/usr/include/time.h" 3
extern "C" { struct itimerspec {
# 163 "/usr/include/time.h" 3
timespec it_interval;
# 164 "/usr/include/time.h" 3
timespec it_value;
# 165 "/usr/include/time.h" 3
}; }
# 168 "/usr/include/time.h" 3
struct sigevent;
# 174 "/usr/include/time.h" 3
extern "C" { typedef __pid_t pid_t; }
# 183 "/usr/include/time.h" 3
extern "C" __attribute__((weak)) clock_t clock() throw();
# 186 "/usr/include/time.h" 3
extern "C" time_t time(time_t *) throw();
# 189 "/usr/include/time.h" 3
extern "C" double difftime(time_t, time_t) throw() __attribute__((__const__));
# 193 "/usr/include/time.h" 3
extern "C" time_t mktime(tm *) throw();
# 199 "/usr/include/time.h" 3
extern "C" size_t strftime(char *__restrict__, size_t, const char *__restrict__, const tm *__restrict__) throw();
# 207 "/usr/include/time.h" 3
extern "C" char *strptime(const char *__restrict__, const char *__restrict__, tm *) throw();
# 217 "/usr/include/time.h" 3
extern "C" size_t strftime_l(char *__restrict__, size_t, const char *__restrict__, const tm *__restrict__, __locale_t) throw();
# 224 "/usr/include/time.h" 3
extern "C" char *strptime_l(const char *__restrict__, const char *__restrict__, tm *, __locale_t) throw();
# 233 "/usr/include/time.h" 3
extern "C" tm *gmtime(const time_t *) throw();
# 237 "/usr/include/time.h" 3
extern "C" tm *localtime(const time_t *) throw();
# 243 "/usr/include/time.h" 3
extern "C" tm *gmtime_r(const time_t *__restrict__, tm *__restrict__) throw();
# 248 "/usr/include/time.h" 3
extern "C" tm *localtime_r(const time_t *__restrict__, tm *__restrict__) throw();
# 255 "/usr/include/time.h" 3
extern "C" char *asctime(const tm *) throw();
# 258 "/usr/include/time.h" 3
extern "C" char *ctime(const time_t *) throw();
# 266 "/usr/include/time.h" 3
extern "C" char *asctime_r(const tm *__restrict__, char *__restrict__) throw();
# 270 "/usr/include/time.h" 3
extern "C" char *ctime_r(const time_t *__restrict__, char *__restrict__) throw();
# 276 "/usr/include/time.h" 3
extern "C" { extern char *__tzname[2]; }
# 277 "/usr/include/time.h" 3
extern "C" { extern int __daylight; }
# 278 "/usr/include/time.h" 3
extern "C" { extern long __timezone; }
# 283 "/usr/include/time.h" 3
extern "C" { extern char *tzname[2]; }
# 287 "/usr/include/time.h" 3
extern "C" void tzset() throw();
# 291 "/usr/include/time.h" 3
extern "C" { extern int daylight; }
# 292 "/usr/include/time.h" 3
extern "C" { extern long timezone; }
# 298 "/usr/include/time.h" 3
extern "C" int stime(const time_t *) throw();
# 313 "/usr/include/time.h" 3
extern "C" time_t timegm(tm *) throw();
# 316 "/usr/include/time.h" 3
extern "C" time_t timelocal(tm *) throw();
# 319 "/usr/include/time.h" 3
extern "C" int dysize(int) throw() __attribute__((__const__));
# 328 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec *, timespec *);
# 333 "/usr/include/time.h" 3
extern "C" int clock_getres(clockid_t, timespec *) throw();
# 336 "/usr/include/time.h" 3
extern "C" int clock_gettime(clockid_t, timespec *) throw();
# 339 "/usr/include/time.h" 3
extern "C" int clock_settime(clockid_t, const timespec *) throw();
# 347 "/usr/include/time.h" 3
extern "C" int clock_nanosleep(clockid_t, int, const timespec *, timespec *);
# 352 "/usr/include/time.h" 3
extern "C" int clock_getcpuclockid(pid_t, clockid_t *) throw();
# 357 "/usr/include/time.h" 3
extern "C" int timer_create(clockid_t, sigevent *__restrict__, timer_t *__restrict__) throw();
# 362 "/usr/include/time.h" 3
extern "C" int timer_delete(timer_t) throw();
# 365 "/usr/include/time.h" 3
extern "C" int timer_settime(timer_t, int, const itimerspec *__restrict__, itimerspec *__restrict__) throw();
# 370 "/usr/include/time.h" 3
extern "C" int timer_gettime(timer_t, itimerspec *) throw();
# 374 "/usr/include/time.h" 3
extern "C" int timer_getoverrun(timer_t) throw();
# 390 "/usr/include/time.h" 3
extern "C" { extern int getdate_err; }
# 399 "/usr/include/time.h" 3
extern "C" tm *getdate(const char *);
# 413 "/usr/include/time.h" 3
extern "C" int getdate_r(const char *__restrict__, tm *__restrict__);
# 57 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) clock_t clock() throw();
# 59 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) void *memset(void *, int, size_t) throw() __attribute__((nonnull(1)));
# 61 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) void *memcpy(void *, const void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 66 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int abs(int) throw() __attribute__((__const__));
# 68 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long labs(long) throw() __attribute__((__const__));
# 70 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llabs(long long) throw() __attribute__((__const__));
# 72 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fabs(double) throw() __attribute__((__const__));
# 74 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fabsf(float) throw() __attribute__((__const__));
# 77 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int min(int, int);
# 79 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned umin(unsigned, unsigned);
# 81 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llmin(long long, long long);
# 83 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned long long ullmin(unsigned long long, unsigned long long);
# 85 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fminf(float, float) throw();
# 87 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmin(double, double) throw();
# 90 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int max(int, int);
# 92 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned umax(unsigned, unsigned);
# 94 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llmax(long long, long long);
# 96 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned long long ullmax(unsigned long long, unsigned long long);
# 98 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmaxf(float, float) throw();
# 100 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmax(double, double) throw();
# 103 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sin(double) throw();
# 105 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinf(float) throw();
# 108 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cos(double) throw();
# 110 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float cosf(float) throw();
# 113 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) void sincos(double, double *, double *) throw();
# 115 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) void sincosf(float, float *, float *) throw();
# 118 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tan(double) throw();
# 120 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tanf(float) throw();
# 123 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sqrt(double) throw();
# 125 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sqrtf(float) throw();
# 128 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rsqrt(double);
# 130 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rsqrtf(float);
# 133 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp2(double) throw();
# 135 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float exp2f(float) throw();
# 138 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp10(double) throw();
# 140 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float exp10f(float) throw();
# 143 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double expm1(double) throw();
# 145 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float expm1f(float) throw();
# 148 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log2(double) throw();
# 150 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log2f(float) throw();
# 153 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log10(double) throw();
# 155 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log10f(float) throw();
# 158 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log(double) throw();
# 160 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float logf(float) throw();
# 163 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log1p(double) throw();
# 165 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log1pf(float) throw();
# 168 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double floor(double) throw() __attribute__((__const__));
# 170 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float floorf(float) throw() __attribute__((__const__));
# 173 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp(double) throw();
# 175 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float expf(float) throw();
# 178 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cosh(double) throw();
# 180 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float coshf(float) throw();
# 183 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sinh(double) throw();
# 185 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinhf(float) throw();
# 188 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tanh(double) throw();
# 190 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tanhf(float) throw();
# 193 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double acosh(double) throw();
# 195 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float acoshf(float) throw();
# 198 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double asinh(double) throw();
# 200 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float asinhf(float) throw();
# 203 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atanh(double) throw();
# 205 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atanhf(float) throw();
# 208 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double ldexp(double, int) throw();
# 210 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float ldexpf(float, int) throw();
# 213 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double logb(double) throw();
# 215 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float logbf(float) throw();
# 218 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int ilogb(double) throw();
# 220 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int ilogbf(float) throw();
# 223 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double scalbn(double, int) throw();
# 225 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float scalbnf(float, int) throw();
# 228 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double scalbln(double, long) throw();
# 230 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float scalblnf(float, long) throw();
# 233 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double frexp(double, int *) throw();
# 235 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float frexpf(float, int *) throw();
# 238 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double round(double) throw() __attribute__((__const__));
# 240 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float roundf(float) throw() __attribute__((__const__));
# 243 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lround(double) throw();
# 245 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lroundf(float) throw();
# 248 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llround(double) throw();
# 250 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llroundf(float) throw();
# 253 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rint(double) throw();
# 255 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rintf(float) throw();
# 258 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lrint(double) throw();
# 260 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lrintf(float) throw();
# 263 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llrint(double) throw();
# 265 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llrintf(float) throw();
# 268 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nearbyint(double) throw();
# 270 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nearbyintf(float) throw();
# 273 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double ceil(double) throw() __attribute__((__const__));
# 275 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float ceilf(float) throw() __attribute__((__const__));
# 278 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double trunc(double) throw() __attribute__((__const__));
# 280 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float truncf(float) throw() __attribute__((__const__));
# 283 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fdim(double, double) throw();
# 285 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fdimf(float, float) throw();
# 288 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atan2(double, double) throw();
# 290 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atan2f(float, float) throw();
# 293 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atan(double) throw();
# 295 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atanf(float) throw();
# 298 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double asin(double) throw();
# 300 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float asinf(float) throw();
# 303 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double acos(double) throw();
# 305 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float acosf(float) throw();
# 308 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double hypot(double, double) throw();
# 310 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float hypotf(float, float) throw();
# 313 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cbrt(double) throw();
# 315 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float cbrtf(float) throw();
# 318 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rcbrt(double);
# 320 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rcbrtf(float);
# 323 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sinpi(double);
# 325 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinpif(float);
# 328 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double pow(double, double) throw();
# 330 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float powf(float, float) throw();
# 333 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double modf(double, double *) throw();
# 335 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float modff(float, float *) throw();
# 338 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmod(double, double) throw();
# 340 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmodf(float, float) throw();
# 343 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double remainder(double, double) throw();
# 345 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float remainderf(float, float) throw();
# 348 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double remquo(double, double, int *) throw();
# 350 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float remquof(float, float, int *) throw();
# 353 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erf(double) throw();
# 355 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erff(float) throw();
# 358 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfinv(double);
# 360 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfinvf(float);
# 363 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfc(double) throw();
# 365 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfcf(float) throw();
# 368 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfcinv(double);
# 370 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfcinvf(float);
# 373 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double lgamma(double) throw();
# 375 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float lgammaf(float) throw();
# 378 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tgamma(double) throw();
# 380 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tgammaf(float) throw();
# 383 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double copysign(double, double) throw() __attribute__((__const__));
# 385 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float copysignf(float, float) throw() __attribute__((__const__));
# 388 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nextafter(double, double) throw() __attribute__((__const__));
# 390 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nextafterf(float, float) throw() __attribute__((__const__));
# 393 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nan(const char *) throw() __attribute__((__const__));
# 395 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nanf(const char *) throw() __attribute__((__const__));
# 398 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinf(double) throw() __attribute__((__const__));
# 400 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinff(float) throw() __attribute__((__const__));
# 403 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnan(double) throw() __attribute__((__const__));
# 405 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnanf(float) throw() __attribute__((__const__));
# 419 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __finite(double) throw() __attribute__((__const__));
# 421 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __finitef(float) throw() __attribute__((__const__));
# 423 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbit(double) throw() __attribute__((__const__));
# 428 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbitf(float) throw() __attribute__((__const__));
# 431 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fma(double, double, double) throw();
# 433 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmaf(float, float, float) throw();
# 441 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbitl(long double) throw() __attribute__((__const__));
# 443 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinfl(long double) throw() __attribute__((__const__));
# 445 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnanl(long double) throw() __attribute__((__const__));
# 455 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __finitel(long double) throw() __attribute__((__const__));
# 31 "/usr/include/bits/mathdef.h" 3
extern "C" { typedef float float_t; }
# 32 "/usr/include/bits/mathdef.h" 3
extern "C" { typedef double double_t; }
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double acos(double) throw(); extern "C" double __acos(double) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double asin(double) throw(); extern "C" double __asin(double) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double atan(double) throw(); extern "C" double __atan(double) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double atan2(double, double) throw(); extern "C" double __atan2(double, double) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double cos(double) throw(); extern "C" double __cos(double) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double sin(double) throw(); extern "C" double __sin(double) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double tan(double) throw(); extern "C" double __tan(double) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double cosh(double) throw(); extern "C" double __cosh(double) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double sinh(double) throw(); extern "C" double __sinh(double) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double tanh(double) throw(); extern "C" double __tanh(double) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) void sincos(double, double *, double *) throw(); extern "C" void __sincos(double, double *, double *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double acosh(double) throw(); extern "C" double __acosh(double) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double asinh(double) throw(); extern "C" double __asinh(double) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double atanh(double) throw(); extern "C" double __atanh(double) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double exp(double) throw(); extern "C" double __exp(double) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double frexp(double, int *) throw(); extern "C" double __frexp(double, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double ldexp(double, int) throw(); extern "C" double __ldexp(double, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double log(double) throw(); extern "C" double __log(double) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double log10(double) throw(); extern "C" double __log10(double) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double modf(double, double *) throw(); extern "C" double __modf(double, double *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double exp10(double) throw(); extern "C" double __exp10(double) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" double pow10(double) throw(); extern "C" double __pow10(double) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double expm1(double) throw(); extern "C" double __expm1(double) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double log1p(double) throw(); extern "C" double __log1p(double) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double logb(double) throw(); extern "C" double __logb(double) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double exp2(double) throw(); extern "C" double __exp2(double) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double log2(double) throw(); extern "C" double __log2(double) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double pow(double, double) throw(); extern "C" double __pow(double, double) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double sqrt(double) throw(); extern "C" double __sqrt(double) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double hypot(double, double) throw(); extern "C" double __hypot(double, double) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double cbrt(double) throw(); extern "C" double __cbrt(double) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double ceil(double) throw() __attribute__((__const__)); extern "C" double __ceil(double) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fabs(double) throw() __attribute__((__const__)); extern "C" double __fabs(double) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double floor(double) throw() __attribute__((__const__)); extern "C" double __floor(double) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fmod(double, double) throw(); extern "C" double __fmod(double, double) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isinf(double) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __finite(double) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinf(double) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finite(double) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" double drem(double, double) throw(); extern "C" double __drem(double, double) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" double significand(double) throw(); extern "C" double __significand(double) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double copysign(double, double) throw() __attribute__((__const__)); extern "C" double __copysign(double, double) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double nan(const char *) throw() __attribute__((__const__)); extern "C" double __nan(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isnan(double) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnan(double) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" double j0(double) throw(); extern "C" double __j0(double) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" double j1(double) throw(); extern "C" double __j1(double) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" double jn(int, double) throw(); extern "C" double __jn(int, double) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" double y0(double) throw(); extern "C" double __y0(double) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" double y1(double) throw(); extern "C" double __y1(double) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" double yn(int, double) throw(); extern "C" double __yn(int, double) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double erf(double) throw(); extern "C" double __erf(double) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double erfc(double) throw(); extern "C" double __erfc(double) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double lgamma(double) throw(); extern "C" double __lgamma(double) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double tgamma(double) throw(); extern "C" double __tgamma(double) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" double gamma(double) throw(); extern "C" double __gamma(double) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" double lgamma_r(double, int *) throw(); extern "C" double __lgamma_r(double, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double rint(double) throw(); extern "C" double __rint(double) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double nextafter(double, double) throw() __attribute__((__const__)); extern "C" double __nextafter(double, double) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" double nexttoward(double, long double) throw() __attribute__((__const__)); extern "C" double __nexttoward(double, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double remainder(double, double) throw(); extern "C" double __remainder(double, double) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double scalbn(double, int) throw(); extern "C" double __scalbn(double, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int ilogb(double) throw(); extern "C" int __ilogb(double) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double scalbln(double, long) throw(); extern "C" double __scalbln(double, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double nearbyint(double) throw(); extern "C" double __nearbyint(double) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double round(double) throw() __attribute__((__const__)); extern "C" double __round(double) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double trunc(double) throw() __attribute__((__const__)); extern "C" double __trunc(double) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double remquo(double, double, int *) throw(); extern "C" double __remquo(double, double, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long lrint(double) throw(); extern "C" long __lrint(double) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long long llrint(double) throw(); extern "C" long long __llrint(double) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long lround(double) throw(); extern "C" long __lround(double) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long long llround(double) throw(); extern "C" long long __llround(double) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fdim(double, double) throw(); extern "C" double __fdim(double, double) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fmax(double, double) throw(); extern "C" double __fmax(double, double) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fmin(double, double) throw(); extern "C" double __fmin(double, double) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassify(double) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __signbit(double) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) double fma(double, double, double) throw(); extern "C" double __fma(double, double, double) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" double scalb(double, double) throw(); extern "C" double __scalb(double, double) throw();
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float acosf(float) throw(); extern "C" float __acosf(float) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float asinf(float) throw(); extern "C" float __asinf(float) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float atanf(float) throw(); extern "C" float __atanf(float) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float atan2f(float, float) throw(); extern "C" float __atan2f(float, float) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float cosf(float) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float sinf(float) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float tanf(float) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float coshf(float) throw(); extern "C" float __coshf(float) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float sinhf(float) throw(); extern "C" float __sinhf(float) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float tanhf(float) throw(); extern "C" float __tanhf(float) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) void sincosf(float, float *, float *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float acoshf(float) throw(); extern "C" float __acoshf(float) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float asinhf(float) throw(); extern "C" float __asinhf(float) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float atanhf(float) throw(); extern "C" float __atanhf(float) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float expf(float) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float frexpf(float, int *) throw(); extern "C" float __frexpf(float, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float ldexpf(float, int) throw(); extern "C" float __ldexpf(float, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float logf(float) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float log10f(float) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float modff(float, float *) throw(); extern "C" float __modff(float, float *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float exp10f(float) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" float pow10f(float) throw(); extern "C" float __pow10f(float) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float expm1f(float) throw(); extern "C" float __expm1f(float) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float log1pf(float) throw(); extern "C" float __log1pf(float) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float logbf(float) throw(); extern "C" float __logbf(float) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float exp2f(float) throw(); extern "C" float __exp2f(float) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float log2f(float) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float powf(float, float) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float sqrtf(float) throw(); extern "C" float __sqrtf(float) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float hypotf(float, float) throw(); extern "C" float __hypotf(float, float) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float cbrtf(float) throw(); extern "C" float __cbrtf(float) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float ceilf(float) throw() __attribute__((__const__)); extern "C" float __ceilf(float) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fabsf(float) throw() __attribute__((__const__)); extern "C" float __fabsf(float) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float floorf(float) throw() __attribute__((__const__)); extern "C" float __floorf(float) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fmodf(float, float) throw(); extern "C" float __fmodf(float, float) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isinff(float) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __finitef(float) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinff(float) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finitef(float) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" float dremf(float, float) throw(); extern "C" float __dremf(float, float) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" float significandf(float) throw(); extern "C" float __significandf(float) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float copysignf(float, float) throw() __attribute__((__const__)); extern "C" float __copysignf(float, float) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float nanf(const char *) throw() __attribute__((__const__)); extern "C" float __nanf(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isnanf(float) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnanf(float) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" float j0f(float) throw(); extern "C" float __j0f(float) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" float j1f(float) throw(); extern "C" float __j1f(float) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" float jnf(int, float) throw(); extern "C" float __jnf(int, float) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" float y0f(float) throw(); extern "C" float __y0f(float) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" float y1f(float) throw(); extern "C" float __y1f(float) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" float ynf(int, float) throw(); extern "C" float __ynf(int, float) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float erff(float) throw(); extern "C" float __erff(float) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float erfcf(float) throw(); extern "C" float __erfcf(float) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float lgammaf(float) throw(); extern "C" float __lgammaf(float) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float tgammaf(float) throw(); extern "C" float __tgammaf(float) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" float gammaf(float) throw(); extern "C" float __gammaf(float) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" float lgammaf_r(float, int *) throw(); extern "C" float __lgammaf_r(float, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float rintf(float) throw(); extern "C" float __rintf(float) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float nextafterf(float, float) throw() __attribute__((__const__)); extern "C" float __nextafterf(float, float) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" float nexttowardf(float, long double) throw() __attribute__((__const__)); extern "C" float __nexttowardf(float, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float remainderf(float, float) throw(); extern "C" float __remainderf(float, float) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float scalbnf(float, int) throw(); extern "C" float __scalbnf(float, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int ilogbf(float) throw(); extern "C" int __ilogbf(float) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float scalblnf(float, long) throw(); extern "C" float __scalblnf(float, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float nearbyintf(float) throw(); extern "C" float __nearbyintf(float) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float roundf(float) throw() __attribute__((__const__)); extern "C" float __roundf(float) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float truncf(float) throw() __attribute__((__const__)); extern "C" float __truncf(float) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float remquof(float, float, int *) throw(); extern "C" float __remquof(float, float, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long lrintf(float) throw(); extern "C" long __lrintf(float) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long long llrintf(float) throw(); extern "C" long long __llrintf(float) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long lroundf(float) throw(); extern "C" long __lroundf(float) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) long long llroundf(float) throw(); extern "C" long long __llroundf(float) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fdimf(float, float) throw(); extern "C" float __fdimf(float, float) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fmaxf(float, float) throw(); extern "C" float __fmaxf(float, float) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fminf(float, float) throw(); extern "C" float __fminf(float, float) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassifyf(float) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __signbitf(float) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) float fmaf(float, float, float) throw(); extern "C" float __fmaf(float, float, float) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" float scalbf(float, float) throw(); extern "C" float __scalbf(float, float) throw();
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acosl(long double) throw(); extern "C" long double __acosl(long double) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" long double asinl(long double) throw(); extern "C" long double __asinl(long double) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atanl(long double) throw(); extern "C" long double __atanl(long double) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atan2l(long double, long double) throw(); extern "C" long double __atan2l(long double, long double) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" long double cosl(long double) throw(); extern "C" long double __cosl(long double) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sinl(long double) throw(); extern "C" long double __sinl(long double) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tanl(long double) throw(); extern "C" long double __tanl(long double) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" long double coshl(long double) throw(); extern "C" long double __coshl(long double) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sinhl(long double) throw(); extern "C" long double __sinhl(long double) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tanhl(long double) throw(); extern "C" long double __tanhl(long double) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" void sincosl(long double, long double *, long double *) throw(); extern "C" void __sincosl(long double, long double *, long double *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acoshl(long double) throw(); extern "C" long double __acoshl(long double) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" long double asinhl(long double) throw(); extern "C" long double __asinhl(long double) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atanhl(long double) throw(); extern "C" long double __atanhl(long double) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" long double expl(long double) throw(); extern "C" long double __expl(long double) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" long double frexpl(long double, int *) throw(); extern "C" long double __frexpl(long double, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ldexpl(long double, int) throw(); extern "C" long double __ldexpl(long double, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" long double logl(long double) throw(); extern "C" long double __logl(long double) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log10l(long double) throw(); extern "C" long double __log10l(long double) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" long double modfl(long double, long double *) throw(); extern "C" long double __modfl(long double, long double *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" long double exp10l(long double) throw(); extern "C" long double __exp10l(long double) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" long double pow10l(long double) throw(); extern "C" long double __pow10l(long double) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" long double expm1l(long double) throw(); extern "C" long double __expm1l(long double) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log1pl(long double) throw(); extern "C" long double __log1pl(long double) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" long double logbl(long double) throw(); extern "C" long double __logbl(long double) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" long double exp2l(long double) throw(); extern "C" long double __exp2l(long double) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log2l(long double) throw(); extern "C" long double __log2l(long double) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" long double powl(long double, long double) throw(); extern "C" long double __powl(long double, long double) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sqrtl(long double) throw(); extern "C" long double __sqrtl(long double) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" long double hypotl(long double, long double) throw(); extern "C" long double __hypotl(long double, long double) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" long double cbrtl(long double) throw(); extern "C" long double __cbrtl(long double) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ceill(long double) throw() __attribute__((__const__)); extern "C" long double __ceill(long double) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fabsl(long double) throw() __attribute__((__const__)); extern "C" long double __fabsl(long double) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" long double floorl(long double) throw() __attribute__((__const__)); extern "C" long double __floorl(long double) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmodl(long double, long double) throw(); extern "C" long double __fmodl(long double, long double) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isinfl(long double) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __finitel(long double) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinfl(long double) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finitel(long double) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" long double dreml(long double, long double) throw(); extern "C" long double __dreml(long double, long double) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" long double significandl(long double) throw(); extern "C" long double __significandl(long double) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" long double copysignl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __copysignl(long double, long double) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nanl(const char *) throw() __attribute__((__const__)); extern "C" long double __nanl(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __isnanl(long double) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnanl(long double) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" long double j0l(long double) throw(); extern "C" long double __j0l(long double) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" long double j1l(long double) throw(); extern "C" long double __j1l(long double) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" long double jnl(int, long double) throw(); extern "C" long double __jnl(int, long double) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" long double y0l(long double) throw(); extern "C" long double __y0l(long double) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" long double y1l(long double) throw(); extern "C" long double __y1l(long double) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ynl(int, long double) throw(); extern "C" long double __ynl(int, long double) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" long double erfl(long double) throw(); extern "C" long double __erfl(long double) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" long double erfcl(long double) throw(); extern "C" long double __erfcl(long double) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" long double lgammal(long double) throw(); extern "C" long double __lgammal(long double) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tgammal(long double) throw(); extern "C" long double __tgammal(long double) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" long double gammal(long double) throw(); extern "C" long double __gammal(long double) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" long double lgammal_r(long double, int *) throw(); extern "C" long double __lgammal_r(long double, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" long double rintl(long double) throw(); extern "C" long double __rintl(long double) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nextafterl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __nextafterl(long double, long double) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nexttowardl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __nexttowardl(long double, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" long double remainderl(long double, long double) throw(); extern "C" long double __remainderl(long double, long double) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalbnl(long double, int) throw(); extern "C" long double __scalbnl(long double, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" int ilogbl(long double) throw(); extern "C" int __ilogbl(long double) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalblnl(long double, long) throw(); extern "C" long double __scalblnl(long double, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nearbyintl(long double) throw(); extern "C" long double __nearbyintl(long double) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" long double roundl(long double) throw() __attribute__((__const__)); extern "C" long double __roundl(long double) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" long double truncl(long double) throw() __attribute__((__const__)); extern "C" long double __truncl(long double) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" long double remquol(long double, long double, int *) throw(); extern "C" long double __remquol(long double, long double, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" long lrintl(long double) throw(); extern "C" long __lrintl(long double) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" long long llrintl(long double) throw(); extern "C" long long __llrintl(long double) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" long lroundl(long double) throw(); extern "C" long __lroundl(long double) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" long long llroundl(long double) throw(); extern "C" long long __llroundl(long double) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fdiml(long double, long double) throw(); extern "C" long double __fdiml(long double, long double) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmaxl(long double, long double) throw(); extern "C" long double __fmaxl(long double, long double) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fminl(long double, long double) throw(); extern "C" long double __fminl(long double, long double) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassifyl(long double) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((weak)) int __signbitl(long double) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmal(long double, long double, long double) throw(); extern "C" long double __fmal(long double, long double, long double) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalbl(long double, long double) throw(); extern "C" long double __scalbl(long double, long double) throw();
# 161 "/usr/include/math.h" 3
extern "C" { extern int signgam; }
# 203 "/usr/include/math.h" 3
enum {
# 204 "/usr/include/math.h" 3
FP_NAN,
# 206 "/usr/include/math.h" 3
FP_INFINITE,
# 208 "/usr/include/math.h" 3
FP_ZERO,
# 210 "/usr/include/math.h" 3
FP_SUBNORMAL,
# 212 "/usr/include/math.h" 3
FP_NORMAL
# 214 "/usr/include/math.h" 3
};
# 302 "/usr/include/math.h" 3
extern "C" { typedef
# 296 "/usr/include/math.h" 3
enum {
# 297 "/usr/include/math.h" 3
_IEEE_ = (-1),
# 298 "/usr/include/math.h" 3
_SVID_ = 0,
# 299 "/usr/include/math.h" 3
_XOPEN_,
# 300 "/usr/include/math.h" 3
_POSIX_,
# 301 "/usr/include/math.h" 3
_ISOC_
# 302 "/usr/include/math.h" 3
} _LIB_VERSION_TYPE; }
# 307 "/usr/include/math.h" 3
extern "C" { extern _LIB_VERSION_TYPE _LIB_VERSION; }
# 318 "/usr/include/math.h" 3
extern "C" { struct __exception {
# 323 "/usr/include/math.h" 3
int type;
# 324 "/usr/include/math.h" 3
char *name;
# 325 "/usr/include/math.h" 3
double arg1;
# 326 "/usr/include/math.h" 3
double arg2;
# 327 "/usr/include/math.h" 3
double retval;
# 328 "/usr/include/math.h" 3
}; }
# 331 "/usr/include/math.h" 3
extern "C" int matherr(__exception *) throw();
# 67 "/usr/include/bits/waitstatus.h" 3
extern "C" { union wait {
# 69 "/usr/include/bits/waitstatus.h" 3
int w_status;
# 71 "/usr/include/bits/waitstatus.h" 3
struct {
# 73 "/usr/include/bits/waitstatus.h" 3
unsigned __w_termsig:7;
# 74 "/usr/include/bits/waitstatus.h" 3
unsigned __w_coredump:1;
# 75 "/usr/include/bits/waitstatus.h" 3
unsigned __w_retcode:8;
# 76 "/usr/include/bits/waitstatus.h" 3
unsigned:16;
# 84 "/usr/include/bits/waitstatus.h" 3
} __wait_terminated;
# 86 "/usr/include/bits/waitstatus.h" 3
struct {
# 88 "/usr/include/bits/waitstatus.h" 3
unsigned __w_stopval:8;
# 89 "/usr/include/bits/waitstatus.h" 3
unsigned __w_stopsig:8;
# 90 "/usr/include/bits/waitstatus.h" 3
unsigned:16;
# 97 "/usr/include/bits/waitstatus.h" 3
} __wait_stopped;
# 98 "/usr/include/bits/waitstatus.h" 3
}; }
# 102 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 99 "/usr/include/stdlib.h" 3
struct {
# 100 "/usr/include/stdlib.h" 3
int quot;
# 101 "/usr/include/stdlib.h" 3
int rem;
# 102 "/usr/include/stdlib.h" 3
} div_t; }
# 110 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 107 "/usr/include/stdlib.h" 3
struct {
# 108 "/usr/include/stdlib.h" 3
long quot;
# 109 "/usr/include/stdlib.h" 3
long rem;
# 110 "/usr/include/stdlib.h" 3
} ldiv_t; }
# 122 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 119 "/usr/include/stdlib.h" 3
struct {
# 120 "/usr/include/stdlib.h" 3
long long quot;
# 121 "/usr/include/stdlib.h" 3
long long rem;
# 122 "/usr/include/stdlib.h" 3
} lldiv_t; }
# 140 "/usr/include/stdlib.h" 3
extern "C" size_t __ctype_get_mb_cur_max() throw();
# 145 "/usr/include/stdlib.h" 3
extern "C" double atof(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 148 "/usr/include/stdlib.h" 3
extern "C" int atoi(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 151 "/usr/include/stdlib.h" 3
extern "C" long atol(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 158 "/usr/include/stdlib.h" 3
extern "C" long long atoll(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 165 "/usr/include/stdlib.h" 3
extern "C" double strtod(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 173 "/usr/include/stdlib.h" 3
extern "C" float strtof(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 176 "/usr/include/stdlib.h" 3
extern "C" long double strtold(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 184 "/usr/include/stdlib.h" 3
extern "C" long strtol(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 188 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 196 "/usr/include/stdlib.h" 3
extern "C" long long strtoq(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 201 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtouq(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 210 "/usr/include/stdlib.h" 3
extern "C" long long strtoll(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 215 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 240 "/usr/include/stdlib.h" 3
extern "C" long strtol_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 244 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 250 "/usr/include/stdlib.h" 3
extern "C" long long strtoll_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 256 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 261 "/usr/include/stdlib.h" 3
extern "C" double strtod_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 265 "/usr/include/stdlib.h" 3
extern "C" float strtof_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 269 "/usr/include/stdlib.h" 3
extern "C" long double strtold_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 311 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long) throw();
# 314 "/usr/include/stdlib.h" 3
extern "C" long a64l(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 35 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_char u_char; }
# 36 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_short u_short; }
# 37 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_int u_int; }
# 38 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_long u_long; }
# 39 "/usr/include/sys/types.h" 3
extern "C" { typedef __quad_t quad_t; }
# 40 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_quad_t u_quad_t; }
# 41 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsid_t fsid_t; }
# 46 "/usr/include/sys/types.h" 3
extern "C" { typedef __loff_t loff_t; }
# 50 "/usr/include/sys/types.h" 3
extern "C" { typedef __ino_t ino_t; }
# 57 "/usr/include/sys/types.h" 3
extern "C" { typedef __ino64_t ino64_t; }
# 62 "/usr/include/sys/types.h" 3
extern "C" { typedef __dev_t dev_t; }
# 67 "/usr/include/sys/types.h" 3
extern "C" { typedef __gid_t gid_t; }
# 72 "/usr/include/sys/types.h" 3
extern "C" { typedef __mode_t mode_t; }
# 77 "/usr/include/sys/types.h" 3
extern "C" { typedef __nlink_t nlink_t; }
# 82 "/usr/include/sys/types.h" 3
extern "C" { typedef __uid_t uid_t; }
# 88 "/usr/include/sys/types.h" 3
extern "C" { typedef __off_t off_t; }
# 95 "/usr/include/sys/types.h" 3
extern "C" { typedef __off64_t off64_t; }
# 105 "/usr/include/sys/types.h" 3
extern "C" { typedef __id_t id_t; }
# 110 "/usr/include/sys/types.h" 3
extern "C" { typedef __ssize_t ssize_t; }
# 116 "/usr/include/sys/types.h" 3
extern "C" { typedef __daddr_t daddr_t; }
# 117 "/usr/include/sys/types.h" 3
extern "C" { typedef __caddr_t caddr_t; }
# 123 "/usr/include/sys/types.h" 3
extern "C" { typedef __key_t key_t; }
# 137 "/usr/include/sys/types.h" 3
extern "C" { typedef __useconds_t useconds_t; }
# 141 "/usr/include/sys/types.h" 3
extern "C" { typedef __suseconds_t suseconds_t; }
# 151 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned long ulong; }
# 152 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned short ushort; }
# 153 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned uint; }
# 195 "/usr/include/sys/types.h" 3
extern "C" { typedef signed char int8_t; }
# 196 "/usr/include/sys/types.h" 3
extern "C" { typedef short int16_t; }
# 197 "/usr/include/sys/types.h" 3
extern "C" { typedef int int32_t; }
# 198 "/usr/include/sys/types.h" 3
extern "C" { typedef long int64_t; }
# 201 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned char u_int8_t; }
# 202 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned short u_int16_t; }
# 203 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned u_int32_t; }
# 204 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned long u_int64_t; }
# 206 "/usr/include/sys/types.h" 3
extern "C" { typedef long register_t; }
# 24 "/usr/include/bits/sigset.h" 3
extern "C" { typedef int __sig_atomic_t; }
# 32 "/usr/include/bits/sigset.h" 3
extern "C" { typedef
# 30 "/usr/include/bits/sigset.h" 3
struct {
# 31 "/usr/include/bits/sigset.h" 3
unsigned long __val[((1024) / ((8) * sizeof(unsigned long)))];
# 32 "/usr/include/bits/sigset.h" 3
} __sigset_t; }
# 38 "/usr/include/sys/select.h" 3
extern "C" { typedef __sigset_t sigset_t; }
# 69 "/usr/include/bits/time.h" 3
extern "C" { struct timeval {
# 71 "/usr/include/bits/time.h" 3
__time_t tv_sec;
# 72 "/usr/include/bits/time.h" 3
__suseconds_t tv_usec;
# 73 "/usr/include/bits/time.h" 3
}; }
# 55 "/usr/include/sys/select.h" 3
extern "C" { typedef long __fd_mask; }
# 78 "/usr/include/sys/select.h" 3
extern "C" { typedef
# 68 "/usr/include/sys/select.h" 3
struct {
# 72 "/usr/include/sys/select.h" 3
__fd_mask fds_bits[(1024 / (8 * ((int)sizeof(__fd_mask))))];
# 78 "/usr/include/sys/select.h" 3
} fd_set; }
# 85 "/usr/include/sys/select.h" 3
extern "C" { typedef __fd_mask fd_mask; }
# 109 "/usr/include/sys/select.h" 3
extern "C" int select(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__, timeval *__restrict__);
# 121 "/usr/include/sys/select.h" 3
extern "C" int pselect(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__, const timespec *__restrict__, const __sigset_t *__restrict__);
# 31 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned gnu_dev_major(unsigned long long) throw();
# 34 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned gnu_dev_minor(unsigned long long) throw();
# 37 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned long long gnu_dev_makedev(unsigned, unsigned) throw();
# 228 "/usr/include/sys/types.h" 3
extern "C" { typedef __blksize_t blksize_t; }
# 235 "/usr/include/sys/types.h" 3
extern "C" { typedef __blkcnt_t blkcnt_t; }
# 239 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsblkcnt_t fsblkcnt_t; }
# 243 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsfilcnt_t fsfilcnt_t; }
# 262 "/usr/include/sys/types.h" 3
extern "C" { typedef __blkcnt64_t blkcnt64_t; }
# 263 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsblkcnt64_t fsblkcnt64_t; }
# 264 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsfilcnt64_t fsfilcnt64_t; }
# 50 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned long pthread_t; }
# 57 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 54 "/usr/include/bits/pthreadtypes.h" 3
union {
# 55 "/usr/include/bits/pthreadtypes.h" 3
char __size[56];
# 56 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 57 "/usr/include/bits/pthreadtypes.h" 3
} pthread_attr_t; }
# 65 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 61 "/usr/include/bits/pthreadtypes.h" 3
struct __pthread_internal_list {
# 63 "/usr/include/bits/pthreadtypes.h" 3
__pthread_internal_list *__prev;
# 64 "/usr/include/bits/pthreadtypes.h" 3
__pthread_internal_list *__next;
# 65 "/usr/include/bits/pthreadtypes.h" 3
} __pthread_list_t; }
# 104 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 77 "/usr/include/bits/pthreadtypes.h" 3
union {
# 78 "/usr/include/bits/pthreadtypes.h" 3
struct __pthread_mutex_s {
# 80 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 81 "/usr/include/bits/pthreadtypes.h" 3
unsigned __count;
# 82 "/usr/include/bits/pthreadtypes.h" 3
int __owner;
# 84 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nusers;
# 88 "/usr/include/bits/pthreadtypes.h" 3
int __kind;
# 90 "/usr/include/bits/pthreadtypes.h" 3
int __spins;
# 91 "/usr/include/bits/pthreadtypes.h" 3
__pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 102 "/usr/include/bits/pthreadtypes.h" 3
char __size[40];
# 103 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 104 "/usr/include/bits/pthreadtypes.h" 3
} pthread_mutex_t; }
# 110 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 107 "/usr/include/bits/pthreadtypes.h" 3
union {
# 108 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 109 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 110 "/usr/include/bits/pthreadtypes.h" 3
} pthread_mutexattr_t; }
# 130 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 116 "/usr/include/bits/pthreadtypes.h" 3
union {
# 118 "/usr/include/bits/pthreadtypes.h" 3
struct {
# 119 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 120 "/usr/include/bits/pthreadtypes.h" 3
unsigned __futex;
# 121 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __total_seq;
# 122 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __wakeup_seq;
# 123 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __woken_seq;
# 124 "/usr/include/bits/pthreadtypes.h" 3
void *__mutex;
# 125 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nwaiters;
# 126 "/usr/include/bits/pthreadtypes.h" 3
unsigned __broadcast_seq;
# 127 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 128 "/usr/include/bits/pthreadtypes.h" 3
char __size[48];
# 129 "/usr/include/bits/pthreadtypes.h" 3
__extension__ long long __align;
# 130 "/usr/include/bits/pthreadtypes.h" 3
} pthread_cond_t; }
# 136 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 133 "/usr/include/bits/pthreadtypes.h" 3
union {
# 134 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 135 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 136 "/usr/include/bits/pthreadtypes.h" 3
} pthread_condattr_t; }
# 140 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned pthread_key_t; }
# 144 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef int pthread_once_t; }
# 189 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 151 "/usr/include/bits/pthreadtypes.h" 3
union {
# 154 "/usr/include/bits/pthreadtypes.h" 3
struct {
# 155 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 156 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_readers;
# 157 "/usr/include/bits/pthreadtypes.h" 3
unsigned __readers_wakeup;
# 158 "/usr/include/bits/pthreadtypes.h" 3
unsigned __writer_wakeup;
# 159 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_readers_queued;
# 160 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_writers_queued;
# 161 "/usr/include/bits/pthreadtypes.h" 3
int __writer;
# 162 "/usr/include/bits/pthreadtypes.h" 3
int __shared;
# 163 "/usr/include/bits/pthreadtypes.h" 3
unsigned long __pad1;
# 164 "/usr/include/bits/pthreadtypes.h" 3
unsigned long __pad2;
# 167 "/usr/include/bits/pthreadtypes.h" 3
unsigned __flags;
# 168 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3
char __size[56];
# 188 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 189 "/usr/include/bits/pthreadtypes.h" 3
} pthread_rwlock_t; }
# 195 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 192 "/usr/include/bits/pthreadtypes.h" 3
union {
# 193 "/usr/include/bits/pthreadtypes.h" 3
char __size[8];
# 194 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 195 "/usr/include/bits/pthreadtypes.h" 3
} pthread_rwlockattr_t; }
# 201 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef volatile int pthread_spinlock_t; }
# 210 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 207 "/usr/include/bits/pthreadtypes.h" 3
union {
# 208 "/usr/include/bits/pthreadtypes.h" 3
char __size[32];
# 209 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 210 "/usr/include/bits/pthreadtypes.h" 3
} pthread_barrier_t; }
# 216 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 213 "/usr/include/bits/pthreadtypes.h" 3
union {
# 214 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 215 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 216 "/usr/include/bits/pthreadtypes.h" 3
} pthread_barrierattr_t; }
# 327 "/usr/include/stdlib.h" 3
extern "C" long random() throw();
# 330 "/usr/include/stdlib.h" 3
extern "C" void srandom(unsigned) throw();
# 336 "/usr/include/stdlib.h" 3
extern "C" char *initstate(unsigned, char *, size_t) throw() __attribute__((nonnull(2)));
# 341 "/usr/include/stdlib.h" 3
extern "C" char *setstate(char *) throw() __attribute__((nonnull(1)));
# 349 "/usr/include/stdlib.h" 3
extern "C" { struct random_data {
# 351 "/usr/include/stdlib.h" 3
int32_t *fptr;
# 352 "/usr/include/stdlib.h" 3
int32_t *rptr;
# 353 "/usr/include/stdlib.h" 3
int32_t *state;
# 354 "/usr/include/stdlib.h" 3
int rand_type;
# 355 "/usr/include/stdlib.h" 3
int rand_deg;
# 356 "/usr/include/stdlib.h" 3
int rand_sep;
# 357 "/usr/include/stdlib.h" 3
int32_t *end_ptr;
# 358 "/usr/include/stdlib.h" 3
}; }
# 360 "/usr/include/stdlib.h" 3
extern "C" int random_r(random_data *__restrict__, int32_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 363 "/usr/include/stdlib.h" 3
extern "C" int srandom_r(unsigned, random_data *) throw() __attribute__((nonnull(2)));
# 366 "/usr/include/stdlib.h" 3
extern "C" int initstate_r(unsigned, char *__restrict__, size_t, random_data *__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 371 "/usr/include/stdlib.h" 3
extern "C" int setstate_r(char *__restrict__, random_data *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 380 "/usr/include/stdlib.h" 3
extern "C" int rand() throw();
# 382 "/usr/include/stdlib.h" 3
extern "C" void srand(unsigned) throw();
# 387 "/usr/include/stdlib.h" 3
extern "C" int rand_r(unsigned *) throw();
# 395 "/usr/include/stdlib.h" 3
extern "C" double drand48() throw();
# 396 "/usr/include/stdlib.h" 3
extern "C" double erand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 399 "/usr/include/stdlib.h" 3
extern "C" long lrand48() throw();
# 400 "/usr/include/stdlib.h" 3
extern "C" long nrand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 404 "/usr/include/stdlib.h" 3
extern "C" long mrand48() throw();
# 405 "/usr/include/stdlib.h" 3
extern "C" long jrand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 409 "/usr/include/stdlib.h" 3
extern "C" void srand48(long) throw();
# 410 "/usr/include/stdlib.h" 3
extern "C" unsigned short *seed48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 412 "/usr/include/stdlib.h" 3
extern "C" void lcong48(unsigned short [7]) throw() __attribute__((nonnull(1)));
# 418 "/usr/include/stdlib.h" 3
extern "C" { struct drand48_data {
# 420 "/usr/include/stdlib.h" 3
unsigned short __x[3];
# 421 "/usr/include/stdlib.h" 3
unsigned short __old_x[3];
# 422 "/usr/include/stdlib.h" 3
unsigned short __c;
# 423 "/usr/include/stdlib.h" 3
unsigned short __init;
# 424 "/usr/include/stdlib.h" 3
unsigned long long __a;
# 425 "/usr/include/stdlib.h" 3
}; }
# 428 "/usr/include/stdlib.h" 3
extern "C" int drand48_r(drand48_data *__restrict__, double *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 430 "/usr/include/stdlib.h" 3
extern "C" int erand48_r(unsigned short [3], drand48_data *__restrict__, double *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 435 "/usr/include/stdlib.h" 3
extern "C" int lrand48_r(drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 438 "/usr/include/stdlib.h" 3
extern "C" int nrand48_r(unsigned short [3], drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 444 "/usr/include/stdlib.h" 3
extern "C" int mrand48_r(drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 447 "/usr/include/stdlib.h" 3
extern "C" int jrand48_r(unsigned short [3], drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 453 "/usr/include/stdlib.h" 3
extern "C" int srand48_r(long, drand48_data *) throw() __attribute__((nonnull(2)));
# 456 "/usr/include/stdlib.h" 3
extern "C" int seed48_r(unsigned short [3], drand48_data *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 459 "/usr/include/stdlib.h" 3
extern "C" int lcong48_r(unsigned short [7], drand48_data *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 471 "/usr/include/stdlib.h" 3
extern "C" void *malloc(size_t) throw() __attribute__((__malloc__));
# 473 "/usr/include/stdlib.h" 3
extern "C" void *calloc(size_t, size_t) throw() __attribute__((__malloc__));
# 485 "/usr/include/stdlib.h" 3
extern "C" void *realloc(void *, size_t) throw() __attribute__((__warn_unused_result__));
# 488 "/usr/include/stdlib.h" 3
extern "C" void free(void *) throw();
# 493 "/usr/include/stdlib.h" 3
extern "C" void cfree(void *) throw();
# 33 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t) throw();
# 502 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t) throw() __attribute__((__malloc__));
# 507 "/usr/include/stdlib.h" 3
extern "C" int posix_memalign(void **, size_t, size_t) throw() __attribute__((nonnull(1)));
# 513 "/usr/include/stdlib.h" 3
extern "C" void abort() throw() __attribute__((__noreturn__));
# 517 "/usr/include/stdlib.h" 3
extern "C" int atexit(void (*)(void)) throw() __attribute__((nonnull(1)));
# 524 "/usr/include/stdlib.h" 3
int at_quick_exit(void (*)(void)) throw() __asm__("at_quick_exit") __attribute__((nonnull(1)));
# 535 "/usr/include/stdlib.h" 3
extern "C" int on_exit(void (*)(int, void *), void *) throw() __attribute__((nonnull(1)));
# 543 "/usr/include/stdlib.h" 3
extern "C" void exit(int) throw() __attribute__((__noreturn__));
# 551 "/usr/include/stdlib.h" 3
extern "C" void quick_exit(int) throw() __attribute__((__noreturn__));
# 559 "/usr/include/stdlib.h" 3
extern "C" void _Exit(int) throw() __attribute__((__noreturn__));
# 566 "/usr/include/stdlib.h" 3
extern "C" char *getenv(const char *) throw() __attribute__((nonnull(1)));
# 571 "/usr/include/stdlib.h" 3
extern "C" char *__secure_getenv(const char *) throw() __attribute__((nonnull(1)));
# 578 "/usr/include/stdlib.h" 3
extern "C" int putenv(char *) throw() __attribute__((nonnull(1)));
# 584 "/usr/include/stdlib.h" 3
extern "C" int setenv(const char *, const char *, int) throw() __attribute__((nonnull(2)));
# 588 "/usr/include/stdlib.h" 3
extern "C" int unsetenv(const char *) throw();
# 595 "/usr/include/stdlib.h" 3
extern "C" int clearenv() throw();
# 604 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char *) throw() __attribute__((nonnull(1)));
# 615 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char *) __attribute__((nonnull(1)));
# 625 "/usr/include/stdlib.h" 3
extern "C" int mkstemp64(char *) __attribute__((nonnull(1)));
# 637 "/usr/include/stdlib.h" 3
extern "C" int mkstemps(char *, int) __attribute__((nonnull(1)));
# 647 "/usr/include/stdlib.h" 3
extern "C" int mkstemps64(char *, int) __attribute__((nonnull(1)));
# 658 "/usr/include/stdlib.h" 3
extern "C" char *mkdtemp(char *) throw() __attribute__((nonnull(1)));
# 669 "/usr/include/stdlib.h" 3
extern "C" int mkostemp(char *, int) __attribute__((nonnull(1)));
# 679 "/usr/include/stdlib.h" 3
extern "C" int mkostemp64(char *, int) __attribute__((nonnull(1)));
# 689 "/usr/include/stdlib.h" 3
extern "C" int mkostemps(char *, int, int) __attribute__((nonnull(1)));
# 701 "/usr/include/stdlib.h" 3
extern "C" int mkostemps64(char *, int, int) __attribute__((nonnull(1)));
# 712 "/usr/include/stdlib.h" 3
extern "C" int system(const char *);
# 719 "/usr/include/stdlib.h" 3
extern "C" char *canonicalize_file_name(const char *) throw() __attribute__((nonnull(1)));
# 729 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *__restrict__, char *__restrict__) throw();
# 737 "/usr/include/stdlib.h" 3
extern "C" { typedef int (*__compar_fn_t)(const void *, const void *); }
# 740 "/usr/include/stdlib.h" 3
extern "C" { typedef __compar_fn_t comparison_fn_t; }
# 744 "/usr/include/stdlib.h" 3
extern "C" { typedef int (*__compar_d_fn_t)(const void *, const void *, void *); }
# 750 "/usr/include/stdlib.h" 3
extern "C" void *bsearch(const void *, const void *, size_t, size_t, __compar_fn_t) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(5)));
# 756 "/usr/include/stdlib.h" 3
extern "C" void qsort(void *, size_t, size_t, __compar_fn_t) __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 759 "/usr/include/stdlib.h" 3
extern "C" void qsort_r(void *, size_t, size_t, __compar_d_fn_t, void *) __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 766 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) int abs(int) throw() __attribute__((__const__));
# 767 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) long labs(long) throw() __attribute__((__const__));
# 771 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) long long llabs(long long) throw() __attribute__((__const__));
# 780 "/usr/include/stdlib.h" 3
extern "C" div_t div(int, int) throw() __attribute__((__const__));
# 782 "/usr/include/stdlib.h" 3
extern "C" ldiv_t ldiv(long, long) throw() __attribute__((__const__));
# 788 "/usr/include/stdlib.h" 3
extern "C" lldiv_t lldiv(long long, long long) throw() __attribute__((__const__));
# 802 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 808 "/usr/include/stdlib.h" 3
extern "C" char *fcvt(double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 814 "/usr/include/stdlib.h" 3
extern "C" char *gcvt(double, int, char *) throw() __attribute__((nonnull(3)));
# 820 "/usr/include/stdlib.h" 3
extern "C" char *qecvt(long double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 823 "/usr/include/stdlib.h" 3
extern "C" char *qfcvt(long double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 826 "/usr/include/stdlib.h" 3
extern "C" char *qgcvt(long double, int, char *) throw() __attribute__((nonnull(3)));
# 832 "/usr/include/stdlib.h" 3
extern "C" int ecvt_r(double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 835 "/usr/include/stdlib.h" 3
extern "C" int fcvt_r(double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 839 "/usr/include/stdlib.h" 3
extern "C" int qecvt_r(long double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 843 "/usr/include/stdlib.h" 3
extern "C" int qfcvt_r(long double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 854 "/usr/include/stdlib.h" 3
extern "C" int mblen(const char *, size_t) throw();
# 857 "/usr/include/stdlib.h" 3
extern "C" int mbtowc(wchar_t *__restrict__, const char *__restrict__, size_t) throw();
# 861 "/usr/include/stdlib.h" 3
extern "C" int wctomb(char *, wchar_t) throw();
# 865 "/usr/include/stdlib.h" 3
extern "C" size_t mbstowcs(wchar_t *__restrict__, const char *__restrict__, size_t) throw();
# 868 "/usr/include/stdlib.h" 3
extern "C" size_t wcstombs(char *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 879 "/usr/include/stdlib.h" 3
extern "C" int rpmatch(const char *) throw() __attribute__((nonnull(1)));
# 890 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **__restrict__, char *const *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 899 "/usr/include/stdlib.h" 3
extern "C" void setkey(const char *) throw() __attribute__((nonnull(1)));
# 907 "/usr/include/stdlib.h" 3
extern "C" int posix_openpt(int);
# 915 "/usr/include/stdlib.h" 3
extern "C" int grantpt(int) throw();
# 919 "/usr/include/stdlib.h" 3
extern "C" int unlockpt(int) throw();
# 924 "/usr/include/stdlib.h" 3
extern "C" char *ptsname(int) throw();
# 931 "/usr/include/stdlib.h" 3
extern "C" int ptsname_r(int, char *, size_t) throw() __attribute__((nonnull(2)));
# 935 "/usr/include/stdlib.h" 3
extern "C" int getpt();
# 942 "/usr/include/stdlib.h" 3
extern "C" int getloadavg(double [], int) throw() __attribute__((nonnull(1)));
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 71 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator;
# 74 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 76 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace std __attribute__((visibility("default"))) {
# 78 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __true_type { };
# 79 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __false_type { };
# 81 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< bool __T0>
# 82 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __truth_type {
# 83 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type; };
# 86 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __truth_type< true> {
# 87 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type; };
# 91 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Sp, class _Tp>
# 92 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __traitor {
# 94 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = (((bool)_Sp::__value) || ((bool)_Tp::__value))};
# 95 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef typename __truth_type< __value> ::__type __type;
# 96 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 99 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class , class >
# 100 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __are_same {
# 102 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 103 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 104 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 106 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 107 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __are_same< _Tp, _Tp> {
# 109 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 110 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 111 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 114 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 115 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_void {
# 117 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 118 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 119 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 122 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_void< void> {
# 124 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 125 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 126 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 131 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 132 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_integer {
# 134 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 135 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 136 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 142 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< bool> {
# 144 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 145 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 146 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 149 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char> {
# 151 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 152 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 153 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 156 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< signed char> {
# 158 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 159 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 160 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 163 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned char> {
# 165 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 166 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 167 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 171 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< wchar_t> {
# 173 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 174 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 175 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 195 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short> {
# 197 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 198 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 199 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 202 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned short> {
# 204 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 205 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 206 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 209 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< int> {
# 211 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 212 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 213 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 216 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned> {
# 218 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 219 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 220 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 223 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long> {
# 225 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 226 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 227 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 230 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long> {
# 232 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 233 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 234 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 237 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long long> {
# 239 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 240 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 241 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 244 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long long> {
# 246 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 247 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 248 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 253 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 254 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_floating {
# 256 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 257 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 258 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 262 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< float> {
# 264 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 265 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 266 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 269 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< double> {
# 271 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 272 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 273 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 276 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< long double> {
# 278 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 279 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 280 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 285 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 286 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_pointer {
# 288 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 289 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 290 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 292 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 293 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_pointer< _Tp *> {
# 295 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 296 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 297 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 302 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 303 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_normal_iterator {
# 305 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 306 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 307 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 309 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Iterator, class _Container>
# 310 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> > {
# 313 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 314 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 315 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 320 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 321 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> > {
# 323 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 328 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 329 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> > {
# 331 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 336 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 337 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> > {
# 339 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 344 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 345 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_char {
# 347 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 348 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 349 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 352 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_char< char> {
# 354 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 355 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 356 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 360 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_char< wchar_t> {
# 362 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 363 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 364 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 367 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 368 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_byte {
# 370 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 371 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 372 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 375 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< char> {
# 377 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 378 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 379 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 382 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< signed char> {
# 384 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 385 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 386 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 389 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< unsigned char> {
# 391 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 392 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 393 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 398 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template< class _Tp>
# 399 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_move_iterator {
# 401 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 402 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 403 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/4.4/ext/type_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< bool __T1, class >
# 41 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __enable_if {
# 42 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 44 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp>
# 45 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __enable_if< true, _Tp> {
# 46 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Tp __type; };
# 50 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< bool _Cond, class _Iftrue, class _Iffalse>
# 51 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __conditional_type {
# 52 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Iftrue __type; };
# 54 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Iftrue, class _Iffalse>
# 55 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __conditional_type< false, _Iftrue, _Iffalse> {
# 56 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Iffalse __type; };
# 60 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp>
# 61 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __add_unsigned {
# 64 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 67 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 68 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 71 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< char> {
# 72 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned char __type; };
# 75 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< signed char> {
# 76 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned char __type; };
# 79 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< short> {
# 80 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned short __type; };
# 83 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< int> {
# 84 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned __type; };
# 87 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< long> {
# 88 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned long __type; };
# 91 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< long long> {
# 92 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned long long __type; };
# 96 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< bool> ;
# 99 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< wchar_t> ;
# 103 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp>
# 104 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __remove_unsigned {
# 107 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 110 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 111 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 114 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< char> {
# 115 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef signed char __type; };
# 118 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned char> {
# 119 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef signed char __type; };
# 122 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned short> {
# 123 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef short __type; };
# 126 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned> {
# 127 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef int __type; };
# 130 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long> {
# 131 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef long __type; };
# 134 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long long> {
# 135 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef long long __type; };
# 139 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< bool> ;
# 142 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< wchar_t> ;
# 146 "/usr/include/c++/4.4/ext/type_traits.h" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type * __ptr )
    { return __ptr == 0; }
# 151 "/usr/include/c++/4.4/ext/type_traits.h" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type )
    { return false; }
# 158 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp, bool __T2 = std::__is_integer< _Tp> ::__value>
# 159 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote {
# 160 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef double __type; };
# 162 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp>
# 163 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote< _Tp, false> {
# 164 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Tp __type; };
# 166 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp, class _Up>
# 167 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_2 {
# 170 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 171 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 174 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__(__type1() + __type2()) __type;
# 175 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 177 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp, class _Up, class _Vp>
# 178 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_3 {
# 181 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 182 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 183 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3;
# 186 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__((__type1() + __type2()) + __type3()) __type;
# 187 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 189 "/usr/include/c++/4.4/ext/type_traits.h" 3
template< class _Tp, class _Up, class _Vp, class _Wp>
# 190 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_4 {
# 193 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 194 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 195 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3;
# 196 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Wp, std::__is_integer< _Wp> ::__value> ::__type __type4;
# 199 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__(((__type1() + __type2()) + __type3()) + __type4()) __type;
# 200 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 202 "/usr/include/c++/4.4/ext/type_traits.h" 3
}
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__((visibility("default"))) {
# 81 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    _Tp __cmath_power ( _Tp, unsigned int );
# 84 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline _Tp
    __pow_helper ( _Tp __x, int __n )
    {
      return __n < 0
        ? _Tp ( 1 ) / __cmath_power ( __x, - __n )
        : __cmath_power ( __x, __n );
    }
# 94 "/usr/include/c++/4.4/cmath" 3
inline double abs(double __x)
# 95 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabs(__x); }
# 98 "/usr/include/c++/4.4/cmath" 3
inline float abs(float __x)
# 99 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsf(__x); }
# 102 "/usr/include/c++/4.4/cmath" 3
inline long double abs(long double __x)
# 103 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsl(__x); }
# 105 "/usr/include/c++/4.4/cmath" 3
using ::acos;
# 108 "/usr/include/c++/4.4/cmath" 3
inline float acos(float __x)
# 109 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_acosf(__x); }
# 112 "/usr/include/c++/4.4/cmath" 3
inline long double acos(long double __x)
# 113 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_acosl(__x); }
# 115 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    acos ( _Tp __x )
    { return __builtin_acos ( __x ); }
# 121 "/usr/include/c++/4.4/cmath" 3
using ::asin;
# 124 "/usr/include/c++/4.4/cmath" 3
inline float asin(float __x)
# 125 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_asinf(__x); }
# 128 "/usr/include/c++/4.4/cmath" 3
inline long double asin(long double __x)
# 129 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_asinl(__x); }
# 131 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    asin ( _Tp __x )
    { return __builtin_asin ( __x ); }
# 137 "/usr/include/c++/4.4/cmath" 3
using ::atan;
# 140 "/usr/include/c++/4.4/cmath" 3
inline float atan(float __x)
# 141 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atanf(__x); }
# 144 "/usr/include/c++/4.4/cmath" 3
inline long double atan(long double __x)
# 145 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atanl(__x); }
# 147 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    atan ( _Tp __x )
    { return __builtin_atan ( __x ); }
# 153 "/usr/include/c++/4.4/cmath" 3
using ::atan2;
# 156 "/usr/include/c++/4.4/cmath" 3
inline float atan2(float __y, float __x)
# 157 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atan2f(__y, __x); }
# 160 "/usr/include/c++/4.4/cmath" 3
inline long double atan2(long double __y, long double __x)
# 161 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atan2l(__y, __x); }
# 163 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    atan2 ( _Tp __y, _Up __x )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return atan2 ( __type ( __y ), __type ( __x ) );
    }
# 175 "/usr/include/c++/4.4/cmath" 3
using ::ceil;
# 178 "/usr/include/c++/4.4/cmath" 3
inline float ceil(float __x)
# 179 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ceilf(__x); }
# 182 "/usr/include/c++/4.4/cmath" 3
inline long double ceil(long double __x)
# 183 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ceill(__x); }
# 185 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    ceil ( _Tp __x )
    { return __builtin_ceil ( __x ); }
# 191 "/usr/include/c++/4.4/cmath" 3
using ::cos;
# 194 "/usr/include/c++/4.4/cmath" 3
inline float cos(float __x)
# 195 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_cosf(__x); }
# 198 "/usr/include/c++/4.4/cmath" 3
inline long double cos(long double __x)
# 199 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_cosl(__x); }
# 201 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cos ( _Tp __x )
    { return __builtin_cos ( __x ); }
# 207 "/usr/include/c++/4.4/cmath" 3
using ::cosh;
# 210 "/usr/include/c++/4.4/cmath" 3
inline float cosh(float __x)
# 211 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_coshf(__x); }
# 214 "/usr/include/c++/4.4/cmath" 3
inline long double cosh(long double __x)
# 215 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_coshl(__x); }
# 217 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cosh ( _Tp __x )
    { return __builtin_cosh ( __x ); }
# 223 "/usr/include/c++/4.4/cmath" 3
using ::exp;
# 226 "/usr/include/c++/4.4/cmath" 3
inline float exp(float __x)
# 227 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_expf(__x); }
# 230 "/usr/include/c++/4.4/cmath" 3
inline long double exp(long double __x)
# 231 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_expl(__x); }
# 233 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    exp ( _Tp __x )
    { return __builtin_exp ( __x ); }
# 239 "/usr/include/c++/4.4/cmath" 3
using ::fabs;
# 242 "/usr/include/c++/4.4/cmath" 3
inline float fabs(float __x)
# 243 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsf(__x); }
# 246 "/usr/include/c++/4.4/cmath" 3
inline long double fabs(long double __x)
# 247 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsl(__x); }
# 249 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    fabs ( _Tp __x )
    { return __builtin_fabs ( __x ); }
# 255 "/usr/include/c++/4.4/cmath" 3
using ::floor;
# 258 "/usr/include/c++/4.4/cmath" 3
inline float floor(float __x)
# 259 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_floorf(__x); }
# 262 "/usr/include/c++/4.4/cmath" 3
inline long double floor(long double __x)
# 263 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_floorl(__x); }
# 265 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    floor ( _Tp __x )
    { return __builtin_floor ( __x ); }
# 271 "/usr/include/c++/4.4/cmath" 3
using ::fmod;
# 274 "/usr/include/c++/4.4/cmath" 3
inline float fmod(float __x, float __y)
# 275 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fmodf(__x, __y); }
# 278 "/usr/include/c++/4.4/cmath" 3
inline long double fmod(long double __x, long double __y)
# 279 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fmodl(__x, __y); }
# 281 "/usr/include/c++/4.4/cmath" 3
using ::frexp;
# 284 "/usr/include/c++/4.4/cmath" 3
inline float frexp(float __x, int *__exp)
# 285 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_frexpf(__x, __exp); }
# 288 "/usr/include/c++/4.4/cmath" 3
inline long double frexp(long double __x, int *__exp)
# 289 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_frexpl(__x, __exp); }
# 291 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    frexp ( _Tp __x, int * __exp )
    { return __builtin_frexp ( __x, __exp ); }
# 297 "/usr/include/c++/4.4/cmath" 3
using ::ldexp;
# 300 "/usr/include/c++/4.4/cmath" 3
inline float ldexp(float __x, int __exp)
# 301 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ldexpf(__x, __exp); }
# 304 "/usr/include/c++/4.4/cmath" 3
inline long double ldexp(long double __x, int __exp)
# 305 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ldexpl(__x, __exp); }
# 307 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
  ldexp ( _Tp __x, int __exp )
  { return __builtin_ldexp ( __x, __exp ); }
# 313 "/usr/include/c++/4.4/cmath" 3
using ::log;
# 316 "/usr/include/c++/4.4/cmath" 3
inline float log(float __x)
# 317 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_logf(__x); }
# 320 "/usr/include/c++/4.4/cmath" 3
inline long double log(long double __x)
# 321 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_logl(__x); }
# 323 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log ( _Tp __x )
    { return __builtin_log ( __x ); }
# 329 "/usr/include/c++/4.4/cmath" 3
using ::log10;
# 332 "/usr/include/c++/4.4/cmath" 3
inline float log10(float __x)
# 333 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_log10f(__x); }
# 336 "/usr/include/c++/4.4/cmath" 3
inline long double log10(long double __x)
# 337 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_log10l(__x); }
# 339 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log10 ( _Tp __x )
    { return __builtin_log10 ( __x ); }
# 345 "/usr/include/c++/4.4/cmath" 3
using ::modf;
# 348 "/usr/include/c++/4.4/cmath" 3
inline float modf(float __x, float *__iptr)
# 349 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_modff(__x, __iptr); }
# 352 "/usr/include/c++/4.4/cmath" 3
inline long double modf(long double __x, long double *__iptr)
# 353 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_modfl(__x, __iptr); }
# 355 "/usr/include/c++/4.4/cmath" 3
using ::pow;
# 358 "/usr/include/c++/4.4/cmath" 3
inline float pow(float __x, float __y)
# 359 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powf(__x, __y); }
# 362 "/usr/include/c++/4.4/cmath" 3
inline long double pow(long double __x, long double __y)
# 363 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powl(__x, __y); }
# 369 "/usr/include/c++/4.4/cmath" 3
inline double pow(double __x, int __i)
# 370 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powi(__x, __i); }
# 373 "/usr/include/c++/4.4/cmath" 3
inline float pow(float __x, int __n)
# 374 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powif(__x, __n); }
# 377 "/usr/include/c++/4.4/cmath" 3
inline long double pow(long double __x, int __n)
# 378 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powil(__x, __n); }
# 381 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    pow ( _Tp __x, _Up __y )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return pow ( __type ( __x ), __type ( __y ) );
    }
# 393 "/usr/include/c++/4.4/cmath" 3
using ::sin;
# 396 "/usr/include/c++/4.4/cmath" 3
inline float sin(float __x)
# 397 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinf(__x); }
# 400 "/usr/include/c++/4.4/cmath" 3
inline long double sin(long double __x)
# 401 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinl(__x); }
# 403 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sin ( _Tp __x )
    { return __builtin_sin ( __x ); }
# 409 "/usr/include/c++/4.4/cmath" 3
using ::sinh;
# 412 "/usr/include/c++/4.4/cmath" 3
inline float sinh(float __x)
# 413 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinhf(__x); }
# 416 "/usr/include/c++/4.4/cmath" 3
inline long double sinh(long double __x)
# 417 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinhl(__x); }
# 419 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sinh ( _Tp __x )
    { return __builtin_sinh ( __x ); }
# 425 "/usr/include/c++/4.4/cmath" 3
using ::sqrt;
# 428 "/usr/include/c++/4.4/cmath" 3
inline float sqrt(float __x)
# 429 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sqrtf(__x); }
# 432 "/usr/include/c++/4.4/cmath" 3
inline long double sqrt(long double __x)
# 433 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sqrtl(__x); }
# 435 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sqrt ( _Tp __x )
    { return __builtin_sqrt ( __x ); }
# 441 "/usr/include/c++/4.4/cmath" 3
using ::tan;
# 444 "/usr/include/c++/4.4/cmath" 3
inline float tan(float __x)
# 445 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanf(__x); }
# 448 "/usr/include/c++/4.4/cmath" 3
inline long double tan(long double __x)
# 449 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanl(__x); }
# 451 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tan ( _Tp __x )
    { return __builtin_tan ( __x ); }
# 457 "/usr/include/c++/4.4/cmath" 3
using ::tanh;
# 460 "/usr/include/c++/4.4/cmath" 3
inline float tanh(float __x)
# 461 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanhf(__x); }
# 464 "/usr/include/c++/4.4/cmath" 3
inline long double tanh(long double __x)
# 465 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanhl(__x); }
# 467 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tanh ( _Tp __x )
    { return __builtin_tanh ( __x ); }
# 473 "/usr/include/c++/4.4/cmath" 3
}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__((visibility("default"))) {
# 494 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    fpclassify ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_fpclassify ( FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type ( __f ) );
    }
# 504 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isfinite ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isfinite ( __type ( __f ) );
    }
# 513 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isinf ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isinf ( __type ( __f ) );
    }
# 522 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnan ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnan ( __type ( __f ) );
    }
# 531 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnormal ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnormal ( __type ( __f ) );
    }
# 540 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    signbit ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_signbit ( __type ( __f ) );
    }
# 549 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 558 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreaterequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreaterequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 567 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isless ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isless ( __type ( __f1 ), __type ( __f2 ) );
    }
# 576 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 585 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 594 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isunordered ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isunordered ( __type ( __f1 ), __type ( __f2 ) );
    }
# 603 "/usr/include/c++/4.4/cmath" 3
}
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 37 "/usr/include/c++/4.4/bits/cmath.tcc" 3
template < typename _Tp >
    inline _Tp
    __cmath_power ( _Tp __x, unsigned int __n )
    {
      _Tp __y = __n % 2 ? __x : _Tp ( 1 );

      while ( __n >>= 1 )
        {
          __x = __x * __x;
          if ( __n % 2 )
            __y = __y * __x;
        }

      return __y;
    }
# 53 "/usr/include/c++/4.4/bits/cmath.tcc" 3
}
# 49 "/usr/include/c++/4.4/cstddef" 3
namespace std __attribute__((visibility("default"))) {
# 51 "/usr/include/c++/4.4/cstddef" 3
using ::ptrdiff_t;
# 52 "/usr/include/c++/4.4/cstddef" 3
using ::size_t;
# 54 "/usr/include/c++/4.4/cstddef" 3
}
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__((visibility("default"))) {
# 102 "/usr/include/c++/4.4/cstdlib" 3
using ::div_t;
# 103 "/usr/include/c++/4.4/cstdlib" 3
using ::ldiv_t;
# 105 "/usr/include/c++/4.4/cstdlib" 3
using ::abort;
# 106 "/usr/include/c++/4.4/cstdlib" 3
using ::abs;
# 107 "/usr/include/c++/4.4/cstdlib" 3
using ::atexit;
# 108 "/usr/include/c++/4.4/cstdlib" 3
using ::atof;
# 109 "/usr/include/c++/4.4/cstdlib" 3
using ::atoi;
# 110 "/usr/include/c++/4.4/cstdlib" 3
using ::atol;
# 111 "/usr/include/c++/4.4/cstdlib" 3
using ::bsearch;
# 112 "/usr/include/c++/4.4/cstdlib" 3
using ::calloc;
# 113 "/usr/include/c++/4.4/cstdlib" 3
using ::div;
# 114 "/usr/include/c++/4.4/cstdlib" 3
using ::exit;
# 115 "/usr/include/c++/4.4/cstdlib" 3
using ::free;
# 116 "/usr/include/c++/4.4/cstdlib" 3
using ::getenv;
# 117 "/usr/include/c++/4.4/cstdlib" 3
using ::labs;
# 118 "/usr/include/c++/4.4/cstdlib" 3
using ::ldiv;
# 119 "/usr/include/c++/4.4/cstdlib" 3
using ::malloc;
# 121 "/usr/include/c++/4.4/cstdlib" 3
using ::mblen;
# 122 "/usr/include/c++/4.4/cstdlib" 3
using ::mbstowcs;
# 123 "/usr/include/c++/4.4/cstdlib" 3
using ::mbtowc;
# 125 "/usr/include/c++/4.4/cstdlib" 3
using ::qsort;
# 126 "/usr/include/c++/4.4/cstdlib" 3
using ::rand;
# 127 "/usr/include/c++/4.4/cstdlib" 3
using ::realloc;
# 128 "/usr/include/c++/4.4/cstdlib" 3
using ::srand;
# 129 "/usr/include/c++/4.4/cstdlib" 3
using ::strtod;
# 130 "/usr/include/c++/4.4/cstdlib" 3
using ::strtol;
# 131 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoul;
# 132 "/usr/include/c++/4.4/cstdlib" 3
using ::system;
# 134 "/usr/include/c++/4.4/cstdlib" 3
using ::wcstombs;
# 135 "/usr/include/c++/4.4/cstdlib" 3
using ::wctomb;
# 139 "/usr/include/c++/4.4/cstdlib" 3
inline long abs(long __i) { return labs(__i); }
# 142 "/usr/include/c++/4.4/cstdlib" 3
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
# 144 "/usr/include/c++/4.4/cstdlib" 3
}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 160 "/usr/include/c++/4.4/cstdlib" 3
using ::lldiv_t;
# 166 "/usr/include/c++/4.4/cstdlib" 3
using ::_Exit;
# 170 "/usr/include/c++/4.4/cstdlib" 3
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); }
# 173 "/usr/include/c++/4.4/cstdlib" 3
using ::llabs;
# 176 "/usr/include/c++/4.4/cstdlib" 3
inline lldiv_t div(long long __n, long long __d)
# 177 "/usr/include/c++/4.4/cstdlib" 3
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; }
# 179 "/usr/include/c++/4.4/cstdlib" 3
using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
using ::atoll;
# 191 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoll;
# 192 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoull;
# 194 "/usr/include/c++/4.4/cstdlib" 3
using ::strtof;
# 195 "/usr/include/c++/4.4/cstdlib" 3
using ::strtold;
# 197 "/usr/include/c++/4.4/cstdlib" 3
}
# 199 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__((visibility("default"))) {
# 202 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::lldiv_t;
# 204 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::_Exit;
# 205 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::abs;
# 207 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::llabs;
# 208 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::div;
# 209 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::lldiv;
# 211 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::atoll;
# 212 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtof;
# 213 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtoll;
# 214 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtoull;
# 215 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtold;
# 217 "/usr/include/c++/4.4/cstdlib" 3
}
# 497 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
namespace __gnu_cxx {
# 499 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline long long abs(long long) __attribute__((visibility("default")));
# 500 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 502 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
namespace std {
# 504 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
template< class T> extern inline T __pow_helper(T, int);
# 505 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
template< class T> extern inline T __cmath_power(T, unsigned);
# 506 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 508 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::abs;
# 509 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::fabs;
# 510 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::ceil;
# 511 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::floor;
# 512 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::sqrt;
# 513 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::pow;
# 514 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::log;
# 515 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::log10;
# 516 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::fmod;
# 517 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::modf;
# 518 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::exp;
# 519 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::frexp;
# 520 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::ldexp;
# 521 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::asin;
# 522 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::sin;
# 523 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::sinh;
# 524 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::acos;
# 525 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::cos;
# 526 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::cosh;
# 527 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::atan;
# 528 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::atan2;
# 529 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::tan;
# 530 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
using std::tanh;
# 584 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
namespace std {
# 587 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline long abs(long) __attribute__((visibility("default")));
# 588 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float abs(float) __attribute__((visibility("default")));
# 589 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline double abs(double) __attribute__((visibility("default")));
# 590 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float fabs(float) __attribute__((visibility("default")));
# 591 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float ceil(float) __attribute__((visibility("default")));
# 592 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float floor(float) __attribute__((visibility("default")));
# 593 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float sqrt(float) __attribute__((visibility("default")));
# 594 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float pow(float, float) __attribute__((visibility("default")));
# 595 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float pow(float, int) __attribute__((visibility("default")));
# 596 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline double pow(double, int) __attribute__((visibility("default")));
# 597 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float log(float) __attribute__((visibility("default")));
# 598 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float log10(float) __attribute__((visibility("default")));
# 599 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float fmod(float, float) __attribute__((visibility("default")));
# 600 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float modf(float, float *) __attribute__((visibility("default")));
# 601 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float exp(float) __attribute__((visibility("default")));
# 602 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float frexp(float, int *) __attribute__((visibility("default")));
# 603 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float ldexp(float, int) __attribute__((visibility("default")));
# 604 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float asin(float) __attribute__((visibility("default")));
# 605 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float sin(float) __attribute__((visibility("default")));
# 606 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float sinh(float) __attribute__((visibility("default")));
# 607 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float acos(float) __attribute__((visibility("default")));
# 608 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float cos(float) __attribute__((visibility("default")));
# 609 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float cosh(float) __attribute__((visibility("default")));
# 610 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float atan(float) __attribute__((visibility("default")));
# 611 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float atan2(float, float) __attribute__((visibility("default")));
# 612 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float tan(float) __attribute__((visibility("default")));
# 613 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
extern inline float tanh(float) __attribute__((visibility("default")));
# 616 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 619 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float logb(float a)
# 620 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 621 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return logbf(a);
# 622 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 624 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline int ilogb(float a)
# 625 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 626 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ilogbf(a);
# 627 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 629 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float scalbn(float a, int b)
# 630 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 631 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return scalbnf(a, b);
# 632 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 634 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float scalbln(float a, long b)
# 635 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 636 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return scalblnf(a, b);
# 637 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 639 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float exp2(float a)
# 640 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 641 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return exp2f(a);
# 642 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 644 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float exp10(float a)
# 645 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 646 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return exp10f(a);
# 647 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 649 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float expm1(float a)
# 650 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 651 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return expm1f(a);
# 652 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 654 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float log2(float a)
# 655 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 656 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return log2f(a);
# 657 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 659 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float log1p(float a)
# 660 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 661 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return log1pf(a);
# 662 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 664 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float rsqrt(float a)
# 665 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 666 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return rsqrtf(a);
# 667 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 669 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float acosh(float a)
# 670 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 671 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return acoshf(a);
# 672 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 674 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float asinh(float a)
# 675 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 676 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return asinhf(a);
# 677 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 679 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float atanh(float a)
# 680 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 681 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return atanhf(a);
# 682 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 684 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float hypot(float a, float b)
# 685 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 686 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return hypotf(a, b);
# 687 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 689 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float cbrt(float a)
# 690 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 691 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return cbrtf(a);
# 692 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 694 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float rcbrt(float a)
# 695 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 696 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return rcbrtf(a);
# 697 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 699 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float sinpi(float a)
# 700 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 701 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return sinpif(a);
# 702 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 704 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline void sincos(float a, float *sptr, float *cptr)
# 705 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 706 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
sincosf(a, sptr, cptr);
# 707 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 709 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float erf(float a)
# 710 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 711 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return erff(a);
# 712 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 714 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float erfinv(float a)
# 715 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 716 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return erfinvf(a);
# 717 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 719 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float erfc(float a)
# 720 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 721 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return erfcf(a);
# 722 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 724 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float erfcinv(float a)
# 725 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 726 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return erfcinvf(a);
# 727 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 729 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float lgamma(float a)
# 730 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 731 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return lgammaf(a);
# 732 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 734 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float tgamma(float a)
# 735 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 736 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return tgammaf(a);
# 737 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 739 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, float b)
# 740 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 741 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return copysignf(a, b);
# 742 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 744 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double copysign(double a, float b)
# 745 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 746 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return copysign(a, (double)b);
# 747 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 749 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, double b)
# 750 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 751 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return copysignf(a, (float)b);
# 752 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 754 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float nextafter(float a, float b)
# 755 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 756 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return nextafterf(a, b);
# 757 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 759 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float remainder(float a, float b)
# 760 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 761 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return remainderf(a, b);
# 762 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 764 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float remquo(float a, float b, int *quo)
# 765 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 766 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return remquof(a, b, quo);
# 767 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 769 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float round(float a)
# 770 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 771 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return roundf(a);
# 772 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 774 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long lround(float a)
# 775 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 776 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return lroundf(a);
# 777 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 779 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long long llround(float a)
# 780 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 781 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return llroundf(a);
# 782 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 784 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float trunc(float a)
# 785 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 786 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return truncf(a);
# 787 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 789 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float rint(float a)
# 790 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 791 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return rintf(a);
# 792 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 794 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long lrint(float a)
# 795 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 796 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return lrintf(a);
# 797 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 799 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long long llrint(float a)
# 800 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 801 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return llrintf(a);
# 802 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 804 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float nearbyint(float a)
# 805 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 806 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return nearbyintf(a);
# 807 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 809 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float fdim(float a, float b)
# 810 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 811 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fdimf(a, b);
# 812 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 814 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float fma(float a, float b, float c)
# 815 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 816 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmaf(a, b, c);
# 817 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 819 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float fmax(float a, float b)
# 820 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 821 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 822 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 824 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float fmin(float a, float b)
# 825 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 826 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 827 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 829 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, unsigned b)
# 830 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 831 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umin(a, b);
# 832 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 834 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned min(int a, unsigned b)
# 835 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 836 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umin((unsigned)a, b);
# 837 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 839 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, int b)
# 840 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 841 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umin(a, (unsigned)b);
# 842 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 844 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long long min(long long a, long long b)
# 845 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 846 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return llmin(a, b);
# 847 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 849 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, unsigned long long b)
# 850 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 851 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmin(a, b);
# 852 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 854 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(long long a, unsigned long long b)
# 855 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 856 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmin((unsigned long long)a, b);
# 857 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 859 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, long long b)
# 860 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 861 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmin(a, (unsigned long long)b);
# 862 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 864 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float min(float a, float b)
# 865 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 866 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 867 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 869 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double min(double a, double b)
# 870 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 871 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmin(a, b);
# 872 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 874 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double min(float a, double b)
# 875 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 876 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmin((double)a, b);
# 877 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 879 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double min(double a, float b)
# 880 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 881 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmin(a, (double)b);
# 882 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 884 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, unsigned b)
# 885 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 886 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umax(a, b);
# 887 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 889 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned max(int a, unsigned b)
# 890 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 891 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umax((unsigned)a, b);
# 892 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 894 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, int b)
# 895 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 896 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return umax(a, (unsigned)b);
# 897 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 899 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline long long max(long long a, long long b)
# 900 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 901 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return llmax(a, b);
# 902 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 904 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, unsigned long long b)
# 905 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 906 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmax(a, b);
# 907 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 909 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(long long a, unsigned long long b)
# 910 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 911 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmax((unsigned long long)a, b);
# 912 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 914 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, long long b)
# 915 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 916 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return ullmax(a, (unsigned long long)b);
# 917 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 919 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline float max(float a, float b)
# 920 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 921 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 922 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 924 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double max(double a, double b)
# 925 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 926 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmax(a, b);
# 927 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 929 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double max(float a, double b)
# 930 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 931 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmax((double)a, b);
# 932 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 934 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
static inline double max(double a, float b)
# 935 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
{
# 936 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
return fmax(a, (double)b);
# 937 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h"
}
# 60 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
template< class T, int dim = 1>
# 61 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
struct surface : public surfaceReference {
# 63 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
surface()
# 64 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
{
# 65 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< T> ();
# 66 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
}
# 68 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
surface(cudaChannelFormatDesc desc)
# 69 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
{
# 70 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = desc;
# 71 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
}
# 72 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
};
# 75 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
template< int dim>
# 76 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
struct surface< void, dim> : public surfaceReference {
# 78 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
surface()
# 79 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
{
# 80 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< void> ();
# 81 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
}
# 82 "/usr/local/cuda3.2/cuda/bin/../include/cuda_surface_types.h"
};
# 60 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
template< class T, int dim = 1, cudaTextureReadMode mode = cudaReadModeElementType>
# 61 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
struct texture : public textureReference {
# 63 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
texture(int norm = 0, cudaTextureFilterMode
# 64 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
fMode = cudaFilterModePoint, cudaTextureAddressMode
# 65 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
aMode = cudaAddressModeClamp)
# 66 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
{
# 67 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 68 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 69 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 70 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 71 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 72 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = cudaCreateChannelDesc< T> ();
# 73 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
}
# 75 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
texture(int norm, cudaTextureFilterMode
# 76 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
fMode, cudaTextureAddressMode
# 77 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
aMode, cudaChannelFormatDesc
# 78 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
desc)
# 79 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
{
# 80 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 81 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 82 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 83 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 84 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 85 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = desc;
# 86 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
}
# 87 "/usr/local/cuda3.2/cuda/bin/../include/cuda_texture_types.h"
};
# 324 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b)
# 325 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 327 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 329 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b)
# 330 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 332 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 334 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b)
# 335 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 337 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 339 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b)
# 340 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 342 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 344 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b)
# 345 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 347 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 349 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b)
# 350 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 352 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 354 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b)
# 355 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 357 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 359 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b)
# 360 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 362 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 364 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int float_as_int(float a)
# 365 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 367 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 369 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float int_as_float(int a)
# 370 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 372 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 374 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float saturate(float a)
# 375 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 377 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 379 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int mul24(int a, int b)
# 380 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 382 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 384 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b)
# 385 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 387 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 389 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void trap()
# 390 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 392 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 394 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void brkpt(int c)
# 395 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 397 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 399 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void syncthreads()
# 400 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 402 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 404 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void prof_trigger(int e)
# 405 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 422 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 424 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void threadfence(bool global = true)
# 425 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 427 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 429 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero)
# 430 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 435 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 437 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero)
# 438 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 443 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 445 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest)
# 446 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 451 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 453 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 454 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 459 "/usr/local/cuda3.2/cuda/bin/../include/device_functions.h"
exit(___);}
# 102 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val)
# 103 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 105 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 107 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val)
# 108 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 110 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 112 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val)
# 113 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 115 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 117 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val)
# 118 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 120 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 122 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val)
# 123 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 125 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 127 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val)
# 128 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 130 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 132 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val)
# 133 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 135 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 137 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val)
# 138 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 140 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 142 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val)
# 143 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 145 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 147 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val)
# 148 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 150 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 152 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val)
# 153 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 155 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 157 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val)
# 158 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 160 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 162 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val)
# 163 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 165 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 167 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val)
# 168 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 170 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 172 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val)
# 173 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 175 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 177 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val)
# 178 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 180 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 182 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val)
# 183 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 185 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 187 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val)
# 188 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 190 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 192 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val)
# 193 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 195 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 197 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val)
# 198 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 202 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val)
# 203 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 205 "/usr/local/cuda3.2/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 75 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val)
# 76 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 78 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 80 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val)
# 81 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 83 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 85 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val)
# 86 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 88 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 90 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond)
# 91 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 93 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 95 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond)
# 96 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 98 "/usr/local/cuda3.2/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 170 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode)
# 171 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 176 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 178 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 179 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 184 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 186 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 187 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 192 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 194 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero)
# 195 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 202 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero)
# 203 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 208 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 210 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero)
# 211 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 216 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 218 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero)
# 219 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 224 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 226 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest)
# 227 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 232 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 234 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest)
# 235 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 240 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 242 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest)
# 243 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 245 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 247 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 248 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 250 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 252 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest)
# 253 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 255 "/usr/local/cuda3.2/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 66 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val)
# 67 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_atomic_functions.h"
{int volatile ___ = 1;
# 69 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_atomic_functions.h"
exit(___);}
# 124 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred)
# 125 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 127 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 129 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred)
# 130 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 132 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 134 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred)
# 135 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 137 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 139 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred)
# 140 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 142 "/usr/local/cuda3.2/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 97 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 98 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf1Dread(T *res, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 99 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 106 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 108 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T
# 109 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 110 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 116 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 118 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 119 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf1Dread(T *res, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 120 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 122 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 125 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 126 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 128 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 131 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline signed char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 132 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 134 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 137 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 138 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 140 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 143 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 144 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 146 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 149 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 150 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 152 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 155 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 156 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 160 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 163 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 164 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 166 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 169 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 170 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 174 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 177 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 178 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 180 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 183 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 184 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 186 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 189 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned short surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 190 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 192 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 195 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 196 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 198 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 201 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 202 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 204 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 207 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 208 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 212 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 215 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 216 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 218 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 221 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 222 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 226 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 229 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 230 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 232 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 235 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 236 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 238 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 241 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 242 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 244 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 247 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 248 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 250 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 253 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 254 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 256 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 259 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 260 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 264 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 267 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 268 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 270 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 273 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 274 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 278 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 281 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 282 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 284 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 287 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline long long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 288 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 290 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 293 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned long long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 294 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 296 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 299 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline longlong1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 300 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 302 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 305 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ulonglong1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 306 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 308 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 311 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline longlong2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 312 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 316 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 319 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ulonglong2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 320 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 322 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 385 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 386 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 388 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 391 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 392 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 394 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 397 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 398 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 402 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 405 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 406 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 410 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 457 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 458 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf2Dread(T *res, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 459 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 466 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 468 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T
# 469 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 470 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 476 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 478 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 479 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf2Dread(T *res, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 480 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 482 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 485 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 486 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 488 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 491 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline signed char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 492 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 494 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 497 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 498 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 500 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 503 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 504 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 506 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 509 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 510 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 512 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 515 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 516 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 520 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 523 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 524 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 526 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 529 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline char4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 530 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 534 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 537 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uchar4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 538 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 540 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 543 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 544 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 546 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 549 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned short surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 550 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 552 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 555 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 556 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 558 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 561 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 562 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 564 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 567 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 568 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 572 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 575 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 576 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 578 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 581 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline short4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 582 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 586 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 589 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ushort4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 590 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 592 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 595 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 596 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 598 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 601 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 602 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 604 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 607 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 608 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 610 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 613 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 614 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 616 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 619 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 620 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 624 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 627 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 628 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 630 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 633 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline int4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 634 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 638 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 641 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline uint4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 642 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 644 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 647 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline long long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 648 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 650 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 653 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline unsigned long long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 654 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 656 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 659 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline longlong1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 660 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 662 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 665 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ulonglong1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 666 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 668 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 671 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline longlong2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 672 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 676 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 679 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline ulonglong2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 680 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 682 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 745 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 746 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 748 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 751 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 752 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 754 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 757 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 758 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 762 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 765 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) inline float4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 766 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 770 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 817 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 818 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf1Dwrite(T val, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 819 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 837 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 839 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 840 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf1Dwrite(T val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 841 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 843 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 846 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 847 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 849 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 851 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 852 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 854 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 856 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 857 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 859 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 861 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 862 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 864 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 866 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 867 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 869 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 871 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 872 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 874 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 876 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 877 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 879 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 881 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 882 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 884 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 886 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 887 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 889 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 891 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 892 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 894 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 896 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 897 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 899 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 901 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 902 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 904 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 906 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 907 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 909 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 911 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 912 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 914 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 916 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 917 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 919 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 921 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 922 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 924 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 926 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 927 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 929 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 931 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 932 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 934 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 936 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 937 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 939 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 941 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 942 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 944 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 946 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 947 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 949 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 951 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 952 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 954 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 956 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 957 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 959 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 961 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 962 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 964 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 966 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 967 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 969 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 971 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 972 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 974 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 976 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 977 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 979 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 981 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 982 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 984 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 986 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 987 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 989 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 991 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 992 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 994 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 996 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 997 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 999 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1045 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1046 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1048 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1050 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1051 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1053 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1055 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1056 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1058 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1060 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1061 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1063 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1110 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 1111 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf2Dwrite(T val, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1112 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1130 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1132 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 1133 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
surf2Dwrite(T val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1134 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1136 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1139 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1140 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1142 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1144 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1145 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1147 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1149 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1150 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1152 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1154 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1155 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1157 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1159 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1160 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1162 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1164 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1165 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1167 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1169 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1170 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1172 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1174 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1175 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1177 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1179 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1180 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1182 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1184 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1185 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1187 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1189 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1190 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1192 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1194 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1195 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1197 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1199 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1200 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1202 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1204 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1205 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1207 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1209 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1210 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1212 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1214 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1215 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1217 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1219 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1220 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1222 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1224 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1225 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1227 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1229 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1230 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1232 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1234 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1235 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1237 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1239 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1240 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1242 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1244 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1245 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1247 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1249 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1250 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1252 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1254 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1255 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1257 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1259 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1260 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1262 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1264 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1265 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1267 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1269 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1270 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1272 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1274 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1275 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1277 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1279 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1280 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1282 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1284 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1285 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1287 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1289 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1290 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1292 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1338 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1339 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1341 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1343 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1344 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1346 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1348 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1349 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1351 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1353 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1354 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1356 "/usr/local/cuda3.2/cuda/bin/../include/surface_functions.h"
exit(___);}
# 61 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern uint4 __utexfetchi(texture< T, 1, readMode> , int4);
# 63 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern int4 __itexfetchi(texture< T, 1, readMode> , int4);
# 65 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern float4 __ftexfetchi(texture< T, 1, readMode> , int4);
# 68 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern uint4 __utexfetch(texture< T, dim, readMode> , float4, int = dim);
# 70 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern int4 __itexfetch(texture< T, dim, readMode> , float4, int = dim);
# 72 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern float4 __ftexfetch(texture< T, dim, readMode> , float4, int = dim);
# 80 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType> t, int x)
# 81 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 89 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 91 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType> t, int x)
# 92 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 96 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 98 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType> t, int x)
# 99 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 103 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 105 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType> t, int x)
# 106 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 110 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 112 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType> t, int x)
# 113 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 117 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 119 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType> t, int x)
# 120 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 124 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 126 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType> t, int x)
# 127 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 131 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 133 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType> t, int x)
# 134 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 138 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 140 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType> t, int x)
# 141 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 145 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 153 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType> t, int x)
# 154 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 158 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 160 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType> t, int x)
# 161 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 165 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 167 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType> t, int x)
# 168 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 172 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 174 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType> t, int x)
# 175 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 179 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 181 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType> t, int x)
# 182 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 186 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 188 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType> t, int x)
# 189 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 193 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 195 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType> t, int x)
# 196 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 202 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType> t, int x)
# 203 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 207 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 215 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType> t, int x)
# 216 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 220 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 222 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType> t, int x)
# 223 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 227 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 229 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType> t, int x)
# 230 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 234 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 236 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType> t, int x)
# 237 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 241 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 243 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType> t, int x)
# 244 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 248 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 250 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType> t, int x)
# 251 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 255 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 257 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType> t, int x)
# 258 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 262 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 264 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType> t, int x)
# 265 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 269 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 343 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType> t, int x)
# 344 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 348 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 350 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType> t, int x)
# 351 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 355 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 357 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType> t, int x)
# 358 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 362 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 364 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType> t, int x)
# 365 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 369 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 377 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat> t, int x)
# 378 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 387 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 389 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat> t, int x)
# 390 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 395 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 397 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, int x)
# 398 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 403 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 405 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat> t, int x)
# 406 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 411 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 413 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, int x)
# 414 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 419 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 421 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat> t, int x)
# 422 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 427 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 429 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, int x)
# 430 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 435 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 437 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat> t, int x)
# 438 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 443 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 445 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, int x)
# 446 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 451 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 459 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat> t, int x)
# 460 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 465 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 467 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, int x)
# 468 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 473 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 475 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat> t, int x)
# 476 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 481 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 483 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, int x)
# 484 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 489 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 491 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat> t, int x)
# 492 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 497 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 499 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, int x)
# 500 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 505 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 507 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat> t, int x)
# 508 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 513 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 515 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, int x)
# 516 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 521 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 529 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType> t, float x)
# 530 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 538 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 540 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType> t, float x)
# 541 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 545 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 547 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType> t, float x)
# 548 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 552 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 554 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType> t, float x)
# 555 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 559 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 561 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType> t, float x)
# 562 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 566 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 568 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType> t, float x)
# 569 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 573 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 575 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType> t, float x)
# 576 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 580 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 582 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType> t, float x)
# 583 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 587 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 589 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType> t, float x)
# 590 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 594 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 602 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType> t, float x)
# 603 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 607 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 609 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType> t, float x)
# 610 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 614 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 616 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType> t, float x)
# 617 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 621 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 623 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType> t, float x)
# 624 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 628 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 630 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType> t, float x)
# 631 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 635 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 637 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType> t, float x)
# 638 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 642 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 644 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType> t, float x)
# 645 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 649 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 651 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType> t, float x)
# 652 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 656 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 664 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType> t, float x)
# 665 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 669 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 671 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType> t, float x)
# 672 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 676 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 678 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType> t, float x)
# 679 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 683 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 685 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType> t, float x)
# 686 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 690 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 692 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType> t, float x)
# 693 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 697 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 699 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType> t, float x)
# 700 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 704 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 706 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType> t, float x)
# 707 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 711 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 713 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType> t, float x)
# 714 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 718 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 798 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType> t, float x)
# 799 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 803 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 805 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType> t, float x)
# 806 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 810 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 812 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType> t, float x)
# 813 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 817 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 819 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType> t, float x)
# 820 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 824 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 832 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat> t, float x)
# 833 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 842 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 844 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat> t, float x)
# 845 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 850 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 852 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, float x)
# 853 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 858 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 860 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat> t, float x)
# 861 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 866 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 868 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, float x)
# 869 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 874 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 876 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat> t, float x)
# 877 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 882 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 884 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, float x)
# 885 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 890 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 892 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat> t, float x)
# 893 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 898 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 900 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, float x)
# 901 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 906 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 914 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat> t, float x)
# 915 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 920 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 922 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, float x)
# 923 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 928 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 930 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat> t, float x)
# 931 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 936 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 938 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, float x)
# 939 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 944 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 946 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat> t, float x)
# 947 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 952 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 954 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, float x)
# 955 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 960 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 962 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat> t, float x)
# 963 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 968 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 970 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, float x)
# 971 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 976 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 984 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType> t, float x, float y)
# 985 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 993 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 995 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType> t, float x, float y)
# 996 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1000 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1002 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType> t, float x, float y)
# 1003 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1007 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1009 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType> t, float x, float y)
# 1010 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1014 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1016 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType> t, float x, float y)
# 1017 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1021 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1023 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType> t, float x, float y)
# 1024 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1028 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1030 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType> t, float x, float y)
# 1031 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1035 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1037 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType> t, float x, float y)
# 1038 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1042 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1044 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType> t, float x, float y)
# 1045 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1049 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1057 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType> t, float x, float y)
# 1058 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1062 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1064 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType> t, float x, float y)
# 1065 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1069 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1071 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType> t, float x, float y)
# 1072 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1076 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1078 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType> t, float x, float y)
# 1079 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1083 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1085 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType> t, float x, float y)
# 1086 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1090 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1092 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType> t, float x, float y)
# 1093 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1097 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1099 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType> t, float x, float y)
# 1100 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1104 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1106 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType> t, float x, float y)
# 1107 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1111 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1119 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType> t, float x, float y)
# 1120 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1124 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1126 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType> t, float x, float y)
# 1127 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1131 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1133 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType> t, float x, float y)
# 1134 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1138 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1140 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType> t, float x, float y)
# 1141 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1145 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1147 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType> t, float x, float y)
# 1148 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1152 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1154 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType> t, float x, float y)
# 1155 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1159 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1161 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType> t, float x, float y)
# 1162 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1166 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1168 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType> t, float x, float y)
# 1169 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1173 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1247 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType> t, float x, float y)
# 1248 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1252 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1254 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType> t, float x, float y)
# 1255 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1259 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1261 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType> t, float x, float y)
# 1262 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1266 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1268 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType> t, float x, float y)
# 1269 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1273 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1281 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1282 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1291 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1293 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1294 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1299 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1301 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1302 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1307 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1309 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1310 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1315 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1317 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1318 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1323 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1325 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1326 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1331 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1333 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1334 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1339 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1341 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1342 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1347 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1349 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1350 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1355 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1363 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1364 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1369 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1371 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1372 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1377 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1379 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1380 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1385 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1387 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1388 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1393 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1395 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1396 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1401 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1403 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1404 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1409 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1411 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1412 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1417 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1419 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1420 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1425 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1433 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1434 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1442 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1444 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1445 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1449 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1451 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1452 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1456 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1458 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1459 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1463 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1465 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1466 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1470 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1472 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1473 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1477 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1479 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1480 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1484 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1486 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1487 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1491 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1493 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1494 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1498 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1506 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1507 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1511 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1513 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1514 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1518 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1520 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1521 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1525 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1527 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1528 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1532 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1534 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1535 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1539 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1541 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1542 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1546 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1548 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1549 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1553 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1555 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1556 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1560 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1568 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1569 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1573 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1575 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1576 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1580 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1582 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1583 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1587 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1589 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1590 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1594 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1596 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1597 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1601 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1603 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1604 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1608 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1610 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1611 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1615 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1617 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1618 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1622 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1696 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1697 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1701 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1703 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1704 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1708 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1710 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1711 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1715 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1717 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1718 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1722 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1730 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1731 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1740 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1742 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1743 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1748 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1750 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1751 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1756 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1758 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1759 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1764 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1766 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1767 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1772 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1774 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1775 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1780 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1782 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1783 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1788 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1790 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1791 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1796 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1798 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1799 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1804 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1812 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1813 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1818 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1820 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1821 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1826 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1828 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1829 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1834 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1836 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1837 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1842 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1844 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1845 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1850 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1852 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1853 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1858 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1860 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1861 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1866 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1868 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1869 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1874 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1930 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern int4 __itex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1932 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern uint4 __utex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1934 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern float4 __ftex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1954 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1955 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1957 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1959 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1960 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1962 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1964 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1965 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1967 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1969 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1970 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1972 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1974 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1975 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1977 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1979 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1980 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1982 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1984 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1985 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1987 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1989 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1990 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1992 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1994 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1995 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1997 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1999 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2000 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2002 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2004 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2005 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2007 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2009 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2010 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2012 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2014 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2015 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2017 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2019 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2020 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2022 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2024 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2025 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2027 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2029 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2030 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2032 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2034 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2035 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2037 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2039 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2040 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2042 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2044 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2045 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2047 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2049 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2050 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2052 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2054 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2055 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2057 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2059 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2060 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2062 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2064 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2065 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2067 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2069 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2070 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2072 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2074 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2075 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2077 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2079 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2080 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2082 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2084 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2085 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2087 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2089 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2090 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2092 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2094 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2095 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2097 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2099 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2100 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2102 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2104 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2105 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2107 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2109 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2110 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2112 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2114 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2115 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2117 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2119 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2120 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2122 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2124 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2125 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2127 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2129 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2130 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2132 "/usr/local/cuda3.2/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 53 "/usr/local/cuda3.2/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const uint3 threadIdx; }
# 55 "/usr/local/cuda3.2/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const uint3 blockIdx; }
# 57 "/usr/local/cuda3.2/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const dim3 blockDim; }
# 59 "/usr/local/cuda3.2/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const dim3 gridDim; }
# 61 "/usr/local/cuda3.2/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const int warpSize; }
# 106 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 107 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaSetupArgument(T
# 108 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
arg, size_t
# 109 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset)
# 111 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 112 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset);
# 113 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 145 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 146 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
event, unsigned
# 147 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
flags)
# 149 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 150 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaEventCreateWithFlags(event, 0);
# 151 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 208 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 209 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 210 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 211 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
flags)
# 213 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 214 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaHostAlloc(ptr, size, flags);
# 215 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 217 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 218 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaHostAlloc(T **
# 219 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 220 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 221 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
flags)
# 223 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 224 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaHostAlloc((void **)((void *)ptr), size, flags);
# 225 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 227 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 228 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaHostGetDevicePointer(T **
# 229 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
pDevice, void *
# 230 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
pHost, unsigned
# 231 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
flags)
# 233 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 234 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags);
# 235 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 237 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 238 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMalloc(T **
# 239 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 240 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size)
# 242 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 243 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMalloc((void **)((void *)devPtr), size);
# 244 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 246 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 247 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMallocHost(T **
# 248 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 249 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 250 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
flags = (0))
# 252 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 253 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags);
# 254 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 256 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 257 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMallocPitch(T **
# 258 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t *
# 259 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
pitch, size_t
# 260 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 261 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
height)
# 263 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 264 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height);
# 265 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 275 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbol(char *
# 276 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 277 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 278 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 279 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 280 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 282 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 283 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind);
# 284 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 286 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 287 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbol(const T &
# 288 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 289 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 290 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 291 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 292 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 294 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 295 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind);
# 296 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 298 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbolAsync(char *
# 299 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 300 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 301 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 302 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 303 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 304 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 306 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 307 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream);
# 308 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 310 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 311 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
# 312 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 313 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 314 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 315 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 316 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 317 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 319 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 320 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream);
# 321 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 329 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbol(void *
# 330 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 331 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 332 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 333 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 334 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 336 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 337 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind);
# 338 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 340 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 341 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbol(void *
# 342 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 343 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 344 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 345 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 346 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 348 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 349 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind);
# 350 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 352 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbolAsync(void *
# 353 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 354 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 355 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 356 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 357 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 358 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 360 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 361 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream);
# 362 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 364 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 365 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
# 366 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 367 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 368 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 369 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 370 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 371 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 373 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 374 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream);
# 375 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 377 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolAddress(void **
# 378 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, char *
# 379 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol)
# 381 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 382 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)symbol);
# 383 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 410 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 411 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolAddress(void **
# 412 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, const T &
# 413 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol)
# 415 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 416 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol));
# 417 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 425 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolSize(size_t *
# 426 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size, char *
# 427 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol)
# 429 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 430 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)symbol);
# 431 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 458 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 459 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolSize(size_t *
# 460 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size, const T &
# 461 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
symbol)
# 463 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 464 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)(&symbol));
# 465 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 507 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 508 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 509 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 510 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 511 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 512 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 513 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 515 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 516 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, &tex, devPtr, &desc, size);
# 517 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 552 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 553 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 554 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 555 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 556 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 557 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 559 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 560 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size);
# 561 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 608 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 609 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 610 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 611 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 612 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 613 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 614 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 615 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
height, size_t
# 616 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
pitch)
# 618 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 619 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
# 620 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 666 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 667 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 668 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 669 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 670 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 671 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 672 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
height, size_t
# 673 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
pitch)
# 675 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 676 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture2D(offset, &tex, devPtr, &(tex.texture< T, dim, readMode> ::channelDesc), width, height, pitch);
# 677 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 708 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 709 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 710 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 711 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 712 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
desc)
# 714 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 715 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindTextureToArray(&tex, array, &desc);
# 716 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 746 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 747 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 748 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 749 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
array)
# 751 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 752 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 753 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaError_t err = cudaGetChannelDesc(&desc, array);
# 755 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err;
# 756 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 785 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 786 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode> &
# 787 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex)
# 789 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 790 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaUnbindTexture(&tex);
# 791 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 825 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 826 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaGetTextureAlignmentOffset(size_t *
# 827 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 828 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
tex)
# 830 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 831 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaGetTextureAlignmentOffset(offset, &tex);
# 832 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 886 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 887 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaFuncSetCacheConfig(T *
# 888 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
func, cudaFuncCache
# 889 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cacheConfig)
# 891 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 892 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaFuncSetCacheConfig((const char *)func, cacheConfig);
# 893 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 930 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 931 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaLaunch(T *
# 932 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
entry)
# 934 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 935 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaLaunch((const char *)entry);
# 936 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 970 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 971 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaFuncGetAttributes(cudaFuncAttributes *
# 972 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
attr, T *
# 973 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
entry)
# 975 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 976 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaFuncGetAttributes(attr, (const char *)entry);
# 977 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 999 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t
# 1000 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1001 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
surf, const cudaArray *
# 1002 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 1003 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
desc)
# 1005 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 1006 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return cudaBindSurfaceToArray(&surf, array, &desc);
# 1007 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 1028 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t
# 1029 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1030 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
surf, const cudaArray *
# 1031 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
array)
# 1033 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
{
# 1034 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 1035 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
cudaError_t err = cudaGetChannelDesc(&desc, array);
# 1037 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err;
# 1038 "/usr/local/cuda3.2/cuda/bin/../include/cuda_runtime.h"
}
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
static const char *sSDKsample = ("Interval Computing");
# 42 "/usr/include/c++/4.4/bits/stringfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template < typename _Alloc >
    class allocator;
# 47 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template< class _CharT> struct char_traits;
# 50 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template < typename _CharT, typename _Traits = char_traits < _CharT >,
           typename _Alloc = allocator < _CharT > >
    class basic_string;
# 54 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template<> struct char_traits< char> ;
# 56 "/usr/include/c++/4.4/bits/stringfwd.h" 3
typedef basic_string< char, char_traits< char> , allocator< char> > string;
# 59 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template<> struct char_traits< wchar_t> ;
# 61 "/usr/include/c++/4.4/bits/stringfwd.h" 3
typedef basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstring;
# 75 "/usr/include/c++/4.4/bits/stringfwd.h" 3
}
# 45 "/usr/include/stdio.h" 3
struct _IO_FILE;
# 49 "/usr/include/stdio.h" 3
typedef _IO_FILE FILE;
# 65 "/usr/include/stdio.h" 3
typedef _IO_FILE __FILE;
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/va.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 352 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3
typedef unsigned wint_t;
# 95 "/usr/include/wchar.h" 3
typedef
# 84 "/usr/include/wchar.h" 3
struct {
# 85 "/usr/include/wchar.h" 3
int __count;
# 87 "/usr/include/wchar.h" 3
union {
# 89 "/usr/include/wchar.h" 3
unsigned __wch;
# 93 "/usr/include/wchar.h" 3
char __wchb[4];
# 94 "/usr/include/wchar.h" 3
} __value;
# 95 "/usr/include/wchar.h" 3
} __mbstate_t;
# 106 "/usr/include/wchar.h" 3
typedef __mbstate_t mbstate_t;
# 134 "/usr/include/wchar.h" 3
struct tm;
# 144 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscpy(wchar_t *__restrict__, const wchar_t *__restrict__) throw();
# 147 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 152 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscat(wchar_t *__restrict__, const wchar_t *__restrict__) throw();
# 155 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncat(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 160 "/usr/include/wchar.h" 3
extern "C" int wcscmp(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 163 "/usr/include/wchar.h" 3
extern "C" int wcsncmp(const wchar_t *, const wchar_t *, size_t) throw() __attribute__((__pure__));
# 169 "/usr/include/wchar.h" 3
extern "C" int wcscasecmp(const wchar_t *, const wchar_t *) throw();
# 172 "/usr/include/wchar.h" 3
extern "C" int wcsncasecmp(const wchar_t *, const wchar_t *, size_t) throw();
# 179 "/usr/include/wchar.h" 3
extern "C" int wcscasecmp_l(const wchar_t *, const wchar_t *, __locale_t) throw();
# 182 "/usr/include/wchar.h" 3
extern "C" int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, __locale_t) throw();
# 189 "/usr/include/wchar.h" 3
extern "C" int wcscoll(const wchar_t *, const wchar_t *) throw();
# 193 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 203 "/usr/include/wchar.h" 3
extern "C" int wcscoll_l(const wchar_t *, const wchar_t *, __locale_t) throw();
# 209 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t) throw();
# 213 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsdup(const wchar_t *) throw() __attribute__((__malloc__));
# 219 "/usr/include/wchar.h" 3
wchar_t *wcschr(wchar_t *, wchar_t) throw() __asm__("wcschr") __attribute__((__pure__));
# 221 "/usr/include/wchar.h" 3
const wchar_t *wcschr(const wchar_t *, wchar_t) throw() __asm__("wcschr") __attribute__((__pure__));
# 229 "/usr/include/wchar.h" 3
wchar_t *wcsrchr(wchar_t *, wchar_t) throw() __asm__("wcsrchr") __attribute__((__pure__));
# 231 "/usr/include/wchar.h" 3
const wchar_t *wcsrchr(const wchar_t *, wchar_t) throw() __asm__("wcsrchr") __attribute__((__pure__));
# 242 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcschrnul(const wchar_t *, wchar_t) throw() __attribute__((__pure__));
# 249 "/usr/include/wchar.h" 3
extern "C" size_t wcscspn(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 253 "/usr/include/wchar.h" 3
extern "C" size_t wcsspn(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 257 "/usr/include/wchar.h" 3
wchar_t *wcspbrk(wchar_t *, const wchar_t *) throw() __asm__("wcspbrk") __attribute__((__pure__));
# 259 "/usr/include/wchar.h" 3
const wchar_t *wcspbrk(const wchar_t *, const wchar_t *) throw() __asm__("wcspbrk") __attribute__((__pure__));
# 268 "/usr/include/wchar.h" 3
wchar_t *wcsstr(wchar_t *, const wchar_t *) throw() __asm__("wcsstr") __attribute__((__pure__));
# 270 "/usr/include/wchar.h" 3
const wchar_t *wcsstr(const wchar_t *, const wchar_t *) throw() __asm__("wcsstr") __attribute__((__pure__));
# 279 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcstok(wchar_t *__restrict__, const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 284 "/usr/include/wchar.h" 3
extern "C" size_t wcslen(const wchar_t *) throw() __attribute__((__pure__));
# 290 "/usr/include/wchar.h" 3
wchar_t *wcswcs(wchar_t *, const wchar_t *) throw() __asm__("wcswcs") __attribute__((__pure__));
# 292 "/usr/include/wchar.h" 3
const wchar_t *wcswcs(const wchar_t *, const wchar_t *) throw() __asm__("wcswcs") __attribute__((__pure__));
# 303 "/usr/include/wchar.h" 3
extern "C" size_t wcsnlen(const wchar_t *, size_t) throw() __attribute__((__pure__));
# 311 "/usr/include/wchar.h" 3
wchar_t *wmemchr(wchar_t *, wchar_t, size_t) throw() __asm__("wmemchr") __attribute__((__pure__));
# 313 "/usr/include/wchar.h" 3
const wchar_t *wmemchr(const wchar_t *, wchar_t, size_t) throw() __asm__("wmemchr") __attribute__((__pure__));
# 322 "/usr/include/wchar.h" 3
extern "C" int wmemcmp(const wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw() __attribute__((__pure__));
# 327 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 332 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t) throw();
# 336 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemset(wchar_t *, wchar_t, size_t) throw();
# 342 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmempcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 351 "/usr/include/wchar.h" 3
extern "C" wint_t btowc(int) throw();
# 355 "/usr/include/wchar.h" 3
extern "C" int wctob(wint_t) throw();
# 359 "/usr/include/wchar.h" 3
extern "C" int mbsinit(const mbstate_t *) throw() __attribute__((__pure__));
# 363 "/usr/include/wchar.h" 3
extern "C" size_t mbrtowc(wchar_t *__restrict__, const char *__restrict__, size_t, mbstate_t *) throw();
# 368 "/usr/include/wchar.h" 3
extern "C" size_t wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__) throw();
# 372 "/usr/include/wchar.h" 3
extern "C" size_t __mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__) throw();
# 374 "/usr/include/wchar.h" 3
extern "C" size_t mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__) throw();
# 406 "/usr/include/wchar.h" 3
extern "C" size_t mbsrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t, mbstate_t *__restrict__) throw();
# 412 "/usr/include/wchar.h" 3
extern "C" size_t wcsrtombs(char *__restrict__, const wchar_t **__restrict__, size_t, mbstate_t *__restrict__) throw();
# 421 "/usr/include/wchar.h" 3
extern "C" size_t mbsnrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t, size_t, mbstate_t *__restrict__) throw();
# 427 "/usr/include/wchar.h" 3
extern "C" size_t wcsnrtombs(char *__restrict__, const wchar_t **__restrict__, size_t, size_t, mbstate_t *__restrict__) throw();
# 437 "/usr/include/wchar.h" 3
extern "C" int wcwidth(wchar_t) throw();
# 441 "/usr/include/wchar.h" 3
extern "C" int wcswidth(const wchar_t *, size_t) throw();
# 448 "/usr/include/wchar.h" 3
extern "C" double wcstod(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 455 "/usr/include/wchar.h" 3
extern "C" float wcstof(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 457 "/usr/include/wchar.h" 3
extern "C" long double wcstold(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 466 "/usr/include/wchar.h" 3
extern "C" long wcstol(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 471 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 481 "/usr/include/wchar.h" 3
extern "C" long long wcstoll(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 488 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 498 "/usr/include/wchar.h" 3
extern "C" long long wcstoq(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 505 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstouq(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 528 "/usr/include/wchar.h" 3
extern "C" long wcstol_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 532 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 537 "/usr/include/wchar.h" 3
extern "C" long long wcstoll_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 542 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 547 "/usr/include/wchar.h" 3
extern "C" double wcstod_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 551 "/usr/include/wchar.h" 3
extern "C" float wcstof_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 555 "/usr/include/wchar.h" 3
extern "C" long double wcstold_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 564 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcpcpy(wchar_t *, const wchar_t *) throw();
# 568 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcpncpy(wchar_t *, const wchar_t *, size_t) throw();
# 578 "/usr/include/wchar.h" 3
extern "C" __FILE *open_wmemstream(wchar_t **, size_t *) throw();
# 585 "/usr/include/wchar.h" 3
extern "C" int fwide(__FILE *, int) throw();
# 592 "/usr/include/wchar.h" 3
extern "C" int fwprintf(__FILE *__restrict__, const wchar_t *__restrict__, ...);
# 599 "/usr/include/wchar.h" 3
extern "C" int wprintf(const wchar_t *__restrict__, ...);
# 602 "/usr/include/wchar.h" 3
extern "C" int swprintf(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, ...) throw();
# 610 "/usr/include/wchar.h" 3
extern "C" int vfwprintf(__FILE *__restrict__, const wchar_t *__restrict__, __gnuc_va_list);
# 618 "/usr/include/wchar.h" 3
extern "C" int vwprintf(const wchar_t *__restrict__, __gnuc_va_list);
# 623 "/usr/include/wchar.h" 3
extern "C" int vswprintf(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, __gnuc_va_list) throw();
# 633 "/usr/include/wchar.h" 3
extern "C" int fwscanf(__FILE *__restrict__, const wchar_t *__restrict__, ...);
# 640 "/usr/include/wchar.h" 3
extern "C" int wscanf(const wchar_t *__restrict__, ...);
# 643 "/usr/include/wchar.h" 3
extern "C" int swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...) throw();
# 687 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(__FILE *__restrict__, const wchar_t *__restrict__, __gnuc_va_list);
# 695 "/usr/include/wchar.h" 3
extern "C" int vwscanf(const wchar_t *__restrict__, __gnuc_va_list);
# 699 "/usr/include/wchar.h" 3
extern "C" int vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, __gnuc_va_list) throw();
# 743 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(__FILE *);
# 744 "/usr/include/wchar.h" 3
extern "C" wint_t getwc(__FILE *);
# 750 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar();
# 757 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc(wchar_t, __FILE *);
# 758 "/usr/include/wchar.h" 3
extern "C" wint_t putwc(wchar_t, __FILE *);
# 764 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar(wchar_t);
# 772 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws(wchar_t *__restrict__, int, __FILE *__restrict__);
# 779 "/usr/include/wchar.h" 3
extern "C" int fputws(const wchar_t *__restrict__, __FILE *__restrict__);
# 787 "/usr/include/wchar.h" 3
extern "C" wint_t ungetwc(wint_t, __FILE *);
# 799 "/usr/include/wchar.h" 3
extern "C" wint_t getwc_unlocked(__FILE *);
# 800 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar_unlocked();
# 808 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc_unlocked(__FILE *);
# 816 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc_unlocked(wchar_t, __FILE *);
# 825 "/usr/include/wchar.h" 3
extern "C" wint_t putwc_unlocked(wchar_t, __FILE *);
# 826 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar_unlocked(wchar_t);
# 835 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws_unlocked(wchar_t *__restrict__, int, __FILE *__restrict__);
# 844 "/usr/include/wchar.h" 3
extern "C" int fputws_unlocked(const wchar_t *__restrict__, __FILE *__restrict__);
# 853 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, const tm *__restrict__) throw();
# 863 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime_l(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, const tm *__restrict__, __locale_t) throw();
# 65 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 67 "/usr/include/c++/4.4/cwchar" 3
using ::mbstate_t;
# 69 "/usr/include/c++/4.4/cwchar" 3
}
# 139 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 141 "/usr/include/c++/4.4/cwchar" 3
using ::wint_t;
# 143 "/usr/include/c++/4.4/cwchar" 3
using ::btowc;
# 144 "/usr/include/c++/4.4/cwchar" 3
using ::fgetwc;
# 145 "/usr/include/c++/4.4/cwchar" 3
using ::fgetws;
# 146 "/usr/include/c++/4.4/cwchar" 3
using ::fputwc;
# 147 "/usr/include/c++/4.4/cwchar" 3
using ::fputws;
# 148 "/usr/include/c++/4.4/cwchar" 3
using ::fwide;
# 149 "/usr/include/c++/4.4/cwchar" 3
using ::fwprintf;
# 150 "/usr/include/c++/4.4/cwchar" 3
using ::fwscanf;
# 151 "/usr/include/c++/4.4/cwchar" 3
using ::getwc;
# 152 "/usr/include/c++/4.4/cwchar" 3
using ::getwchar;
# 153 "/usr/include/c++/4.4/cwchar" 3
using ::mbrlen;
# 154 "/usr/include/c++/4.4/cwchar" 3
using ::mbrtowc;
# 155 "/usr/include/c++/4.4/cwchar" 3
using ::mbsinit;
# 156 "/usr/include/c++/4.4/cwchar" 3
using ::mbsrtowcs;
# 157 "/usr/include/c++/4.4/cwchar" 3
using ::putwc;
# 158 "/usr/include/c++/4.4/cwchar" 3
using ::putwchar;
# 159 "/usr/include/c++/4.4/cwchar" 3
using ::swprintf;
# 160 "/usr/include/c++/4.4/cwchar" 3
using ::swscanf;
# 161 "/usr/include/c++/4.4/cwchar" 3
using ::ungetwc;
# 162 "/usr/include/c++/4.4/cwchar" 3
using ::vfwprintf;
# 164 "/usr/include/c++/4.4/cwchar" 3
using ::vfwscanf;
# 166 "/usr/include/c++/4.4/cwchar" 3
using ::vswprintf;
# 168 "/usr/include/c++/4.4/cwchar" 3
using ::vswscanf;
# 170 "/usr/include/c++/4.4/cwchar" 3
using ::vwprintf;
# 172 "/usr/include/c++/4.4/cwchar" 3
using ::vwscanf;
# 174 "/usr/include/c++/4.4/cwchar" 3
using ::wcrtomb;
# 175 "/usr/include/c++/4.4/cwchar" 3
using ::wcscat;
# 176 "/usr/include/c++/4.4/cwchar" 3
using ::wcscmp;
# 177 "/usr/include/c++/4.4/cwchar" 3
using ::wcscoll;
# 178 "/usr/include/c++/4.4/cwchar" 3
using ::wcscpy;
# 179 "/usr/include/c++/4.4/cwchar" 3
using ::wcscspn;
# 180 "/usr/include/c++/4.4/cwchar" 3
using ::wcsftime;
# 181 "/usr/include/c++/4.4/cwchar" 3
using ::wcslen;
# 182 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncat;
# 183 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncmp;
# 184 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncpy;
# 185 "/usr/include/c++/4.4/cwchar" 3
using ::wcsrtombs;
# 186 "/usr/include/c++/4.4/cwchar" 3
using ::wcsspn;
# 187 "/usr/include/c++/4.4/cwchar" 3
using ::wcstod;
# 189 "/usr/include/c++/4.4/cwchar" 3
using ::wcstof;
# 191 "/usr/include/c++/4.4/cwchar" 3
using ::wcstok;
# 192 "/usr/include/c++/4.4/cwchar" 3
using ::wcstol;
# 193 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoul;
# 194 "/usr/include/c++/4.4/cwchar" 3
using ::wcsxfrm;
# 195 "/usr/include/c++/4.4/cwchar" 3
using ::wctob;
# 196 "/usr/include/c++/4.4/cwchar" 3
using ::wmemcmp;
# 197 "/usr/include/c++/4.4/cwchar" 3
using ::wmemcpy;
# 198 "/usr/include/c++/4.4/cwchar" 3
using ::wmemmove;
# 199 "/usr/include/c++/4.4/cwchar" 3
using ::wmemset;
# 200 "/usr/include/c++/4.4/cwchar" 3
using ::wprintf;
# 201 "/usr/include/c++/4.4/cwchar" 3
using ::wscanf;
# 202 "/usr/include/c++/4.4/cwchar" 3
using ::wcschr;
# 203 "/usr/include/c++/4.4/cwchar" 3
using ::wcspbrk;
# 204 "/usr/include/c++/4.4/cwchar" 3
using ::wcsrchr;
# 205 "/usr/include/c++/4.4/cwchar" 3
using ::wcsstr;
# 206 "/usr/include/c++/4.4/cwchar" 3
using ::wmemchr;
# 230 "/usr/include/c++/4.4/cwchar" 3
}
# 238 "/usr/include/c++/4.4/cwchar" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 245 "/usr/include/c++/4.4/cwchar" 3
using ::wcstold;
# 254 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoll;
# 255 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoull;
# 258 "/usr/include/c++/4.4/cwchar" 3
}
# 260 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 262 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstold;
# 263 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstoll;
# 264 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstoull;
# 266 "/usr/include/c++/4.4/cwchar" 3
}
# 70 "/usr/include/c++/4.4/bits/postypes.h" 3
namespace std __attribute__((visibility("default"))) {
# 88 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef long streamoff;
# 98 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    class fpos
    {
    private :
      streamoff _M_off;
      _StateT _M_state;

    public :




      fpos ( )
      : _M_off ( 0 ), _M_state ( ) { }
# 133 "/usr/include/c++/4.4/bits/postypes.h" 3
      fpos ( streamoff __off )
      : _M_off ( __off ), _M_state ( ) { }


      operator streamoff ( ) const { return _M_off; }


      void
      state ( _StateT __st )
      { _M_state = __st; }


      _StateT
      state ( ) const
      { return _M_state; }





      fpos &
      operator += ( streamoff __off )
      {
 _M_off += __off;
 return * this;
      }





      fpos &
      operator -= ( streamoff __off )
      {
 _M_off -= __off;
 return * this;
      }







      fpos
      operator + ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos += __off;
 return __pos;
      }







      fpos
      operator - ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator - ( const fpos & __other ) const
      { return _M_off - __other . _M_off; }
    };
# 214 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator == ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) == streamoff ( __rhs ); }
# 219 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator != ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) != streamoff ( __rhs ); }
# 228 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef fpos< __mbstate_t> streampos;
# 230 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef fpos< __mbstate_t> wstreampos;
# 239 "/usr/include/c++/4.4/bits/postypes.h" 3
}
# 44 "/usr/include/c++/4.4/iosfwd" 3
namespace std __attribute__((visibility("default"))) {
# 46 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ios;
# 49 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_streambuf;
# 52 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_istream;
# 55 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ostream;
# 58 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_iostream;
# 61 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 62 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringbuf;
# 65 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 66 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_istringstream;
# 69 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 70 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_ostringstream;
# 73 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 74 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringstream;
# 77 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf;
# 80 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream;
# 83 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream;
# 86 "/usr/include/c++/4.4/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream;
# 89 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class istreambuf_iterator;
# 92 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class ostreambuf_iterator;
# 97 "/usr/include/c++/4.4/iosfwd" 3
class ios_base;
# 127 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ios< char, char_traits< char> > ios;
# 128 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_streambuf< char, char_traits< char> > streambuf;
# 129 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istream< char, char_traits< char> > istream;
# 130 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostream< char, char_traits< char> > ostream;
# 131 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_iostream< char, char_traits< char> > iostream;
# 132 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringbuf< char, char_traits< char> , allocator< char> > stringbuf;
# 133 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istringstream< char, char_traits< char> , allocator< char> > istringstream;
# 134 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostringstream< char, char_traits< char> , allocator< char> > ostringstream;
# 135 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringstream< char, char_traits< char> , allocator< char> > stringstream;
# 136 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_filebuf< char, char_traits< char> > filebuf;
# 137 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ifstream< char, char_traits< char> > ifstream;
# 138 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ofstream< char, char_traits< char> > ofstream;
# 139 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_fstream< char, char_traits< char> > fstream;
# 142 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ios< wchar_t, char_traits< wchar_t> > wios;
# 143 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_streambuf< wchar_t, char_traits< wchar_t> > wstreambuf;
# 144 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istream< wchar_t, char_traits< wchar_t> > wistream;
# 145 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostream< wchar_t, char_traits< wchar_t> > wostream;
# 146 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_iostream< wchar_t, char_traits< wchar_t> > wiostream;
# 147 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringbuf;
# 148 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wistringstream;
# 149 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wostringstream;
# 150 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringstream;
# 151 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_filebuf< wchar_t, char_traits< wchar_t> > wfilebuf;
# 152 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ifstream< wchar_t, char_traits< wchar_t> > wifstream;
# 153 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ofstream< wchar_t, char_traits< wchar_t> > wofstream;
# 154 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_fstream< wchar_t, char_traits< wchar_t> > wfstream;
# 158 "/usr/include/c++/4.4/iosfwd" 3
}
# 41 "/usr/include/c++/4.4/exception" 3
namespace std {
# 59 "/usr/include/c++/4.4/exception" 3
class __attribute__((visibility("default"))) exception {
# 62 "/usr/include/c++/4.4/exception" 3
public: exception() throw() { }
# 63 "/usr/include/c++/4.4/exception" 3
virtual ~exception() throw();
# 67 "/usr/include/c++/4.4/exception" 3
virtual const char *what() const throw();
# 68 "/usr/include/c++/4.4/exception" 3
};
# 72 "/usr/include/c++/4.4/exception" 3
class __attribute__((visibility("default"))) bad_exception : public exception {
# 75 "/usr/include/c++/4.4/exception" 3
public: bad_exception() throw() { }
# 79 "/usr/include/c++/4.4/exception" 3
virtual ~bad_exception() throw();
# 82 "/usr/include/c++/4.4/exception" 3
virtual const char *what() const throw();
# 83 "/usr/include/c++/4.4/exception" 3
};
# 86 "/usr/include/c++/4.4/exception" 3
typedef void (*terminate_handler)(void);
# 89 "/usr/include/c++/4.4/exception" 3
typedef void (*unexpected_handler)(void);
# 92 "/usr/include/c++/4.4/exception" 3
terminate_handler set_terminate(terminate_handler) throw() __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.4/exception" 3
void terminate() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 99 "/usr/include/c++/4.4/exception" 3
unexpected_handler set_unexpected(unexpected_handler) throw() __attribute__((visibility("default")));
# 103 "/usr/include/c++/4.4/exception" 3
void unexpected() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 115 "/usr/include/c++/4.4/exception" 3
bool uncaught_exception() throw() __attribute__((visibility("default")));
# 118 "/usr/include/c++/4.4/exception" 3
}
# 120 "/usr/include/c++/4.4/exception" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 138 "/usr/include/c++/4.4/exception" 3
void __verbose_terminate_handler();
# 140 "/usr/include/c++/4.4/exception" 3
}
# 39 "/usr/include/c++/4.4/bits/functexcept.h" 3
namespace std __attribute__((visibility("default"))) {
# 43 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_exception() __attribute__((__noreturn__));
# 47 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_alloc() __attribute__((__noreturn__));
# 51 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_cast() __attribute__((__noreturn__));
# 54 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_typeid() __attribute__((__noreturn__));
# 58 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_logic_error(const char *) __attribute__((__noreturn__));
# 61 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_domain_error(const char *) __attribute__((__noreturn__));
# 64 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_invalid_argument(const char *) __attribute__((__noreturn__));
# 67 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_length_error(const char *) __attribute__((__noreturn__));
# 70 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_out_of_range(const char *) __attribute__((__noreturn__));
# 73 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_runtime_error(const char *) __attribute__((__noreturn__));
# 76 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_range_error(const char *) __attribute__((__noreturn__));
# 79 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_overflow_error(const char *) __attribute__((__noreturn__));
# 82 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_underflow_error(const char *) __attribute__((__noreturn__));
# 86 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_ios_failure(const char *) __attribute__((__noreturn__));
# 89 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_system_error(int) __attribute__((__noreturn__));
# 91 "/usr/include/c++/4.4/bits/functexcept.h" 3
}
# 37 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 52 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value>
# 53 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits_integer {
# 56 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const _Value __min = (((((_Value)(-1)) < 0) ? (((_Value)1) << ((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0)))) : ((_Value)0)));
# 57 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const _Value __max = (((((_Value)(-1)) < 0) ? ((((((_Value)1) << (((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0))) - (1))) - 1) << 1) + 1) : (~((_Value)0))));
# 61 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const bool __is_signed = (((_Value)(-1)) < 0);
# 62 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __digits = (((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0))));
# 63 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 65 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const _Value
# 66 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__min;
# 68 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const _Value
# 69 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__max;
# 71 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const bool
# 72 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__is_signed;
# 74 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const int
# 75 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__digits;
# 97 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value>
# 98 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits_floating {
# 101 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __max_digits10 = (2 + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 3010) / 10000));
# 104 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const bool __is_signed = true;
# 105 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18));
# 106 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932));
# 107 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 109 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const int
# 110 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_digits10;
# 112 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const bool
# 113 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__is_signed;
# 115 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const int
# 116 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__digits10;
# 118 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> const int
# 119 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_exponent10;
# 121 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value>
# 122 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type {
# 126 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 128 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
}
# 66 "/usr/include/c++/4.4/bits/move.h" 3
namespace std __attribute__((visibility("default"))) {
# 74 "/usr/include/c++/4.4/bits/move.h" 3
template < typename _Tp >
    inline void
    swap ( _Tp & __a, _Tp & __b )
    {



      _Tp __tmp = ( __a );
      __a = ( __b );
      __b = ( __tmp );
    }
# 88 "/usr/include/c++/4.4/bits/move.h" 3
template < typename _Tp, size_t _Nm >
    inline void
    swap ( _Tp ( & __a ) [ _Nm ], _Tp ( & __b ) [ _Nm ] )
    {
      for ( size_t __n = 0; __n < _Nm; ++ __n )
 swap ( __a [ __n ], __b [ __n ] );
    }
# 96 "/usr/include/c++/4.4/bits/move.h" 3
}
# 63 "/usr/include/c++/4.4/bits/stl_pair.h" 3
namespace std __attribute__((visibility("default"))) {
# 66 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair ( )
      : first ( ), second ( ) { }


      pair ( const _T1 & __a, const _T2 & __b )
      : first ( __a ), second ( __b ) { }


      template < class _U1, class _U2 >
        pair ( const pair < _U1, _U2 > & __p )
 : first ( __p . first ),
   second ( __p . second ) { }

    };
# 144 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator == ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first == __y . first && __x . second == __y . second; }
# 150 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator < ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first < __y . first
      || ( ! ( __y . first < __x . first ) && __x . second < __y . second ); }
# 157 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator != ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x == __y ); }
# 163 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator > ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __y < __x; }
# 169 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator <= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __y < __x ); }
# 175 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator >= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x < __y ); }
# 213 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline pair < _T1, _T2 >
    make_pair ( _T1 __x, _T2 __y )
    { return pair < _T1, _T2 > ( __x, __y ); }
# 259 "/usr/include/c++/4.4/bits/stl_pair.h" 3
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
namespace std __attribute__((visibility("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { };
# 81 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct output_iterator_tag { };
# 83 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct forward_iterator_tag : public input_iterator_tag { };
# 86 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct bidirectional_iterator_tag : public forward_iterator_tag { };
# 89 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 102 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class
# 103 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
_Pointer = _Tp *, class _Reference = _Tp &>
# 104 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator {
# 107 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Category iterator_category;
# 109 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 111 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Distance difference_type;
# 113 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Pointer pointer;
# 115 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Reference reference;
# 116 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 124 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template< class _Iterator>
# 125 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits {
# 127 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_category iterator_category;
# 128 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::value_type value_type;
# 129 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::difference_type difference_type;
# 130 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::pointer pointer;
# 131 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::reference reference;
# 132 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 134 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 135 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits< _Tp *> {
# 137 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 138 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 139 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 140 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp *pointer;
# 141 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp &reference;
# 142 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 144 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 145 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits< const _Tp *> {
# 147 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 148 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 149 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 150 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef const _Tp *pointer;
# 151 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef const _Tp &reference;
# 152 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 158 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template < typename _Iter >
    inline typename iterator_traits < _Iter > :: iterator_category
    __iterator_category ( const _Iter & )
    { return typename iterator_traits < _Iter > :: iterator_category ( ); }
# 165 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
}
# 66 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    __distance ( _InputIterator __first, _InputIterator __last,
               input_iterator_tag )
    {



      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      while ( __first != __last )
 {
   ++ __first;
   ++ __n;
 }
      return __n;
    }
# 85 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator >
    inline typename iterator_traits < _RandomAccessIterator > :: difference_type
    __distance ( _RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag )
    {



      return __last - __first;
    }
# 108 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    distance ( _InputIterator __first, _InputIterator __last )
    {

      return std :: __distance ( __first, __last,
        std :: __iterator_category ( __first ) );
    }
# 117 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    __advance ( _InputIterator & __i, _Distance __n, input_iterator_tag )
    {


      while ( __n -- )
 ++ __i;
    }
# 127 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    inline void
    __advance ( _BidirectionalIterator & __i, _Distance __n,
       bidirectional_iterator_tag )
    {



      if ( __n > 0 )
        while ( __n -- )
   ++ __i;
      else
        while ( __n ++ )
   -- __i;
    }
# 143 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    inline void
    __advance ( _RandomAccessIterator & __i, _Distance __n,
              random_access_iterator_tag )
    {



      __i += __n;
    }
# 166 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    advance ( _InputIterator & __i, _Distance __n )
    {

      typename iterator_traits < _InputIterator > :: difference_type __d = __n;
      std :: __advance ( __i, __d, std :: __iterator_category ( __i ) );
    }
# 195 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace std __attribute__((visibility("default"))) {
# 89 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    class reverse_iterator
    : public iterator < typename iterator_traits < _Iterator > :: iterator_category,
        typename iterator_traits < _Iterator > :: value_type,
        typename iterator_traits < _Iterator > :: difference_type,
        typename iterator_traits < _Iterator > :: pointer,
                      typename iterator_traits < _Iterator > :: reference >
    {
    protected :
      _Iterator current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
              difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

    public :






      reverse_iterator ( ) : current ( ) { }




      explicit
      reverse_iterator ( iterator_type __x ) : current ( __x ) { }




      reverse_iterator ( const reverse_iterator & __x )
      : current ( __x . current ) { }





      template < typename _Iter >
        reverse_iterator ( const reverse_iterator < _Iter > & __x )
 : current ( __x . base ( ) ) { }




      iterator_type
      base ( ) const
      { return current; }






      reference
      operator * ( ) const
      {
 _Iterator __tmp = current;
 return * -- __tmp;
      }






      pointer
      operator -> ( ) const
      { return & ( operator * ( ) ); }






      reverse_iterator &
      operator ++ ( )
      {
 -- current;
 return * this;
      }






      reverse_iterator
      operator ++ ( int )
      {
 reverse_iterator __tmp = * this;
 -- current;
 return __tmp;
      }






      reverse_iterator &
      operator -- ( )
      {
 ++ current;
 return * this;
      }






      reverse_iterator
      operator -- ( int )
      {
 reverse_iterator __tmp = * this;
 ++ current;
 return __tmp;
      }






      reverse_iterator
      operator + ( difference_type __n ) const
      { return reverse_iterator ( current - __n ); }






      reverse_iterator &
      operator += ( difference_type __n )
      {
 current -= __n;
 return * this;
      }






      reverse_iterator
      operator - ( difference_type __n ) const
      { return reverse_iterator ( current + __n ); }






      reverse_iterator &
      operator -= ( difference_type __n )
      {
 current += __n;
 return * this;
      }






      reference
      operator [ ] ( difference_type __n ) const
      { return * ( * this + __n ); }
    };
# 276 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator == ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 282 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator < ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 288 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator != ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x == __y ); }
# 294 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator > ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y < __x; }
# 300 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator <= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __y < __x ); }
# 306 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator >= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x < __y ); }
# 312 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline typename reverse_iterator < _Iterator > :: difference_type
    operator - ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 318 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline reverse_iterator < _Iterator >
    operator + ( typename reverse_iterator < _Iterator > :: difference_type __n,
       const reverse_iterator < _Iterator > & __x )
    { return reverse_iterator < _Iterator > ( __x . base ( ) - __n ); }
# 326 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator == ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 332 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator < ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 338 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator != ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x == __y ); }
# 344 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator > ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y < __x; }
# 350 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator <= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __y < __x ); }
# 356 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator >= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x < __y ); }
# 362 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >







    inline typename reverse_iterator < _IteratorL > :: difference_type
    operator - ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )

    { return __y . base ( ) - __x . base ( ); }
# 388 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class back_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit
      back_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 414 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_back ( __value );
 return * this;
      }


      back_insert_iterator &
      operator * ( )
      { return * this; }


      back_insert_iterator &
      operator ++ ( )
      { return * this; }


      back_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 457 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline back_insert_iterator < _Container >
    back_inserter ( _Container & __x )
    { return back_insert_iterator < _Container > ( __x ); }
# 472 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class front_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit front_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 497 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_front ( __value );
 return * this;
      }


      front_insert_iterator &
      operator * ( )
      { return * this; }


      front_insert_iterator &
      operator ++ ( )
      { return * this; }


      front_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 540 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline front_insert_iterator < _Container >
    front_inserter ( _Container & __x )
    { return front_insert_iterator < _Container > ( __x ); }
# 559 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;
      typename _Container :: iterator iter;

    public :

      typedef _Container container_type;





      insert_iterator ( _Container & __x, typename _Container :: iterator __i )
      : container ( & __x ), iter ( __i ) { }
# 601 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 iter = container -> insert ( iter, __value );
 ++ iter;
 return * this;
      }


      insert_iterator &
      operator * ( )
      { return * this; }


      insert_iterator &
      operator ++ ( )
      { return * this; }


      insert_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 646 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container, typename _Iterator >
    inline insert_iterator < _Container >
    inserter ( _Container & __x, _Iterator __i )
    {
      return insert_iterator < _Container > ( __x,
      typename _Container :: iterator ( __i ) );
    }
# 654 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
}
# 656 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 665 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
using std::iterator_traits;
# 666 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
using std::iterator;
# 667 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator
    {
    protected :
      _Iterator _M_current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: iterator_category
                                                             iterator_category;
      typedef typename iterator_traits < _Iterator > :: value_type value_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
                                                             difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

      __normal_iterator ( ) : _M_current ( _Iterator ( ) ) { }

      explicit
      __normal_iterator ( const _Iterator & __i ) : _M_current ( __i ) { }


      template < typename _Iter >
        __normal_iterator ( const __normal_iterator < _Iter,
     typename __enable_if <
              ( std :: __are_same < _Iter, typename _Container :: pointer > :: __value ),
        _Container > :: __type > & __i )
        : _M_current ( __i . base ( ) ) { }


      reference
      operator * ( ) const
      { return * _M_current; }

      pointer
      operator -> ( ) const
      { return _M_current; }

      __normal_iterator &
      operator ++ ( )
      {
 ++ _M_current;
 return * this;
      }

      __normal_iterator
      operator ++ ( int )
      { return __normal_iterator ( _M_current ++ ); }


      __normal_iterator &
      operator -- ( )
      {
 -- _M_current;
 return * this;
      }

      __normal_iterator
      operator -- ( int )
      { return __normal_iterator ( _M_current -- ); }


      reference
      operator [ ] ( const difference_type & __n ) const
      { return _M_current [ __n ]; }

      __normal_iterator &
      operator += ( const difference_type & __n )
      { _M_current += __n; return * this; }

      __normal_iterator
      operator + ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current + __n ); }

      __normal_iterator &
      operator -= ( const difference_type & __n )
      { _M_current -= __n; return * this; }

      __normal_iterator
      operator - ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current - __n ); }

      const _Iterator &
      base ( ) const
      { return _M_current; }
    };
# 763 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 769 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 775 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 781 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 788 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 794 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 800 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 806 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 812 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 818 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 824 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 830 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 840 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >







    inline typename __normal_iterator < _IteratorL, _Container > :: difference_type
    operator - ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )

    { return __lhs . base ( ) - __rhs . base ( ); }
# 854 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline typename __normal_iterator < _Iterator, _Container > :: difference_type
    operator - ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 860 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline __normal_iterator < _Iterator, _Container >
    operator + ( typename __normal_iterator < _Iterator, _Container > :: difference_type
       __n, const __normal_iterator < _Iterator, _Container > & __i )
    { return __normal_iterator < _Iterator, _Container > ( __i . base ( ) + __n ); }
# 866 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
}
# 47 "/usr/include/c++/4.4/debug/debug.h" 3
namespace std {
# 49 "/usr/include/c++/4.4/debug/debug.h" 3
namespace __debug { }
# 50 "/usr/include/c++/4.4/debug/debug.h" 3
}
# 55 "/usr/include/c++/4.4/debug/debug.h" 3
namespace __gnu_debug {
# 57 "/usr/include/c++/4.4/debug/debug.h" 3
using namespace std::__debug;
# 58 "/usr/include/c++/4.4/debug/debug.h" 3
}
# 74 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
namespace std __attribute__((visibility("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _BoolType>
# 80 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __iter_swap {
# 82 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          typedef typename iterator_traits < _ForwardIterator1 > :: value_type
            _ValueType1;
          _ValueType1 __tmp = ( * __a );
          * __a = ( * __b );
          * __b = ( __tmp );
 }
# 92 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 95 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __iter_swap< true> {
# 97 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          swap ( * __a, * __b );
        }
# 103 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 115 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void
    iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
    {
      typedef typename iterator_traits < _ForwardIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: value_type
 _ValueType2;
# 134 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
      typedef typename iterator_traits < _ForwardIterator1 > :: reference
 _ReferenceType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: reference
 _ReferenceType2;
      std :: __iter_swap < __are_same < _ValueType1, _ValueType2 > :: __value
 && __are_same < _ValueType1 &, _ReferenceType1 > :: __value
 && __are_same < _ValueType2 &, _ReferenceType2 > :: __value > ::
 iter_swap ( __a, __b );
    }
# 156 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2
    swap_ranges ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2 )
    {





      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 std :: iter_swap ( __first1, __first2 );
      return __first2;
    }
# 184 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b )
    {



      if ( __b < __a )
 return __b;
      return __a;
    }
# 207 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b )
    {



      if ( __a < __b )
 return __b;
      return __a;
    }
# 230 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __b, __a ) )
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __a, __b ) )
 return __b;
      return __a;
    }
# 264 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator,
    bool _IsNormal = __is_normal_iterator < _Iterator > :: __value >
    struct __niter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 273 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator >
    struct __niter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 282 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator,
    bool _IsMove = __is_move_iterator < _Iterator > :: __value >
    struct __miter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 291 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator >
    struct __miter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 305 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool __T3, bool __T4, class >
# 306 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move {
# 308 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   for (; __first != __last; ++ __result, ++ __first )
     * __result = * __first;
   return __result;
 }
# 316 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 334 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag> {
# 336 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   typedef typename iterator_traits < _II > :: difference_type _Distance;
   for ( _Distance __n = __last - __first; __n > 0; -- __n )
     {
       * __result = * __first;
       ++ __first;
       ++ __result;
     }
   return __result;
 }
# 349 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 371 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _IsMove>
# 372 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move< _IsMove, true, random_access_iterator_tag> {
# 374 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        __copy_m ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   __builtin_memmove ( __result, __first,
       sizeof ( _Tp ) * ( __last - __first ) );
   return __result + ( __last - __first );
 }
# 382 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 384 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a ( _II __first, _II __last, _OI __result )
    {
      typedef typename iterator_traits < _II > :: value_type _ValueTypeI;
      typedef typename iterator_traits < _OI > :: value_type _ValueTypeO;
      typedef typename iterator_traits < _II > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueTypeI )
                      && __is_pointer < _II > :: __value
                      && __is_pointer < _OI > :: __value
        && __are_same < _ValueTypeI, _ValueTypeO > :: __value );

      return std :: __copy_move < _IsMove, __simple,
                       _Category > :: __copy_m ( __first, __last, __result );
    }
# 402 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< class _CharT> struct char_traits;
# 405 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< class _CharT, class _Traits> class istreambuf_iterator;
# 408 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< class _CharT, class _Traits> class ostreambuf_iterator;
# 411 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( _CharT *, _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 417 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( const _CharT *, const _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 423 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT, char_traits < _CharT > >,
     istreambuf_iterator < _CharT, char_traits < _CharT > >, _CharT * );
# 429 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a2 ( _II __first, _II __last, _OI __result )
    {
      return _OI ( std :: __copy_move_a < _IsMove >
   ( std :: __niter_base < _II > :: __b ( __first ),
    std :: __niter_base < _II > :: __b ( __last ),
    std :: __niter_base < _OI > :: __b ( __result ) ) );
    }
# 456 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
    inline _OI
    copy ( _II __first, _II __last, _OI __result )
    {




      ;

      return ( std :: __copy_move_a2 < __is_move_iterator < _II > :: __value >
       ( std :: __miter_base < _II > :: __b ( __first ),
        std :: __miter_base < _II > :: __b ( __last ), __result ) );
    }
# 509 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool __T5, bool __T6, class >
# 510 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move_backward {
# 512 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   while ( __first != __last )
     * -- __result = * -- __last;
   return __result;
 }
# 520 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 538 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag> {
# 540 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   typename iterator_traits < _BI1 > :: difference_type __n;
   for ( __n = __last - __first; __n > 0; -- __n )
     * -- __result = * -- __last;
   return __result;
 }
# 549 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 567 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _IsMove>
# 568 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag> {
# 570 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        __copy_move_b ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove ( __result - _Num, __first, sizeof ( _Tp ) * _Num );
   return __result - _Num;
 }
# 578 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 580 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      typedef typename iterator_traits < _BI1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _BI2 > :: value_type _ValueType2;
      typedef typename iterator_traits < _BI1 > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueType1 )
                      && __is_pointer < _BI1 > :: __value
                      && __is_pointer < _BI2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __copy_move_backward < _IsMove, __simple,
                                _Category > :: __copy_move_b ( __first,
         __last,
         __result );
    }
# 598 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a2 ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      return _BI2 ( std :: __copy_move_backward_a < _IsMove >
    ( std :: __niter_base < _BI1 > :: __b ( __first ),
     std :: __niter_base < _BI1 > :: __b ( __last ),
     std :: __niter_base < _BI2 > :: __b ( __result ) ) );
    }
# 626 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    copy_backward ( _BI1 __first, _BI1 __last, _BI2 __result )
    {






      ;

      return ( std :: __copy_move_backward_a2 < __is_move_iterator < _BI1 > :: __value >
       ( std :: __miter_base < _BI1 > :: __b ( __first ),
        std :: __miter_base < _BI1 > :: __b ( __last ), __result ) );
    }
# 684 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
       const _Tp & __value )
    {
      for (; __first != __last; ++ __first )
 * __first = __value;
    }
# 694 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++ __first )
 * __first = __tmp;
    }
# 706 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, void > :: __type
    __fill_a ( _Tp * __first, _Tp * __last, const _Tp & __c )
    {
      const _Tp __tmp = __c;
      __builtin_memset ( __first, static_cast < unsigned char > ( __tmp ),
         __last - __first );
    }
# 728 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    fill ( _ForwardIterator __first, _ForwardIterator __last, const _Tp & __value )
    {



      ;

      std :: __fill_a ( std :: __niter_base < _ForwardIterator > :: __b ( __first ),
      std :: __niter_base < _ForwardIterator > :: __b ( __last ), __value );
    }
# 741 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      for (; __n > 0; -- __n, ++ __first )
 * __first = __value;
      return __first;
    }
# 751 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __n > 0; -- __n, ++ __first )
 * __first = __tmp;
      return __first;
    }
# 762 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, _Tp * > :: __type
    __fill_n_a ( _Tp * __first, _Size __n, const _Tp & __c )
    {
      std :: __fill_a ( __first, __first + __n, __c );
      return __first + __n;
    }
# 783 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OI, typename _Size, typename _Tp >
    inline _OI
    fill_n ( _OI __first, _Size __n, const _Tp & __value )
    {



      return _OI ( std :: __fill_n_a ( std :: __niter_base < _OI > :: __b ( __first ),
     __n, __value ) );
    }
# 794 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _BoolType>
# 795 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __equal {
# 797 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static bool
        equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
        {
   for (; __first1 != __last1; ++ __first1, ++ __first2 )
     if ( ! ( * __first1 == * __first2 ) )
       return false;
   return true;
 }
# 806 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 809 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __equal< true> {
# 811 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static bool
        equal ( const _Tp * __first1, const _Tp * __last1, const _Tp * __first2 )
        {
   return ! __builtin_memcmp ( __first1, __first2, sizeof ( _Tp )
       * ( __last1 - __first1 ) );
 }
# 818 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 820 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    __equal_aux ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple = ( __is_integer < _ValueType1 > :: __value
                      && __is_pointer < _II1 > :: __value
                      && __is_pointer < _II2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __equal < __simple > :: equal ( __first1, __last1, __first2 );
    }
# 835 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< class , class >
# 836 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __lc_rai {
# 838 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static _II1
        __newlast1 ( _II1, _II1 __last1, _II2, _II2 )
        { return __last1; }
# 843 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II >
        static bool
        __cnd2 ( _II __first, _II __last )
        { return __first != __last; }
# 847 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 850 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag> {
# 852 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _RAI1, typename _RAI2 >
        static _RAI1
        __newlast1 ( _RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2 )
        {
   const typename iterator_traits < _RAI1 > :: difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits < _RAI2 > :: difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }
# 864 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _RAI >
        static bool
        __cnd2 ( _RAI, _RAI )
        { return true; }
# 868 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 870 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _BoolType>
# 871 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __lexicographical_compare {
# 873 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static bool __lc ( _II1, _II1, _II2, _II2 );
# 875 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 877 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _BoolType >
    template < typename _II1, typename _II2 >
      bool
      __lexicographical_compare < _BoolType > ::
      __lc ( _II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2 )
      {
 typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
 typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
 typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;

 __last1 = __rai_type :: __newlast1 ( __first1, __last1,
      __first2, __last2 );
 for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
      ++ __first1, ++ __first2 )
   {
     if ( * __first1 < * __first2 )
       return true;
     if ( * __first2 < * __first1 )
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }
# 901 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __lexicographical_compare< true> {
# 903 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Up >
        static bool
        __lc ( const _Tp * __first1, const _Tp * __last1,
      const _Up * __first2, const _Up * __last2 )
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp ( __first1, __first2,
      std :: min ( __len1, __len2 ) );
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
# 914 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 916 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    __lexicographical_compare_aux ( _II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple =
 ( __is_byte < _ValueType1 > :: __value && __is_byte < _ValueType2 > :: __value
  && ! __gnu_cxx :: __numeric_traits < _ValueType1 > :: __is_signed
  && ! __gnu_cxx :: __numeric_traits < _ValueType2 > :: __is_signed
  && __is_pointer < _II1 > :: __value
  && __is_pointer < _II2 > :: __value );

      return std :: __lexicographical_compare < __simple > :: __lc ( __first1, __last1,
           __first2, __last2 );
    }
# 934 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
}
# 936 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
namespace std __attribute__((visibility("default"))) {
# 950 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {






      ;

      return std :: __equal_aux ( std :: __niter_base < _II1 > :: __b ( __first1 ),
         std :: __niter_base < _II1 > :: __b ( __last1 ),
         std :: __niter_base < _II2 > :: __b ( __first2 ) );
    }
# 982 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _IIter1, typename _IIter2, typename _BinaryPredicate >
    inline bool
    equal ( _IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! bool ( __binary_pred ( * __first1, * __first2 ) ) )
   return false;
      return true;
    }
# 1013 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2 )
    {

      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;




      ;
      ;

      return std :: __lexicographical_compare_aux
 ( std :: __niter_base < _II1 > :: __b ( __first1 ),
  std :: __niter_base < _II1 > :: __b ( __last1 ),
  std :: __niter_base < _II2 > :: __b ( __first2 ),
  std :: __niter_base < _II2 > :: __b ( __last2 ) );
    }
# 1048 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2, typename _Compare >
    bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp )
    {
      typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
      typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
      typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;




      ;
      ;

      __last1 = __rai_type :: __newlast1 ( __first1, __last1, __first2, __last2 );
      for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
    ++ __first1, ++ __first2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     return true;
   if ( __comp ( * __first2, * __first1 ) )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2 )
    {






      ;

      while ( __first1 != __last1 && * __first1 == * __first2 )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1125 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      while ( __first1 != __last1 && bool ( __binary_pred ( * __first1, * __first2 ) ) )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1144 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
}
# 52 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/char_traits.h" 3
template< class _CharT>
# 65 "/usr/include/c++/4.4/bits/char_traits.h" 3
struct _Char_types {
# 67 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef unsigned long int_type;
# 68 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef std::streampos pos_type;
# 69 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef std::streamoff off_type;
# 70 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 71 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 89 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types < _CharT > :: int_type int_type;
      typedef typename _Char_types < _CharT > :: pos_type pos_type;
      typedef typename _Char_types < _CharT > :: off_type off_type;
      typedef typename _Char_types < _CharT > :: state_type state_type;

      static void
      assign ( char_type & __c1, const char_type & __c2 )
      { __c1 = __c2; }

      static bool
      eq ( const char_type & __c1, const char_type & __c2 )
      { return __c1 == __c2; }

      static bool
      lt ( const char_type & __c1, const char_type & __c2 )
      { return __c1 < __c2; }

      static int
      compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n );

      static std :: size_t
      length ( const char_type * __s );

      static const char_type *
      find ( const char_type * __s, std :: size_t __n, const char_type & __a );

      static char_type *
      move ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      copy ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      assign ( char_type * __s, std :: size_t __n, char_type __a );

      static char_type
      to_char_type ( const int_type & __c )
      { return static_cast < char_type > ( __c ); }

      static int_type
      to_int_type ( const char_type & __c )
      { return static_cast < int_type > ( __c ); }

      static bool
      eq_int_type ( const int_type & __c1, const int_type & __c2 )
      { return __c1 == __c2; }

      static int_type
      eof ( )
      { return static_cast < int_type > ( ( - 1 ) ); }

      static int_type
      not_eof ( const int_type & __c )
      { return ! eq_int_type ( __c, eof ( ) ) ? __c : to_int_type ( char_type ( ) ); }
    };
# 149 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    int
    char_traits < _CharT > ::
    compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
 if ( lt ( __s1 [ __i ], __s2 [ __i ] ) )
   return - 1;
 else if ( lt ( __s2 [ __i ], __s1 [ __i ] ) )
   return 1;
      return 0;
    }
# 162 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    std :: size_t
    char_traits < _CharT > ::
    length ( const char_type * __p )
    {
      std :: size_t __i = 0;
      while ( ! eq ( __p [ __i ], char_type ( ) ) )
        ++ __i;
      return __i;
    }
# 173 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    const typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    find ( const char_type * __s, std :: size_t __n, const char_type & __a )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
        if ( eq ( __s [ __i ], __a ) )
          return __s + __i;
      return 0;
    }
# 184 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    move ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      return static_cast < _CharT * > ( __builtin_memmove ( __s1, __s2,
          __n * sizeof ( char_type ) ) );
    }
# 193 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    copy ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {

      std :: copy ( __s2, __s2 + __n, __s1 );
      return __s1;
    }
# 203 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    assign ( char_type * __s, std :: size_t __n, char_type __a )
    {

      std :: fill_n ( __s, __n, __a );
      return __s;
    }
# 213 "/usr/include/c++/4.4/bits/char_traits.h" 3
}
# 215 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace std __attribute__((visibility("default"))) {
# 230 "/usr/include/c++/4.4/bits/char_traits.h" 3
template< class _CharT>
# 231 "/usr/include/c++/4.4/bits/char_traits.h" 3
struct char_traits : public __gnu_cxx::char_traits< _CharT> {
# 232 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 237 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<> struct char_traits< char> {
# 239 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef char char_type;
# 240 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef int int_type;
# 241 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streampos pos_type;
# 242 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streamoff off_type;
# 243 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 246 "/usr/include/c++/4.4/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 247 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ __c1 = __c2; }
# 250 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 251 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 254 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 255 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 258 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 259 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __builtin_memcmp(__s1, __s2, __n); }
# 262 "/usr/include/c++/4.4/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 263 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __builtin_strlen(__s); }
# 266 "/usr/include/c++/4.4/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 267 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); }
# 270 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 271 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); }
# 274 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 275 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); }
# 278 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 279 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); }
# 282 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 283 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type>(__c); }
# 288 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 289 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>((static_cast< unsigned char>(__c))); }
# 292 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 293 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 296 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type eof()
# 297 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>((-1)); }
# 300 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 301 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (__c == eof()) ? 0 : __c; }
# 302 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 308 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<> struct char_traits< wchar_t> {
# 310 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wchar_t char_type;
# 311 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wint_t int_type;
# 312 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streamoff off_type;
# 313 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wstreampos pos_type;
# 314 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 317 "/usr/include/c++/4.4/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 318 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ __c1 = __c2; }
# 321 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 322 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 325 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 326 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 329 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 330 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemcmp(__s1, __s2, __n); }
# 333 "/usr/include/c++/4.4/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 334 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wcslen(__s); }
# 337 "/usr/include/c++/4.4/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 338 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemchr(__s, __a, __n); }
# 341 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 342 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemmove(__s1, __s2, __n); }
# 345 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 346 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemcpy(__s1, __s2, __n); }
# 349 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 350 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemset(__s, __a, __n); }
# 353 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 354 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (char_type)__c; }
# 357 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 358 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (int_type)__c; }
# 361 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 362 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 365 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type eof()
# 366 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>(4294967295U); }
# 369 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 370 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return eq_int_type(__c, eof()) ? (0) : __c; }
# 371 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 374 "/usr/include/c++/4.4/bits/char_traits.h" 3
}
# 28 "/usr/include/bits/locale.h" 3
enum {
# 29 "/usr/include/bits/locale.h" 3
__LC_CTYPE,
# 30 "/usr/include/bits/locale.h" 3
__LC_NUMERIC,
# 31 "/usr/include/bits/locale.h" 3
__LC_TIME,
# 32 "/usr/include/bits/locale.h" 3
__LC_COLLATE,
# 33 "/usr/include/bits/locale.h" 3
__LC_MONETARY,
# 34 "/usr/include/bits/locale.h" 3
__LC_MESSAGES,
# 35 "/usr/include/bits/locale.h" 3
__LC_ALL,
# 36 "/usr/include/bits/locale.h" 3
__LC_PAPER,
# 37 "/usr/include/bits/locale.h" 3
__LC_NAME,
# 38 "/usr/include/bits/locale.h" 3
__LC_ADDRESS,
# 39 "/usr/include/bits/locale.h" 3
__LC_TELEPHONE,
# 40 "/usr/include/bits/locale.h" 3
__LC_MEASUREMENT,
# 41 "/usr/include/bits/locale.h" 3
__LC_IDENTIFICATION
# 42 "/usr/include/bits/locale.h" 3
};
# 54 "/usr/include/locale.h" 3
extern "C" { struct lconv {
# 58 "/usr/include/locale.h" 3
char *decimal_point;
# 59 "/usr/include/locale.h" 3
char *thousands_sep;
# 65 "/usr/include/locale.h" 3
char *grouping;
# 71 "/usr/include/locale.h" 3
char *int_curr_symbol;
# 72 "/usr/include/locale.h" 3
char *currency_symbol;
# 73 "/usr/include/locale.h" 3
char *mon_decimal_point;
# 74 "/usr/include/locale.h" 3
char *mon_thousands_sep;
# 75 "/usr/include/locale.h" 3
char *mon_grouping;
# 76 "/usr/include/locale.h" 3
char *positive_sign;
# 77 "/usr/include/locale.h" 3
char *negative_sign;
# 78 "/usr/include/locale.h" 3
char int_frac_digits;
# 79 "/usr/include/locale.h" 3
char frac_digits;
# 81 "/usr/include/locale.h" 3
char p_cs_precedes;
# 83 "/usr/include/locale.h" 3
char p_sep_by_space;
# 85 "/usr/include/locale.h" 3
char n_cs_precedes;
# 87 "/usr/include/locale.h" 3
char n_sep_by_space;
# 94 "/usr/include/locale.h" 3
char p_sign_posn;
# 95 "/usr/include/locale.h" 3
char n_sign_posn;
# 98 "/usr/include/locale.h" 3
char int_p_cs_precedes;
# 100 "/usr/include/locale.h" 3
char int_p_sep_by_space;
# 102 "/usr/include/locale.h" 3
char int_n_cs_precedes;
# 104 "/usr/include/locale.h" 3
char int_n_sep_by_space;
# 111 "/usr/include/locale.h" 3
char int_p_sign_posn;
# 112 "/usr/include/locale.h" 3
char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3
}; }
# 125 "/usr/include/locale.h" 3
extern "C" char *setlocale(int, const char *) throw();
# 128 "/usr/include/locale.h" 3
extern "C" lconv *localeconv() throw();
# 152 "/usr/include/locale.h" 3
extern "C" __locale_t newlocale(int, const char *, __locale_t) throw();
# 187 "/usr/include/locale.h" 3
extern "C" __locale_t duplocale(__locale_t) throw();
# 191 "/usr/include/locale.h" 3
extern "C" void freelocale(__locale_t) throw();
# 198 "/usr/include/locale.h" 3
extern "C" __locale_t uselocale(__locale_t) throw();
# 53 "/usr/include/c++/4.4/clocale" 3
namespace std __attribute__((visibility("default"))) {
# 55 "/usr/include/c++/4.4/clocale" 3
using ::lconv;
# 56 "/usr/include/c++/4.4/clocale" 3
using ::setlocale;
# 57 "/usr/include/c++/4.4/clocale" 3
using ::localeconv;
# 59 "/usr/include/c++/4.4/clocale" 3
}
# 50 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 52 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
extern "C" __typeof__(uselocale) __uselocale;
# 54 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
}
# 57 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
namespace std __attribute__((visibility("default"))) {
# 59 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
typedef __locale_t __c_locale;
# 66 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
inline int __convert_from_v(const __c_locale &__cloc __attribute__((__unused__)), char *
# 67 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__out, const int
# 68 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__size __attribute__((__unused__)), const char *
# 69 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__fmt, ...)
# 70 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
{
# 72 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 85 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__builtin_va_list __args;
# 86 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__builtin_va_start(__args,__fmt);
# 89 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
# 94 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__builtin_va_end(__args);
# 97 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
__gnu_cxx::__uselocale(__old);
# 105 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
return __ret;
# 106 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
}
# 108 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
}
# 49 "/usr/include/ctype.h" 3
enum {
# 50 "/usr/include/ctype.h" 3
_ISupper = 256,
# 51 "/usr/include/ctype.h" 3
_ISlower = 512,
# 52 "/usr/include/ctype.h" 3
_ISalpha = 1024,
# 53 "/usr/include/ctype.h" 3
_ISdigit = 2048,
# 54 "/usr/include/ctype.h" 3
_ISxdigit = 4096,
# 55 "/usr/include/ctype.h" 3
_ISspace = 8192,
# 56 "/usr/include/ctype.h" 3
_ISprint = 16384,
# 57 "/usr/include/ctype.h" 3
_ISgraph = 32768,
# 58 "/usr/include/ctype.h" 3
_ISblank = 1,
# 59 "/usr/include/ctype.h" 3
_IScntrl,
# 60 "/usr/include/ctype.h" 3
_ISpunct = 4,
# 61 "/usr/include/ctype.h" 3
_ISalnum = 8
# 62 "/usr/include/ctype.h" 3
};
# 81 "/usr/include/ctype.h" 3
extern "C" const unsigned short **__ctype_b_loc() throw() __attribute__((__const__));
# 83 "/usr/include/ctype.h" 3
extern "C" const __int32_t **__ctype_tolower_loc() throw() __attribute__((__const__));
# 85 "/usr/include/ctype.h" 3
extern "C" const __int32_t **__ctype_toupper_loc() throw() __attribute__((__const__));
# 102 "/usr/include/ctype.h" 3
extern "C" int isalnum(int) throw();
# 103 "/usr/include/ctype.h" 3
extern "C" int isalpha(int) throw();
# 104 "/usr/include/ctype.h" 3
extern "C" int iscntrl(int) throw();
# 105 "/usr/include/ctype.h" 3
extern "C" int isdigit(int) throw();
# 106 "/usr/include/ctype.h" 3
extern "C" int islower(int) throw();
# 107 "/usr/include/ctype.h" 3
extern "C" int isgraph(int) throw();
# 108 "/usr/include/ctype.h" 3
extern "C" int isprint(int) throw();
# 109 "/usr/include/ctype.h" 3
extern "C" int ispunct(int) throw();
# 110 "/usr/include/ctype.h" 3
extern "C" int isspace(int) throw();
# 111 "/usr/include/ctype.h" 3
extern "C" int isupper(int) throw();
# 112 "/usr/include/ctype.h" 3
extern "C" int isxdigit(int) throw();
# 116 "/usr/include/ctype.h" 3
extern "C" int tolower(int) throw();
# 119 "/usr/include/ctype.h" 3
extern "C" int toupper(int) throw();
# 128 "/usr/include/ctype.h" 3
extern "C" int isblank(int) throw();
# 135 "/usr/include/ctype.h" 3
extern "C" int isctype(int, int) throw();
# 142 "/usr/include/ctype.h" 3
extern "C" int isascii(int) throw();
# 146 "/usr/include/ctype.h" 3
extern "C" int toascii(int) throw();
# 150 "/usr/include/ctype.h" 3
extern "C" int _toupper(int) throw();
# 151 "/usr/include/ctype.h" 3
extern "C" int _tolower(int) throw();
# 247 "/usr/include/ctype.h" 3
extern "C" int isalnum_l(int, __locale_t) throw();
# 248 "/usr/include/ctype.h" 3
extern "C" int isalpha_l(int, __locale_t) throw();
# 249 "/usr/include/ctype.h" 3
extern "C" int iscntrl_l(int, __locale_t) throw();
# 250 "/usr/include/ctype.h" 3
extern "C" int isdigit_l(int, __locale_t) throw();
# 251 "/usr/include/ctype.h" 3
extern "C" int islower_l(int, __locale_t) throw();
# 252 "/usr/include/ctype.h" 3
extern "C" int isgraph_l(int, __locale_t) throw();
# 253 "/usr/include/ctype.h" 3
extern "C" int isprint_l(int, __locale_t) throw();
# 254 "/usr/include/ctype.h" 3
extern "C" int ispunct_l(int, __locale_t) throw();
# 255 "/usr/include/ctype.h" 3
extern "C" int isspace_l(int, __locale_t) throw();
# 256 "/usr/include/ctype.h" 3
extern "C" int isupper_l(int, __locale_t) throw();
# 257 "/usr/include/ctype.h" 3
extern "C" int isxdigit_l(int, __locale_t) throw();
# 259 "/usr/include/ctype.h" 3
extern "C" int isblank_l(int, __locale_t) throw();
# 263 "/usr/include/ctype.h" 3
extern "C" int __tolower_l(int, __locale_t) throw();
# 264 "/usr/include/ctype.h" 3
extern "C" int tolower_l(int, __locale_t) throw();
# 267 "/usr/include/ctype.h" 3
extern "C" int __toupper_l(int, __locale_t) throw();
# 268 "/usr/include/ctype.h" 3
extern "C" int toupper_l(int, __locale_t) throw();
# 64 "/usr/include/c++/4.4/cctype" 3
namespace std __attribute__((visibility("default"))) {
# 66 "/usr/include/c++/4.4/cctype" 3
using ::isalnum;
# 67 "/usr/include/c++/4.4/cctype" 3
using ::isalpha;
# 68 "/usr/include/c++/4.4/cctype" 3
using ::iscntrl;
# 69 "/usr/include/c++/4.4/cctype" 3
using ::isdigit;
# 70 "/usr/include/c++/4.4/cctype" 3
using ::isgraph;
# 71 "/usr/include/c++/4.4/cctype" 3
using ::islower;
# 72 "/usr/include/c++/4.4/cctype" 3
using ::isprint;
# 73 "/usr/include/c++/4.4/cctype" 3
using ::ispunct;
# 74 "/usr/include/c++/4.4/cctype" 3
using ::isspace;
# 75 "/usr/include/c++/4.4/cctype" 3
using ::isupper;
# 76 "/usr/include/c++/4.4/cctype" 3
using ::isxdigit;
# 77 "/usr/include/c++/4.4/cctype" 3
using ::tolower;
# 78 "/usr/include/c++/4.4/cctype" 3
using ::toupper;
# 80 "/usr/include/c++/4.4/cctype" 3
}
# 46 "/usr/include/c++/4.4/bits/localefwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 49 "/usr/include/c++/4.4/bits/localefwd.h" 3
class locale;
# 51 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _Facet >
    bool
    has_facet ( const locale & ) throw ( );
# 55 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & );
# 60 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isspace ( _CharT, const locale & );
# 64 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isprint ( _CharT, const locale & );
# 68 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    iscntrl ( _CharT, const locale & );
# 72 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isupper ( _CharT, const locale & );
# 76 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    islower ( _CharT, const locale & );
# 80 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isalpha ( _CharT, const locale & );
# 84 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isdigit ( _CharT, const locale & );
# 88 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    ispunct ( _CharT, const locale & );
# 92 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isxdigit ( _CharT, const locale & );
# 96 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isalnum ( _CharT, const locale & );
# 100 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isgraph ( _CharT, const locale & );
# 104 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    _CharT
    toupper ( _CharT, const locale & );
# 108 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    _CharT
    tolower ( _CharT, const locale & );
# 113 "/usr/include/c++/4.4/bits/localefwd.h" 3
struct ctype_base;
# 114 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class ctype;
# 116 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class ctype< char> ;
# 118 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class ctype< wchar_t> ;
# 120 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class ctype_byname;
# 124 "/usr/include/c++/4.4/bits/localefwd.h" 3
class codecvt_base;
# 125 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _InternT, class _ExternT, class _StateT> class codecvt;
# 127 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class codecvt< char, char, __mbstate_t> ;
# 129 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> ;
# 131 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname;
# 136 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class num_get;
# 138 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class num_put;
# 141 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class numpunct;
# 142 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class numpunct_byname;
# 145 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class collate;
# 147 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class
    collate_byname;
# 151 "/usr/include/c++/4.4/bits/localefwd.h" 3
class time_base;
# 152 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get;
# 154 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname;
# 156 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put;
# 158 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname;
# 162 "/usr/include/c++/4.4/bits/localefwd.h" 3
class money_base;
# 164 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get;
# 166 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put;
# 169 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, bool _Intl = false> class moneypunct;
# 171 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT, bool _Intl = false> class moneypunct_byname;
# 175 "/usr/include/c++/4.4/bits/localefwd.h" 3
class messages_base;
# 176 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT> class messages;
# 178 "/usr/include/c++/4.4/bits/localefwd.h" 3
template< class _CharT> class messages_byname;
# 181 "/usr/include/c++/4.4/bits/localefwd.h" 3
}
# 71 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) sched_param {
# 73 "/usr/include/bits/sched.h" 3
int __sched_priority;
# 74 "/usr/include/bits/sched.h" 3
};
# 80 "/usr/include/bits/sched.h" 3
extern "C" int clone(int (*)(void *), void *, int, void *, ...) throw() __attribute__((visibility("default")));
# 84 "/usr/include/bits/sched.h" 3
extern "C" int unshare(int) throw() __attribute__((visibility("default")));
# 87 "/usr/include/bits/sched.h" 3
extern "C" int sched_getcpu() throw() __attribute__((visibility("default")));
# 98 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) __sched_param {
# 100 "/usr/include/bits/sched.h" 3
int __sched_priority;
# 101 "/usr/include/bits/sched.h" 3
};
# 113 "/usr/include/bits/sched.h" 3
typedef unsigned long __cpu_mask;
# 123 "/usr/include/bits/sched.h" 3
typedef
# 121 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) {
# 122 "/usr/include/bits/sched.h" 3
__cpu_mask __bits[((1024) / ((8) * sizeof(__cpu_mask)))];
# 123 "/usr/include/bits/sched.h" 3
} cpu_set_t;
# 198 "/usr/include/bits/sched.h" 3
extern "C" int __sched_cpucount(size_t, const cpu_set_t *) throw() __attribute__((visibility("default")));
# 200 "/usr/include/bits/sched.h" 3
extern "C" cpu_set_t *__sched_cpualloc(size_t) throw() __attribute__((visibility("default")));
# 201 "/usr/include/bits/sched.h" 3
extern "C" void __sched_cpufree(cpu_set_t *) throw() __attribute__((visibility("default")));
# 43 "/usr/include/sched.h" 3
extern "C" int sched_setparam(__pid_t, const sched_param *) throw() __attribute__((visibility("default")));
# 47 "/usr/include/sched.h" 3
extern "C" int sched_getparam(__pid_t, sched_param *) throw() __attribute__((visibility("default")));
# 50 "/usr/include/sched.h" 3
extern "C" int sched_setscheduler(__pid_t, int, const sched_param *) throw() __attribute__((visibility("default")));
# 54 "/usr/include/sched.h" 3
extern "C" int sched_getscheduler(__pid_t) throw() __attribute__((visibility("default")));
# 57 "/usr/include/sched.h" 3
extern "C" int sched_yield() throw() __attribute__((visibility("default")));
# 60 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_max(int) throw() __attribute__((visibility("default")));
# 63 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_min(int) throw() __attribute__((visibility("default")));
# 66 "/usr/include/sched.h" 3
extern "C" int sched_rr_get_interval(__pid_t, timespec *) throw() __attribute__((visibility("default")));
# 110 "/usr/include/sched.h" 3
extern "C" int sched_setaffinity(__pid_t, size_t, const cpu_set_t *) throw() __attribute__((visibility("default")));
# 114 "/usr/include/sched.h" 3
extern "C" int sched_getaffinity(__pid_t, size_t, cpu_set_t *) throw() __attribute__((visibility("default")));
# 32 "/usr/include/bits/setjmp.h" 3
typedef long __jmp_buf[8];
# 37 "/usr/include/pthread.h" 3
enum {
# 38 "/usr/include/pthread.h" 3
PTHREAD_CREATE_JOINABLE,
# 40 "/usr/include/pthread.h" 3
PTHREAD_CREATE_DETACHED
# 42 "/usr/include/pthread.h" 3
};
# 47 "/usr/include/pthread.h" 3
enum {
# 48 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_TIMED_NP,
# 49 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_RECURSIVE_NP,
# 50 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ERRORCHECK_NP,
# 51 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ADAPTIVE_NP,
# 54 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_NORMAL = 0,
# 55 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_RECURSIVE,
# 56 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ERRORCHECK,
# 57 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_DEFAULT = 0,
# 61 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_FAST_NP = 0
# 63 "/usr/include/pthread.h" 3
};
# 69 "/usr/include/pthread.h" 3
enum {
# 70 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_STALLED,
# 71 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_STALLED_NP = 0,
# 72 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ROBUST,
# 73 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ROBUST_NP = 1
# 74 "/usr/include/pthread.h" 3
};
# 81 "/usr/include/pthread.h" 3
enum {
# 82 "/usr/include/pthread.h" 3
PTHREAD_PRIO_NONE,
# 83 "/usr/include/pthread.h" 3
PTHREAD_PRIO_INHERIT,
# 84 "/usr/include/pthread.h" 3
PTHREAD_PRIO_PROTECT
# 85 "/usr/include/pthread.h" 3
};
# 118 "/usr/include/pthread.h" 3
enum {
# 119 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_READER_NP,
# 120 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_WRITER_NP,
# 121 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
# 122 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 123 "/usr/include/pthread.h" 3
};
# 150 "/usr/include/pthread.h" 3
enum {
# 151 "/usr/include/pthread.h" 3
PTHREAD_INHERIT_SCHED,
# 153 "/usr/include/pthread.h" 3
PTHREAD_EXPLICIT_SCHED
# 155 "/usr/include/pthread.h" 3
};
# 160 "/usr/include/pthread.h" 3
enum {
# 161 "/usr/include/pthread.h" 3
PTHREAD_SCOPE_SYSTEM,
# 163 "/usr/include/pthread.h" 3
PTHREAD_SCOPE_PROCESS
# 165 "/usr/include/pthread.h" 3
};
# 170 "/usr/include/pthread.h" 3
enum {
# 171 "/usr/include/pthread.h" 3
PTHREAD_PROCESS_PRIVATE,
# 173 "/usr/include/pthread.h" 3
PTHREAD_PROCESS_SHARED
# 175 "/usr/include/pthread.h" 3
};
# 184 "/usr/include/pthread.h" 3
struct __attribute__((visibility("default"))) _pthread_cleanup_buffer {
# 186 "/usr/include/pthread.h" 3
void (*__routine)(void *);
# 187 "/usr/include/pthread.h" 3
void *__arg;
# 188 "/usr/include/pthread.h" 3
int __canceltype;
# 189 "/usr/include/pthread.h" 3
_pthread_cleanup_buffer *__prev;
# 190 "/usr/include/pthread.h" 3
};
# 194 "/usr/include/pthread.h" 3
enum {
# 195 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_ENABLE,
# 197 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_DISABLE
# 199 "/usr/include/pthread.h" 3
};
# 201 "/usr/include/pthread.h" 3
enum {
# 202 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_DEFERRED,
# 204 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_ASYNCHRONOUS
# 206 "/usr/include/pthread.h" 3
};
# 227 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *__restrict__, const pthread_attr_t *__restrict__, void *(*)(void *), void *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 236 "/usr/include/pthread.h" 3
extern "C" void pthread_exit(void *) __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 244 "/usr/include/pthread.h" 3
extern "C" int pthread_join(pthread_t, void **) __attribute__((visibility("default")));
# 249 "/usr/include/pthread.h" 3
extern "C" int pthread_tryjoin_np(pthread_t, void **) throw() __attribute__((visibility("default")));
# 257 "/usr/include/pthread.h" 3
extern "C" int pthread_timedjoin_np(pthread_t, void **, const timespec *) __attribute__((visibility("default")));
# 265 "/usr/include/pthread.h" 3
extern "C" int pthread_detach(pthread_t) throw() __attribute__((visibility("default")));
# 269 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_self() throw() __attribute__((__const__)) __attribute__((visibility("default")));
# 272 "/usr/include/pthread.h" 3
extern "C" int pthread_equal(pthread_t, pthread_t) throw() __attribute__((visibility("default")));
# 280 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_init(pthread_attr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 283 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_destroy(pthread_attr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 287 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 292 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setdetachstate(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 298 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getguardsize(const pthread_attr_t *, size_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 303 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setguardsize(pthread_attr_t *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 309 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *__restrict__, sched_param *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 315 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedparam(pthread_attr_t *__restrict__, const sched_param *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 320 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 325 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 329 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 334 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setinheritsched(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 340 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getscope(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 345 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setscope(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 349 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__, void **__restrict__) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 357 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstackaddr(pthread_attr_t *, void *) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 362 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *__restrict__, size_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 369 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstacksize(pthread_attr_t *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 375 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstack(const pthread_attr_t *__restrict__, void **__restrict__, size_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 383 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstack(pthread_attr_t *, void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 390 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setaffinity_np(pthread_attr_t *, size_t, const cpu_set_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 397 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getaffinity_np(const pthread_attr_t *, size_t, cpu_set_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 406 "/usr/include/pthread.h" 3
extern "C" int pthread_getattr_np(pthread_t, pthread_attr_t *) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 415 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedparam(pthread_t, int, const sched_param *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 420 "/usr/include/pthread.h" 3
extern "C" int pthread_getschedparam(pthread_t, int *__restrict__, sched_param *__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 426 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedprio(pthread_t, int) throw() __attribute__((visibility("default")));
# 432 "/usr/include/pthread.h" 3
extern "C" int pthread_getconcurrency() throw() __attribute__((visibility("default")));
# 435 "/usr/include/pthread.h" 3
extern "C" int pthread_setconcurrency(int) throw() __attribute__((visibility("default")));
# 443 "/usr/include/pthread.h" 3
extern "C" int pthread_yield() throw() __attribute__((visibility("default")));
# 448 "/usr/include/pthread.h" 3
extern "C" int pthread_setaffinity_np(pthread_t, size_t, const cpu_set_t *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 453 "/usr/include/pthread.h" 3
extern "C" int pthread_getaffinity_np(pthread_t, size_t, cpu_set_t *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 468 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t *, void (*)(void)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 480 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int, int *) __attribute__((visibility("default")));
# 484 "/usr/include/pthread.h" 3
extern "C" int pthread_setcanceltype(int, int *) __attribute__((visibility("default")));
# 487 "/usr/include/pthread.h" 3
extern "C" int pthread_cancel(pthread_t) __attribute__((visibility("default")));
# 492 "/usr/include/pthread.h" 3
extern "C" void pthread_testcancel() __attribute__((visibility("default")));
# 505 "/usr/include/pthread.h" 3
extern "C" { typedef
# 498 "/usr/include/pthread.h" 3
struct __attribute__((__aligned__(8))) __attribute__((visibility("default"))) {
# 500 "/usr/include/pthread.h" 3
struct {
# 501 "/usr/include/pthread.h" 3
__jmp_buf __cancel_jmp_buf;
# 502 "/usr/include/pthread.h" 3
int __mask_was_saved;
# 503 "/usr/include/pthread.h" 3
} __cancel_jmp_buf[1];
# 504 "/usr/include/pthread.h" 3
void *__pad[4];
# 505 "/usr/include/pthread.h" 3
} __pthread_unwind_buf_t; }
# 514 "/usr/include/pthread.h" 3
extern "C" { struct __attribute__((visibility("default"))) __pthread_cleanup_frame {
# 516 "/usr/include/pthread.h" 3
void (*__cancel_routine)(void *);
# 517 "/usr/include/pthread.h" 3
void *__cancel_arg;
# 518 "/usr/include/pthread.h" 3
int __do_it;
# 519 "/usr/include/pthread.h" 3
int __cancel_type;
# 520 "/usr/include/pthread.h" 3
}; }
# 525 "/usr/include/pthread.h" 3
extern "C" { class __attribute__((visibility("default"))) __pthread_cleanup_class {
# 527 "/usr/include/pthread.h" 3
void (*__cancel_routine)(void *);
# 528 "/usr/include/pthread.h" 3
void *__cancel_arg;
# 529 "/usr/include/pthread.h" 3
int __do_it;
# 530 "/usr/include/pthread.h" 3
int __cancel_type;
# 533 "/usr/include/pthread.h" 3
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1)
# 534 "/usr/include/pthread.h" 3
{ }
# 535 "/usr/include/pthread.h" 3
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); } }
# 536 "/usr/include/pthread.h" 3
void __setdoit(int __newval) { (__do_it) = __newval; }
# 537 "/usr/include/pthread.h" 3
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type));
# 538 "/usr/include/pthread.h" 3
}
# 539 "/usr/include/pthread.h" 3
void __restore() const { pthread_setcanceltype(__cancel_type, 0); }
# 540 "/usr/include/pthread.h" 3
}; }
# 716 "/usr/include/pthread.h" 3
struct __jmp_buf_tag;
# 717 "/usr/include/pthread.h" 3
extern "C" int __sigsetjmp(__jmp_buf_tag *, int) throw() __attribute__((visibility("default")));
# 723 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 728 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_destroy(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 732 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_trylock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 736 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_lock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 741 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_timedlock(pthread_mutex_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 747 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_unlock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 753 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 760 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__, int, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 769 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 772 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 782 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 786 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 790 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 796 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 802 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 809 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 813 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 820 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 825 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 831 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 838 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getrobust(const pthread_mutexattr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 842 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 848 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setrobust(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 852 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 864 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *__restrict__, const pthread_rwlockattr_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 869 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 873 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 877 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 882 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 888 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 892 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 897 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 903 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 910 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 914 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 918 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 924 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 929 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 935 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 944 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_init(pthread_cond_t *__restrict__, const pthread_condattr_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 949 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_destroy(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 953 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 957 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_broadcast(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 965 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_wait(pthread_cond_t *__restrict__, pthread_mutex_t *__restrict__) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 976 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *__restrict__, pthread_mutex_t *__restrict__, const timespec *__restrict__) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 984 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_init(pthread_condattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 988 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_destroy(pthread_condattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 992 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 998 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setpshared(pthread_condattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1003 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getclock(const pthread_condattr_t *__restrict__, __clockid_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1009 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setclock(pthread_condattr_t *, __clockid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1020 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_init(pthread_spinlock_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1024 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_destroy(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1028 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_lock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1032 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_trylock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1036 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_unlock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1044 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_init(pthread_barrier_t *__restrict__, const pthread_barrierattr_t *__restrict__, unsigned) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1050 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_destroy(pthread_barrier_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1054 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_wait(pthread_barrier_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1059 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_init(pthread_barrierattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1063 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_destroy(pthread_barrierattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1067 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1073 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_setpshared(pthread_barrierattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1087 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t *, void (*)(void *)) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1092 "/usr/include/pthread.h" 3
extern "C" int pthread_key_delete(pthread_key_t) throw() __attribute__((visibility("default")));
# 1095 "/usr/include/pthread.h" 3
extern "C" void *pthread_getspecific(pthread_key_t) throw() __attribute__((visibility("default")));
# 1098 "/usr/include/pthread.h" 3
extern "C" int pthread_setspecific(pthread_key_t, const void *) throw() __attribute__((visibility("default")));
# 1104 "/usr/include/pthread.h" 3
extern "C" int pthread_getcpuclockid(pthread_t, __clockid_t *) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1121 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (*)(void), void (*)(void), void (*)(void)) throw() __attribute__((visibility("default")));
# 268 "/usr/include/unistd.h" 3
extern "C" { typedef __intptr_t intptr_t; }
# 275 "/usr/include/unistd.h" 3
extern "C" { typedef __socklen_t socklen_t; }
# 288 "/usr/include/unistd.h" 3
extern "C" int access(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 293 "/usr/include/unistd.h" 3
extern "C" int euidaccess(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 297 "/usr/include/unistd.h" 3
extern "C" int eaccess(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 305 "/usr/include/unistd.h" 3
extern "C" int faccessat(int, const char *, int, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 331 "/usr/include/unistd.h" 3
extern "C" __off_t lseek(int, __off_t, int) throw() __attribute__((visibility("default")));
# 342 "/usr/include/unistd.h" 3
extern "C" __off64_t lseek64(int, __off64_t, int) throw() __attribute__((visibility("default")));
# 350 "/usr/include/unistd.h" 3
extern "C" int close(int) __attribute__((visibility("default")));
# 357 "/usr/include/unistd.h" 3
extern "C" ssize_t read(int, void *, size_t) __attribute__((visibility("default")));
# 363 "/usr/include/unistd.h" 3
extern "C" ssize_t write(int, const void *, size_t) __attribute__((visibility("default")));
# 373 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int, void *, size_t, __off_t) __attribute__((visibility("default")));
# 381 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite(int, const void *, size_t, __off_t) __attribute__((visibility("default")));
# 401 "/usr/include/unistd.h" 3
extern "C" ssize_t pread64(int, void *, size_t, __off64_t) __attribute__((visibility("default")));
# 405 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite64(int, const void *, size_t, __off64_t) __attribute__((visibility("default")));
# 414 "/usr/include/unistd.h" 3
extern "C" int pipe(int [2]) throw() __attribute__((visibility("default")));
# 419 "/usr/include/unistd.h" 3
extern "C" int pipe2(int [2], int) throw() __attribute__((visibility("default")));
# 429 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned) throw() __attribute__((visibility("default")));
# 441 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned) __attribute__((visibility("default")));
# 448 "/usr/include/unistd.h" 3
extern "C" __useconds_t ualarm(__useconds_t, __useconds_t) throw() __attribute__((visibility("default")));
# 456 "/usr/include/unistd.h" 3
extern "C" int usleep(__useconds_t) __attribute__((visibility("default")));
# 465 "/usr/include/unistd.h" 3
extern "C" int pause() __attribute__((visibility("default")));
# 469 "/usr/include/unistd.h" 3
extern "C" int chown(const char *, __uid_t, __gid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 474 "/usr/include/unistd.h" 3
extern "C" int fchown(int, __uid_t, __gid_t) throw() __attribute__((visibility("default")));
# 479 "/usr/include/unistd.h" 3
extern "C" int lchown(const char *, __uid_t, __gid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 487 "/usr/include/unistd.h" 3
extern "C" int fchownat(int, const char *, __uid_t, __gid_t, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 493 "/usr/include/unistd.h" 3
extern "C" int chdir(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 497 "/usr/include/unistd.h" 3
extern "C" int fchdir(int) throw() __attribute__((visibility("default")));
# 507 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char *, size_t) throw() __attribute__((visibility("default")));
# 513 "/usr/include/unistd.h" 3
extern "C" char *get_current_dir_name() throw() __attribute__((visibility("default")));
# 520 "/usr/include/unistd.h" 3
extern "C" char *getwd(char *) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 526 "/usr/include/unistd.h" 3
extern "C" int dup(int) throw() __attribute__((visibility("default")));
# 529 "/usr/include/unistd.h" 3
extern "C" int dup2(int, int) throw() __attribute__((visibility("default")));
# 534 "/usr/include/unistd.h" 3
extern "C" int dup3(int, int, int) throw() __attribute__((visibility("default")));
# 538 "/usr/include/unistd.h" 3
extern "C" { extern char **__environ __attribute__((visibility("default"))); }
# 540 "/usr/include/unistd.h" 3
extern "C" { extern char **environ __attribute__((visibility("default"))); }
# 546 "/usr/include/unistd.h" 3
extern "C" int execve(const char *, char *const [], char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 552 "/usr/include/unistd.h" 3
extern "C" int fexecve(int, char *const [], char *const []) throw() __attribute__((visibility("default")));
# 558 "/usr/include/unistd.h" 3
extern "C" int execv(const char *, char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 563 "/usr/include/unistd.h" 3
extern "C" int execle(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 568 "/usr/include/unistd.h" 3
extern "C" int execl(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 573 "/usr/include/unistd.h" 3
extern "C" int execvp(const char *, char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 579 "/usr/include/unistd.h" 3
extern "C" int execlp(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 585 "/usr/include/unistd.h" 3
extern "C" int execvpe(const char *, char *const [], char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 593 "/usr/include/unistd.h" 3
extern "C" int nice(int) throw() __attribute__((visibility("default")));
# 598 "/usr/include/unistd.h" 3
extern "C" void _exit(int) __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 27 "/usr/include/bits/confname.h" 3
enum {
# 28 "/usr/include/bits/confname.h" 3
_PC_LINK_MAX,
# 30 "/usr/include/bits/confname.h" 3
_PC_MAX_CANON,
# 32 "/usr/include/bits/confname.h" 3
_PC_MAX_INPUT,
# 34 "/usr/include/bits/confname.h" 3
_PC_NAME_MAX,
# 36 "/usr/include/bits/confname.h" 3
_PC_PATH_MAX,
# 38 "/usr/include/bits/confname.h" 3
_PC_PIPE_BUF,
# 40 "/usr/include/bits/confname.h" 3
_PC_CHOWN_RESTRICTED,
# 42 "/usr/include/bits/confname.h" 3
_PC_NO_TRUNC,
# 44 "/usr/include/bits/confname.h" 3
_PC_VDISABLE,
# 46 "/usr/include/bits/confname.h" 3
_PC_SYNC_IO,
# 48 "/usr/include/bits/confname.h" 3
_PC_ASYNC_IO,
# 50 "/usr/include/bits/confname.h" 3
_PC_PRIO_IO,
# 52 "/usr/include/bits/confname.h" 3
_PC_SOCK_MAXBUF,
# 54 "/usr/include/bits/confname.h" 3
_PC_FILESIZEBITS,
# 56 "/usr/include/bits/confname.h" 3
_PC_REC_INCR_XFER_SIZE,
# 58 "/usr/include/bits/confname.h" 3
_PC_REC_MAX_XFER_SIZE,
# 60 "/usr/include/bits/confname.h" 3
_PC_REC_MIN_XFER_SIZE,
# 62 "/usr/include/bits/confname.h" 3
_PC_REC_XFER_ALIGN,
# 64 "/usr/include/bits/confname.h" 3
_PC_ALLOC_SIZE_MIN,
# 66 "/usr/include/bits/confname.h" 3
_PC_SYMLINK_MAX,
# 68 "/usr/include/bits/confname.h" 3
_PC_2_SYMLINKS
# 70 "/usr/include/bits/confname.h" 3
};
# 74 "/usr/include/bits/confname.h" 3
enum {
# 75 "/usr/include/bits/confname.h" 3
_SC_ARG_MAX,
# 77 "/usr/include/bits/confname.h" 3
_SC_CHILD_MAX,
# 79 "/usr/include/bits/confname.h" 3
_SC_CLK_TCK,
# 81 "/usr/include/bits/confname.h" 3
_SC_NGROUPS_MAX,
# 83 "/usr/include/bits/confname.h" 3
_SC_OPEN_MAX,
# 85 "/usr/include/bits/confname.h" 3
_SC_STREAM_MAX,
# 87 "/usr/include/bits/confname.h" 3
_SC_TZNAME_MAX,
# 89 "/usr/include/bits/confname.h" 3
_SC_JOB_CONTROL,
# 91 "/usr/include/bits/confname.h" 3
_SC_SAVED_IDS,
# 93 "/usr/include/bits/confname.h" 3
_SC_REALTIME_SIGNALS,
# 95 "/usr/include/bits/confname.h" 3
_SC_PRIORITY_SCHEDULING,
# 97 "/usr/include/bits/confname.h" 3
_SC_TIMERS,
# 99 "/usr/include/bits/confname.h" 3
_SC_ASYNCHRONOUS_IO,
# 101 "/usr/include/bits/confname.h" 3
_SC_PRIORITIZED_IO,
# 103 "/usr/include/bits/confname.h" 3
_SC_SYNCHRONIZED_IO,
# 105 "/usr/include/bits/confname.h" 3
_SC_FSYNC,
# 107 "/usr/include/bits/confname.h" 3
_SC_MAPPED_FILES,
# 109 "/usr/include/bits/confname.h" 3
_SC_MEMLOCK,
# 111 "/usr/include/bits/confname.h" 3
_SC_MEMLOCK_RANGE,
# 113 "/usr/include/bits/confname.h" 3
_SC_MEMORY_PROTECTION,
# 115 "/usr/include/bits/confname.h" 3
_SC_MESSAGE_PASSING,
# 117 "/usr/include/bits/confname.h" 3
_SC_SEMAPHORES,
# 119 "/usr/include/bits/confname.h" 3
_SC_SHARED_MEMORY_OBJECTS,
# 121 "/usr/include/bits/confname.h" 3
_SC_AIO_LISTIO_MAX,
# 123 "/usr/include/bits/confname.h" 3
_SC_AIO_MAX,
# 125 "/usr/include/bits/confname.h" 3
_SC_AIO_PRIO_DELTA_MAX,
# 127 "/usr/include/bits/confname.h" 3
_SC_DELAYTIMER_MAX,
# 129 "/usr/include/bits/confname.h" 3
_SC_MQ_OPEN_MAX,
# 131 "/usr/include/bits/confname.h" 3
_SC_MQ_PRIO_MAX,
# 133 "/usr/include/bits/confname.h" 3
_SC_VERSION,
# 135 "/usr/include/bits/confname.h" 3
_SC_PAGESIZE,
# 138 "/usr/include/bits/confname.h" 3
_SC_RTSIG_MAX,
# 140 "/usr/include/bits/confname.h" 3
_SC_SEM_NSEMS_MAX,
# 142 "/usr/include/bits/confname.h" 3
_SC_SEM_VALUE_MAX,
# 144 "/usr/include/bits/confname.h" 3
_SC_SIGQUEUE_MAX,
# 146 "/usr/include/bits/confname.h" 3
_SC_TIMER_MAX,
# 151 "/usr/include/bits/confname.h" 3
_SC_BC_BASE_MAX,
# 153 "/usr/include/bits/confname.h" 3
_SC_BC_DIM_MAX,
# 155 "/usr/include/bits/confname.h" 3
_SC_BC_SCALE_MAX,
# 157 "/usr/include/bits/confname.h" 3
_SC_BC_STRING_MAX,
# 159 "/usr/include/bits/confname.h" 3
_SC_COLL_WEIGHTS_MAX,
# 161 "/usr/include/bits/confname.h" 3
_SC_EQUIV_CLASS_MAX,
# 163 "/usr/include/bits/confname.h" 3
_SC_EXPR_NEST_MAX,
# 165 "/usr/include/bits/confname.h" 3
_SC_LINE_MAX,
# 167 "/usr/include/bits/confname.h" 3
_SC_RE_DUP_MAX,
# 169 "/usr/include/bits/confname.h" 3
_SC_CHARCLASS_NAME_MAX,
# 172 "/usr/include/bits/confname.h" 3
_SC_2_VERSION,
# 174 "/usr/include/bits/confname.h" 3
_SC_2_C_BIND,
# 176 "/usr/include/bits/confname.h" 3
_SC_2_C_DEV,
# 178 "/usr/include/bits/confname.h" 3
_SC_2_FORT_DEV,
# 180 "/usr/include/bits/confname.h" 3
_SC_2_FORT_RUN,
# 182 "/usr/include/bits/confname.h" 3
_SC_2_SW_DEV,
# 184 "/usr/include/bits/confname.h" 3
_SC_2_LOCALEDEF,
# 187 "/usr/include/bits/confname.h" 3
_SC_PII,
# 189 "/usr/include/bits/confname.h" 3
_SC_PII_XTI,
# 191 "/usr/include/bits/confname.h" 3
_SC_PII_SOCKET,
# 193 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET,
# 195 "/usr/include/bits/confname.h" 3
_SC_PII_OSI,
# 197 "/usr/include/bits/confname.h" 3
_SC_POLL,
# 199 "/usr/include/bits/confname.h" 3
_SC_SELECT,
# 201 "/usr/include/bits/confname.h" 3
_SC_UIO_MAXIOV,
# 203 "/usr/include/bits/confname.h" 3
_SC_IOV_MAX = 60,
# 205 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET_STREAM,
# 207 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET_DGRAM,
# 209 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_COTS,
# 211 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_CLTS,
# 213 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_M,
# 215 "/usr/include/bits/confname.h" 3
_SC_T_IOV_MAX,
# 219 "/usr/include/bits/confname.h" 3
_SC_THREADS,
# 221 "/usr/include/bits/confname.h" 3
_SC_THREAD_SAFE_FUNCTIONS,
# 223 "/usr/include/bits/confname.h" 3
_SC_GETGR_R_SIZE_MAX,
# 225 "/usr/include/bits/confname.h" 3
_SC_GETPW_R_SIZE_MAX,
# 227 "/usr/include/bits/confname.h" 3
_SC_LOGIN_NAME_MAX,
# 229 "/usr/include/bits/confname.h" 3
_SC_TTY_NAME_MAX,
# 231 "/usr/include/bits/confname.h" 3
_SC_THREAD_DESTRUCTOR_ITERATIONS,
# 233 "/usr/include/bits/confname.h" 3
_SC_THREAD_KEYS_MAX,
# 235 "/usr/include/bits/confname.h" 3
_SC_THREAD_STACK_MIN,
# 237 "/usr/include/bits/confname.h" 3
_SC_THREAD_THREADS_MAX,
# 239 "/usr/include/bits/confname.h" 3
_SC_THREAD_ATTR_STACKADDR,
# 241 "/usr/include/bits/confname.h" 3
_SC_THREAD_ATTR_STACKSIZE,
# 243 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIORITY_SCHEDULING,
# 245 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIO_INHERIT,
# 247 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIO_PROTECT,
# 249 "/usr/include/bits/confname.h" 3
_SC_THREAD_PROCESS_SHARED,
# 252 "/usr/include/bits/confname.h" 3
_SC_NPROCESSORS_CONF,
# 254 "/usr/include/bits/confname.h" 3
_SC_NPROCESSORS_ONLN,
# 256 "/usr/include/bits/confname.h" 3
_SC_PHYS_PAGES,
# 258 "/usr/include/bits/confname.h" 3
_SC_AVPHYS_PAGES,
# 260 "/usr/include/bits/confname.h" 3
_SC_ATEXIT_MAX,
# 262 "/usr/include/bits/confname.h" 3
_SC_PASS_MAX,
# 265 "/usr/include/bits/confname.h" 3
_SC_XOPEN_VERSION,
# 267 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XCU_VERSION,
# 269 "/usr/include/bits/confname.h" 3
_SC_XOPEN_UNIX,
# 271 "/usr/include/bits/confname.h" 3
_SC_XOPEN_CRYPT,
# 273 "/usr/include/bits/confname.h" 3
_SC_XOPEN_ENH_I18N,
# 275 "/usr/include/bits/confname.h" 3
_SC_XOPEN_SHM,
# 278 "/usr/include/bits/confname.h" 3
_SC_2_CHAR_TERM,
# 280 "/usr/include/bits/confname.h" 3
_SC_2_C_VERSION,
# 282 "/usr/include/bits/confname.h" 3
_SC_2_UPE,
# 285 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG2,
# 287 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG3,
# 289 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG4,
# 292 "/usr/include/bits/confname.h" 3
_SC_CHAR_BIT,
# 294 "/usr/include/bits/confname.h" 3
_SC_CHAR_MAX,
# 296 "/usr/include/bits/confname.h" 3
_SC_CHAR_MIN,
# 298 "/usr/include/bits/confname.h" 3
_SC_INT_MAX,
# 300 "/usr/include/bits/confname.h" 3
_SC_INT_MIN,
# 302 "/usr/include/bits/confname.h" 3
_SC_LONG_BIT,
# 304 "/usr/include/bits/confname.h" 3
_SC_WORD_BIT,
# 306 "/usr/include/bits/confname.h" 3
_SC_MB_LEN_MAX,
# 308 "/usr/include/bits/confname.h" 3
_SC_NZERO,
# 310 "/usr/include/bits/confname.h" 3
_SC_SSIZE_MAX,
# 312 "/usr/include/bits/confname.h" 3
_SC_SCHAR_MAX,
# 314 "/usr/include/bits/confname.h" 3
_SC_SCHAR_MIN,
# 316 "/usr/include/bits/confname.h" 3
_SC_SHRT_MAX,
# 318 "/usr/include/bits/confname.h" 3
_SC_SHRT_MIN,
# 320 "/usr/include/bits/confname.h" 3
_SC_UCHAR_MAX,
# 322 "/usr/include/bits/confname.h" 3
_SC_UINT_MAX,
# 324 "/usr/include/bits/confname.h" 3
_SC_ULONG_MAX,
# 326 "/usr/include/bits/confname.h" 3
_SC_USHRT_MAX,
# 329 "/usr/include/bits/confname.h" 3
_SC_NL_ARGMAX,
# 331 "/usr/include/bits/confname.h" 3
_SC_NL_LANGMAX,
# 333 "/usr/include/bits/confname.h" 3
_SC_NL_MSGMAX,
# 335 "/usr/include/bits/confname.h" 3
_SC_NL_NMAX,
# 337 "/usr/include/bits/confname.h" 3
_SC_NL_SETMAX,
# 339 "/usr/include/bits/confname.h" 3
_SC_NL_TEXTMAX,
# 342 "/usr/include/bits/confname.h" 3
_SC_XBS5_ILP32_OFF32,
# 344 "/usr/include/bits/confname.h" 3
_SC_XBS5_ILP32_OFFBIG,
# 346 "/usr/include/bits/confname.h" 3
_SC_XBS5_LP64_OFF64,
# 348 "/usr/include/bits/confname.h" 3
_SC_XBS5_LPBIG_OFFBIG,
# 351 "/usr/include/bits/confname.h" 3
_SC_XOPEN_LEGACY,
# 353 "/usr/include/bits/confname.h" 3
_SC_XOPEN_REALTIME,
# 355 "/usr/include/bits/confname.h" 3
_SC_XOPEN_REALTIME_THREADS,
# 358 "/usr/include/bits/confname.h" 3
_SC_ADVISORY_INFO,
# 360 "/usr/include/bits/confname.h" 3
_SC_BARRIERS,
# 362 "/usr/include/bits/confname.h" 3
_SC_BASE,
# 364 "/usr/include/bits/confname.h" 3
_SC_C_LANG_SUPPORT,
# 366 "/usr/include/bits/confname.h" 3
_SC_C_LANG_SUPPORT_R,
# 368 "/usr/include/bits/confname.h" 3
_SC_CLOCK_SELECTION,
# 370 "/usr/include/bits/confname.h" 3
_SC_CPUTIME,
# 372 "/usr/include/bits/confname.h" 3
_SC_THREAD_CPUTIME,
# 374 "/usr/include/bits/confname.h" 3
_SC_DEVICE_IO,
# 376 "/usr/include/bits/confname.h" 3
_SC_DEVICE_SPECIFIC,
# 378 "/usr/include/bits/confname.h" 3
_SC_DEVICE_SPECIFIC_R,
# 380 "/usr/include/bits/confname.h" 3
_SC_FD_MGMT,
# 382 "/usr/include/bits/confname.h" 3
_SC_FIFO,
# 384 "/usr/include/bits/confname.h" 3
_SC_PIPE,
# 386 "/usr/include/bits/confname.h" 3
_SC_FILE_ATTRIBUTES,
# 388 "/usr/include/bits/confname.h" 3
_SC_FILE_LOCKING,
# 390 "/usr/include/bits/confname.h" 3
_SC_FILE_SYSTEM,
# 392 "/usr/include/bits/confname.h" 3
_SC_MONOTONIC_CLOCK,
# 394 "/usr/include/bits/confname.h" 3
_SC_MULTI_PROCESS,
# 396 "/usr/include/bits/confname.h" 3
_SC_SINGLE_PROCESS,
# 398 "/usr/include/bits/confname.h" 3
_SC_NETWORKING,
# 400 "/usr/include/bits/confname.h" 3
_SC_READER_WRITER_LOCKS,
# 402 "/usr/include/bits/confname.h" 3
_SC_SPIN_LOCKS,
# 404 "/usr/include/bits/confname.h" 3
_SC_REGEXP,
# 406 "/usr/include/bits/confname.h" 3
_SC_REGEX_VERSION,
# 408 "/usr/include/bits/confname.h" 3
_SC_SHELL,
# 410 "/usr/include/bits/confname.h" 3
_SC_SIGNALS,
# 412 "/usr/include/bits/confname.h" 3
_SC_SPAWN,
# 414 "/usr/include/bits/confname.h" 3
_SC_SPORADIC_SERVER,
# 416 "/usr/include/bits/confname.h" 3
_SC_THREAD_SPORADIC_SERVER,
# 418 "/usr/include/bits/confname.h" 3
_SC_SYSTEM_DATABASE,
# 420 "/usr/include/bits/confname.h" 3
_SC_SYSTEM_DATABASE_R,
# 422 "/usr/include/bits/confname.h" 3
_SC_TIMEOUTS,
# 424 "/usr/include/bits/confname.h" 3
_SC_TYPED_MEMORY_OBJECTS,
# 426 "/usr/include/bits/confname.h" 3
_SC_USER_GROUPS,
# 428 "/usr/include/bits/confname.h" 3
_SC_USER_GROUPS_R,
# 430 "/usr/include/bits/confname.h" 3
_SC_2_PBS,
# 432 "/usr/include/bits/confname.h" 3
_SC_2_PBS_ACCOUNTING,
# 434 "/usr/include/bits/confname.h" 3
_SC_2_PBS_LOCATE,
# 436 "/usr/include/bits/confname.h" 3
_SC_2_PBS_MESSAGE,
# 438 "/usr/include/bits/confname.h" 3
_SC_2_PBS_TRACK,
# 440 "/usr/include/bits/confname.h" 3
_SC_SYMLOOP_MAX,
# 442 "/usr/include/bits/confname.h" 3
_SC_STREAMS,
# 444 "/usr/include/bits/confname.h" 3
_SC_2_PBS_CHECKPOINT,
# 447 "/usr/include/bits/confname.h" 3
_SC_V6_ILP32_OFF32,
# 449 "/usr/include/bits/confname.h" 3
_SC_V6_ILP32_OFFBIG,
# 451 "/usr/include/bits/confname.h" 3
_SC_V6_LP64_OFF64,
# 453 "/usr/include/bits/confname.h" 3
_SC_V6_LPBIG_OFFBIG,
# 456 "/usr/include/bits/confname.h" 3
_SC_HOST_NAME_MAX,
# 458 "/usr/include/bits/confname.h" 3
_SC_TRACE,
# 460 "/usr/include/bits/confname.h" 3
_SC_TRACE_EVENT_FILTER,
# 462 "/usr/include/bits/confname.h" 3
_SC_TRACE_INHERIT,
# 464 "/usr/include/bits/confname.h" 3
_SC_TRACE_LOG,
# 467 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_SIZE,
# 469 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_ASSOC,
# 471 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_LINESIZE,
# 473 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_SIZE,
# 475 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_ASSOC,
# 477 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_LINESIZE,
# 479 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_SIZE,
# 481 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_ASSOC,
# 483 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_LINESIZE,
# 485 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_SIZE,
# 487 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_ASSOC,
# 489 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_LINESIZE,
# 491 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_SIZE,
# 493 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_ASSOC,
# 495 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_LINESIZE,
# 499 "/usr/include/bits/confname.h" 3
_SC_IPV6 = 235,
# 501 "/usr/include/bits/confname.h" 3
_SC_RAW_SOCKETS,
# 504 "/usr/include/bits/confname.h" 3
_SC_V7_ILP32_OFF32,
# 506 "/usr/include/bits/confname.h" 3
_SC_V7_ILP32_OFFBIG,
# 508 "/usr/include/bits/confname.h" 3
_SC_V7_LP64_OFF64,
# 510 "/usr/include/bits/confname.h" 3
_SC_V7_LPBIG_OFFBIG,
# 513 "/usr/include/bits/confname.h" 3
_SC_SS_REPL_MAX,
# 516 "/usr/include/bits/confname.h" 3
_SC_TRACE_EVENT_NAME_MAX,
# 518 "/usr/include/bits/confname.h" 3
_SC_TRACE_NAME_MAX,
# 520 "/usr/include/bits/confname.h" 3
_SC_TRACE_SYS_MAX,
# 522 "/usr/include/bits/confname.h" 3
_SC_TRACE_USER_EVENT_MAX,
# 525 "/usr/include/bits/confname.h" 3
_SC_XOPEN_STREAMS,
# 528 "/usr/include/bits/confname.h" 3
_SC_THREAD_ROBUST_PRIO_INHERIT,
# 530 "/usr/include/bits/confname.h" 3
_SC_THREAD_ROBUST_PRIO_PROTECT
# 532 "/usr/include/bits/confname.h" 3
};
# 536 "/usr/include/bits/confname.h" 3
enum {
# 537 "/usr/include/bits/confname.h" 3
_CS_PATH,
# 540 "/usr/include/bits/confname.h" 3
_CS_V6_WIDTH_RESTRICTED_ENVS,
# 544 "/usr/include/bits/confname.h" 3
_CS_GNU_LIBC_VERSION,
# 546 "/usr/include/bits/confname.h" 3
_CS_GNU_LIBPTHREAD_VERSION,
# 549 "/usr/include/bits/confname.h" 3
_CS_V5_WIDTH_RESTRICTED_ENVS,
# 553 "/usr/include/bits/confname.h" 3
_CS_V7_WIDTH_RESTRICTED_ENVS,
# 557 "/usr/include/bits/confname.h" 3
_CS_LFS_CFLAGS = 1000,
# 559 "/usr/include/bits/confname.h" 3
_CS_LFS_LDFLAGS,
# 561 "/usr/include/bits/confname.h" 3
_CS_LFS_LIBS,
# 563 "/usr/include/bits/confname.h" 3
_CS_LFS_LINTFLAGS,
# 565 "/usr/include/bits/confname.h" 3
_CS_LFS64_CFLAGS,
# 567 "/usr/include/bits/confname.h" 3
_CS_LFS64_LDFLAGS,
# 569 "/usr/include/bits/confname.h" 3
_CS_LFS64_LIBS,
# 571 "/usr/include/bits/confname.h" 3
_CS_LFS64_LINTFLAGS,
# 574 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
# 576 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LDFLAGS,
# 578 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LIBS,
# 580 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LINTFLAGS,
# 582 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_CFLAGS,
# 584 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LDFLAGS,
# 586 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LIBS,
# 588 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
# 590 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_CFLAGS,
# 592 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LDFLAGS,
# 594 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LIBS,
# 596 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LINTFLAGS,
# 598 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_CFLAGS,
# 600 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
# 602 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LIBS,
# 604 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
# 607 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_CFLAGS,
# 609 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
# 611 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LIBS,
# 613 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
# 615 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
# 617 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
# 619 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LIBS,
# 621 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
# 623 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_CFLAGS,
# 625 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LDFLAGS,
# 627 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LIBS,
# 629 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
# 631 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
# 633 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
# 635 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
# 637 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
# 640 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_CFLAGS,
# 642 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
# 644 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LIBS,
# 646 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
# 648 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
# 650 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
# 652 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LIBS,
# 654 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
# 656 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_CFLAGS,
# 658 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LDFLAGS,
# 660 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LIBS,
# 662 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
# 664 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
# 666 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
# 668 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
# 670 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
# 672 "/usr/include/bits/confname.h" 3
};
# 607 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 611 "/usr/include/unistd.h" 3
extern "C" long fpathconf(int, int) throw() __attribute__((visibility("default")));
# 614 "/usr/include/unistd.h" 3
extern "C" long sysconf(int) throw() __attribute__((visibility("default")));
# 618 "/usr/include/unistd.h" 3
extern "C" size_t confstr(int, char *, size_t) throw() __attribute__((visibility("default")));
# 623 "/usr/include/unistd.h" 3
extern "C" __pid_t getpid() throw() __attribute__((visibility("default")));
# 626 "/usr/include/unistd.h" 3
extern "C" __pid_t getppid() throw() __attribute__((visibility("default")));
# 631 "/usr/include/unistd.h" 3
extern "C" __pid_t getpgrp() throw() __attribute__((visibility("default")));
# 641 "/usr/include/unistd.h" 3
extern "C" __pid_t __getpgid(__pid_t) throw() __attribute__((visibility("default")));
# 643 "/usr/include/unistd.h" 3
extern "C" __pid_t getpgid(__pid_t) throw() __attribute__((visibility("default")));
# 650 "/usr/include/unistd.h" 3
extern "C" int setpgid(__pid_t, __pid_t) throw() __attribute__((visibility("default")));
# 667 "/usr/include/unistd.h" 3
extern "C" int setpgrp() throw() __attribute__((visibility("default")));
# 684 "/usr/include/unistd.h" 3
extern "C" __pid_t setsid() throw() __attribute__((visibility("default")));
# 688 "/usr/include/unistd.h" 3
extern "C" __pid_t getsid(__pid_t) throw() __attribute__((visibility("default")));
# 692 "/usr/include/unistd.h" 3
extern "C" __uid_t getuid() throw() __attribute__((visibility("default")));
# 695 "/usr/include/unistd.h" 3
extern "C" __uid_t geteuid() throw() __attribute__((visibility("default")));
# 698 "/usr/include/unistd.h" 3
extern "C" __gid_t getgid() throw() __attribute__((visibility("default")));
# 701 "/usr/include/unistd.h" 3
extern "C" __gid_t getegid() throw() __attribute__((visibility("default")));
# 706 "/usr/include/unistd.h" 3
extern "C" int getgroups(int, __gid_t []) throw() __attribute__((visibility("default")));
# 710 "/usr/include/unistd.h" 3
extern "C" int group_member(__gid_t) throw() __attribute__((visibility("default")));
# 717 "/usr/include/unistd.h" 3
extern "C" int setuid(__uid_t) throw() __attribute__((visibility("default")));
# 722 "/usr/include/unistd.h" 3
extern "C" int setreuid(__uid_t, __uid_t) throw() __attribute__((visibility("default")));
# 727 "/usr/include/unistd.h" 3
extern "C" int seteuid(__uid_t) throw() __attribute__((visibility("default")));
# 734 "/usr/include/unistd.h" 3
extern "C" int setgid(__gid_t) throw() __attribute__((visibility("default")));
# 739 "/usr/include/unistd.h" 3
extern "C" int setregid(__gid_t, __gid_t) throw() __attribute__((visibility("default")));
# 744 "/usr/include/unistd.h" 3
extern "C" int setegid(__gid_t) throw() __attribute__((visibility("default")));
# 750 "/usr/include/unistd.h" 3
extern "C" int getresuid(__uid_t *, __uid_t *, __uid_t *) throw() __attribute__((visibility("default")));
# 755 "/usr/include/unistd.h" 3
extern "C" int getresgid(__gid_t *, __gid_t *, __gid_t *) throw() __attribute__((visibility("default")));
# 760 "/usr/include/unistd.h" 3
extern "C" int setresuid(__uid_t, __uid_t, __uid_t) throw() __attribute__((visibility("default")));
# 765 "/usr/include/unistd.h" 3
extern "C" int setresgid(__gid_t, __gid_t, __gid_t) throw() __attribute__((visibility("default")));
# 773 "/usr/include/unistd.h" 3
extern "C" __pid_t fork() throw() __attribute__((visibility("default")));
# 780 "/usr/include/unistd.h" 3
extern "C" __pid_t vfork() throw() __attribute__((visibility("default")));
# 786 "/usr/include/unistd.h" 3
extern "C" char *ttyname(int) throw() __attribute__((visibility("default")));
# 790 "/usr/include/unistd.h" 3
extern "C" int ttyname_r(int, char *, size_t) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 795 "/usr/include/unistd.h" 3
extern "C" int isatty(int) throw() __attribute__((visibility("default")));
# 801 "/usr/include/unistd.h" 3
extern "C" int ttyslot() throw() __attribute__((visibility("default")));
# 806 "/usr/include/unistd.h" 3
extern "C" int link(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 812 "/usr/include/unistd.h" 3
extern "C" int linkat(int, const char *, int, const char *, int) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4))) __attribute__((visibility("default")));
# 819 "/usr/include/unistd.h" 3
extern "C" int symlink(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 825 "/usr/include/unistd.h" 3
extern "C" ssize_t readlink(const char *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 832 "/usr/include/unistd.h" 3
extern "C" int symlinkat(const char *, int, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 836 "/usr/include/unistd.h" 3
extern "C" ssize_t readlinkat(int, const char *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 842 "/usr/include/unistd.h" 3
extern "C" int unlink(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 846 "/usr/include/unistd.h" 3
extern "C" int unlinkat(int, const char *, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 851 "/usr/include/unistd.h" 3
extern "C" int rmdir(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 855 "/usr/include/unistd.h" 3
extern "C" __pid_t tcgetpgrp(int) throw() __attribute__((visibility("default")));
# 858 "/usr/include/unistd.h" 3
extern "C" int tcsetpgrp(int, __pid_t) throw() __attribute__((visibility("default")));
# 865 "/usr/include/unistd.h" 3
extern "C" char *getlogin() __attribute__((visibility("default")));
# 873 "/usr/include/unistd.h" 3
extern "C" int getlogin_r(char *, size_t) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 878 "/usr/include/unistd.h" 3
extern "C" int setlogin(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 59 "/usr/include/getopt.h" 3
extern "C" { extern char *optarg __attribute__((visibility("default"))); }
# 73 "/usr/include/getopt.h" 3
extern "C" { extern int optind __attribute__((visibility("default"))); }
# 78 "/usr/include/getopt.h" 3
extern "C" { extern int opterr __attribute__((visibility("default"))); }
# 82 "/usr/include/getopt.h" 3
extern "C" { extern int optopt __attribute__((visibility("default"))); }
# 152 "/usr/include/getopt.h" 3
extern "C" int getopt(int, char *const *, const char *) throw() __attribute__((visibility("default")));
# 895 "/usr/include/unistd.h" 3
extern "C" int gethostname(char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 902 "/usr/include/unistd.h" 3
extern "C" int sethostname(const char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 907 "/usr/include/unistd.h" 3
extern "C" int sethostid(long) throw() __attribute__((visibility("default")));
# 913 "/usr/include/unistd.h" 3
extern "C" int getdomainname(char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 915 "/usr/include/unistd.h" 3
extern "C" int setdomainname(const char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 922 "/usr/include/unistd.h" 3
extern "C" int vhangup() throw() __attribute__((visibility("default")));
# 925 "/usr/include/unistd.h" 3
extern "C" int revoke(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 933 "/usr/include/unistd.h" 3
extern "C" int profil(unsigned short *, size_t, size_t, unsigned) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 941 "/usr/include/unistd.h" 3
extern "C" int acct(const char *) throw() __attribute__((visibility("default")));
# 945 "/usr/include/unistd.h" 3
extern "C" char *getusershell() throw() __attribute__((visibility("default")));
# 946 "/usr/include/unistd.h" 3
extern "C" void endusershell() throw() __attribute__((visibility("default")));
# 947 "/usr/include/unistd.h" 3
extern "C" void setusershell() throw() __attribute__((visibility("default")));
# 953 "/usr/include/unistd.h" 3
extern "C" int daemon(int, int) throw() __attribute__((visibility("default")));
# 960 "/usr/include/unistd.h" 3
extern "C" int chroot(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 964 "/usr/include/unistd.h" 3
extern "C" char *getpass(const char *) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 973 "/usr/include/unistd.h" 3
extern "C" int fsync(int) __attribute__((visibility("default")));
# 980 "/usr/include/unistd.h" 3
extern "C" long gethostid() __attribute__((visibility("default")));
# 983 "/usr/include/unistd.h" 3
extern "C" void sync() throw() __attribute__((visibility("default")));
# 988 "/usr/include/unistd.h" 3
extern "C" int getpagesize() throw() __attribute__((__const__)) __attribute__((visibility("default")));
# 993 "/usr/include/unistd.h" 3
extern "C" int getdtablesize() throw() __attribute__((visibility("default")));
# 998 "/usr/include/unistd.h" 3
extern "C" int truncate(const char *, __off_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1010 "/usr/include/unistd.h" 3
extern "C" int truncate64(const char *, __off64_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1020 "/usr/include/unistd.h" 3
extern "C" int ftruncate(int, __off_t) throw() __attribute__((visibility("default")));
# 1030 "/usr/include/unistd.h" 3
extern "C" int ftruncate64(int, __off64_t) throw() __attribute__((visibility("default")));
# 1040 "/usr/include/unistd.h" 3
extern "C" int brk(void *) throw() __attribute__((visibility("default")));
# 1046 "/usr/include/unistd.h" 3
extern "C" void *sbrk(intptr_t) throw() __attribute__((visibility("default")));
# 1061 "/usr/include/unistd.h" 3
extern "C" long syscall(long, ...) throw() __attribute__((visibility("default")));
# 1084 "/usr/include/unistd.h" 3
extern "C" int lockf(int, int, __off_t) __attribute__((visibility("default")));
# 1094 "/usr/include/unistd.h" 3
extern "C" int lockf64(int, int, __off64_t) __attribute__((visibility("default")));
# 1115 "/usr/include/unistd.h" 3
extern "C" int fdatasync(int) __attribute__((visibility("default")));
# 1123 "/usr/include/unistd.h" 3
extern "C" char *crypt(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1128 "/usr/include/unistd.h" 3
extern "C" void encrypt(char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1135 "/usr/include/unistd.h" 3
extern "C" void swab(const void *__restrict__, void *__restrict__, ssize_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1144 "/usr/include/unistd.h" 3
extern "C" char *ctermid(char *) throw() __attribute__((visibility("default")));
# 44 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
# 45 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_key_t __gthread_key_t;
# 46 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_once_t __gthread_once_t;
# 47 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_mutex_t;
# 48 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_recursive_mutex_t;
# 49 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef pthread_cond_t __gthread_cond_t;
# 50 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
typedef timespec __gthread_time_t;
# 118 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute__((__weakref__("pthread_once"))) __attribute__((visibility("default")));
# 119 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute__((__weakref__("pthread_getspecific"))) __attribute__((visibility("default")));
# 120 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute__((__weakref__("pthread_setspecific"))) __attribute__((visibility("default")));
# 122 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_create) __gthrw_pthread_create __attribute__((__weakref__("pthread_create"))) __attribute__((visibility("default")));
# 123 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_join) __gthrw_pthread_join __attribute__((__weakref__("pthread_join"))) __attribute__((visibility("default")));
# 124 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute__((__weakref__("pthread_equal"))) __attribute__((visibility("default")));
# 125 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_self) __gthrw_pthread_self __attribute__((__weakref__("pthread_self"))) __attribute__((visibility("default")));
# 126 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute__((__weakref__("pthread_detach"))) __attribute__((visibility("default")));
# 127 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute__((__weakref__("pthread_cancel"))) __attribute__((visibility("default")));
# 128 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(sched_yield) __gthrw_sched_yield __attribute__((__weakref__("sched_yield"))) __attribute__((visibility("default")));
# 130 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__((__weakref__("pthread_mutex_lock"))) __attribute__((visibility("default")));
# 131 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__((__weakref__("pthread_mutex_trylock"))) __attribute__((visibility("default")));
# 134 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__((__weakref__("pthread_mutex_timedlock"))) __attribute__((visibility("default")));
# 137 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__((__weakref__("pthread_mutex_unlock"))) __attribute__((visibility("default")));
# 138 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__((__weakref__("pthread_mutex_init"))) __attribute__((visibility("default")));
# 139 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__((__weakref__("pthread_mutex_destroy"))) __attribute__((visibility("default")));
# 141 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__((__weakref__("pthread_cond_broadcast"))) __attribute__((visibility("default")));
# 142 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__((__weakref__("pthread_cond_signal"))) __attribute__((visibility("default")));
# 143 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__((__weakref__("pthread_cond_wait"))) __attribute__((visibility("default")));
# 144 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__((__weakref__("pthread_cond_timedwait"))) __attribute__((visibility("default")));
# 145 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__((__weakref__("pthread_cond_destroy"))) __attribute__((visibility("default")));
# 148 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute__((__weakref__("pthread_key_create"))) __attribute__((visibility("default")));
# 149 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute__((__weakref__("pthread_key_delete"))) __attribute__((visibility("default")));
# 150 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__((__weakref__("pthread_mutexattr_init"))) __attribute__((visibility("default")));
# 151 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__((__weakref__("pthread_mutexattr_settype"))) __attribute__((visibility("default")));
# 152 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__((__weakref__("pthread_mutexattr_destroy"))) __attribute__((visibility("default")));
# 238 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_active_p()
# 239 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 240 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw_pthread_cancel));
# 242 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_active_ptr != (0);
# 243 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 676 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 677 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__args)
# 678 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 679 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_create(__threadid, __null, __func, __args);
# 680 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 683 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_join(__gthread_t __threadid, void **__value_ptr)
# 684 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 685 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_join(__threadid, __value_ptr);
# 686 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 689 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_detach(__gthread_t __threadid)
# 690 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 691 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_detach(__threadid);
# 692 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 695 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_equal(__gthread_t __t1, __gthread_t __t2)
# 696 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 697 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_equal(__t1, __t2);
# 698 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 701 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) __gthread_t __gthread_self()
# 702 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 703 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_self();
# 704 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 707 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_yield()
# 708 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 709 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_sched_yield();
# 710 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 713 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_once(__gthread_once_t *__once, void (*__func)(void))
# 714 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 715 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 716 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_once(__once, __func); } else {
# 718 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return -1; }
# 719 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 722 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *))
# 723 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 724 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_key_create(__key, __dtor);
# 725 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 728 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_delete(__gthread_key_t __key)
# 729 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 730 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_key_delete(__key);
# 731 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 734 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) void *__gthread_getspecific(__gthread_key_t __key)
# 735 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 736 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_getspecific(__key);
# 737 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 740 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_setspecific(__gthread_key_t __key, const void *__ptr)
# 741 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 742 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_setspecific(__key, __ptr);
# 743 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 746 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_destroy(__gthread_mutex_t *__mutex)
# 747 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 748 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 749 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_destroy(__mutex); } else {
# 751 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 752 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 755 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_lock(__gthread_mutex_t *__mutex)
# 756 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 757 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 758 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_lock(__mutex); } else {
# 760 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 761 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 764 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_trylock(__gthread_mutex_t *__mutex)
# 765 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 766 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 767 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_trylock(__mutex); } else {
# 769 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 770 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 775 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 776 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 777 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 778 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 779 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else {
# 781 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 782 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 787 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_unlock(__gthread_mutex_t *__mutex)
# 788 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 789 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 790 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_unlock(__mutex); } else {
# 792 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 793 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 819 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex)
# 820 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 821 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_lock(__mutex);
# 822 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 825 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex)
# 826 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 827 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_trylock(__mutex);
# 828 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 833 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 834 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 835 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 836 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_timedlock(__mutex, __abs_timeout);
# 837 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 842 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex)
# 843 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 844 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_unlock(__mutex);
# 845 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 848 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_broadcast(__gthread_cond_t *__cond)
# 849 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 850 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_broadcast(__cond);
# 851 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 854 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_signal(__gthread_cond_t *__cond)
# 855 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 856 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_signal(__cond);
# 857 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 860 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
# 861 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 862 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_wait(__cond, __mutex);
# 863 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 866 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 867 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 868 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 869 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout);
# 870 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 873 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 874 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__mutex)
# 875 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 876 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_cond_wait(__cond, __mutex);
# 877 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 880 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_timedwait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 881 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__mutex, const __gthread_time_t *
# 882 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 883 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 884 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthread_cond_timedwait(__cond, __mutex, __abs_timeout);
# 885 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 888 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_destroy(__gthread_cond_t *__cond)
# 889 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
{
# 890 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_destroy(__cond);
# 891 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
}
# 32 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/4.4/ext/atomicity.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val)
# 46 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ return __sync_fetch_and_add_4(__mem, __val); }
# 49 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val)
# 50 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ __sync_fetch_and_add_4(__mem, __val); }
# 62 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val)
# 63 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 64 "/usr/include/c++/4.4/ext/atomicity.h" 3
_Atomic_word __result = (*__mem);
# 65 "/usr/include/c++/4.4/ext/atomicity.h" 3
(*__mem) += __val;
# 66 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __result;
# 67 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 70 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline void __atomic_add_single(_Atomic_word *__mem, int __val)
# 71 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ (*__mem) += __val; }
# 75 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline __attribute__((__unused__)) _Atomic_word __exchange_and_add_dispatch(_Atomic_word *__mem, int __val)
# 76 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 78 "/usr/include/c++/4.4/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 79 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __exchange_and_add(__mem, __val); } else {
# 81 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __exchange_and_add_single(__mem, __val); }
# 85 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 89 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline __attribute__((__unused__)) void __atomic_add_dispatch(_Atomic_word *__mem, int __val)
# 90 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 92 "/usr/include/c++/4.4/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 93 "/usr/include/c++/4.4/ext/atomicity.h" 3
__atomic_add(__mem, __val); } else {
# 95 "/usr/include/c++/4.4/ext/atomicity.h" 3
__atomic_add_single(__mem, __val); }
# 99 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 101 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 46 "/usr/include/c++/4.4/new" 3
namespace std {
# 54 "/usr/include/c++/4.4/new" 3
class __attribute__((visibility("default"))) bad_alloc : public exception {
# 57 "/usr/include/c++/4.4/new" 3
public: bad_alloc() throw() { }
# 61 "/usr/include/c++/4.4/new" 3
virtual ~bad_alloc() throw();
# 64 "/usr/include/c++/4.4/new" 3
virtual const char *what() const throw();
# 65 "/usr/include/c++/4.4/new" 3
};
# 67 "/usr/include/c++/4.4/new" 3
struct __attribute__((visibility("default"))) nothrow_t { };
# 69 "/usr/include/c++/4.4/new" 3
extern const nothrow_t nothrow __attribute__((visibility("default")));
# 73 "/usr/include/c++/4.4/new" 3
typedef void (*new_handler)(void);
# 77 "/usr/include/c++/4.4/new" 3
new_handler set_new_handler(new_handler) throw() __attribute__((visibility("default")));
# 78 "/usr/include/c++/4.4/new" 3
}
# 91 "/usr/include/c++/4.4/new" 3
void *operator new(size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 92 "/usr/include/c++/4.4/new" 3
void *operator new[](size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 93 "/usr/include/c++/4.4/new" 3
void operator delete(void *) throw() __attribute__((visibility("default")));
# 94 "/usr/include/c++/4.4/new" 3
void operator delete[](void *) throw() __attribute__((visibility("default")));
# 95 "/usr/include/c++/4.4/new" 3
void *operator new(size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.4/new" 3
void *operator new[](size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 97 "/usr/include/c++/4.4/new" 3
void operator delete(void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 98 "/usr/include/c++/4.4/new" 3
void operator delete[](void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 101 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void *operator new(size_t, void *__p) throw() { return __p; }
# 102 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void *operator new[](size_t, void *__p) throw() { return __p; }
# 105 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void operator delete(void *, void *) throw() { }
# 106 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void operator delete[](void *, void *) throw() { }
# 37 "/usr/include/c++/4.4/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 39 "/usr/include/c++/4.4/ext/new_allocator.h" 3
using std::size_t;
# 40 "/usr/include/c++/4.4/ext/new_allocator.h" 3
using std::ptrdiff_t;
# 50 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    class new_allocator
    {
    public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef new_allocator < _Tp1 > other; };

      new_allocator ( ) throw ( ) { }

      new_allocator ( const new_allocator & ) throw ( ) { }

      template < typename _Tp1 >
        new_allocator ( const new_allocator < _Tp1 > & ) throw ( ) { }

      ~ new_allocator ( ) throw ( ) { }

      pointer
      address ( reference __x ) const { return & __x; }

      const_pointer
      address ( const_reference __x ) const { return & __x; }



      pointer
      allocate ( size_type __n, const void * = 0 )
      {
 if ( __builtin_expect ( __n > this -> max_size ( ), false ) )
   std :: __throw_bad_alloc ( );

 return static_cast < _Tp * > ( :: operator new ( __n * sizeof ( _Tp ) ) );
      }


      void
      deallocate ( pointer __p, size_type )
      { :: operator delete ( __p ); }

      size_type
      max_size ( ) const throw ( )
      { return size_t ( - 1 ) / sizeof ( _Tp ); }



      void
      construct ( pointer __p, const _Tp & __val )
      { :: new ( ( void * ) __p ) _Tp ( __val ); }

      void
      destroy ( pointer __p ) { __p -> ~ _Tp ( ); }
    };
# 118 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return true; }
# 123 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator != ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return false; }
# 128 "/usr/include/c++/4.4/ext/new_allocator.h" 3
}
# 50 "/usr/include/c++/4.4/bits/allocator.h" 3
namespace std __attribute__((visibility("default"))) {
# 59 "/usr/include/c++/4.4/bits/allocator.h" 3
template< class _Tp> class allocator;
# 64 "/usr/include/c++/4.4/bits/allocator.h" 3
template<> class allocator< void> {
# 67 "/usr/include/c++/4.4/bits/allocator.h" 3
public: typedef size_t size_type;
# 68 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 69 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef void *pointer;
# 70 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef const void *const_pointer;
# 71 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef void value_type;
# 73 "/usr/include/c++/4.4/bits/allocator.h" 3
template< class _Tp1>
# 74 "/usr/include/c++/4.4/bits/allocator.h" 3
struct rebind {
# 75 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 76 "/usr/include/c++/4.4/bits/allocator.h" 3
};
# 85 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    class allocator : public __gnu_cxx :: new_allocator < _Tp >
    {
   public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef allocator < _Tp1 > other; };

      allocator ( ) throw ( ) { }

      allocator ( const allocator & __a ) throw ( )
      : __gnu_cxx :: new_allocator < _Tp > ( __a ) { }

      template < typename _Tp1 >
        allocator ( const allocator < _Tp1 > & ) throw ( ) { }

      ~ allocator ( ) throw ( ) { }


    };
# 114 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator == ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return true; }
# 119 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return true; }
# 124 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator != ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return false; }
# 129 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    inline bool
    operator != ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return false; }
# 138 "/usr/include/c++/4.4/bits/allocator.h" 3
extern template class allocator< char> ;
# 139 "/usr/include/c++/4.4/bits/allocator.h" 3
extern template class allocator< wchar_t> ;
# 146 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_swap
    { static void _S_do_it ( _Alloc &, _Alloc & ) { } };
# 150 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc >
    struct __alloc_swap < _Alloc, false >
    {
      static void
      _S_do_it ( _Alloc & __one, _Alloc & __two )
      {

 if ( __one != __two )
   swap ( __one, __two );
      }
    };
# 163 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_neq
    {
      static bool
      _S_do_it ( const _Alloc &, const _Alloc & )
      { return false; }
    };
# 171 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc >
    struct __alloc_neq < _Alloc, false >
    {
      static bool
      _S_do_it ( const _Alloc & __one, const _Alloc & __two )
      { return __one != __two; }
    };
# 179 "/usr/include/c++/4.4/bits/allocator.h" 3
}
# 32 "/usr/include/c++/4.4/cxxabi-forced.h" 3
namespace __cxxabiv1 {
# 41 "/usr/include/c++/4.4/cxxabi-forced.h" 3
class __attribute__((visibility("default"))) __forced_unwind {
# 43 "/usr/include/c++/4.4/cxxabi-forced.h" 3
virtual ~__forced_unwind() throw();
# 44 "/usr/include/c++/4.4/cxxabi-forced.h" 3
virtual void __pure_dummy() = 0;
# 45 "/usr/include/c++/4.4/cxxabi-forced.h" 3
};
# 46 "/usr/include/c++/4.4/cxxabi-forced.h" 3
}
# 38 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
namespace std __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_write ( basic_ostream < _CharT, _Traits > & __out,
      const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const streamsize __put = __out . rdbuf ( ) -> sputn ( __s, __n );
      if ( __put != __n )
 __out . setstate ( __ios_base :: badbit );
    }
# 53 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_fill ( basic_ostream < _CharT, _Traits > & __out, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const _CharT __c = __out . fill ( );
      for (; __n > 0; -- __n )
 {
   const typename _Traits :: int_type __put = __out . rdbuf ( ) -> sputc ( __c );
   if ( _Traits :: eq_int_type ( __put, _Traits :: eof ( ) ) )
     {
       __out . setstate ( __ios_base :: badbit );
       break;
     }
 }
    }
# 72 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    __ostream_insert ( basic_ostream < _CharT, _Traits > & __out,
       const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      typename __ostream_type :: sentry __cerb ( __out );
      if ( __cerb )
 {
   try
     {
       const streamsize __w = __out . width ( );
       if ( __w > __n )
  {
    const bool __left = ( ( __out . flags ( )
     & __ios_base :: adjustfield )
           == __ios_base :: left );
    if ( ! __left )
      __ostream_fill ( __out, __w - __n );
    if ( __out . good ( ) )
      __ostream_write ( __out, __s, __n );
    if ( __left && __out . good ( ) )
      __ostream_fill ( __out, __w - __n );
  }
       else
  __ostream_write ( __out, __s, __n );
       __out . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( __ios_base :: badbit ); }
 }
      return __out;
    }
# 117 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
extern template basic_ostream< char, char_traits< char> > &__ostream_insert(basic_ostream< char, char_traits< char> > &, const char *, streamsize);
# 120 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &__ostream_insert(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *, streamsize);
# 125 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
}
# 60 "/usr/include/c++/4.4/bits/stl_function.h" 3
namespace std __attribute__((visibility("default"))) {
# 99 "/usr/include/c++/4.4/bits/stl_function.h" 3
template< class _Arg, class _Result>
# 100 "/usr/include/c++/4.4/bits/stl_function.h" 3
struct unary_function {
# 102 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg argument_type;
# 105 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Result result_type;
# 106 "/usr/include/c++/4.4/bits/stl_function.h" 3
};
# 111 "/usr/include/c++/4.4/bits/stl_function.h" 3
template< class _Arg1, class _Arg2, class _Result>
# 112 "/usr/include/c++/4.4/bits/stl_function.h" 3
struct binary_function {
# 114 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg1 first_argument_type;
# 117 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg2 second_argument_type;
# 118 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Result result_type;
# 119 "/usr/include/c++/4.4/bits/stl_function.h" 3
};
# 134 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct plus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x + __y; }
    };
# 143 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct minus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x - __y; }
    };
# 152 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct multiplies : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x * __y; }
    };
# 161 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct divides : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x / __y; }
    };
# 170 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct modulus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x % __y; }
    };
# 179 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct negate : public unary_function < _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x ) const
      { return - __x; }
    };
# 198 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x == __y; }
    };
# 207 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct not_equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x != __y; }
    };
# 216 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct greater : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x > __y; }
    };
# 225 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct less : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x < __y; }
    };
# 234 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct greater_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x >= __y; }
    };
# 243 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct less_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x <= __y; }
    };
# 262 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_and : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x && __y; }
    };
# 271 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_or : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x || __y; }
    };
# 280 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_not : public unary_function < _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x ) const
      { return ! __x; }
    };
# 291 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_and : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x & __y; }
    };
# 299 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_or : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x | __y; }
    };
# 307 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_xor : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x ^ __y; }
    };
# 345 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    class unary_negate
    : public unary_function < typename _Predicate :: argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      unary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: argument_type & __x ) const
      { return ! _M_pred ( __x ); }
    };
# 362 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    inline unary_negate < _Predicate >
    not1 ( const _Predicate & __pred )
    { return unary_negate < _Predicate > ( __pred ); }
# 368 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    class binary_negate
    : public binary_function < typename _Predicate :: first_argument_type,
        typename _Predicate :: second_argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      binary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: first_argument_type & __x,
   const typename _Predicate :: second_argument_type & __y ) const
      { return ! _M_pred ( __x, __y ); }
    };
# 387 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    inline binary_negate < _Predicate >
    not2 ( const _Predicate & __pred )
    { return binary_negate < _Predicate > ( __pred ); }
# 416 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    class pointer_to_unary_function : public unary_function < _Arg, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg );

    public :
      pointer_to_unary_function ( ) { }

      explicit
      pointer_to_unary_function ( _Result ( * __x ) ( _Arg ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg __x ) const
      { return _M_ptr ( __x ); }
    };
# 435 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    inline pointer_to_unary_function < _Arg, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg ) )
    { return pointer_to_unary_function < _Arg, _Result > ( __x ); }
# 441 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg1, typename _Arg2, typename _Result >
    class pointer_to_binary_function
    : public binary_function < _Arg1, _Arg2, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg1, _Arg2 );

    public :
      pointer_to_binary_function ( ) { }

      explicit
      pointer_to_binary_function ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg1 __x, _Arg2 __y ) const
      { return _M_ptr ( __x, __y ); }
    };
# 461 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg1, typename _Arg2, typename _Result >
    inline pointer_to_binary_function < _Arg1, _Arg2, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
    { return pointer_to_binary_function < _Arg1, _Arg2, _Result > ( __x ); }
# 467 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct _Identity : public unary_function < _Tp, _Tp >
    {
      _Tp &
      operator ( ) ( _Tp & __x ) const
      { return __x; }

      const _Tp &
      operator ( ) ( const _Tp & __x ) const
      { return __x; }
    };
# 479 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Pair >
    struct _Select1st : public unary_function < _Pair,
           typename _Pair :: first_type >
    {
      typename _Pair :: first_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . first; }

      const typename _Pair :: first_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . first; }
    };
# 492 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Pair >
    struct _Select2nd : public unary_function < _Pair,
           typename _Pair :: second_type >
    {
      typename _Pair :: second_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . second; }

      const typename _Pair :: second_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . second; }
    };
# 523 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_t : public unary_function < _Tp *, _Ret >
    {
    public :
      explicit
      mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
    };
# 541 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class const_mem_fun_t : public unary_function < const _Tp *, _Ret >
    {
    public :
      explicit
      const_mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 559 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
  };
# 577 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class const_mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      const_mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 595 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_t : public binary_function < _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 613 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_t : public binary_function < const _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 631 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 649 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 667 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_t < _Ret, _Tp > ( __f ); }
# 672 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline const_mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_t < _Ret, _Tp > ( __f ); }
# 677 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 682 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline const_mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 687 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 692 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 697 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 702 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 709 "/usr/include/c++/4.4/bits/stl_function.h" 3
}
# 60 "/usr/include/c++/4.4/backward/binders.h" 3
namespace std __attribute__((visibility("default"))) {
# 96 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation >
    class binder1st
    : public unary_function < typename _Operation :: second_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: first_argument_type value;

    public :
      binder1st ( const _Operation & __x,
  const typename _Operation :: first_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }
    };
# 122 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation, typename _Tp >
    inline binder1st < _Operation >
    bind1st ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: first_argument_type _Arg1_type;
      return binder1st < _Operation > ( __fn, _Arg1_type ( __x ) );
    }
# 131 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation >
    class binder2nd
    : public unary_function < typename _Operation :: first_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: second_argument_type value;

    public :
      binder2nd ( const _Operation & __x,
  const typename _Operation :: second_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }
    };
# 157 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation, typename _Tp >
    inline binder2nd < _Operation >
    bind2nd ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: second_argument_type _Arg2_type;
      return binder2nd < _Operation > ( __fn, _Arg2_type ( __x ) );
    }
# 166 "/usr/include/c++/4.4/backward/binders.h" 3
}
# 45 "/usr/include/c++/4.4/bits/basic_string.h" 3
namespace std __attribute__((visibility("default"))) {
# 103 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
      typedef typename _Alloc :: template rebind < _CharT > :: other _CharT_alloc_type;


    public :
      typedef _Traits traits_type;
      typedef typename _Traits :: char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type :: size_type size_type;
      typedef typename _CharT_alloc_type :: difference_type difference_type;
      typedef typename _CharT_alloc_type :: reference reference;
      typedef typename _CharT_alloc_type :: const_reference const_reference;
      typedef typename _CharT_alloc_type :: pointer pointer;
      typedef typename _CharT_alloc_type :: const_pointer const_pointer;
      typedef __gnu_cxx :: __normal_iterator < pointer, basic_string > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, basic_string >
                                                            const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;

    private :
# 140 "/usr/include/c++/4.4/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc :: template rebind < char > :: other _Raw_bytes_alloc;
# 165 "/usr/include/c++/4.4/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage [ ];

        static _Rep &
        _S_empty_rep ( )
        {



   void * __p = reinterpret_cast < void * > ( & _S_empty_rep_storage );
   return * reinterpret_cast < _Rep * > ( __p );
 }

        bool
 _M_is_leaked ( ) const
        { return this -> _M_refcount < 0; }

        bool
 _M_is_shared ( ) const
        { return this -> _M_refcount > 0; }

        void
 _M_set_leaked ( )
        { this -> _M_refcount = - 1; }

        void
 _M_set_sharable ( )
        { this -> _M_refcount = 0; }

 void
 _M_set_length_and_sharable ( size_type __n )
 {
   this -> _M_set_sharable ( );
   this -> _M_length = __n;
   traits_type :: assign ( this -> _M_refdata ( ) [ __n ], _S_terminal );


 }

 _CharT *
 _M_refdata ( ) throw ( )
 { return reinterpret_cast < _CharT * > ( this + 1 ); }

 _CharT *
 _M_grab ( const _Alloc & __alloc1, const _Alloc & __alloc2 )
 {
   return ( ! _M_is_leaked ( ) && __alloc1 == __alloc2 )
           ? _M_refcopy ( ) : _M_clone ( __alloc1 );
 }


 static _Rep *
 _S_create ( size_type, size_type, const _Alloc & );

 void
 _M_dispose ( const _Alloc & __a )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     if ( __gnu_cxx :: __exchange_and_add_dispatch ( & this -> _M_refcount,
             - 1 ) <= 0 )
       _M_destroy ( __a );
 }

 void
 _M_destroy ( const _Alloc & ) throw ( );

 _CharT *
 _M_refcopy ( ) throw ( )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

            __gnu_cxx :: __atomic_add_dispatch ( & this -> _M_refcount, 1 );
   return _M_refdata ( );
 }

 _CharT *
 _M_clone ( const _Alloc &, size_type __res = 0 );
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider ( _CharT * __dat, const _Alloc & __a )
 : _Alloc ( __a ), _M_p ( __dat ) { }

 _CharT * _M_p;
      };

    public :




      static const size_type npos = static_cast < size_type > ( - 1 );

    private :

      mutable _Alloc_hider _M_dataplus;

      _CharT *
      _M_data ( ) const
      { return _M_dataplus . _M_p; }

      _CharT *
      _M_data ( _CharT * __p )
      { return ( _M_dataplus . _M_p = __p ); }

      _Rep *
      _M_rep ( ) const
      { return & ( ( reinterpret_cast < _Rep * > ( _M_data ( ) ) ) [ - 1 ] ); }



      iterator
      _M_ibegin ( ) const
      { return iterator ( _M_data ( ) ); }

      iterator
      _M_iend ( ) const
      { return iterator ( _M_data ( ) + this -> size ( ) ); }

      void
      _M_leak ( )
      {
 if ( ! _M_rep ( ) -> _M_is_leaked ( ) )
   _M_leak_hard ( );
      }

      size_type
      _M_check ( size_type __pos, const char * __s ) const
      {
 if ( __pos > this -> size ( ) )
   __throw_out_of_range ( ( __s ) );
 return __pos;
      }

      void
      _M_check_length ( size_type __n1, size_type __n2, const char * __s ) const
      {
 if ( this -> max_size ( ) - ( this -> size ( ) - __n1 ) < __n2 )
   __throw_length_error ( ( __s ) );
      }


      size_type
      _M_limit ( size_type __pos, size_type __off ) const
      {
 const bool __testoff = __off < this -> size ( ) - __pos;
 return __testoff ? __off : this -> size ( ) - __pos;
      }


      bool
      _M_disjunct ( const _CharT * __s ) const
      {
 return ( less < const _CharT * > ( ) ( __s, _M_data ( ) )
  || less < const _CharT * > ( ) ( _M_data ( ) + this -> size ( ), __s ) );
      }



      static void
      _M_copy ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: copy ( __d, __s, __n );
      }

      static void
      _M_move ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: move ( __d, __s, __n );
      }

      static void
      _M_assign ( _CharT * __d, size_type __n, _CharT __c )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, __c );
 else
   traits_type :: assign ( __d, __n, __c );
      }



      template < class _Iterator >
        static void
        _S_copy_chars ( _CharT * __p, _Iterator __k1, _Iterator __k2 )
        {
   for (; __k1 != __k2; ++ __k1, ++ __p )
     traits_type :: assign ( * __p, * __k1 );
 }

      static void
      _S_copy_chars ( _CharT * __p, iterator __k1, iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, const_iterator __k1, const_iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, _CharT * __k1, _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static void
      _S_copy_chars ( _CharT * __p, const _CharT * __k1, const _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static int
      _S_compare ( size_type __n1, size_type __n2 )
      {
 const difference_type __d = difference_type ( __n1 - __n2 );

 if ( __d > __gnu_cxx :: __numeric_traits < int > :: __max )
   return __gnu_cxx :: __numeric_traits < int > :: __max;
 else if ( __d < __gnu_cxx :: __numeric_traits < int > :: __min )
   return __gnu_cxx :: __numeric_traits < int > :: __min;
 else
   return int ( __d );
      }

      void
      _M_mutate ( size_type __pos, size_type __len1, size_type __len2 );

      void
      _M_leak_hard ( );

      static _Rep &
      _S_empty_rep ( )
      { return _Rep :: _S_empty_rep ( ); }

    public :







      inline
      basic_string ( );




      explicit
      basic_string ( const _Alloc & __a );






      basic_string ( const basic_string & __str );






      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n = npos );







      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n, const _Alloc & __a );
# 459 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string ( const _CharT * __s, size_type __n,
     const _Alloc & __a = _Alloc ( ) );





      basic_string ( const _CharT * __s, const _Alloc & __a = _Alloc ( ) );






      basic_string ( size_type __n, _CharT __c, const _Alloc & __a = _Alloc ( ) );







      template < class _InputIterator >
        basic_string ( _InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc ( ) );




      ~ basic_string ( )
      { _M_rep ( ) -> _M_dispose ( this -> get_allocator ( ) ); }





      basic_string &
      operator = ( const basic_string & __str )
      { return this -> assign ( __str ); }





      basic_string &
      operator = ( const _CharT * __s )
      { return this -> assign ( __s ); }
# 514 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      operator = ( _CharT __c )
      {
 this -> assign ( 1, __c );
 return * this;
      }






      iterator
      begin ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) );
      }





      const_iterator
      begin ( ) const
      { return const_iterator ( _M_data ( ) ); }





      iterator
      end ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) + this -> size ( ) );
      }





      const_iterator
      end ( ) const
      { return const_iterator ( _M_data ( ) + this -> size ( ) ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( this -> end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( this -> end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( this -> begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( this -> begin ( ) ); }

    public :



      size_type
      size ( ) const
      { return _M_rep ( ) -> _M_length; }



      size_type
      length ( ) const
      { return _M_rep ( ) -> _M_length; }


      size_type
      max_size ( ) const
      { return _Rep :: _S_max_size; }
# 625 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize ( size_type __n, _CharT __c );
# 638 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize ( size_type __n )
      { this -> resize ( __n, _CharT ( ) ); }





      size_type
      capacity ( ) const
      { return _M_rep ( ) -> _M_capacity; }
# 667 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      reserve ( size_type __res_arg = 0 );




      void
      clear ( )
      { _M_mutate ( 0, this -> size ( ), 0 ); }




      bool
      empty ( ) const
      { return this -> size ( ) == 0; }
# 695 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      operator [ ] ( size_type __pos ) const
      {
 ;
 return _M_data ( ) [ __pos ];
      }
# 712 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      operator [ ] ( size_type __pos )
      {

 ;

 ;
 _M_leak ( );
 return _M_data ( ) [ __pos ];
      }
# 733 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      at ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 return _M_data ( ) [ __n ];
      }
# 752 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      at ( size_type __n )
      {
 if ( __n >= size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 _M_leak ( );
 return _M_data ( ) [ __n ];
      }







      basic_string &
      operator += ( const basic_string & __str )
      { return this -> append ( __str ); }






      basic_string &
      operator += ( const _CharT * __s )
      { return this -> append ( __s ); }






      basic_string &
      operator += ( _CharT __c )
      {
 this -> push_back ( __c );
 return * this;
      }






      basic_string &
      append ( const basic_string & __str );
# 812 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      append ( const basic_string & __str, size_type __pos, size_type __n );







      basic_string &
      append ( const _CharT * __s, size_type __n );






      basic_string &
      append ( const _CharT * __s )
      {
 ;
 return this -> append ( __s, traits_type :: length ( __s ) );
      }
# 844 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      append ( size_type __n, _CharT __c );
# 855 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        append ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_iend ( ), _M_iend ( ), __first, __last ); }





      void
      push_back ( _CharT __c )
      {
 const size_type __len = 1 + this -> size ( );
 if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
   this -> reserve ( __len );
 traits_type :: assign ( _M_data ( ) [ this -> size ( ) ], __c );
 _M_rep ( ) -> _M_set_length_and_sharable ( __len );
      }






      basic_string &
      assign ( const basic_string & __str );
# 894 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const basic_string & __str, size_type __pos, size_type __n )
      { return this -> assign ( __str . _M_data ( )
       + __str . _M_check ( __pos, "basic_string::assign" ),
       __str . _M_limit ( __pos, __n ) ); }
# 910 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s, size_type __n );
# 922 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s )
      {
 ;
 return this -> assign ( __s, traits_type :: length ( __s ) );
      }
# 938 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( size_type __n, _CharT __c )
      { return _M_replace_aux ( size_type ( 0 ), this -> size ( ), __n, __c ); }
# 950 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        assign ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_ibegin ( ), _M_iend ( ), __first, __last ); }
# 967 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      insert ( iterator __p, size_type __n, _CharT __c )
      { this -> replace ( __p, __p, __n, __c ); }
# 982 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        void
        insert ( iterator __p, _InputIterator __beg, _InputIterator __end )
        { this -> replace ( __p, __p, __beg, __end ); }
# 998 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str )
      { return this -> insert ( __pos1, __str, size_type ( 0 ), __str . size ( ) ); }
# 1020 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str,
      size_type __pos2, size_type __n )
      { return this -> insert ( __pos1, __str . _M_data ( )
       + __str . _M_check ( __pos2, "basic_string::insert" ),
       __str . _M_limit ( __pos2, __n ) ); }
# 1043 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s, size_type __n );
# 1061 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s )
      {
 ;
 return this -> insert ( __pos, __s, traits_type :: length ( __s ) );
      }
# 1084 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, size_type __n, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::insert" ),
         size_type ( 0 ), __n, __c ); }
# 1101 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      insert ( iterator __p, _CharT __c )
      {
 ;
 const size_type __pos = __p - _M_ibegin ( );
 _M_replace_aux ( __pos, size_type ( 0 ), size_type ( 1 ), __c );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1125 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      erase ( size_type __pos = 0, size_type __n = npos )
      {
 _M_mutate ( _M_check ( __pos, "basic_string::erase" ),
    _M_limit ( __pos, __n ), size_type ( 0 ) );
 return * this;
      }
# 1141 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase ( iterator __position )
      {
 ;

 const size_type __pos = __position - _M_ibegin ( );
 _M_mutate ( __pos, size_type ( 1 ), size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1161 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase ( iterator __first, iterator __last )
      {
 ;

        const size_type __pos = __first - _M_ibegin ( );
 _M_mutate ( __pos, __last - __first, size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1188 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n, const basic_string & __str )
      { return this -> replace ( __pos, __n, __str . _M_data ( ), __str . size ( ) ); }
# 1210 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 )
      { return this -> replace ( __pos1, __n1, __str . _M_data ( )
        + __str . _M_check ( __pos2, "basic_string::replace" ),
        __str . _M_limit ( __pos2, __n2 ) ); }
# 1234 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 );
# 1253 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s )
      {
 ;
 return this -> replace ( __pos, __n1, __s, traits_type :: length ( __s ) );
      }
# 1276 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, size_type __n2, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::replace" ),
         _M_limit ( __pos, __n1 ), __n2, __c ); }
# 1294 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const basic_string & __str )
      { return this -> replace ( __i1, __i2, __str . _M_data ( ), __str . size ( ) ); }
# 1312 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s, size_type __n )
      {
 ;

 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1, __s, __n );
      }
# 1333 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s )
      {
 ;
 return this -> replace ( __i1, __i2, __s, traits_type :: length ( __s ) );
      }
# 1354 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, size_type __n, _CharT __c )
      {
 ;

 return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __c );
      }
# 1376 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        replace ( iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2 )
        {
   ;

   ;
   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   return _M_replace_dispatch ( __i1, __i2, __k1, __k2, _Integral ( ) );
 }



      basic_string &
      replace ( iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const _CharT * __k1, const _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, iterator __k1, iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

    private :
      template < class _Integer >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type )
        { return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __val ); }

      template < class _InputIterator >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type );

      basic_string &
      _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c );

      basic_string &
      _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
        size_type __n2 );



      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __false_type )
 {
          typedef typename iterator_traits < _InIterator > :: iterator_category _Tag;
          return _S_construct ( __beg, __end, __a, _Tag ( ) );
 }



      template < class _Integer >
        static _CharT *
        _S_construct_aux ( _Integer __beg, _Integer __end,
    const _Alloc & __a, __true_type )
        { return _S_construct ( static_cast < size_type > ( __beg ), __end, __a ); }

      template < class _InIterator >
        static _CharT *
        _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a )
 {
   typedef typename std :: __is_integer < _InIterator > :: __type _Integral;
   return _S_construct_aux ( __beg, __end, __a, _Integral ( ) );
        }


      template < class _InIterator >
        static _CharT *
         _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
        input_iterator_tag );



      template < class _FwdIterator >
        static _CharT *
        _S_construct ( _FwdIterator __beg, _FwdIterator __end, const _Alloc & __a,
       forward_iterator_tag );

      static _CharT *
      _S_construct ( size_type __req, _CharT __c, const _Alloc & __a );

    public :
# 1508 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      copy ( _CharT * __s, size_type __n, size_type __pos = 0 ) const;
# 1518 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      swap ( basic_string & __s );
# 1528 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const _CharT *
      c_str ( ) const
      { return _M_data ( ); }







      const _CharT *
      data ( ) const
      { return _M_data ( ); }




      allocator_type
      get_allocator ( ) const
      { return _M_dataplus; }
# 1560 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1573 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find ( __str . data ( ), __pos, __str . size ( ) ); }
# 1587 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1604 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( _CharT __c, size_type __pos = 0 ) const;
# 1617 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> rfind ( __str . data ( ), __pos, __str . size ( ) ); }
# 1632 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1645 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> rfind ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1662 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( _CharT __c, size_type __pos = npos ) const;
# 1675 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1690 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1703 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1722 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( _CharT __c, size_type __pos = 0 ) const
      { return this -> find ( __c, __pos ); }
# 1736 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1751 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1764 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1783 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( _CharT __c, size_type __pos = npos ) const
      { return this -> rfind ( __c, __pos ); }
# 1797 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1812 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos,
   size_type __n ) const;
# 1826 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1843 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( _CharT __c, size_type __pos = 0 ) const;
# 1856 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1872 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos,
         size_type __n ) const;
# 1885 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1902 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( _CharT __c, size_type __pos = npos ) const;
# 1917 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string
      substr ( size_type __pos = 0, size_type __n = npos ) const
      { return basic_string ( * this,
       _M_check ( __pos, "basic_string::substr" ), __n ); }
# 1935 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( const basic_string & __str ) const
      {
 const size_type __size = this -> size ( );
 const size_type __osize = __str . size ( );
 const size_type __len = std :: min ( __size, __osize );

 int __r = traits_type :: compare ( _M_data ( ), __str . data ( ), __len );
 if ( ! __r )
   __r = _S_compare ( __size, __osize );
 return __r;
      }
# 1965 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n, const basic_string & __str ) const;
# 1989 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 ) const;
# 2007 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( const _CharT * __s ) const;
# 2030 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s ) const;
# 2055 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 ) const;
  };
# 2146 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( )

    : _M_dataplus ( _S_empty_rep ( ) . _M_refdata ( ), _Alloc ( ) ) { }
# 2162 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2178 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2189 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2199 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
      const _CharT * __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2215 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str ( __lhs );
      __str . append ( __size_type ( 1 ), __rhs );
      return __str;
    }
# 2233 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2239 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT >
    inline
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value, bool > :: __type
    operator == ( const basic_string < _CharT > & __lhs,
        const basic_string < _CharT > & __rhs )
    { return ( __lhs . size ( ) == __rhs . size ( )
       && ! std :: char_traits < _CharT > :: compare ( __lhs . data ( ), __rhs . data ( ),
          __lhs . size ( ) ) ); }
# 2254 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) == 0; }
# 2266 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2279 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2291 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2303 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return ! ( __lhs == __rhs ); }
# 2316 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2328 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2340 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) > 0; }
# 2353 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2365 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2377 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) < 0; }
# 2390 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2402 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2414 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) >= 0; }
# 2427 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2439 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2451 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const _CharT * __lhs,
      const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) <= 0; }
# 2464 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline void
    swap ( basic_string < _CharT, _Traits, _Alloc > & __lhs,
  basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { __lhs . swap ( __rhs ); }
# 2481 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is,
        basic_string < _CharT, _Traits, _Alloc > & __str );
# 2488 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 2499 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os,
        const basic_string < _CharT, _Traits, _Alloc > & __str )
    {


      return __ostream_insert ( __os, __str . data ( ), __str . size ( ) );
    }
# 2522 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim );
# 2539 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str )
    { return getline ( __is, __str, __is . widen ( '\n' ) ); }
# 2547 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 2553 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 2557 "/usr/include/c++/4.4/bits/basic_string.h" 3
}
# 46 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 48 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 51 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = ((((npos - sizeof(_Rep_base)) / sizeof(_CharT)) - 1) / 4);
# 53 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const _CharT
# 56 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT());
# 58 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 60 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::npos;
# 64 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 66 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[];
# 74 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     input_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 _CharT __buf [ 128 ];
 size_type __len = 0;
 while ( __beg != __end && __len < sizeof ( __buf ) / sizeof ( _CharT ) )
   {
     __buf [ __len ++ ] = * __beg;
     ++ __beg;
   }
 _Rep * __r = _Rep :: _S_create ( __len, size_type ( 0 ), __a );
 _M_copy ( __r -> _M_refdata ( ), __buf, __len );
 try
   {
     while ( __beg != __end )
       {
  if ( __len == __r -> _M_capacity )
    {

      _Rep * __another = _Rep :: _S_create ( __len + 1, __len, __a );
      _M_copy ( __another -> _M_refdata ( ), __r -> _M_refdata ( ), __len );
      __r -> _M_destroy ( __a );
      __r = __another;
    }
  __r -> _M_refdata ( ) [ __len ++ ] = * __beg;
  ++ __beg;
       }
   }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __len );
 return __r -> _M_refdata ( );
      }
# 120 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     forward_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 if ( __builtin_expect ( __gnu_cxx :: __is_null_pointer ( __beg )
        && __beg != __end, 0 ) )
   __throw_logic_error ( ( "basic_string::_S_construct NULL not valid" ) );

 const size_type __dnew = static_cast < size_type > ( std :: distance ( __beg,
              __end ) );

 _Rep * __r = _Rep :: _S_create ( __dnew, size_type ( 0 ), __a );
 try
   { _S_copy_chars ( __r -> _M_refdata ( ), __beg, __end ); }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __dnew );
 return __r -> _M_refdata ( );
      }
# 151 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > ::
    _S_construct ( size_type __n, _CharT __c, const _Alloc & __a )
    {

      if ( __n == 0 && __a == _Alloc ( ) )
 return _S_empty_rep ( ) . _M_refdata ( );


      _Rep * __r = _Rep :: _S_create ( __n, size_type ( 0 ), __a );
      if ( __n )
 _M_assign ( __r -> _M_refdata ( ), __n, __c );

      __r -> _M_set_length_and_sharable ( __n );
      return __r -> _M_refdata ( );
    }
# 169 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str )
    : _M_dataplus ( __str . _M_rep ( ) -> _M_grab ( _Alloc ( __str . get_allocator ( ) ),
       __str . get_allocator ( ) ),
    __str . get_allocator ( ) )
    { }
# 177 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _Alloc & __a )
    : _M_dataplus ( _S_construct ( size_type ( ), _CharT ( ), __a ), __a )
    { }
# 183 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos, size_type __n )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, _Alloc ( ) ), _Alloc ( ) )
    { }
# 193 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos,
   size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, __a ), __a )
    { }
# 205 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s + __n, __a ), __a )
    { }
# 212 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s ? __s + traits_type :: length ( __s ) :
          __s + npos, __a ), __a )
    { }
# 219 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( size_type __n, _CharT __c, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __n, __c, __a ), __a )
    { }
# 226 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( _InputIterator __beg, _InputIterator __end, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __beg, __end, __a ), __a )
    { }
# 241 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const basic_string & __str )
    {
      if ( _M_rep ( ) != __str . _M_rep ( ) )
 {

   const allocator_type __a = this -> get_allocator ( );
   _CharT * __tmp = __str . _M_rep ( ) -> _M_grab ( __a, __str . get_allocator ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
 }
      return * this;
    }
# 257 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const _CharT * __s, size_type __n )
    {
      ;
      _M_check_length ( this -> size ( ), __n, "basic_string::assign" );
      if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
 return _M_replace_safe ( size_type ( 0 ), this -> size ( ), __s, __n );
      else
 {

   const size_type __pos = __s - _M_data ( );
   if ( __pos >= __n )
     _M_copy ( _M_data ( ), __s, __n );
   else if ( __pos )
     _M_move ( _M_data ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __n );
   return * this;
 }
     }
# 279 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( size_type __n, _CharT __c )
    {
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_assign ( _M_data ( ) + this -> size ( ), __n, __c );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 296 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const _CharT * __s, size_type __n )
    {
      ;
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     {
       if ( _M_disjunct ( __s ) )
  this -> reserve ( __len );
       else
  {
    const size_type __off = __s - _M_data ( );
    this -> reserve ( __len );
    __s = _M_data ( ) + __off;
  }
     }
   _M_copy ( _M_data ( ) + this -> size ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 323 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str )
    {
      const size_type __size = __str . size ( );
      if ( __size )
 {
   const size_type __len = __size + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ), __size );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 340 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str, size_type __pos, size_type __n )
    {
      __str . _M_check ( __pos, "basic_string::append" );
      __n = __str . _M_limit ( __pos, __n );
      if ( __n )
 {
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ) + __pos, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 358 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     insert ( size_type __pos, const _CharT * __s, size_type __n )
     {
       ;
       _M_check ( __pos, "basic_string::insert" );
       _M_check_length ( size_type ( 0 ), __n, "basic_string::insert" );
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, size_type ( 0 ), __s, __n );
       else
         {

           const size_type __off = __s - _M_data ( );
           _M_mutate ( __pos, 0, __n );
           __s = _M_data ( ) + __off;
           _CharT * __p = _M_data ( ) + __pos;
           if ( __s + __n <= __p )
             _M_copy ( __p, __s, __n );
           else if ( __s >= __p )
             _M_copy ( __p, __s + __n, __n );
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy ( __p, __s, __nleft );
               _M_copy ( __p + __nleft, __p + __n, __n - __nleft );
             }
           return * this;
         }
     }
# 389 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     replace ( size_type __pos, size_type __n1, const _CharT * __s,
      size_type __n2 )
     {
       ;
       _M_check ( __pos, "basic_string::replace" );
       __n1 = _M_limit ( __pos, __n1 );
       _M_check_length ( __n1, __n2, "basic_string::replace" );
       bool __left;
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, __n1, __s, __n2 );
       else if ( ( __left = __s + __n2 <= _M_data ( ) + __pos )
  || _M_data ( ) + __pos + __n1 <= __s )
  {

    size_type __off = __s - _M_data ( );
    __left ? __off : ( __off += __n2 - __n1 );
    _M_mutate ( __pos, __n1, __n2 );
    _M_copy ( _M_data ( ) + __pos, _M_data ( ) + __off, __n2 );
    return * this;
  }
       else
  {

    const basic_string __tmp ( __s, __n2 );
    return _M_replace_safe ( __pos, __n1, __tmp . _M_data ( ), __n2 );
  }
     }
# 420 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_destroy ( const _Alloc & __a ) throw ( )
    {
      const size_type __size = sizeof ( _Rep_base ) +
                        ( this -> _M_capacity + 1 ) * sizeof ( _CharT );
      _Raw_bytes_alloc ( __a ) . deallocate ( reinterpret_cast < char * > ( this ), __size );
    }
# 430 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_leak_hard ( )
    {

      if ( _M_rep ( ) == & _S_empty_rep ( ) )
 return;

      if ( _M_rep ( ) -> _M_is_shared ( ) )
 _M_mutate ( 0, 0, 0 );
      _M_rep ( ) -> _M_set_leaked ( );
    }
# 444 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_mutate ( size_type __pos, size_type __len1, size_type __len2 )
    {
      const size_type __old_size = this -> size ( );
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if ( __new_size > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
 {

   const allocator_type __a = get_allocator ( );
   _Rep * __r = _Rep :: _S_create ( __new_size, this -> capacity ( ), __a );

   if ( __pos )
     _M_copy ( __r -> _M_refdata ( ), _M_data ( ), __pos );
   if ( __how_much )
     _M_copy ( __r -> _M_refdata ( ) + __pos + __len2,
      _M_data ( ) + __pos + __len1, __how_much );

   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __r -> _M_refdata ( ) );
 }
      else if ( __how_much && __len1 != __len2 )
 {

   _M_move ( _M_data ( ) + __pos + __len2,
    _M_data ( ) + __pos + __len1, __how_much );
 }
      _M_rep ( ) -> _M_set_length_and_sharable ( __new_size );
    }
# 477 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    reserve ( size_type __res )
    {
      if ( __res != this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
        {

   if ( __res < this -> size ( ) )
     __res = this -> size ( );
   const allocator_type __a = get_allocator ( );
   _CharT * __tmp = _M_rep ( ) -> _M_clone ( __a, __res - this -> size ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
        }
    }
# 494 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    swap ( basic_string & __s )
    {
      if ( _M_rep ( ) -> _M_is_leaked ( ) )
 _M_rep ( ) -> _M_set_sharable ( );
      if ( __s . _M_rep ( ) -> _M_is_leaked ( ) )
 __s . _M_rep ( ) -> _M_set_sharable ( );
      if ( this -> get_allocator ( ) == __s . get_allocator ( ) )
 {
   _CharT * __tmp = _M_data ( );
   _M_data ( __s . _M_data ( ) );
   __s . _M_data ( __tmp );
 }

      else
 {
   const basic_string __tmp1 ( _M_ibegin ( ), _M_iend ( ),
        __s . get_allocator ( ) );
   const basic_string __tmp2 ( __s . _M_ibegin ( ), __s . _M_iend ( ),
        this -> get_allocator ( ) );
   * this = __tmp2;
   __s = __tmp1;
 }
    }
# 521 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: _Rep *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _S_create ( size_type __capacity, size_type __old_capacity,
       const _Alloc & __alloc )
    {


      if ( __capacity > _S_max_size )
 __throw_length_error ( ( "basic_string::_S_create" ) );
# 555 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof ( void * );







      if ( __capacity > __old_capacity && __capacity < 2 * __old_capacity )
 __capacity = 2 * __old_capacity;




      size_type __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );

      const size_type __adj_size = __size + __malloc_header_size;
      if ( __adj_size > __pagesize && __capacity > __old_capacity )
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof ( _CharT );

   if ( __capacity > _S_max_size )
     __capacity = _S_max_size;
   __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );
 }



      void * __place = _Raw_bytes_alloc ( __alloc ) . allocate ( __size );
      _Rep * __p = new ( __place ) _Rep;
      __p -> _M_capacity = __capacity;







      __p -> _M_set_sharable ( );
      return __p;
    }
# 599 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_clone ( const _Alloc & __alloc, size_type __res )
    {

      const size_type __requested_cap = this -> _M_length + __res;
      _Rep * __r = _Rep :: _S_create ( __requested_cap, this -> _M_capacity,
      __alloc );
      if ( this -> _M_length )
 _M_copy ( __r -> _M_refdata ( ), _M_refdata ( ), this -> _M_length );

      __r -> _M_set_length_and_sharable ( this -> _M_length );
      return __r -> _M_refdata ( );
    }
# 615 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    resize ( size_type __n, _CharT __c )
    {
      const size_type __size = this -> size ( );
      _M_check_length ( __size, __n, "basic_string::resize" );
      if ( __size < __n )
 this -> append ( __n - __size, __c );
      else if ( __n < __size )
 this -> erase ( __n );

    }
# 629 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
      basic_string < _CharT, _Traits, _Alloc > &
      basic_string < _CharT, _Traits, _Alloc > ::
      _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type )
      {
 const basic_string __s ( __k1, __k2 );
 const size_type __n1 = __i2 - __i1;
 _M_check_length ( __n1, __s . size ( ), "basic_string::_M_replace_dispatch" );
 return _M_replace_safe ( __i1 - _M_ibegin ( ), __n1, __s . _M_data ( ),
          __s . size ( ) );
      }
# 643 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c )
    {
      _M_check_length ( __n1, __n2, "basic_string::_M_replace_aux" );
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_assign ( _M_data ( ) + __pos1, __n2, __c );
      return * this;
    }
# 656 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
      size_type __n2 )
    {
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_copy ( _M_data ( ) + __pos1, __s, __n2 );
      return * this;
    }
# 668 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      ;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      const __size_type __len = _Traits :: length ( __lhs );
      __string_type __str;
      __str . reserve ( __len + __rhs . size ( ) );
      __str . append ( __lhs, __len );
      __str . append ( __rhs );
      return __str;
    }
# 684 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs . size ( );
      __str . reserve ( __len + 1 );
      __str . append ( __size_type ( 1 ), __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 698 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    copy ( _CharT * __s, size_type __n, size_type __pos ) const
    {
      _M_check ( __pos, "basic_string::copy" );
      __n = _M_limit ( __pos, __n );
      ;
      if ( __n )
 _M_copy ( __s, _M_data ( ) + __pos, __n );

      return __n;
    }
# 712 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      const _CharT * __data = _M_data ( );

      if ( __n == 0 )
 return __pos <= __size ? __pos : npos;

      if ( __n <= __size )
 {
   for (; __pos <= __size - __n; ++ __pos )
     if ( traits_type :: eq ( __data [ __pos ], __s [ 0 ] )
  && traits_type :: compare ( __data + __pos + 1,
     __s + 1, __n - 1 ) == 0 )
       return __pos;
 }
      return npos;
    }
# 735 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( _CharT __c, size_type __pos ) const
    {
      size_type __ret = npos;
      const size_type __size = this -> size ( );
      if ( __pos < __size )
 {
   const _CharT * __data = _M_data ( );
   const size_type __n = __size - __pos;
   const _CharT * __p = traits_type :: find ( __data + __pos, __n, __c );
   if ( __p )
     __ret = __p - __data;
 }
      return __ret;
    }
# 753 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      if ( __n <= __size )
 {
   __pos = std :: min ( size_type ( __size - __n ), __pos );
   const _CharT * __data = _M_data ( );
   do
     {
       if ( traits_type :: compare ( __data + __pos, __s, __n ) == 0 )
  return __pos;
     }
   while ( __pos -- > 0 );
 }
      return npos;
    }
# 774 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   for ( ++ __size; __size -- > 0; )
     if ( traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
       return __size;
 }
      return npos;
    }
# 791 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __n && __pos < this -> size ( ); ++ __pos )
 {
   const _CharT * __p = traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] );
   if ( __p )
     return __pos;
 }
      return npos;
    }
# 806 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size && __n )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- != 0 );
 }
      return npos;
    }
# 827 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] ) )
   return __pos;
      return npos;
    }
# 839 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( _CharT __c, size_type __pos ) const
    {
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: eq ( _M_data ( ) [ __pos ], __c ) )
   return __pos;
      return npos;
    }
# 850 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 871 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 891 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n, const basic_string & __str ) const
    {
      _M_check ( __pos, "basic_string::compare" );
      __n = _M_limit ( __pos, __n );
      const size_type __osize = __str . size ( );
      const size_type __len = std :: min ( __n, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __str . data ( ), __len );
      if ( ! __r )
 __r = _S_compare ( __n, __osize );
      return __r;
    }
# 906 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos1, size_type __n1, const basic_string & __str,
     size_type __pos2, size_type __n2 ) const
    {
      _M_check ( __pos1, "basic_string::compare" );
      __str . _M_check ( __pos2, "basic_string::compare" );
      __n1 = _M_limit ( __pos1, __n1 );
      __n2 = __str . _M_limit ( __pos2, __n2 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos1,
         __str . data ( ) + __pos2, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 924 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( const _CharT * __s ) const
    {
      ;
      const size_type __size = this -> size ( );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __size, __osize );
      int __r = traits_type :: compare ( _M_data ( ), __s, __len );
      if ( ! __r )
 __r = _S_compare ( __size, __osize );
      return __r;
    }
# 939 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __n1, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __osize );
      return __r;
    }
# 955 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s,
     size_type __n2 ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 972 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in,
        basic_string < _CharT, _Traits, _Alloc > & __str )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;
      typedef ctype < _CharT > __ctype_type;
      typedef typename __ctype_type :: ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       __str . erase ( );
       _CharT __buf [ 128 ];
       __size_type __len = 0;
       const streamsize __w = __in . width ( );
       const __size_type __n = __w > 0 ? static_cast < __size_type > ( __w )
                                : __str . max_size ( );
       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( __ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    if ( __len == sizeof ( __buf ) / sizeof ( _CharT ) )
      {
        __str . append ( __buf, sizeof ( __buf ) / sizeof ( _CharT ) );
        __len = 0;
      }
    __buf [ __len ++ ] = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }
       __str . append ( __buf, __len );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }

      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1044 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __in,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str . max_size ( );
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, true );
      if ( __cerb )
 {
   try
     {
       __str . erase ( );
       const __int_type __idelim = _Traits :: to_int_type ( __delim );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! _Traits :: eq_int_type ( __c, __idelim ) )
  {
    __str += _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       else if ( _Traits :: eq_int_type ( __c, __idelim ) )
  {
    ++ __extracted;
    __in . rdbuf ( ) -> sbumpc ( );
  }
       else
  __err |= __ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }
      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1111 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 1112 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 1115 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const basic_string< char, char_traits< char> , allocator< char> > &);
# 1118 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 1121 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 1126 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1127 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1130 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1133 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 1136 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1142 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
}
# 45 "/usr/include/c++/4.4/bits/locale_classes.h" 3
namespace std __attribute__((visibility("default"))) {
# 61 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale {
# 66 "/usr/include/c++/4.4/bits/locale_classes.h" 3
public: typedef int category;
# 69 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class facet;
# 70 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class id;
# 71 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class _Impl;
# 73 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class facet;
# 74 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class _Impl;
# 76 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend bool has_facet(const locale &) throw();
# 80 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend const _Facet &use_facet(const locale &);
# 84 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Cache> friend struct __use_cache;
# 97 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category none = 0;
# 98 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category ctype = (1L << 0);
# 99 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category numeric = (1L << 1);
# 100 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category collate = (1L << 2);
# 101 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category time = (1L << 3);
# 102 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category monetary = (1L << 4);
# 103 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category messages = (1L << 5);
# 104 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages);
# 116 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale() throw();
# 125 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &) throw();
# 136 "/usr/include/c++/4.4/bits/locale_classes.h" 3
explicit locale(const char *);
# 150 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &, const char *, category);
# 163 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &, const locale &, category);
# 175 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale ( const locale & __other, _Facet * __f );
# 179 "/usr/include/c++/4.4/bits/locale_classes.h" 3
~locale() throw();
# 190 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale &operator=(const locale &) throw();
# 204 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale
      combine ( const locale & __other ) const;
# 214 "/usr/include/c++/4.4/bits/locale_classes.h" 3
string name() const;
# 224 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool operator==(const locale &) const throw();
# 233 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw()
# 234 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ return !this->operator==(__other); }
# 251 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Char, typename _Traits, typename _Alloc >
      bool
      operator ( ) ( const basic_string < _Char, _Traits, _Alloc > & __s1,
   const basic_string < _Char, _Traits, _Alloc > & __s2 ) const;
# 268 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static locale global(const locale &);
# 274 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale &classic();
# 278 "/usr/include/c++/4.4/bits/locale_classes.h" 3
private: _Impl *_M_impl;
# 281 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Impl *_S_classic;
# 284 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Impl *_S_global;
# 290 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char *const *const _S_categories;
# 302 "/usr/include/c++/4.4/bits/locale_classes.h" 3
enum { _S_categories_size = 12};
# 305 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 309 "/usr/include/c++/4.4/bits/locale_classes.h" 3
explicit locale(_Impl *) throw();
# 312 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize();
# 315 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize_once();
# 318 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static category _S_normalize_category(category);
# 321 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_coalesce(const locale &, const locale &, category);
# 322 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 335 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::facet {
# 338 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 339 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::_Impl;
# 341 "/usr/include/c++/4.4/bits/locale_classes.h" 3
mutable _Atomic_word _M_refcount;
# 344 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_c_locale;
# 347 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char _S_c_name[2];
# 350 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 354 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize_once();
# 367 "/usr/include/c++/4.4/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0))
# 368 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 372 "/usr/include/c++/4.4/bits/locale_classes.h" 3
virtual ~facet();
# 375 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_create_c_locale(__c_locale &, const char *, __c_locale = 0);
# 379 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_clone_c_locale(__c_locale &);
# 382 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_destroy_c_locale(__c_locale &);
# 387 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_get_c_locale();
# 390 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char *_S_get_c_name();
# 394 "/usr/include/c++/4.4/bits/locale_classes.h" 3
private: void _M_add_reference() const throw()
# 395 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 398 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_remove_reference() const throw()
# 399 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 400 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 401 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 402 "/usr/include/c++/4.4/bits/locale_classes.h" 3
try
# 403 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ delete this; }
# 404 "/usr/include/c++/4.4/bits/locale_classes.h" 3
catch (...)
# 405 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 406 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 407 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 409 "/usr/include/c++/4.4/bits/locale_classes.h" 3
facet(const locale::facet &);
# 412 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale::facet &operator=(const locale::facet &);
# 413 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 426 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::id {
# 429 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 430 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::_Impl;
# 432 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend const _Facet &use_facet(const locale &);
# 436 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend bool has_facet(const locale &) throw();
# 443 "/usr/include/c++/4.4/bits/locale_classes.h" 3
mutable size_t _M_index;
# 446 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Atomic_word _S_refcount;
# 449 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void operator=(const locale::id &);
# 451 "/usr/include/c++/4.4/bits/locale_classes.h" 3
id(const locale::id &);
# 457 "/usr/include/c++/4.4/bits/locale_classes.h" 3
public: id() { }
# 460 "/usr/include/c++/4.4/bits/locale_classes.h" 3
size_t _M_id() const;
# 461 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 465 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::_Impl {
# 469 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 470 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::facet;
# 472 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend bool has_facet(const locale &) throw();
# 476 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> friend const _Facet &use_facet(const locale &);
# 480 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Cache> friend struct __use_cache;
# 485 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Atomic_word _M_refcount;
# 486 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale::facet **_M_facets;
# 487 "/usr/include/c++/4.4/bits/locale_classes.h" 3
size_t _M_facets_size;
# 488 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale::facet **_M_caches;
# 489 "/usr/include/c++/4.4/bits/locale_classes.h" 3
char **_M_names;
# 490 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_ctype[];
# 491 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_numeric[];
# 492 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_collate[];
# 493 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_time[];
# 494 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_monetary[];
# 495 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_messages[];
# 496 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const *const _S_facet_categories[];
# 499 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_add_reference() throw()
# 500 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 503 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_remove_reference() throw()
# 504 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 505 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 506 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 507 "/usr/include/c++/4.4/bits/locale_classes.h" 3
try
# 508 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ delete this; }
# 509 "/usr/include/c++/4.4/bits/locale_classes.h" 3
catch (...)
# 510 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 511 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 512 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 514 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const locale::_Impl &, size_t);
# 515 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const char *, size_t);
# 516 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(size_t) throw();
# 518 "/usr/include/c++/4.4/bits/locale_classes.h" 3
~_Impl() throw();
# 520 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const locale::_Impl &);
# 523 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void operator=(const locale::_Impl &);
# 526 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool _M_check_same_name()
# 527 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 528 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool __ret = true;
# 529 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if ((_M_names)[1]) {
# 531 "/usr/include/c++/4.4/bits/locale_classes.h" 3
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) {
# 532 "/usr/include/c++/4.4/bits/locale_classes.h" 3
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); } }
# 533 "/usr/include/c++/4.4/bits/locale_classes.h" 3
return __ret;
# 534 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 537 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_categories(const locale::_Impl *, locale::category);
# 540 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_category(const locale::_Impl *, const locale::id *const *);
# 543 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_facet(const locale::_Impl *, const locale::id *);
# 546 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_install_facet(const locale::id *, const locale::facet *);
# 548 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      void
      _M_init_facet ( _Facet * __facet )
      { _M_install_facet ( & _Facet :: id, __facet ); }
# 554 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_install_cache(const locale::facet *, size_t);
# 555 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 569 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> bool has_facet(const locale &) throw();
# 586 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> const _Facet &use_facet(const locale &);
# 603 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _CharT >
    class collate : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_collate;

    public :

      static locale :: id id;
# 630 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate ( size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_get_c_locale ( ) )
      { }
# 644 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_clone_c_locale ( __cloc ) )
      { }
# 661 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      int
      compare ( const _CharT * __lo1, const _CharT * __hi1,
       const _CharT * __lo2, const _CharT * __hi2 ) const
      { return this -> do_compare ( __lo1, __hi1, __lo2, __hi2 ); }
# 680 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      string_type
      transform ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_transform ( __lo, __hi ); }
# 694 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      long
      hash ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_hash ( __lo, __hi ); }


      int
      _M_compare ( const _CharT *, const _CharT * ) const;

      size_t
      _M_transform ( _CharT *, const _CharT *, size_t ) const;

  protected :

      virtual
      ~ collate ( )
      { _S_destroy_c_locale ( _M_c_locale_collate ); }
# 723 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual int
      do_compare ( const _CharT * __lo1, const _CharT * __hi1,
   const _CharT * __lo2, const _CharT * __hi2 ) const;
# 739 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual string_type
      do_transform ( const _CharT * __lo, const _CharT * __hi ) const;
# 752 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual long
      do_hash ( const _CharT * __lo, const _CharT * __hi ) const;
    };
# 756 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _CharT> locale::id
# 757 "/usr/include/c++/4.4/bits/locale_classes.h" 3
collate< _CharT> ::id;
# 762 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> int collate< char> ::_M_compare(const char *, const char *) const;
# 766 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const;
# 771 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const;
# 775 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const;
# 779 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _CharT >
    class collate_byname : public collate < _CharT >
    {
    public :


      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


      explicit
      collate_byname ( const char * __s, size_t __refs = 0 )
      : collate < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_collate );
     this -> _S_create_c_locale ( this -> _M_c_locale_collate, __s );
   }
      }

    protected :
      virtual
      ~ collate_byname ( ) { }
    };
# 806 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 39 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    locale ::
    locale ( const locale & __other, _Facet * __f )
    {
      _M_impl = new _Impl ( * __other . _M_impl, 1 );

      try
 { _M_impl -> _M_install_facet ( & _Facet :: id, __f ); }
      catch ( ... )
 {
   _M_impl -> _M_remove_reference ( );
   throw;
 }
      delete [ ] _M_impl -> _M_names [ 0 ];
      _M_impl -> _M_names [ 0 ] = 0;
    }
# 58 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    locale
    locale ::
    combine ( const locale & __other ) const
    {
      _Impl * __tmp = new _Impl ( * _M_impl, 1 );
      try
 {
   __tmp -> _M_replace_facet ( __other . _M_impl, & _Facet :: id );
 }
      catch ( ... )
 {
   __tmp -> _M_remove_reference ( );
   throw;
 }
      return locale ( __tmp );
    }
# 76 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    bool
    locale ::
    operator ( ) ( const basic_string < _CharT, _Traits, _Alloc > & __s1,
        const basic_string < _CharT, _Traits, _Alloc > & __s2 ) const
    {
      typedef std :: collate < _CharT > __collate_type;
      const __collate_type & __collate = use_facet < __collate_type > ( * this );
      return ( __collate . compare ( __s1 . data ( ), __s1 . data ( ) + __s1 . length ( ),
    __s2 . data ( ), __s2 . data ( ) + __s2 . length ( ) ) < 0 );
    }
# 89 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    bool
    has_facet ( const locale & __loc ) throw ( )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      return ( __i < __loc . _M_impl -> _M_facets_size

       && dynamic_cast < const _Facet * > ( __facets [ __i ] ) );



    }
# 103 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & __loc )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      if ( __i >= __loc . _M_impl -> _M_facets_size || ! __facets [ __i ] )
        __throw_bad_cast ( );

      return dynamic_cast < const _Facet & > ( * __facets [ __i ] );



    }
# 120 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > :: _M_compare ( const _CharT *, const _CharT * ) const
    { return 0; }
# 126 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    size_t
    collate < _CharT > :: _M_transform ( _CharT *, const _CharT *, size_t ) const
    { return 0; }
# 131 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > ::
    do_compare ( const _CharT * __lo1, const _CharT * __hi1,
        const _CharT * __lo2, const _CharT * __hi2 ) const
    {


      const string_type __one ( __lo1, __hi1 );
      const string_type __two ( __lo2, __hi2 );

      const _CharT * __p = __one . c_str ( );
      const _CharT * __pend = __one . data ( ) + __one . length ( );
      const _CharT * __q = __two . c_str ( );
      const _CharT * __qend = __two . data ( ) + __two . length ( );




      for (;; )
 {
   const int __res = _M_compare ( __p, __q );
   if ( __res )
     return __res;

   __p += char_traits < _CharT > :: length ( __p );
   __q += char_traits < _CharT > :: length ( __q );
   if ( __p == __pend && __q == __qend )
     return 0;
   else if ( __p == __pend )
     return - 1;
   else if ( __q == __qend )
     return 1;

   __p ++;
   __q ++;
 }
    }
# 170 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    typename collate < _CharT > :: string_type
    collate < _CharT > ::
    do_transform ( const _CharT * __lo, const _CharT * __hi ) const
    {
      string_type __ret;


      const string_type __str ( __lo, __hi );

      const _CharT * __p = __str . c_str ( );
      const _CharT * __pend = __str . data ( ) + __str . length ( );

      size_t __len = ( __hi - __lo ) * 2;

      _CharT * __c = new _CharT [ __len ];

      try
 {



   for (;; )
     {

       size_t __res = _M_transform ( __c, __p, __len );


       if ( __res >= __len )
  {
    __len = __res + 1;
    delete [ ] __c, __c = 0;
    __c = new _CharT [ __len ];
    __res = _M_transform ( __c, __p, __len );
  }

       __ret . append ( __c, __res );
       __p += char_traits < _CharT > :: length ( __p );
       if ( __p == __pend )
  break;

       __p ++;
       __ret . push_back ( _CharT ( ) );
     }
 }
      catch ( ... )
 {
   delete [ ] __c;
   throw;
 }

      delete [ ] __c;

      return __ret;
    }
# 226 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    long
    collate < _CharT > ::
    do_hash ( const _CharT * __lo, const _CharT * __hi ) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++ __lo )
 __val =
   * __lo + ( ( __val << 7 )
     | ( __val >> ( __gnu_cxx :: __numeric_traits < unsigned long > ::
    __digits - 7 ) ) );
      return static_cast < long > ( __val );
    }
# 244 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate< char> ;
# 245 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate_byname< char> ;
# 247 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template const collate< char> &use_facet< collate< char> > (const locale &);
# 251 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template bool has_facet< collate< char> > (const locale &) throw();
# 256 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate< wchar_t> ;
# 257 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate_byname< wchar_t> ;
# 259 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template const collate< wchar_t> &use_facet< collate< wchar_t> > (const locale &);
# 263 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 269 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
}
# 54 "/usr/include/c++/4.4/bits/ios_base.h" 3
namespace std __attribute__((visibility("default"))) {
# 60 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Fmtflags {
# 62 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_boolalpha = 1,
# 63 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_dec,
# 64 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_fixed = 4,
# 65 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_hex = 8,
# 66 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_internal = 16,
# 67 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_left = 32,
# 68 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_oct = 64,
# 69 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_right = 128,
# 70 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_scientific = 256,
# 71 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showbase = 512,
# 72 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showpoint = 1024,
# 73 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showpos = 2048,
# 74 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_skipws = 4096,
# 75 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_unitbuf = 8192,
# 76 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_uppercase = 16384,
# 77 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_adjustfield = 176,
# 78 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_basefield = 74,
# 79 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_floatfield = 260,
# 80 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_fmtflags_end = 65536
# 81 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 84 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 85 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 88 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 89 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 92 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 93 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 96 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 97 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 100 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 101 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 104 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 105 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 108 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a)
# 109 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); }
# 112 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Openmode {
# 114 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_app = 1,
# 115 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ate,
# 116 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_bin = 4,
# 117 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_in = 8,
# 118 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_out = 16,
# 119 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_trunc = 32,
# 120 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_openmode_end = 65536
# 121 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 124 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b)
# 125 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 128 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b)
# 129 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 132 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b)
# 133 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 136 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 137 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 140 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 141 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 144 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 145 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 148 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator~(_Ios_Openmode __a)
# 149 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); }
# 152 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Iostate {
# 154 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_goodbit,
# 155 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_badbit,
# 156 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_eofbit,
# 157 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_failbit = 4,
# 158 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_iostate_end = 65536
# 159 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 162 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b)
# 163 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 166 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b)
# 167 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 170 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b)
# 171 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 174 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 175 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 178 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 179 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 182 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 183 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 186 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator~(_Ios_Iostate __a)
# 187 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); }
# 189 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Seekdir {
# 191 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_beg,
# 192 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_cur,
# 193 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_end,
# 194 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_seekdir_end = 65536
# 195 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 207 "/usr/include/c++/4.4/bits/ios_base.h" 3
class ios_base {
# 217 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: class failure : public exception {
# 223 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: explicit failure(const string &) throw();
# 228 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual ~failure() throw();
# 231 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual const char *what() const throw();
# 234 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: string _M_msg;
# 235 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 263 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags;
# 266 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags boolalpha = ((fmtflags)1);
# 269 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags dec = ((fmtflags)2);
# 272 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags fixed = ((fmtflags)4);
# 275 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags hex = ((fmtflags)8);
# 280 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags internal = ((fmtflags)16);
# 284 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags left = ((fmtflags)32);
# 287 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags oct = ((fmtflags)64);
# 291 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags right = ((fmtflags)128);
# 294 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags scientific = ((fmtflags)256);
# 298 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showbase = ((fmtflags)512);
# 302 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showpoint = ((fmtflags)1024);
# 305 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showpos = ((fmtflags)2048);
# 308 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags skipws = ((fmtflags)4096);
# 311 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags unitbuf = ((fmtflags)8192);
# 315 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags uppercase = ((fmtflags)16384);
# 318 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags adjustfield = ((fmtflags)176);
# 321 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags basefield = ((fmtflags)74);
# 324 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags floatfield = ((fmtflags)260);
# 338 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Iostate iostate;
# 342 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate badbit = ((iostate)1);
# 345 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate eofbit = ((iostate)2);
# 350 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate failbit = ((iostate)4);
# 353 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate goodbit = ((iostate)0);
# 369 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Openmode openmode;
# 372 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode app = ((openmode)1);
# 375 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode ate = ((openmode)2);
# 380 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode binary = ((openmode)4);
# 383 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode in = ((openmode)8);
# 386 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode out = ((openmode)16);
# 389 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode trunc = ((openmode)32);
# 401 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir;
# 404 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir beg = ((seekdir)0);
# 407 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir cur = ((seekdir)1);
# 410 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir end = ((seekdir)2);
# 413 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int io_state;
# 414 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int open_mode;
# 415 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int seek_dir;
# 417 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef std::streampos streampos;
# 418 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef std::streamoff streamoff;
# 427 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum event {
# 429 "/usr/include/c++/4.4/bits/ios_base.h" 3
erase_event,
# 430 "/usr/include/c++/4.4/bits/ios_base.h" 3
imbue_event,
# 431 "/usr/include/c++/4.4/bits/ios_base.h" 3
copyfmt_event
# 432 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 444 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int);
# 457 "/usr/include/c++/4.4/bits/ios_base.h" 3
void register_callback(event_callback, int);
# 464 "/usr/include/c++/4.4/bits/ios_base.h" 3
protected: streamsize _M_precision;
# 465 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize _M_width;
# 466 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags _M_flags;
# 467 "/usr/include/c++/4.4/bits/ios_base.h" 3
iostate _M_exception;
# 468 "/usr/include/c++/4.4/bits/ios_base.h" 3
iostate _M_streambuf_state;
# 473 "/usr/include/c++/4.4/bits/ios_base.h" 3
struct _Callback_list {
# 476 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list *_M_next;
# 477 "/usr/include/c++/4.4/bits/ios_base.h" 3
event_callback _M_fn;
# 478 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_index;
# 479 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Atomic_word _M_refcount;
# 481 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 482 "/usr/include/c++/4.4/bits/ios_base.h" 3
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0)
# 483 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ }
# 486 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 490 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_remove_reference()
# 491 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); }
# 492 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 494 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list *_M_callbacks;
# 497 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_call_callbacks(event) throw();
# 500 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_dispose_callbacks();
# 503 "/usr/include/c++/4.4/bits/ios_base.h" 3
struct _Words {
# 505 "/usr/include/c++/4.4/bits/ios_base.h" 3
void *_M_pword;
# 506 "/usr/include/c++/4.4/bits/ios_base.h" 3
long _M_iword;
# 507 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words() : _M_pword((0)), _M_iword((0)) { }
# 508 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 511 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words _M_word_zero;
# 515 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum { _S_local_word_size = 8};
# 516 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words _M_local_word[_S_local_word_size];
# 519 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_word_size;
# 520 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words *_M_word;
# 523 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &_M_grow_words(int, bool);
# 526 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale _M_ios_locale;
# 529 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_init();
# 537 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: class Init {
# 539 "/usr/include/c++/4.4/bits/ios_base.h" 3
friend class ios_base;
# 541 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: Init();
# 542 "/usr/include/c++/4.4/bits/ios_base.h" 3
~Init();
# 545 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: static _Atomic_word _S_refcount;
# 546 "/usr/include/c++/4.4/bits/ios_base.h" 3
static bool _S_synced_with_stdio;
# 547 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 555 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags flags() const
# 556 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_flags; }
# 566 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl)
# 567 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 568 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 569 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_flags) = __fmtfl;
# 570 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 571 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 582 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl)
# 583 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 584 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 585 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) |= __fmtfl);
# 586 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 587 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 599 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
# 600 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 601 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 602 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) &= ((~__mask)));
# 603 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) |= ((__fmtfl & __mask)));
# 604 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 605 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 614 "/usr/include/c++/4.4/bits/ios_base.h" 3
void unsetf(fmtflags __mask)
# 615 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ (((_M_flags)) &= ((~__mask))); }
# 625 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize precision() const
# 626 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_precision; }
# 634 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize precision(streamsize __prec)
# 635 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 636 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize __old = (_M_precision);
# 637 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_precision) = __prec;
# 638 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 639 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 648 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize width() const
# 649 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_width; }
# 657 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize width(streamsize __wide)
# 658 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 659 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize __old = (_M_width);
# 660 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_width) = __wide;
# 661 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 662 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 676 "/usr/include/c++/4.4/bits/ios_base.h" 3
static bool sync_with_stdio(bool = true);
# 688 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale imbue(const locale &);
# 699 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale getloc() const
# 700 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_ios_locale; }
# 710 "/usr/include/c++/4.4/bits/ios_base.h" 3
const locale &_M_getloc() const
# 711 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_ios_locale; }
# 729 "/usr/include/c++/4.4/bits/ios_base.h" 3
static int xalloc() throw();
# 745 "/usr/include/c++/4.4/bits/ios_base.h" 3
long &iword(int __ix)
# 746 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 747 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, true));
# 749 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __word._M_iword;
# 750 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 766 "/usr/include/c++/4.4/bits/ios_base.h" 3
void *&pword(int __ix)
# 767 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 768 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, false));
# 770 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __word._M_pword;
# 771 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 782 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual ~ios_base();
# 785 "/usr/include/c++/4.4/bits/ios_base.h" 3
protected: ios_base();
# 790 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: ios_base(const ios_base &);
# 793 "/usr/include/c++/4.4/bits/ios_base.h" 3
ios_base &operator=(const ios_base &);
# 794 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 799 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &boolalpha(ios_base &__base)
# 800 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 801 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::boolalpha);
# 802 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 803 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 807 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noboolalpha(ios_base &__base)
# 808 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 809 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::boolalpha);
# 810 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 811 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 815 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showbase(ios_base &__base)
# 816 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 817 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showbase);
# 818 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 819 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 823 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowbase(ios_base &__base)
# 824 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 825 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showbase);
# 826 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 827 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 831 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showpoint(ios_base &__base)
# 832 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 833 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showpoint);
# 834 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 835 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 839 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowpoint(ios_base &__base)
# 840 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 841 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showpoint);
# 842 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 843 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 847 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showpos(ios_base &__base)
# 848 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 849 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showpos);
# 850 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 851 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 855 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowpos(ios_base &__base)
# 856 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 857 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showpos);
# 858 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 859 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 863 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &skipws(ios_base &__base)
# 864 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 865 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::skipws);
# 866 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 867 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 871 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noskipws(ios_base &__base)
# 872 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 873 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::skipws);
# 874 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 875 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 879 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &uppercase(ios_base &__base)
# 880 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 881 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::uppercase);
# 882 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 883 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 887 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &nouppercase(ios_base &__base)
# 888 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 889 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::uppercase);
# 890 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 891 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 895 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &unitbuf(ios_base &__base)
# 896 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 897 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::unitbuf);
# 898 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 899 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 903 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &nounitbuf(ios_base &__base)
# 904 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 905 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::unitbuf);
# 906 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 907 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 912 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &internal(ios_base &__base)
# 913 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 914 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::internal, ios_base::adjustfield);
# 915 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 916 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 920 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &left(ios_base &__base)
# 921 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 922 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::left, ios_base::adjustfield);
# 923 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 924 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 928 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &right(ios_base &__base)
# 929 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 930 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::right, ios_base::adjustfield);
# 931 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 932 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 937 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &dec(ios_base &__base)
# 938 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 939 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::dec, ios_base::basefield);
# 940 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 941 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 945 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &hex(ios_base &__base)
# 946 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 947 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::hex, ios_base::basefield);
# 948 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 949 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 953 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &oct(ios_base &__base)
# 954 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 955 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::oct, ios_base::basefield);
# 956 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 957 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 962 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &fixed(ios_base &__base)
# 963 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 964 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::fixed, ios_base::floatfield);
# 965 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 966 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 970 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &scientific(ios_base &__base)
# 971 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 972 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::scientific, ios_base::floatfield);
# 973 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 974 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 976 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 46 "/usr/include/c++/4.4/streambuf" 3
namespace std __attribute__((visibility("default"))) {
# 48 "/usr/include/c++/4.4/streambuf" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > *,
     basic_streambuf < _CharT, _Traits > *, bool & );
# 113 "/usr/include/c++/4.4/streambuf" 3
template < typename _CharT, typename _Traits >
    class basic_streambuf
    {
    public :






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;




      typedef basic_streambuf < char_type, traits_type > __streambuf_type;


      friend class basic_ios < char_type, traits_type >;
      friend class basic_istream < char_type, traits_type >;
      friend class basic_ostream < char_type, traits_type >;
      friend class istreambuf_iterator < char_type, traits_type >;
      friend class ostreambuf_iterator < char_type, traits_type >;

      friend streamsize
      __copy_streambufs_eof < > ( __streambuf_type *, __streambuf_type *, bool & );

      template < bool _IsMove, typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
        __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
      istreambuf_iterator < _CharT2 > > :: __type
        find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &,
     basic_string < _CharT2, _Traits2, _Alloc > & );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        getline ( basic_istream < _CharT2, _Traits2 > &,
  basic_string < _CharT2, _Traits2, _Alloc > &, _CharT2 );

    protected :
# 179 "/usr/include/c++/4.4/streambuf" 3
      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;


      locale _M_buf_locale;

  public :

      virtual
      ~ basic_streambuf ( )
      { }
# 203 "/usr/include/c++/4.4/streambuf" 3
      locale
      pubimbue ( const locale & __loc )
      {
 locale __tmp ( this -> getloc ( ) );
 this -> imbue ( __loc );
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "/usr/include/c++/4.4/streambuf" 3
      locale
      getloc ( ) const
      { return _M_buf_locale; }
# 233 "/usr/include/c++/4.4/streambuf" 3
      __streambuf_type *
      pubsetbuf ( char_type * __s, streamsize __n )
      { return this -> setbuf ( __s, __n ); }

      pos_type
      pubseekoff ( off_type __off, ios_base :: seekdir __way,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekoff ( __off, __way, __mode ); }

      pos_type
      pubseekpos ( pos_type __sp,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekpos ( __sp, __mode ); }

      int
      pubsync ( ) { return this -> sync ( ); }
# 260 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      in_avail ( )
      {
 const streamsize __ret = this -> egptr ( ) - this -> gptr ( );
 return __ret ? __ret : this -> showmanyc ( );
      }
# 274 "/usr/include/c++/4.4/streambuf" 3
      int_type
      snextc ( )
      {
 int_type __ret = traits_type :: eof ( );
 if ( __builtin_expect ( ! traits_type :: eq_int_type ( this -> sbumpc ( ),
             __ret ), true ) )
   __ret = this -> sgetc ( );
 return __ret;
      }
# 292 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sbumpc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 else
   __ret = this -> uflow ( );
 return __ret;
      }
# 314 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sgetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
 else
   __ret = this -> underflow ( );
 return __ret;
      }
# 333 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sgetn ( char_type * __s, streamsize __n )
      { return this -> xsgetn ( __s, __n ); }
# 347 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputbackc ( char_type __c )
      {
 int_type __ret;
 const bool __testpos = this -> eback ( ) < this -> gptr ( );
 if ( __builtin_expect ( ! __testpos ||
        ! traits_type :: eq ( __c, this -> gptr ( ) [ - 1 ] ), false ) )
   __ret = this -> pbackfail ( traits_type :: to_int_type ( __c ) );
 else
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 return __ret;
      }
# 372 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sungetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> eback ( ) < this -> gptr ( ), true ) )
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 else
   __ret = this -> pbackfail ( );
 return __ret;
      }
# 399 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputc ( char_type __c )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> pptr ( ) < this -> epptr ( ), true ) )
   {
     * this -> pptr ( ) = __c;
     this -> pbump ( 1 );
     __ret = traits_type :: to_int_type ( __c );
   }
 else
   __ret = this -> overflow ( traits_type :: to_int_type ( __c ) );
 return __ret;
      }
# 425 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sputn ( const char_type * __s, streamsize __n )
      { return this -> xsputn ( __s, __n ); }

    protected :
# 439 "/usr/include/c++/4.4/streambuf" 3
      basic_streambuf ( )
      : _M_in_beg ( 0 ), _M_in_cur ( 0 ), _M_in_end ( 0 ),
      _M_out_beg ( 0 ), _M_out_cur ( 0 ), _M_out_end ( 0 ),
      _M_buf_locale ( locale ( ) )
      { }
# 457 "/usr/include/c++/4.4/streambuf" 3
      char_type *
      eback ( ) const { return _M_in_beg; }

      char_type *
      gptr ( ) const { return _M_in_cur; }

      char_type *
      egptr ( ) const { return _M_in_end; }
# 473 "/usr/include/c++/4.4/streambuf" 3
      void
      gbump ( int __n ) { _M_in_cur += __n; }
# 484 "/usr/include/c++/4.4/streambuf" 3
      void
      setg ( char_type * __gbeg, char_type * __gnext, char_type * __gend )
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 504 "/usr/include/c++/4.4/streambuf" 3
      char_type *
      pbase ( ) const { return _M_out_beg; }

      char_type *
      pptr ( ) const { return _M_out_cur; }

      char_type *
      epptr ( ) const { return _M_out_end; }
# 520 "/usr/include/c++/4.4/streambuf" 3
      void
      pbump ( int __n ) { _M_out_cur += __n; }
# 530 "/usr/include/c++/4.4/streambuf" 3
      void
      setp ( char_type * __pbeg, char_type * __pend )
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 551 "/usr/include/c++/4.4/streambuf" 3
      virtual void
      imbue ( const locale & )
      { }
# 566 "/usr/include/c++/4.4/streambuf" 3
      virtual basic_streambuf < char_type, _Traits > *
      setbuf ( char_type *, streamsize )
      { return this; }
# 577 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekoff ( off_type, ios_base :: seekdir,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 589 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekpos ( pos_type,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 602 "/usr/include/c++/4.4/streambuf" 3
      virtual int
      sync ( ) { return 0; }
# 624 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      showmanyc ( ) { return 0; }
# 640 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );
# 662 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      underflow ( )
      { return traits_type :: eof ( ); }
# 675 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      uflow ( )
      {
 int_type __ret = traits_type :: eof ( );
 const bool __testeof = traits_type :: eq_int_type ( this -> underflow ( ),
       __ret );
 if ( ! __testeof )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 return __ret;
      }
# 699 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      pbackfail ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }
# 717 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );
# 742 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      overflow ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }



    public :
# 757 "/usr/include/c++/4.4/streambuf" 3
      void
      stossc ( )
      {
 if ( this -> gptr ( ) < this -> egptr ( ) )
   this -> gbump ( 1 );
 else
   this -> uflow ( );
      }


    private :


      basic_streambuf ( const __streambuf_type & __sb )
      : _M_in_beg ( __sb . _M_in_beg ), _M_in_cur ( __sb . _M_in_cur ),
      _M_in_end ( __sb . _M_in_end ), _M_out_beg ( __sb . _M_out_beg ),
      _M_out_cur ( __sb . _M_out_cur ), _M_out_end ( __sb . _M_out_cur ),
      _M_buf_locale ( __sb . _M_buf_locale )
      { }

      __streambuf_type &
      operator = ( const __streambuf_type & ) { return * this; };
    };
# 784 "/usr/include/c++/4.4/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 789 "/usr/include/c++/4.4/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 793 "/usr/include/c++/4.4/streambuf" 3
}
# 40 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 42 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsgetn ( char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> egptr ( ) - this -> gptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( __s, this -> gptr ( ), __len );
       __ret += __len;
       __s += __len;
       this -> gbump ( __len );
     }

   if ( __ret < __n )
     {
       const int_type __c = this -> uflow ( );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    traits_type :: assign ( * __s ++, traits_type :: to_char_type ( __c ) );
    ++ __ret;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 76 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsputn ( const char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> epptr ( ) - this -> pptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( this -> pptr ( ), __s, __len );
       __ret += __len;
       __s += __len;
       this -> pbump ( __len );
     }

   if ( __ret < __n )
     {
       int_type __c = this -> overflow ( traits_type :: to_int_type ( * __s ) );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    ++ __ret;
    ++ __s;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 113 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > * __sbin,
     basic_streambuf < _CharT, _Traits > * __sbout,
     bool & __ineof )
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits :: int_type __c = __sbin -> sgetc ( );
      while ( ! _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
 {
   __c = __sbout -> sputc ( _Traits :: to_char_type ( __c ) );
   if ( _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
     {
       __ineof = false;
       break;
     }
   ++ __ret;
   __c = __sbin -> snextc ( );
 }
      return __ret;
    }
# 136 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    inline streamsize
    __copy_streambufs ( basic_streambuf < _CharT, _Traits > * __sbin,
        basic_streambuf < _CharT, _Traits > * __sbout )
    {
      bool __ineof;
      return __copy_streambufs_eof ( __sbin, __sbout, __ineof );
    }
# 149 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template class basic_streambuf< char, char_traits< char> > ;
# 150 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *);
# 154 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 160 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *);
# 165 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 172 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
}
# 53 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t;
# 73 "/usr/include/wctype.h" 3
enum {
# 74 "/usr/include/wctype.h" 3
__ISwupper,
# 75 "/usr/include/wctype.h" 3
__ISwlower,
# 76 "/usr/include/wctype.h" 3
__ISwalpha,
# 77 "/usr/include/wctype.h" 3
__ISwdigit,
# 78 "/usr/include/wctype.h" 3
__ISwxdigit,
# 79 "/usr/include/wctype.h" 3
__ISwspace,
# 80 "/usr/include/wctype.h" 3
__ISwprint,
# 81 "/usr/include/wctype.h" 3
__ISwgraph,
# 82 "/usr/include/wctype.h" 3
__ISwblank,
# 83 "/usr/include/wctype.h" 3
__ISwcntrl,
# 84 "/usr/include/wctype.h" 3
__ISwpunct,
# 85 "/usr/include/wctype.h" 3
__ISwalnum,
# 87 "/usr/include/wctype.h" 3
_ISwupper = 16777216,
# 88 "/usr/include/wctype.h" 3
_ISwlower = 33554432,
# 89 "/usr/include/wctype.h" 3
_ISwalpha = 67108864,
# 90 "/usr/include/wctype.h" 3
_ISwdigit = 134217728,
# 91 "/usr/include/wctype.h" 3
_ISwxdigit = 268435456,
# 92 "/usr/include/wctype.h" 3
_ISwspace = 536870912,
# 93 "/usr/include/wctype.h" 3
_ISwprint = 1073741824,
# 94 "/usr/include/wctype.h" 3
_ISwgraph = (-2147483647-1),
# 95 "/usr/include/wctype.h" 3
_ISwblank = 65536,
# 96 "/usr/include/wctype.h" 3
_ISwcntrl = 131072,
# 97 "/usr/include/wctype.h" 3
_ISwpunct = 262144,
# 98 "/usr/include/wctype.h" 3
_ISwalnum = 524288
# 99 "/usr/include/wctype.h" 3
};
# 112 "/usr/include/wctype.h" 3
extern "C" int iswalnum(wint_t) throw();
# 118 "/usr/include/wctype.h" 3
extern "C" int iswalpha(wint_t) throw();
# 121 "/usr/include/wctype.h" 3
extern "C" int iswcntrl(wint_t) throw();
# 125 "/usr/include/wctype.h" 3
extern "C" int iswdigit(wint_t) throw();
# 129 "/usr/include/wctype.h" 3
extern "C" int iswgraph(wint_t) throw();
# 134 "/usr/include/wctype.h" 3
extern "C" int iswlower(wint_t) throw();
# 137 "/usr/include/wctype.h" 3
extern "C" int iswprint(wint_t) throw();
# 142 "/usr/include/wctype.h" 3
extern "C" int iswpunct(wint_t) throw();
# 147 "/usr/include/wctype.h" 3
extern "C" int iswspace(wint_t) throw();
# 152 "/usr/include/wctype.h" 3
extern "C" int iswupper(wint_t) throw();
# 157 "/usr/include/wctype.h" 3
extern "C" int iswxdigit(wint_t) throw();
# 163 "/usr/include/wctype.h" 3
extern "C" int iswblank(wint_t) throw();
# 172 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype(const char *) throw();
# 176 "/usr/include/wctype.h" 3
extern "C" int iswctype(wint_t, wctype_t) throw();
# 187 "/usr/include/wctype.h" 3
extern "C" { typedef const __int32_t *wctrans_t; }
# 195 "/usr/include/wctype.h" 3
extern "C" wint_t towlower(wint_t) throw();
# 198 "/usr/include/wctype.h" 3
extern "C" wint_t towupper(wint_t) throw();
# 219 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char *) throw();
# 222 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans(wint_t, wctrans_t) throw();
# 231 "/usr/include/wctype.h" 3
extern "C" int iswalnum_l(wint_t, __locale_t) throw();
# 237 "/usr/include/wctype.h" 3
extern "C" int iswalpha_l(wint_t, __locale_t) throw();
# 240 "/usr/include/wctype.h" 3
extern "C" int iswcntrl_l(wint_t, __locale_t) throw();
# 244 "/usr/include/wctype.h" 3
extern "C" int iswdigit_l(wint_t, __locale_t) throw();
# 248 "/usr/include/wctype.h" 3
extern "C" int iswgraph_l(wint_t, __locale_t) throw();
# 253 "/usr/include/wctype.h" 3
extern "C" int iswlower_l(wint_t, __locale_t) throw();
# 256 "/usr/include/wctype.h" 3
extern "C" int iswprint_l(wint_t, __locale_t) throw();
# 261 "/usr/include/wctype.h" 3
extern "C" int iswpunct_l(wint_t, __locale_t) throw();
# 266 "/usr/include/wctype.h" 3
extern "C" int iswspace_l(wint_t, __locale_t) throw();
# 271 "/usr/include/wctype.h" 3
extern "C" int iswupper_l(wint_t, __locale_t) throw();
# 276 "/usr/include/wctype.h" 3
extern "C" int iswxdigit_l(wint_t, __locale_t) throw();
# 281 "/usr/include/wctype.h" 3
extern "C" int iswblank_l(wint_t, __locale_t) throw();
# 285 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype_l(const char *, __locale_t) throw();
# 290 "/usr/include/wctype.h" 3
extern "C" int iswctype_l(wint_t, wctype_t, __locale_t) throw();
# 299 "/usr/include/wctype.h" 3
extern "C" wint_t towlower_l(wint_t, __locale_t) throw();
# 302 "/usr/include/wctype.h" 3
extern "C" wint_t towupper_l(wint_t, __locale_t) throw();
# 306 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans_l(const char *, __locale_t) throw();
# 310 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans_l(wint_t, wctrans_t, __locale_t) throw();
# 76 "/usr/include/c++/4.4/cwctype" 3
namespace std __attribute__((visibility("default"))) {
# 78 "/usr/include/c++/4.4/cwctype" 3
using ::wctrans_t;
# 79 "/usr/include/c++/4.4/cwctype" 3
using ::wctype_t;
# 82 "/usr/include/c++/4.4/cwctype" 3
using ::iswalnum;
# 83 "/usr/include/c++/4.4/cwctype" 3
using ::iswalpha;
# 85 "/usr/include/c++/4.4/cwctype" 3
using ::iswblank;
# 87 "/usr/include/c++/4.4/cwctype" 3
using ::iswcntrl;
# 88 "/usr/include/c++/4.4/cwctype" 3
using ::iswctype;
# 89 "/usr/include/c++/4.4/cwctype" 3
using ::iswdigit;
# 90 "/usr/include/c++/4.4/cwctype" 3
using ::iswgraph;
# 91 "/usr/include/c++/4.4/cwctype" 3
using ::iswlower;
# 92 "/usr/include/c++/4.4/cwctype" 3
using ::iswprint;
# 93 "/usr/include/c++/4.4/cwctype" 3
using ::iswpunct;
# 94 "/usr/include/c++/4.4/cwctype" 3
using ::iswspace;
# 95 "/usr/include/c++/4.4/cwctype" 3
using ::iswupper;
# 96 "/usr/include/c++/4.4/cwctype" 3
using ::iswxdigit;
# 97 "/usr/include/c++/4.4/cwctype" 3
using ::towctrans;
# 98 "/usr/include/c++/4.4/cwctype" 3
using ::towlower;
# 99 "/usr/include/c++/4.4/cwctype" 3
using ::towupper;
# 100 "/usr/include/c++/4.4/cwctype" 3
using ::wctrans;
# 101 "/usr/include/c++/4.4/cwctype" 3
using ::wctype;
# 103 "/usr/include/c++/4.4/cwctype" 3
}
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
struct ctype_base {
# 43 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
typedef const int *__to_type;
# 47 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
typedef unsigned short mask;
# 48 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask upper = (_ISupper);
# 49 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask lower = (_ISlower);
# 50 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask alpha = (_ISalpha);
# 51 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask digit = (_ISdigit);
# 52 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask xdigit = (_ISxdigit);
# 53 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask space = (_ISspace);
# 54 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask print = (_ISprint);
# 55 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct));
# 56 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask cntrl = (_IScntrl);
# 57 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask punct = (_ISpunct);
# 58 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
static const mask alnum = ((_ISalpha) | (_ISdigit));
# 59 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
};
# 61 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
}
# 40 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class istreambuf_iterator
    : public iterator < input_iterator_tag, _CharT, typename _Traits :: off_type,
        _CharT *, _CharT & >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits :: int_type int_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_istream < _CharT, _Traits > istream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

      template < bool _IsMove, typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
 __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
               istreambuf_iterator < _CharT2 > > :: __type
 find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

    private :







      mutable streambuf_type * _M_sbuf;
      mutable int_type _M_c;

    public :

      istreambuf_iterator ( ) throw ( )
      : _M_sbuf ( 0 ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( istream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_c ( traits_type :: eof ( ) ) { }




      char_type
      operator * ( ) const
      {







 return traits_type :: to_char_type ( _M_get ( ) );
      }


      istreambuf_iterator &
      operator ++ ( )
      {
 ;


 if ( _M_sbuf )
   {
     _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return * this;
      }


      istreambuf_iterator
      operator ++ ( int )
      {
 ;



 istreambuf_iterator __old = * this;
 if ( _M_sbuf )
   {
     __old . _M_c = _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return __old;
      }





      bool
      equal ( const istreambuf_iterator & __b ) const
      { return _M_at_eof ( ) == __b . _M_at_eof ( ); }

    private :
      int_type
      _M_get ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 int_type __ret = __eof;
 if ( _M_sbuf )
   {
     if ( ! traits_type :: eq_int_type ( _M_c, __eof ) )
       __ret = _M_c;
     else if ( ! traits_type :: eq_int_type ( ( __ret = _M_sbuf -> sgetc ( ) ),
            __eof ) )
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 return traits_type :: eq_int_type ( _M_get ( ), __eof );
      }
    };
# 185 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator == ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return __a . equal ( __b ); }
# 191 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator != ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return ! __a . equal ( __b ); }
# 198 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class ostreambuf_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

    private :
      streambuf_type * _M_sbuf;
      bool _M_failed;

    public :

      ostreambuf_iterator ( ostream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator &
      operator = ( _CharT __c )
      {
 if ( ! _M_failed &&
     _Traits :: eq_int_type ( _M_sbuf -> sputc ( __c ), _Traits :: eof ( ) ) )
   _M_failed = true;
 return * this;
      }


      ostreambuf_iterator &
      operator * ( )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( int )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( )
      { return * this; }


      bool
      failed ( ) const throw ( )
      { return _M_failed; }

      ostreambuf_iterator &
      _M_put ( const _CharT * __ws, streamsize __len )
      {
 if ( __builtin_expect ( ! _M_failed, true )
     && __builtin_expect ( this -> _M_sbuf -> sputn ( __ws, __len ) != __len,
    false ) )
   _M_failed = true;
 return * this;
      }
    };
# 273 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                           ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last,
  ostreambuf_iterator < _CharT > __result )
    {
      if ( __first . _M_sbuf && ! __last . _M_sbuf && ! __result . _M_failed )
 {
   bool __ineof;
   __copy_streambufs_eof ( __first . _M_sbuf, __result . _M_sbuf, __ineof );
   if ( ! __ineof )
     __result . _M_failed = true;
 }
      return __result;
    }
# 290 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( _CharT * __first, _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 302 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( const _CharT * __first, const _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 314 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT > __first,
     istreambuf_iterator < _CharT > __last, _CharT * __result )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     {
       const streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    traits_type :: copy ( __result, __sb -> gptr ( ), __n );
    __sb -> gbump ( __n );
    __result += __n;
    __c = __sb -> underflow ( );
  }
       else
  {
    * __result ++ = traits_type :: to_char_type ( __c );
    __c = __sb -> snextc ( );
  }
     }
 }
      return __result;
    }
# 349 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
          istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last, const _CharT & __val )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   const int_type __ival = traits_type :: to_int_type ( __val );
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) )
   && ! traits_type :: eq_int_type ( __c, __ival ) )
     {
       streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    const _CharT * __p = traits_type :: find ( __sb -> gptr ( ),
       __n, __val );
    if ( __p )
      __n = __p - __sb -> gptr ( );
    __sb -> gbump ( __n );
    __c = __sb -> sgetc ( );
  }
       else
  __c = __sb -> snextc ( );
     }

   if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     __first . _M_c = __c;
   else
     __first . _M_sbuf = 0;
 }
      return __first;
    }
# 390 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
}
# 52 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _Tv> void __convert_to_v(const char *, _Tv &, ios_base::iostate &, const __c_locale &);
# 72 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &);
# 77 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &);
# 82 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &);
# 87 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT, class _Traits>
# 88 "/usr/include/c++/4.4/bits/locale_facets.h" 3
struct __pad {
# 91 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static void _S_pad(ios_base &, _CharT, _CharT *, const _CharT *, streamsize, streamsize);
# 93 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 100 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last );
# 109 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline
    ostreambuf_iterator < _CharT >
    __write ( ostreambuf_iterator < _CharT > __s, const _CharT * __ws, int __len )
    {
      __s . _M_put ( __ws, __len );
      return __s;
    }
# 119 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    inline
    _OutIter
    __write ( _OutIter __s, const _CharT * __ws, int __len )
    {
      for ( int __j = 0; __j < __len; __j ++, ++ __s )
 * __s = __ws [ __j ];
      return __s;
    }
# 143 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class __ctype_abstract_base : public locale :: facet, public ctype_base
    {
    public :


      typedef _CharT char_type;
# 161 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      bool
      is ( mask __m, char_type __c ) const
      { return this -> do_is ( __m, __c ); }
# 178 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const
      { return this -> do_is ( __lo, __hi, __vec ); }
# 194 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_is ( __m, __lo, __hi ); }
# 210 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      scan_not ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_not ( __m, __lo, __hi ); }
# 224 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper ( char_type __c ) const
      { return this -> do_toupper ( __c ); }
# 239 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      toupper ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_toupper ( __lo, __hi ); }
# 253 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower ( char_type __c ) const
      { return this -> do_tolower ( __c ); }
# 268 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      tolower ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_tolower ( __lo, __hi ); }
# 285 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen ( char __c ) const
      { return this -> do_widen ( __c ); }
# 304 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char *
      widen ( const char * __lo, const char * __hi, char_type * __to ) const
      { return this -> do_widen ( __lo, __hi, __to ); }
# 323 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow ( char_type __c, char __dfault ) const
      { return this -> do_narrow ( __c, __dfault ); }
# 345 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      narrow ( const char_type * __lo, const char_type * __hi,
       char __dfault, char * __to ) const
      { return this -> do_narrow ( __lo, __hi, __dfault, __to ); }

    protected :
      explicit
      __ctype_abstract_base ( size_t __refs = 0 ) : facet ( __refs ) { }

      virtual
      ~ __ctype_abstract_base ( ) { }
# 370 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is ( mask __m, char_type __c ) const = 0;
# 389 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi,
     mask * __vec ) const = 0;
# 408 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo,
   const char_type * __hi ) const = 0;
# 427 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const = 0;
# 445 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper ( char_type ) const = 0;
# 462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const = 0;
# 478 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower ( char_type ) const = 0;
# 495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const = 0;
# 514 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen ( char ) const = 0;
# 535 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char *
      do_widen ( const char * __lo, const char * __hi,
        char_type * __dest ) const = 0;
# 557 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow ( char_type, char __dfault ) const = 0;
# 581 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const = 0;
    };
# 604 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype : public __ctype_abstract_base < _CharT >
    {
    public :

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base < _CharT > :: mask mask;


      static locale :: id id;

      explicit
      ctype ( size_t __refs = 0 ) : __ctype_abstract_base < _CharT > ( __refs ) { }

   protected :
      virtual
      ~ ctype ( );

      virtual bool
      do_is ( mask __m, char_type __c ) const;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const;

      virtual char_type
      do_toupper ( char_type __c ) const;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_tolower ( char_type __c ) const;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_widen ( char __c ) const;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi, char_type * __dest ) const;

      virtual char
      do_narrow ( char_type, char __dfault ) const;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const;
    };
# 661 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 662 "/usr/include/c++/4.4/bits/locale_facets.h" 3
ctype< _CharT> ::id;
# 674 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< char> : public locale::facet, public ctype_base {
# 679 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: typedef char char_type;
# 683 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 684 "/usr/include/c++/4.4/bits/locale_facets.h" 3
bool _M_del;
# 685 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__to_type _M_toupper;
# 686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__to_type _M_tolower;
# 687 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const mask *_M_table;
# 688 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_widen_ok;
# 689 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 690 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_narrow[(1 + (static_cast< unsigned char>((-1))))];
# 691 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_narrow_ok;
# 696 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: static locale::id id;
# 698 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const size_t table_size = (1 + (static_cast< unsigned char>((-1))));
# 711 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(const mask * = 0, bool = false, size_t = (0));
# 724 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale, const mask * = 0, bool = false, size_t = (0));
# 737 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline bool is(mask, char) const;
# 752 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *is(const char *, const char *, mask *) const;
# 766 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_is(mask, const char *, const char *) const;
# 780 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_not(mask, const char *, const char *) const;
# 795 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type toupper(char_type __c) const
# 796 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_toupper(__c); }
# 812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const
# 813 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_toupper(__lo, __hi); }
# 828 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type tolower(char_type __c) const
# 829 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_tolower(__c); }
# 845 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const
# 846 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_tolower(__lo, __hi); }
# 865 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type widen(char __c) const
# 866 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 867 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (_M_widen_ok) {
# 868 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return (_M_widen)[static_cast< unsigned char>(__c)]; }
# 869 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_widen_init();
# 870 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_widen(__c);
# 871 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 892 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const
# 893 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 894 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if ((_M_widen_ok) == 1)
# 895 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 896 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__to, __lo, __hi - __lo);
# 897 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 898 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 899 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (!(_M_widen_ok)) {
# 900 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_widen_init(); }
# 901 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_widen(__lo, __hi, __to);
# 902 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 923 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const
# 924 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 925 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if ((_M_narrow)[static_cast< unsigned char>(__c)]) {
# 926 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return (_M_narrow)[static_cast< unsigned char>(__c)]; }
# 927 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char __t = this->do_narrow(__c, __dfault);
# 928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (__t != __dfault) {
# 929 "/usr/include/c++/4.4/bits/locale_facets.h" 3
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }
# 930 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __t;
# 931 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 956 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char
# 957 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__dfault, char *__to) const
# 958 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 959 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (__builtin_expect((_M_narrow_ok) == 1, true))
# 960 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 961 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__to, __lo, __hi - __lo);
# 962 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 963 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 964 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (!(_M_narrow_ok)) {
# 965 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_narrow_init(); }
# 966 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_narrow(__lo, __hi, __dfault, __to);
# 967 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 974 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const mask *table() const throw()
# 975 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return _M_table; }
# 979 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const mask *classic_table() throw();
# 989 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype();
# 1005 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1022 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1038 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1055 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1075 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const
# 1076 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return __c; }
# 1098 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const
# 1099 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 1100 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__dest, __lo, __hi - __lo);
# 1101 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 1102 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 1124 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const
# 1125 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return __c; }
# 1150 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1151 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__dest) const
# 1152 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 1153 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__dest, __lo, __hi - __lo);
# 1154 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 1155 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 1158 "/usr/include/c++/4.4/bits/locale_facets.h" 3
private: void _M_narrow_init() const;
# 1159 "/usr/include/c++/4.4/bits/locale_facets.h" 3
void _M_widen_init() const;
# 1160 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1175 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< wchar_t> : public __ctype_abstract_base< wchar_t> {
# 1180 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: typedef wchar_t char_type;
# 1181 "/usr/include/c++/4.4/bits/locale_facets.h" 3
typedef wctype_t __wmask_type;
# 1184 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 1187 "/usr/include/c++/4.4/bits/locale_facets.h" 3
bool _M_narrow_ok;
# 1188 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char _M_narrow[128];
# 1189 "/usr/include/c++/4.4/bits/locale_facets.h" 3
wint_t _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 1192 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mask _M_bit[16];
# 1193 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__wmask_type _M_wmask[16];
# 1198 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: static locale::id id;
# 1208 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(size_t = (0));
# 1219 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale, size_t = (0));
# 1223 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __wmask_type _M_convert_to_wmask(const mask) const;
# 1227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual ~ctype();
# 1243 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual bool do_is(mask, char_type) const;
# 1262 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type *, const char_type *, mask *) const;
# 1280 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const;
# 1298 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const;
# 1315 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1332 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1348 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1365 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1385 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char) const;
# 1407 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const;
# 1430 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const;
# 1456 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const;
# 1461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
void _M_initialize_ctype();
# 1462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1466 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype_byname : public ctype < _CharT >
    {
    public :
      typedef typename ctype < _CharT > :: mask mask;

      explicit
      ctype_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ ctype_byname ( ) { };
    };
# 1482 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype_byname< char> : public ctype< char> {
# 1486 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: explicit ctype_byname(const char *, size_t = (0));
# 1490 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype_byname();
# 1491 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype_byname< wchar_t> : public ctype< wchar_t> {
# 1499 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: explicit ctype_byname(const char *, size_t = (0));
# 1503 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype_byname();
# 1504 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1507 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
inline bool ctype< char> ::is(mask __m, char __c) const
# 42 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; }
# 46 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const
# 47 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
{
# 48 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
while (__low < __high) {
# 49 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>((*(__low++)))]); }
# 50 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
return __high;
# 51 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
}
# 55 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const
# 56 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
{
# 57 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>((*__low))]) & __m))) {
# 59 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
++__low; }
# 60 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
return __low;
# 61 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
}
# 65 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const
# 66 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
{
# 67 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>((*__low))]) & __m) != 0)) {
# 69 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
++__low; }
# 70 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
return __low;
# 71 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
}
# 73 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
}
# 1512 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute__((visibility("default"))) {
# 1515 "/usr/include/c++/4.4/bits/locale_facets.h" 3
class __num_base {
# 1521 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: enum {
# 1522 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ominus,
# 1523 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oplus,
# 1524 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ox,
# 1525 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oX,
# 1526 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_odigits,
# 1527 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_odigits_end = 20,
# 1528 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oudigits = 20,
# 1529 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oudigits_end = 36,
# 1530 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oe = 18,
# 1531 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oE = 34,
# 1532 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oend = 36
# 1533 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1540 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const char *_S_atoms_out;
# 1544 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const char *_S_atoms_in;
# 1547 "/usr/include/c++/4.4/bits/locale_facets.h" 3
enum {
# 1548 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iminus,
# 1549 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iplus,
# 1550 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ix,
# 1551 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iX,
# 1552 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_izero,
# 1553 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ie = 18,
# 1554 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iE = 24,
# 1555 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iend = 26
# 1556 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1561 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static void _S_format_float(const ios_base &, char *, char);
# 1562 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1564 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    struct __numpunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT * _M_truename;
      size_t _M_truename_size;
      const _CharT * _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out [ __num_base :: _S_oend ];





      _CharT _M_atoms_in [ __num_base :: _S_iend ];

      bool _M_allocated;

      __numpunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_truename ( __null ), _M_truename_size ( 0 ), _M_falsename ( __null ),
      _M_falsename_size ( 0 ), _M_decimal_point ( _CharT ( ) ),
      _M_thousands_sep ( _CharT ( ) ), _M_allocated ( false )
      { }

      ~ __numpunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __numpunct_cache &
      operator = ( const __numpunct_cache & );

      explicit
      __numpunct_cache ( const __numpunct_cache & );
    };
# 1611 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    __numpunct_cache < _CharT > :: ~ __numpunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_truename;
   delete [ ] _M_falsename;
 }
    }
# 1635 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __numpunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;

    public :

      static locale :: id id;






      explicit
      numpunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( ); }
# 1672 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_numpunct ( ); }
# 1686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( __cloc ); }
# 1700 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }
# 1713 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }
# 1744 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string
      grouping ( ) const
      { return this -> do_grouping ( ); }
# 1757 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      truename ( ) const
      { return this -> do_truename ( ); }
# 1770 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      falsename ( ) const
      { return this -> do_falsename ( ); }

    protected :

      virtual
      ~ numpunct ( );
# 1787 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }
# 1799 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }
# 1812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }
# 1825 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_truename ( ) const
      { return _M_data -> _M_truename; }
# 1838 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_falsename ( ) const
      { return _M_data -> _M_falsename; }


      void
      _M_initialize_numpunct ( __c_locale __cloc = __null );
    };
# 1847 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 1848 "/usr/include/c++/4.4/bits/locale_facets.h" 3
numpunct< _CharT> ::id;
# 1851 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> numpunct< char> ::~numpunct();
# 1855 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale);
# 1859 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> numpunct< wchar_t> ::~numpunct();
# 1863 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale);
# 1867 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct_byname : public numpunct < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      numpunct_byname ( const char * __s, size_t __refs = 0 )
      : numpunct < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_numpunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ numpunct_byname ( ) { }
    };
# 1907 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class num_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale :: id id;
# 1928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_get ( size_t __refs = 0 ) : facet ( __refs ) { }
# 1954 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, bool & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 1990 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned short & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned int & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }


      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2049 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, float & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2091 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, void * & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

    protected :

      virtual ~ num_get ( ) { }

      iter_type
      _M_extract_float ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         string & ) const;

      template < typename _ValueT >
        iter_type
        _M_extract_int ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         _ValueT & ) const;

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value, int > :: __type
        _M_find ( const _CharT2 *, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   if ( __len <= 10 )
     {
       if ( __c >= _CharT2 ( '0' ) && __c < _CharT2 ( _CharT2 ( '0' ) + __len ) )
  __ret = __c - _CharT2 ( '0' );
     }
   else
     {
       if ( __c >= _CharT2 ( '0' ) && __c <= _CharT2 ( '9' ) )
  __ret = __c - _CharT2 ( '0' );
       else if ( __c >= _CharT2 ( 'a' ) && __c <= _CharT2 ( 'f' ) )
  __ret = 10 + ( __c - _CharT2 ( 'a' ) );
       else if ( __c >= _CharT2 ( 'A' ) && __c <= _CharT2 ( 'F' ) )
  __ret = 10 + ( __c - _CharT2 ( 'A' ) );
     }
   return __ret;
 }

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < ! __is_char < _CharT2 > :: __value,
          int > :: __type
        _M_find ( const _CharT2 * __zero, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   const char_type * __q = char_traits < _CharT2 > :: find ( __zero, __len, __c );
   if ( __q )
     {
       __ret = __q - __zero;
       if ( __ret > 15 )
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, bool & ) const;

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned short & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned int & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      float & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      double & ) const;







      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long double & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      void * & ) const;
# 2227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
    };
# 2229 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id
# 2230 "/usr/include/c++/4.4/bits/locale_facets.h" 3
num_get< _CharT, _InIter> ::id;
# 2244 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class num_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;
# 2265 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_put ( size_t __refs = 0 ) : facet ( __refs ) { }
# 2283 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, bool __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2325 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }


      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2388 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   long double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2413 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   const void * __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

    protected :
      template < typename _ValueT >
        iter_type
        _M_insert_float ( iter_type, ios_base & __io, char_type __fill,
   char __mod, _ValueT __v ) const;

      void
      _M_group_float ( const char * __grouping, size_t __grouping_size,
       char_type __sep, const char_type * __p, char_type * __new,
       char_type * __cs, int & __len ) const;

      template < typename _ValueT >
        iter_type
        _M_insert_int ( iter_type, ios_base & __io, char_type __fill,
        _ValueT __v ) const;

      void
      _M_group_int ( const char * __grouping, size_t __grouping_size,
     char_type __sep, ios_base & __io, char_type * __new,
     char_type * __cs, int & __len ) const;

      void
      _M_pad ( char_type __fill, streamsize __w, ios_base & __io,
      char_type * __new, const char_type * __cs, int & __len ) const;


      virtual
      ~ num_put ( ) { };
# 2461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, bool __v ) const;

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill, long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, double __v ) const;






      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long double __v ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, const void * __v ) const;







    };
# 2508 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id
# 2509 "/usr/include/c++/4.4/bits/locale_facets.h" 3
num_put< _CharT, _OutIter> ::id;
# 2519 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isspace ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: space, __c ); }
# 2525 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isprint ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: print, __c ); }
# 2531 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    iscntrl ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: cntrl, __c ); }
# 2537 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: upper, __c ); }
# 2543 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    islower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: lower, __c ); }
# 2549 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalpha ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alpha, __c ); }
# 2555 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: digit, __c ); }
# 2561 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    ispunct ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: punct, __c ); }
# 2567 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isxdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: xdigit, __c ); }
# 2573 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalnum ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alnum, __c ); }
# 2579 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isgraph ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: graph, __c ); }
# 2585 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    toupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . toupper ( __c ); }
# 2591 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    tolower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . tolower ( __c ); }
# 2596 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 37 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template< class _Facet>
# 42 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
struct __use_cache {
# 45 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
const _Facet *operator()(const locale &) const;
# 46 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
};
# 49 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    struct __use_cache < __numpunct_cache < _CharT > >
    {
      const __numpunct_cache < _CharT > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = numpunct < _CharT > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __numpunct_cache < _CharT > * __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache < _CharT >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast < const __numpunct_cache < _CharT > * > ( __caches [ __i ] );
      }
    };
# 76 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    void
    __numpunct_cache < _CharT > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const numpunct < _CharT > & __np = use_facet < numpunct < _CharT > > ( __loc );

      _M_grouping_size = __np . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __np . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( _M_grouping [ 0 ] ) > 0
    && ( _M_grouping [ 0 ]
        != __gnu_cxx :: __numeric_traits < char > :: __max ) );

      _M_truename_size = __np . truename ( ) . size ( );
      _CharT * __truename = new _CharT [ _M_truename_size ];
      __np . truename ( ) . copy ( __truename, _M_truename_size );
      _M_truename = __truename;

      _M_falsename_size = __np . falsename ( ) . size ( );
      _CharT * __falsename = new _CharT [ _M_falsename_size ];
      __np . falsename ( ) . copy ( __falsename, _M_falsename_size );
      _M_falsename = __falsename;

      _M_decimal_point = __np . decimal_point ( );
      _M_thousands_sep = __np . thousands_sep ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( __num_base :: _S_atoms_out,
   __num_base :: _S_atoms_out + __num_base :: _S_oend, _M_atoms_out );
      __ct . widen ( __num_base :: _S_atoms_in,
   __num_base :: _S_atoms_in + __num_base :: _S_iend, _M_atoms_in );
    }
# 122 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
bool __verify_grouping(const char *, size_t, const string &);
# 127 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    _M_extract_float ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, string & __xtrc ) const
    {
      typedef char_traits < _CharT > __traits_type;
      typedef __numpunct_cache < _CharT > __cache_type;
      __use_cache < __cache_type > __uc;
      const locale & __loc = __io . _M_getloc ( );
      const __cache_type * __lc = __uc ( __loc );
      const _CharT * __lit = __lc -> _M_atoms_in;
      char_type __c = char_type ( );


      bool __testeof = __beg == __end;


      if ( ! __testeof )
 {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
     {
       __xtrc += __plus ? '+' : '-';
       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while ( ! __testeof )
 {
   if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       || __c == __lc -> _M_decimal_point )
     break;
   else if ( __c == __lit [ __num_base :: _S_izero ] )
     {
       if ( ! __found_mantissa )
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++ __sep_pos;

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if ( __lc -> _M_use_grouping )
 __found_grouping . reserve ( 32 );
      const char_type * __lit_zero = __lit + __num_base :: _S_izero;

      if ( ! __lc -> _M_allocated )

 while ( ! __testeof )
   {
     const int __digit = _M_find ( __lit_zero, 10, __c );
     if ( __digit != - 1 )
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if ( __c == __lc -> _M_decimal_point
       && ! __found_dec && ! __found_sci )
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ( ( __c == __lit [ __num_base :: _S_ie ]
        || __c == __lit [ __num_base :: _S_iE ] )
       && ! __found_sci && __found_mantissa )
       {

  __xtrc += 'e';
  __found_sci = true;


  if ( ++ __beg != __end )
    {
      __c = * __beg;
      const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
      if ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }
      else
 while ( ! __testeof )
   {


     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       {
  if ( ! __found_dec && ! __found_sci )
    {


      if ( __sep_pos )
        {
   __found_grouping += static_cast < char > ( __sep_pos );
   __sep_pos = 0;
        }
      else
        {


   __xtrc . clear ( );
   break;
        }
    }
  else
    break;
       }
     else if ( __c == __lc -> _M_decimal_point )
       {
  if ( ! __found_dec && ! __found_sci )
    {



      if ( __found_grouping . size ( ) )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type * __q =
    __traits_type :: find ( __lit_zero, 10, __c );
  if ( __q )
    {
      __xtrc += '0' + ( __q - __lit_zero );
      __found_mantissa = true;
      ++ __sep_pos;
    }
  else if ( ( __c == __lit [ __num_base :: _S_ie ]
     || __c == __lit [ __num_base :: _S_iE ] )
    && ! __found_sci && __found_mantissa )
    {

      if ( __found_grouping . size ( ) && ! __found_dec )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += 'e';
      __found_sci = true;


      if ( ++ __beg != __end )
        {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping
     && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }



      if ( __found_grouping . size ( ) )
        {

   if ( ! __found_dec && ! __found_sci )
     __found_grouping += static_cast < char > ( __sep_pos );

          if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
          __lc -> _M_grouping_size,
          __found_grouping ) )
     __err = ios_base :: failbit;
        }

      return __beg;
    }
# 351 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    template < typename _ValueT >
      _InIter
      num_get < _CharT, _InIter > ::
      _M_extract_int ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, _ValueT & __v ) const
      {
        typedef char_traits < _CharT > __traits_type;
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_in;
 char_type __c = char_type ( );


 const ios_base :: fmtflags __basefield = __io . flags ( )
                                        & ios_base :: basefield;
 const bool __oct = __basefield == ios_base :: oct;
 int __base = __oct ? 8 : ( __basefield == ios_base :: hex ? 16 : 10 );


 bool __testeof = __beg == __end;


 bool __negative = false;
 if ( ! __testeof )
   {
     __c = * __beg;
     __negative = __c == __lit [ __num_base :: _S_iminus ];
     if ( ( __negative || __c == __lit [ __num_base :: _S_iplus ] )
  && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  && ! ( __c == __lc -> _M_decimal_point ) )
       {
  if ( ++ __beg != __end )
    __c = * __beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while ( ! __testeof )
   {
     if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  || __c == __lc -> _M_decimal_point )
       break;
     else if ( __c == __lit [ __num_base :: _S_izero ]
       && ( ! __found_zero || __base == 10 ) )
       {
  __found_zero = true;
  ++ __sep_pos;
  if ( __basefield == 0 )
    __base = 8;
  if ( __base == 8 )
    __sep_pos = 0;
       }
     else if ( __found_zero
       && ( __c == __lit [ __num_base :: _S_ix ]
    || __c == __lit [ __num_base :: _S_iX ] ) )
       {
  if ( __basefield == 0 )
    __base = 16;
  if ( __base == 16 )
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if ( ++ __beg != __end )
       {
  __c = * __beg;
  if ( ! __found_zero )
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = ( __base == 16 ? __num_base :: _S_iend
         - __num_base :: _S_izero : __base );


 string __found_grouping;
 if ( __lc -> _M_use_grouping )
   __found_grouping . reserve ( 32 );
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   ( __negative && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
   ? - __gnu_cxx :: __numeric_traits < _ValueT > :: __min
   : __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type * __lit_zero = __lit + __num_base :: _S_izero;

 if ( ! __lc -> _M_allocated )

   while ( ! __testeof )
     {
       __digit = _M_find ( __lit_zero, __len, __c );
       if ( __digit == - 1 )
  break;

       if ( __result > __smax )
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++ __sep_pos;
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 else
   while ( ! __testeof )
     {


       if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  {


    if ( __sep_pos )
      {
        __found_grouping += static_cast < char > ( __sep_pos );
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if ( __c == __lc -> _M_decimal_point )
  break;
       else
  {
    const char_type * __q =
      __traits_type :: find ( __lit_zero, __len, __c );
    if ( ! __q )
      break;

    __digit = __q - __lit_zero;
    if ( __digit > 15 )
      __digit -= 6;
    if ( __result > __smax )
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++ __sep_pos;
      }
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }



 if ( __found_grouping . size ( ) )
   {

     __found_grouping += static_cast < char > ( __sep_pos );

     if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
     __lc -> _M_grouping_size,
     __found_grouping ) )
       __err = ios_base :: failbit;
   }



 if ( ( ! __sep_pos && ! __found_zero && ! __found_grouping . size ( ) )
     || __testfail )
   {
     __v = 0;
     __err = ios_base :: failbit;
   }
 else if ( __testoverflow )
   {
     if ( __negative
  && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __min;
     else
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
     __err = ios_base :: failbit;
   }
 else
   __v = __negative ? - __result : __result;

 if ( __testeof )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 572 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, bool & __v ) const
    {
      if ( ! ( __io . flags ( ) & ios_base :: boolalpha ) )
        {



   long __l = - 1;
          __beg = _M_extract_int ( __beg, __end, __io, __err, __l );
   if ( __l == 0 || __l == 1 )
     __v = bool ( __l );
   else
     {


       __v = true;
       __err = ios_base :: failbit;
       if ( __beg == __end )
  __err |= ios_base :: eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc -> _M_falsename_size == 0;
   bool __donet = __lc -> _M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while ( ! __donef || ! __donet )
     {
       if ( __beg == __end )
  {
    __testeof = true;
    break;
  }

       const char_type __c = * __beg;

       if ( ! __donef )
  __testf = __c == __lc -> _M_falsename [ __n ];

       if ( ! __testf && __donet )
  break;

       if ( ! __donet )
  __testt = __c == __lc -> _M_truename [ __n ];

       if ( ! __testt && __donef )
  break;

       if ( ! __testt && ! __testf )
  break;

       ++ __n;
       ++ __beg;

       __donef = ! __testf || __n >= __lc -> _M_falsename_size;
       __donet = ! __testt || __n >= __lc -> _M_truename_size;
     }
   if ( __testf && __n == __lc -> _M_falsename_size && __n )
     {
       __v = false;
       if ( __testt && __n == __lc -> _M_truename_size )
  __err = ios_base :: failbit;
       else
  __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else if ( __testt && __n == __lc -> _M_truename_size && __n )
     {
       __v = true;
       __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base :: failbit;
       if ( __testeof )
  __err |= ios_base :: eofbit;
     }
 }
      return __beg;
    }
# 668 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, float & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 683 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 715 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 730 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, void * & __v ) const
    {

      typedef ios_base :: fmtflags fmtflags;
      const fmtflags __fmt = __io . flags ( );
      __io . flags ( ( __fmt & ~ ios_base :: basefield ) | ios_base :: hex );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int ( __beg, __end, __io, __err, __ul );


      __io . flags ( __fmt );

      __v = reinterpret_cast < void * > ( __ul );
      return __beg;
    }
# 757 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_pad ( _CharT __fill, streamsize __w, ios_base & __io,
    _CharT * __new, const _CharT * __cs, int & __len ) const
    {


      __pad < _CharT, char_traits < _CharT > > :: _S_pad ( __io, __fill, __new,
        __cs, __w, __len );
      __len = static_cast < int > ( __w );
    }
# 772 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _ValueT >
    int
    __int_to_char ( _CharT * __bufend, _ValueT __v, const _CharT * __lit,
    ios_base :: fmtflags __flags, bool __dec )
    {
      _CharT * __buf = __bufend;
      if ( __builtin_expect ( __dec, true ) )
 {

   do
     {
       * -- __buf = __lit [ ( __v % 10 ) + __num_base :: _S_odigits ];
       __v /= 10;
     }
   while ( __v != 0 );
 }
      else if ( ( __flags & ios_base :: basefield ) == ios_base :: oct )
 {

   do
     {
       * -- __buf = __lit [ ( __v & 7 ) + __num_base :: _S_odigits ];
       __v >>= 3;
     }
   while ( __v != 0 );
 }
      else
 {

   const bool __uppercase = __flags & ios_base :: uppercase;
   const int __case_offset = __uppercase ? __num_base :: _S_oudigits
                                         : __num_base :: _S_odigits;
   do
     {
       * -- __buf = __lit [ ( __v & 15 ) + __case_offset ];
       __v >>= 4;
     }
   while ( __v != 0 );
 }
      return __bufend - __buf;
    }
# 816 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_int ( const char * __grouping, size_t __grouping_size, _CharT __sep,
   ios_base &, _CharT * __new, _CharT * __cs, int & __len ) const
    {
      _CharT * __p = std :: __add_grouping ( __new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len );
      __len = __p - __new;
    }
# 827 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_int ( _OutIter __s, ios_base & __io, _CharT __fill,
      _ValueT __v ) const
      {
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_out;
 const ios_base :: fmtflags __flags = __io . flags ( );


 const int __ilen = 5 * sizeof ( _ValueT );
 _CharT * __cs = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __ilen ) );



 const ios_base :: fmtflags __basefield = __flags & ios_base :: basefield;
 const bool __dec = ( __basefield != ios_base :: oct
       && __basefield != ios_base :: hex );
 const __unsigned_type __u = ( ( __v > 0 || ! __dec )
         ? __unsigned_type ( __v )
         : - __unsigned_type ( __v ) );
  int __len = __int_to_char ( __cs + __ilen, __u, __lit, __flags, __dec );
 __cs += __ilen - __len;


 if ( __lc -> _M_use_grouping )
   {


     _CharT * __cs2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * ( __len + 1 )
          * 2 ) );
     _M_group_int ( __lc -> _M_grouping, __lc -> _M_grouping_size,
    __lc -> _M_thousands_sep, __io, __cs2 + 2, __cs, __len );
     __cs = __cs2 + 2;
   }


 if ( __builtin_expect ( __dec, true ) )
   {

     if ( __v >= 0 )
       {
  if ( bool ( __flags & ios_base :: showpos )
      && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
    * -- __cs = __lit [ __num_base :: _S_oplus ], ++ __len;
       }
     else
       * -- __cs = __lit [ __num_base :: _S_ominus ], ++ __len;
   }
 else if ( bool ( __flags & ios_base :: showbase ) && __v )
   {
     if ( __basefield == ios_base :: oct )
       * -- __cs = __lit [ __num_base :: _S_odigits ], ++ __len;
     else
       {

  const bool __uppercase = __flags & ios_base :: uppercase;
  * -- __cs = __lit [ __num_base :: _S_ox + __uppercase ];

  * -- __cs = __lit [ __num_base :: _S_odigits ];
  __len += 2;
       }
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __cs3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __cs3, __cs, __len );
     __cs = __cs3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __cs, __len );
      }
# 916 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_float ( const char * __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT * __p, _CharT * __new,
     _CharT * __cs, int & __len ) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT * __p2 = std :: __add_grouping ( __new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen );


      int __newlen = __p2 - __new;
      if ( __p )
 {
   char_traits < _CharT > :: copy ( __p2, __p, __len - __declen );
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_float ( _OutIter __s, ios_base & __io, _CharT __fill, char __mod,
         _ValueT __v ) const
      {
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );


 const streamsize __prec = __io . precision ( ) < 0 ? 6 : __io . precision ( );

 const int __max_digits =
   __gnu_cxx :: __numeric_traits < _ValueT > :: __digits10;


 int __len;

 char __fbuf [ 16 ];
 __num_base :: _S_format_float ( __io, __fbuf, __mod );




 int __cs_size = __max_digits * 3;
 char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
 __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
          __fbuf, __prec, __v );


 if ( __len >= __cs_size )
   {
     __cs_size = __len + 1;
     __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
     __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
       __fbuf, __prec, __v );
   }



 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 _CharT * __ws = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __len ) );
 __ctype . widen ( __cs, __cs + __len, __ws );


 _CharT * __wp = 0;
 const char * __p = char_traits < char > :: find ( __cs, __len, '.' );
 if ( __p )
   {
     __wp = __ws + ( __p - __cs );
     * __wp = __lc -> _M_decimal_point;
   }




 if ( __lc -> _M_use_grouping
     && ( __wp || __len < 3 || ( __cs [ 1 ] <= '9' && __cs [ 2 ] <= '9'
          && __cs [ 1 ] >= '0' && __cs [ 2 ] >= '0' ) ) )
   {


     _CharT * __ws2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __len * 2 ) );

     streamsize __off = 0;
     if ( __cs [ 0 ] == '-' || __cs [ 0 ] == '+' )
       {
  __off = 1;
  __ws2 [ 0 ] = __ws [ 0 ];
  __len -= 1;
       }

     _M_group_float ( __lc -> _M_grouping, __lc -> _M_grouping_size,
      __lc -> _M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len );
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __ws3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __ws3, __ws, __len );
     __ws = __ws3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __ws, __len );
      }
# 1071 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, bool __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      if ( ( __flags & ios_base :: boolalpha ) == 0 )
        {
          const long __l = __v;
          __s = _M_insert_int ( __s, __io, __fill, __l );
        }
      else
        {
   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   const _CharT * __name = __v ? __lc -> _M_truename
                              : __lc -> _M_falsename;
   int __len = __v ? __lc -> _M_truename_size
                   : __lc -> _M_falsename_size;

   const streamsize __w = __io . width ( );
   if ( __w > static_cast < streamsize > ( __len ) )
     {
       const streamsize __plen = __w - __len;
       _CharT * __ps
  = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
       * __plen ) );

       char_traits < _CharT > :: assign ( __ps, __plen, __fill );
       __io . width ( 0 );

       if ( ( __flags & ios_base :: adjustfield ) == ios_base :: left )
  {
    __s = std :: __write ( __s, __name, __len );
    __s = std :: __write ( __s, __ps, __plen );
  }
       else
  {
    __s = std :: __write ( __s, __ps, __plen );
    __s = std :: __write ( __s, __name, __len );
  }
       return __s;
     }
   __io . width ( 0 );
   __s = std :: __write ( __s, __name, __len );
 }
      return __s;
    }
# 1123 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, double __v ) const
    { return _M_insert_float ( __s, __io, __fill, char ( ), __v ); }
# 1137 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
    long double __v ) const
    { return _M_insert_float ( __s, __io, __fill, 'L', __v ); }
# 1144 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           const void * __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      const ios_base :: fmtflags __fmt = ~ ( ios_base :: basefield
      | ios_base :: uppercase );
      __io . flags ( ( __flags & __fmt ) | ( ios_base :: hex | ios_base :: showbase ) );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( const void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      __s = _M_insert_int ( __s, __io, __fill,
     reinterpret_cast < _UIntPtrType > ( __v ) );
      __io . flags ( __flags );
      return __s;
    }
# 1174 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits >
    void
    __pad < _CharT, _Traits > :: _S_pad ( ios_base & __io, _CharT __fill,
       _CharT * __news, const _CharT * __olds,
       streamsize __newlen, streamsize __oldlen )
    {
      const size_t __plen = static_cast < size_t > ( __newlen - __oldlen );
      const ios_base :: fmtflags __adjust = __io . flags ( ) & ios_base :: adjustfield;


      if ( __adjust == ios_base :: left )
 {
   _Traits :: copy ( __news, __olds, __oldlen );
   _Traits :: assign ( __news + __oldlen, __plen, __fill );
   return;
 }

      size_t __mod = 0;
      if ( __adjust == ios_base :: internal )
 {



          const locale & __loc = __io . _M_getloc ( );
   const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

   if ( __ctype . widen ( '-' ) == __olds [ 0 ]
       || __ctype . widen ( '+' ) == __olds [ 0 ] )
     {
       __news [ 0 ] = __olds [ 0 ];
       __mod = 1;
       ++ __news;
     }
   else if ( __ctype . widen ( '0' ) == __olds [ 0 ]
     && __oldlen > 1
     && ( __ctype . widen ( 'x' ) == __olds [ 1 ]
         || __ctype . widen ( 'X' ) == __olds [ 1 ] ) )
     {
       __news [ 0 ] = __olds [ 0 ];
       __news [ 1 ] = __olds [ 1 ];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits :: assign ( __news, __plen, __fill );
      _Traits :: copy ( __news + __plen, __olds + __mod, __oldlen - __mod );
    }
# 1223 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last )
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while ( __last - __first > __gbeg [ __idx ]
      && static_cast < signed char > ( __gbeg [ __idx ] ) > 0
      && __gbeg [ __idx ] != __gnu_cxx :: __numeric_traits < char > :: __max )
 {
   __last -= __gbeg [ __idx ];
   __idx < __gsize - 1 ? ++ __idx : ++ __ctr;
 }

      while ( __first != __last )
 * __s ++ = * __first ++;

      while ( __ctr -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      while ( __idx -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      return __s;
    }
# 1264 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct< char> ;
# 1265 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct_byname< char> ;
# 1266 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1267 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1270 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const ctype< char> &use_facet< ctype< char> > (const locale &);
# 1274 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const numpunct< char> &use_facet< numpunct< char> > (const locale &);
# 1278 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1282 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1286 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1290 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 1294 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1298 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1303 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct< wchar_t> ;
# 1304 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct_byname< wchar_t> ;
# 1305 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1306 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1309 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const ctype< wchar_t> &use_facet< ctype< wchar_t> > (const locale &);
# 1313 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const numpunct< wchar_t> &use_facet< numpunct< wchar_t> > (const locale &);
# 1317 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1321 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1325 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1329 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 1333 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1337 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1343 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
}
# 42 "/usr/include/c++/4.4/bits/basic_ios.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/basic_ios.h" 3
template < typename _Facet >
    inline const _Facet &
    __check_facet ( const _Facet * __f )
    {
      if ( ! __f )
 __throw_bad_cast ( );
      return * __f;
    }
# 61 "/usr/include/c++/4.4/bits/basic_ios.h" 3
template < typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
    public :






      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;






      typedef ctype < _CharT > __ctype_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
           __num_put_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
           __num_get_type;



    protected :
      basic_ostream < _CharT, _Traits > * _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf < _CharT, _Traits > * _M_streambuf;


      const __ctype_type * _M_ctype;

      const __num_put_type * _M_num_put;

      const __num_get_type * _M_num_get;

    public :







      operator void * ( ) const
      { return this -> fail ( ) ? 0 : const_cast < basic_ios * > ( this ); }

      bool
      operator ! ( ) const
      { return this -> fail ( ); }
# 126 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      rdstate ( ) const
      { return _M_streambuf_state; }
# 137 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      clear ( iostate __state = goodbit );







      void
      setstate ( iostate __state )
      { this -> clear ( this -> rdstate ( ) | __state ); }




      void
      _M_setstate ( iostate __state )
      {


 _M_streambuf_state |= __state;
 if ( this -> exceptions ( ) & __state )
   throw;
      }







      bool
      good ( ) const
      { return this -> rdstate ( ) == 0; }







      bool
      eof ( ) const
      { return ( this -> rdstate ( ) & eofbit ) != 0; }
# 190 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      bool
      fail ( ) const
      { return ( this -> rdstate ( ) & ( badbit | failbit ) ) != 0; }







      bool
      bad ( ) const
      { return ( this -> rdstate ( ) & badbit ) != 0; }
# 211 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      exceptions ( ) const
      { return _M_exception; }
# 246 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      exceptions ( iostate __except )
      {
        _M_exception = __except;
        this -> clear ( _M_streambuf_state );
      }







      explicit
      basic_ios ( basic_streambuf < _CharT, _Traits > * __sb )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( ), _M_fill_init ( false ), _M_streambuf ( 0 ),
 _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { this -> init ( __sb ); }







      virtual
      ~ basic_ios ( ) { }
# 284 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( ) const
      { return _M_tie; }
# 296 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( basic_ostream < _CharT, _Traits > * __tiestr )
      {
        basic_ostream < _CharT, _Traits > * __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf < _CharT, _Traits > *
      rdbuf ( ) const
      { return _M_streambuf; }
# 336 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_streambuf < _CharT, _Traits > *
      rdbuf ( basic_streambuf < _CharT, _Traits > * __sb );
# 350 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ios &
      copyfmt ( const basic_ios & __rhs );







      char_type
      fill ( ) const
      {
 if ( ! _M_fill_init )
   {
     _M_fill = this -> widen ( ' ' );
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 379 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      fill ( char_type __ch )
      {
 char_type __old = this -> fill ( );
 _M_fill = __ch;
 return __old;
      }
# 399 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      locale
      imbue ( const locale & __loc );
# 419 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char
      narrow ( char_type __c, char __dfault ) const
      { return __check_facet ( _M_ctype ) . narrow ( __c, __dfault ); }
# 438 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      widen ( char __c ) const
      { return __check_facet ( _M_ctype ) . widen ( __c ); }

    protected :







      basic_ios ( )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( char_type ( ) ), _M_fill_init ( false ),
 _M_streambuf ( 0 ), _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { }







      void
      init ( basic_streambuf < _CharT, _Traits > * __sb );

      void
      _M_cache_locale ( const locale & __loc );
    };
# 468 "/usr/include/c++/4.4/bits/basic_ios.h" 3
}
# 36 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 38 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: clear ( iostate __state )
    {
      if ( this -> rdbuf ( ) )
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if ( this -> exceptions ( ) & this -> rdstate ( ) )
 __throw_ios_failure ( ( "basic_ios::clear" ) );
    }
# 50 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_streambuf < _CharT, _Traits > *
    basic_ios < _CharT, _Traits > :: rdbuf ( basic_streambuf < _CharT, _Traits > * __sb )
    {
      basic_streambuf < _CharT, _Traits > * __old = _M_streambuf;
      _M_streambuf = __sb;
      this -> clear ( );
      return __old;
    }
# 60 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ios < _CharT, _Traits > &
    basic_ios < _CharT, _Traits > :: copyfmt ( const basic_ios & __rhs )
    {


      if ( this != & __rhs )
 {




   _Words * __words = ( __rhs . _M_word_size <= _S_local_word_size ) ?
                      _M_local_word : new _Words [ __rhs . _M_word_size ];


   _Callback_list * __cb = __rhs . _M_callbacks;
   if ( __cb )
     __cb -> _M_add_reference ( );
   _M_call_callbacks ( erase_event );
   if ( _M_word != _M_local_word )
     {
       delete [ ] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks ( );


   _M_callbacks = __cb;
   for ( int __i = 0; __i < __rhs . _M_word_size; ++ __i )
     __words [ __i ] = __rhs . _M_word [ __i ];
   _M_word = __words;
   _M_word_size = __rhs . _M_word_size;

   this -> flags ( __rhs . flags ( ) );
   this -> width ( __rhs . width ( ) );
   this -> precision ( __rhs . precision ( ) );
   this -> tie ( __rhs . tie ( ) );
   this -> fill ( __rhs . fill ( ) );
   _M_ios_locale = __rhs . getloc ( );
   _M_cache_locale ( _M_ios_locale );

   _M_call_callbacks ( copyfmt_event );


   this -> exceptions ( __rhs . exceptions ( ) );
 }
      return * this;
    }
# 111 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    locale
    basic_ios < _CharT, _Traits > :: imbue ( const locale & __loc )
    {
      locale __old ( this -> getloc ( ) );
      ios_base :: imbue ( __loc );
      _M_cache_locale ( __loc );
      if ( this -> rdbuf ( ) != 0 )
 this -> rdbuf ( ) -> pubimbue ( __loc );
      return __old;
    }
# 123 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: init ( basic_streambuf < _CharT, _Traits > * __sb )
    {

      ios_base :: _M_init ( );


      _M_cache_locale ( _M_ios_locale );
# 145 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
      _M_fill = _CharT ( );
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }
# 154 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: _M_cache_locale ( const locale & __loc )
    {
      if ( __builtin_expect ( has_facet < __ctype_type > ( __loc ), true ) )
 _M_ctype = & use_facet < __ctype_type > ( __loc );
      else
 _M_ctype = 0;

      if ( __builtin_expect ( has_facet < __num_put_type > ( __loc ), true ) )
 _M_num_put = & use_facet < __num_put_type > ( __loc );
      else
 _M_num_put = 0;

      if ( __builtin_expect ( has_facet < __num_get_type > ( __loc ), true ) )
 _M_num_get = & use_facet < __num_get_type > ( __loc );
      else
 _M_num_get = 0;
    }
# 178 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
extern template class basic_ios< char, char_traits< char> > ;
# 181 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 185 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
}
# 43 "/usr/include/c++/4.4/ostream" 3
namespace std __attribute__((visibility("default"))) {
# 54 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
             __num_put_type;
      typedef ctype < _CharT > __ctype_type;
# 81 "/usr/include/c++/4.4/ostream" 3
      explicit
      basic_ostream ( __streambuf_type * __sb )
      { this -> init ( __sb ); }






      virtual
      ~ basic_ostream ( ) { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( __ostream_type & ( * __pf ) ( __ostream_type & ) )
      {



 return __pf ( * this );
      }

      __ostream_type &
      operator << ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( ios_base & ( * __pf ) ( ios_base & ) )
      {



 __pf ( * this );
 return * this;
      }
# 164 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( bool __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( short __n );

      __ostream_type &
      operator << ( unsigned short __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }

      __ostream_type &
      operator << ( int __n );

      __ostream_type &
      operator << ( unsigned int __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }


      __ostream_type &
      operator << ( long long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long long __n )
      { return _M_insert ( __n ); }


      __ostream_type &
      operator << ( double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( float __f )
      {


 return _M_insert ( static_cast < double > ( __f ) );
      }

      __ostream_type &
      operator << ( long double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( const void * __p )
      { return _M_insert ( __p ); }
# 249 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( __streambuf_type * __sb );
# 282 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      put ( char_type __c );


      void
      _M_write ( const char_type * __s, streamsize __n )
      {
 const streamsize __put = this -> rdbuf ( ) -> sputn ( __s, __n );
 if ( __put != __n )
   this -> setstate ( ios_base :: badbit );
      }
# 310 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      write ( const char_type * __s, streamsize __n );
# 323 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      flush ( );
# 334 "/usr/include/c++/4.4/ostream" 3
      pos_type
      tellp ( );
# 345 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      seekp ( pos_type );
# 357 "/usr/include/c++/4.4/ostream" 3
       __ostream_type &
      seekp ( off_type, ios_base :: seekdir );

    protected :
      basic_ostream ( )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __ostream_type &
        _M_insert ( _ValueT __v );
    };
# 376 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream < _CharT, _Traits > :: sentry
    {

      bool _M_ok;
      basic_ostream < _CharT, _Traits > & _M_os;

    public :
# 395 "/usr/include/c++/4.4/ostream" 3
      explicit
      sentry ( basic_ostream < _CharT, _Traits > & __os );
# 405 "/usr/include/c++/4.4/ostream" 3
      ~ sentry ( )
      {

 if ( bool ( _M_os . flags ( ) & ios_base :: unitbuf ) && ! uncaught_exception ( ) )
   {

     if ( _M_os . rdbuf ( ) && _M_os . rdbuf ( ) -> pubsync ( ) == - 1 )
       _M_os . setstate ( ios_base :: badbit );
   }
      }
# 423 "/usr/include/c++/4.4/ostream" 3
      operator bool ( ) const
      { return _M_ok; }
    };
# 444 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, _CharT __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 449 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, char __c )
    { return ( __out << __out . widen ( __c ) ); }
# 455 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, char __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 461 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, signed char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 466 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, unsigned char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 486 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const _CharT * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 498 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s );
# 503 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 516 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const signed char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 521 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const unsigned char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 536 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    endl ( basic_ostream < _CharT, _Traits > & __os )
    { return flush ( __os . put ( __os . widen ( '\n' ) ) ); }
# 547 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    ends ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . put ( _CharT ( ) ); }
# 557 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    flush ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . flush ( ); }
# 562 "/usr/include/c++/4.4/ostream" 3
}
# 43 "/usr/include/c++/4.4/bits/ostream.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > :: sentry ::
    sentry ( basic_ostream < _CharT, _Traits > & __os )
    : _M_ok ( false ), _M_os ( __os )
    {

      if ( __os . tie ( ) && __os . good ( ) )
 __os . tie ( ) -> flush ( );

      if ( __os . good ( ) )
 _M_ok = true;
      else
 __os . setstate ( ios_base :: failbit );
    }
# 60 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_ostream < _CharT, _Traits > &
      basic_ostream < _CharT, _Traits > ::
      _M_insert ( _ValueT __v )
      {
 sentry __cerb ( * this );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_put_type & __np = __check_facet ( this -> _M_num_put );
  if ( __np . put ( * this, * this, this -> fill ( ), __v ) . failed ( ) )
    __err |= ios_base :: badbit;
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 89 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( short __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned short > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 103 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( int __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned int > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 117 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( __streambuf_type * __sbin )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this );
      if ( __cerb && __sbin )
 {
   try
     {
       if ( ! __copy_streambufs ( __sbin, this -> rdbuf ( ) ) )
  __err |= ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbin )
 __err |= ios_base :: badbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 146 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    put ( char_type __c )
    {






      sentry __cerb ( * this );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __put = this -> rdbuf ( ) -> sputc ( __c );
       if ( traits_type :: eq_int_type ( __put, traits_type :: eof ( ) ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 180 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    write ( const _CharT * __s, streamsize __n )
    {







      sentry __cerb ( * this );
      if ( __cerb )
 {
   try
     { _M_write ( __s, __n ); }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      return * this;
    }
# 208 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    flush ( )
    {



      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( this -> rdbuf ( ) && this -> rdbuf ( ) -> pubsync ( ) == - 1 )
     __err |= ios_base :: badbit;
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 234 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_ostream < _CharT, _Traits > :: pos_type
    basic_ostream < _CharT, _Traits > ::
    tellp ( )
    {
      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 255 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( pos_type __pos )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 287 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( off_type __off, ios_base :: seekdir __dir )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 319 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 {


   const size_t __clen = char_traits < char > :: length ( __s );
   try
     {
       struct __ptr_guard
       {
  _CharT * __p;
  __ptr_guard ( _CharT * __ip ) : __p ( __ip ) { }
  ~ __ptr_guard ( ) { delete [ ] __p; }
  _CharT * __get ( ) { return __p; }
       } __pg ( new _CharT [ __clen ] );

       _CharT * __ws = __pg . __get ( );
       for ( size_t __i = 0; __i < __clen; ++ __i )
  __ws [ __i ] = __out . widen ( __s [ __i ] );
       __ostream_insert ( __out, __ws, __clen );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( ios_base :: badbit ); }
 }
      return __out;
    }
# 360 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template class basic_ostream< char, char_traits< char> > ;
# 361 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &endl(basic_ostream< char, char_traits< char> > &);
# 362 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &ends(basic_ostream< char, char_traits< char> > &);
# 363 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &flush(basic_ostream< char, char_traits< char> > &);
# 364 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, char);
# 365 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, unsigned char);
# 366 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, signed char);
# 367 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const char *);
# 368 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const unsigned char *);
# 369 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const signed char *);
# 371 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long);
# 372 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long);
# 373 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool);
# 375 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long);
# 376 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long);
# 378 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double);
# 379 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double);
# 380 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void *);
# 383 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 384 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &endl(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 385 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &ends(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 386 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &flush(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 387 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, wchar_t);
# 388 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, char);
# 389 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *);
# 390 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const char *);
# 392 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long);
# 393 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long);
# 394 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool);
# 396 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long);
# 397 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long);
# 399 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double);
# 400 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double);
# 401 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void *);
# 405 "/usr/include/c++/4.4/bits/ostream.tcc" 3
}
# 43 "/usr/include/c++/4.4/istream" 3
namespace std __attribute__((visibility("default"))) {
# 54 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
        __num_get_type;
      typedef ctype < _CharT > __ctype_type;

    protected :





      streamsize _M_gcount;

    public :
# 90 "/usr/include/c++/4.4/istream" 3
      explicit
      basic_istream ( __streambuf_type * __sb )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( __sb ); }






      virtual
      ~ basic_istream ( )
      { _M_gcount = streamsize ( 0 ); }


      class sentry;
      friend class sentry;
# 118 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( __istream_type & ( * __pf ) ( __istream_type & ) )
      { return __pf ( * this ); }

      __istream_type &
      operator >> ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( ios_base & ( * __pf ) ( ios_base & ) )
      {
 __pf ( * this );
 return * this;
      }
# 165 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( bool & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( short & __n );

      __istream_type &
      operator >> ( unsigned short & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( int & __n );

      __istream_type &
      operator >> ( unsigned int & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( long long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( float & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( long double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( void * & __p )
      { return _M_extract ( __p ); }
# 237 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( __streambuf_type * __sb );
# 247 "/usr/include/c++/4.4/istream" 3
      streamsize
      gcount ( ) const
      { return _M_gcount; }
# 279 "/usr/include/c++/4.4/istream" 3
      int_type
      get ( );
# 293 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type & __c );
# 320 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n, char_type __delim );
# 331 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n )
      { return this -> get ( __s, __n, this -> widen ( '\n' ) ); }
# 354 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb, char_type __delim );
# 364 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb )
      { return this -> get ( __sb, this -> widen ( '\n' ) ); }
# 393 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n, char_type __delim );
# 404 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n )
      { return this -> getline ( __s, __n, this -> widen ( '\n' ) ); }
# 428 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      ignore ( );

      __istream_type &
      ignore ( streamsize __n );

      __istream_type &
      ignore ( streamsize __n, int_type __delim );
# 445 "/usr/include/c++/4.4/istream" 3
      int_type
      peek ( );
# 463 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      read ( char_type * __s, streamsize __n );
# 482 "/usr/include/c++/4.4/istream" 3
      streamsize
      readsome ( char_type * __s, streamsize __n );
# 498 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      putback ( char_type __c );
# 513 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      unget ( );
# 531 "/usr/include/c++/4.4/istream" 3
      int
      sync ( );
# 545 "/usr/include/c++/4.4/istream" 3
      pos_type
      tellg ( );
# 560 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      seekg ( pos_type );
# 576 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      seekg ( off_type, ios_base :: seekdir );


    protected :
      basic_istream ( )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __istream_type &
        _M_extract ( _ValueT & __v );
    };
# 594 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::getline(char_type *, streamsize, char_type);
# 599 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize);
# 604 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize, int_type);
# 610 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type *, streamsize, char_type);
# 615 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize);
# 620 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize, int_type);
# 631 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream < _CharT, _Traits > :: sentry
    {
    public :

      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename _Traits :: int_type __int_type;
# 663 "/usr/include/c++/4.4/istream" 3
      explicit
      sentry ( basic_istream < _CharT, _Traits > & __is, bool __noskipws = false );
# 673 "/usr/include/c++/4.4/istream" 3
      operator bool ( ) const
      { return _M_ok; }

    private :
      bool _M_ok;
    };
# 693 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c );
# 697 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 702 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 734 "/usr/include/c++/4.4/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT *);
# 741 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 743 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 748 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 762 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_iostream
    : public basic_istream < _CharT, _Traits >,
      public basic_ostream < _CharT, _Traits >
    {
    public :



      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;







      explicit
      basic_iostream ( basic_streambuf < _CharT, _Traits > * __sb )
      : __istream_type ( __sb ), __ostream_type ( __sb ) { }




      virtual
      ~ basic_iostream ( ) { }

    protected :
      basic_iostream ( )
      : __istream_type ( ), __ostream_type ( ) { }
    };
# 823 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __is );
# 827 "/usr/include/c++/4.4/istream" 3
}
# 43 "/usr/include/c++/4.4/bits/istream.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > :: sentry ::
    sentry ( basic_istream < _CharT, _Traits > & __in, bool __noskip ) : _M_ok ( false )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      if ( __in . good ( ) )
 {
   if ( __in . tie ( ) )
     __in . tie ( ) -> flush ( );
   if ( ! __noskip && bool ( __in . flags ( ) & ios_base :: skipws ) )
     {
       const __int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       const __ctype_type & __ct = __check_facet ( __in . _M_ctype );
       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && __ct . is ( ctype_base :: space,
    traits_type :: to_char_type ( __c ) ) )
  __c = __sb -> snextc ( );




       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
 }

      if ( __in . good ( ) && __err == ios_base :: goodbit )
 _M_ok = true;
      else
 {
   __err |= ios_base :: failbit;
   __in . setstate ( __err );
 }
    }
# 83 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_istream < _CharT, _Traits > &
      basic_istream < _CharT, _Traits > ::
      _M_extract ( _ValueT & __v )
      {
 sentry __cerb ( * this, false );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_get_type & __ng = __check_facet ( this -> _M_num_get );
  __ng . get ( * this, 0, * this, __err, __v );
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 111 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( short & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < short > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < short > :: __max )
     __n = short ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 131 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( int & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < int > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < int > :: __max )
     __n = int ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 151 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( __streambuf_type * __sbout )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, false );
      if ( __cerb && __sbout )
 {
   try
     {
       bool __ineof;
       if ( ! __copy_streambufs_eof ( this -> rdbuf ( ), __sbout, __ineof ) )
  __err |= ios_base :: failbit;
       if ( __ineof )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: failbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbout )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 183 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    get ( void )
    {
      const int_type __eof = traits_type :: eof ( );
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       __c = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __c, __eof ) )
  _M_gcount = 1;
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return __c;
    }
# 219 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type & __c )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __cb = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __cb, traits_type :: eof ( ) ) )
  {
    _M_gcount = 1;
    __c = traits_type :: to_char_type ( __cb );
  }
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 256 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( _M_gcount + 1 < __n
       && ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim ) )
  {
    * __s ++ = traits_type :: to_char_type ( __c );
    ++ _M_gcount;
    __c = __sb -> snextc ( );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 303 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( __streambuf_type & __sb, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __this_sb = this -> rdbuf ( );
       int_type __c = __this_sb -> sgetc ( );
       char_type __c2 = traits_type :: to_char_type ( __c );

       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim )
       && ! traits_type :: eq_int_type ( __sb . sputc ( __c2 ), __eof ) )
  {
    ++ _M_gcount;
    __c = __this_sb -> snextc ( );
    __c2 = traits_type :: to_char_type ( __c );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 347 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    getline ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
        {
          try
            {
              const int_type __idelim = traits_type :: to_int_type ( __delim );
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

              while ( _M_gcount + 1 < __n
                     && ! traits_type :: eq_int_type ( __c, __eof )
                     && ! traits_type :: eq_int_type ( __c, __idelim ) )
                {
                  * __s ++ = traits_type :: to_char_type ( __c );
                  __c = __sb -> snextc ( );
                  ++ _M_gcount;
                }
              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
              else
                {
                  if ( traits_type :: eq_int_type ( __c, __idelim ) )
                    {
                      __sb -> sbumpc ( );
                      ++ _M_gcount;
                    }
                  else
                    __err |= ios_base :: failbit;
                }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
        }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
        __err |= ios_base :: failbit;
      if ( __err )
        this -> setstate ( __err );
      return * this;
    }
# 407 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( void )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );

       if ( traits_type :: eq_int_type ( __sb -> sbumpc ( ), __eof ) )
  __err |= ios_base :: eofbit;
       else
  _M_gcount = 1;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 440 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );
# 463 "/usr/include/c++/4.4/bits/istream.tcc" 3
       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 502 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n, int_type __delim )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );


       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof )
    && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof )
        && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
       else if ( traits_type :: eq_int_type ( __c, __delim ) )
  {
    if ( _M_gcount
        < __gnu_cxx :: __numeric_traits < streamsize > :: __max )
      ++ _M_gcount;
    __sb -> sbumpc ( );
  }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 567 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    peek ( void )
    {
      int_type __c = traits_type :: eof ( );
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __c = this -> rdbuf ( ) -> sgetc ( );
       if ( traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __c;
    }
# 597 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    read ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, __n );
       if ( _M_gcount != __n )
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 626 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_istream < _CharT, _Traits > ::
    readsome ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {

       const streamsize __num = this -> rdbuf ( ) -> in_avail ( );
       if ( __num > 0 )
  _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, std :: min ( __num, __n ) );
       else if ( __num == - 1 )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return _M_gcount;
    }
# 658 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    putback ( char_type __c )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sputbackc ( __c ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 691 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    unget ( void )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sungetc ( ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 724 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    int
    basic_istream < _CharT, _Traits > ::
    sync ( void )
    {


      int __ret = - 1;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( __sb )
  {
    if ( __sb -> pubsync ( ) == - 1 )
      __err |= ios_base :: badbit;
    else
      __ret = 0;
  }
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __ret;
    }
# 760 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: pos_type
    basic_istream < _CharT, _Traits > ::
    tellg ( void )
    {


      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur,
           ios_base :: in );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 784 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( pos_type __pos )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 817 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( off_type __off, ios_base :: seekdir __dir )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 851 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;

      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const __int_type __cb = __in . rdbuf ( ) -> sbumpc ( );
       if ( ! _Traits :: eq_int_type ( __cb, _Traits :: eof ( ) ) )
  __c = _Traits :: to_char_type ( __cb );
       else
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     __in . setstate ( __err );
 }
      return __in;
    }
# 883 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT * __s )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename _Traits :: int_type int_type;
      typedef _CharT char_type;
      typedef ctype < _CharT > __ctype_type;

      streamsize __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       streamsize __num = __in . width ( );
       if ( __num <= 0 )
  __num = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );

       const int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( __extracted < __num - 1
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    * __s ++ = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;



       * __s = char_type ( );
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 944 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __in )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef ctype < _CharT > __ctype_type;

      const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
      const __int_type __eof = _Traits :: eof ( );
      __streambuf_type * __sb = __in . rdbuf ( );
      __int_type __c = __sb -> sgetc ( );

      while ( ! _Traits :: eq_int_type ( __c, __eof )
      && __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
 __c = __sb -> snextc ( );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __in . setstate ( ios_base :: eofbit );
      return __in;
    }
# 971 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_istream< char, char_traits< char> > ;
# 972 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &ws(basic_istream< char, char_traits< char> > &);
# 973 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char &);
# 974 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 975 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char &);
# 976 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char &);
# 977 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char *);
# 978 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char *);
# 980 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short &);
# 981 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned &);
# 982 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long &);
# 983 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long &);
# 984 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool &);
# 986 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long &);
# 987 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long &);
# 989 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float &);
# 990 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double &);
# 991 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double &);
# 992 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *&);
# 994 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_iostream< char, char_traits< char> > ;
# 997 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 998 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &ws(basic_istream< wchar_t, char_traits< wchar_t> > &);
# 999 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t &);
# 1000 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t *);
# 1002 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short &);
# 1003 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned &);
# 1004 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long &);
# 1005 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long &);
# 1006 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool &);
# 1008 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long &);
# 1009 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long &);
# 1011 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float &);
# 1012 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double &);
# 1013 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double &);
# 1014 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *&);
# 1016 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1020 "/usr/include/c++/4.4/bits/istream.tcc" 3
}
# 43 "/usr/include/c++/4.4/iostream" 3
namespace std __attribute__((visibility("default"))) {
# 58 "/usr/include/c++/4.4/iostream" 3
extern istream cin;
# 59 "/usr/include/c++/4.4/iostream" 3
extern ostream cout;
# 60 "/usr/include/c++/4.4/iostream" 3
extern ostream cerr;
# 61 "/usr/include/c++/4.4/iostream" 3
extern ostream clog;
# 64 "/usr/include/c++/4.4/iostream" 3
extern wistream wcin;
# 65 "/usr/include/c++/4.4/iostream" 3
extern wostream wcout;
# 66 "/usr/include/c++/4.4/iostream" 3
extern wostream wcerr;
# 67 "/usr/include/c++/4.4/iostream" 3
extern wostream wclog;
# 72 "/usr/include/c++/4.4/iostream" 3
static ios_base::Init __ioinit;
# 74 "/usr/include/c++/4.4/iostream" 3
}
# 44 "/usr/include/c++/4.4/iomanip" 3
namespace std __attribute__((visibility("default"))) {
# 49 "/usr/include/c++/4.4/iomanip" 3
struct _Resetiosflags { ios_base::fmtflags _M_mask; };
# 59 "/usr/include/c++/4.4/iomanip" 3
inline _Resetiosflags resetiosflags(ios_base::fmtflags __mask)
# 60 "/usr/include/c++/4.4/iomanip" 3
{
# 61 "/usr/include/c++/4.4/iomanip" 3
_Resetiosflags __x;
# 62 "/usr/include/c++/4.4/iomanip" 3
(__x._M_mask) = __mask;
# 63 "/usr/include/c++/4.4/iomanip" 3
return __x;
# 64 "/usr/include/c++/4.4/iomanip" 3
}
# 66 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Resetiosflags __f )
    {
      __is . setf ( ios_base :: fmtflags ( 0 ), __f . _M_mask );
      return __is;
    }
# 74 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Resetiosflags __f )
    {
      __os . setf ( ios_base :: fmtflags ( 0 ), __f . _M_mask );
      return __os;
    }
# 83 "/usr/include/c++/4.4/iomanip" 3
struct _Setiosflags { ios_base::fmtflags _M_mask; };
# 93 "/usr/include/c++/4.4/iomanip" 3
inline _Setiosflags setiosflags(ios_base::fmtflags __mask)
# 94 "/usr/include/c++/4.4/iomanip" 3
{
# 95 "/usr/include/c++/4.4/iomanip" 3
_Setiosflags __x;
# 96 "/usr/include/c++/4.4/iomanip" 3
(__x._M_mask) = __mask;
# 97 "/usr/include/c++/4.4/iomanip" 3
return __x;
# 98 "/usr/include/c++/4.4/iomanip" 3
}
# 100 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Setiosflags __f )
    {
      __is . setf ( __f . _M_mask );
      return __is;
    }
# 108 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Setiosflags __f )
    {
      __os . setf ( __f . _M_mask );
      return __os;
    }
# 117 "/usr/include/c++/4.4/iomanip" 3
struct _Setbase { int _M_base; };
# 128 "/usr/include/c++/4.4/iomanip" 3
inline _Setbase setbase(int __base)
# 129 "/usr/include/c++/4.4/iomanip" 3
{
# 130 "/usr/include/c++/4.4/iomanip" 3
_Setbase __x;
# 131 "/usr/include/c++/4.4/iomanip" 3
(__x._M_base) = __base;
# 132 "/usr/include/c++/4.4/iomanip" 3
return __x;
# 133 "/usr/include/c++/4.4/iomanip" 3
}
# 135 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Setbase __f )
    {
      __is . setf ( __f . _M_base == 8 ? ios_base :: oct :
  __f . _M_base == 10 ? ios_base :: dec :
  __f . _M_base == 16 ? ios_base :: hex :
  ios_base :: fmtflags ( 0 ), ios_base :: basefield );
      return __is;
    }
# 146 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Setbase __f )
    {
      __os . setf ( __f . _M_base == 8 ? ios_base :: oct :
  __f . _M_base == 10 ? ios_base :: dec :
  __f . _M_base == 16 ? ios_base :: hex :
  ios_base :: fmtflags ( 0 ), ios_base :: basefield );
      return __os;
    }
# 158 "/usr/include/c++/4.4/iomanip" 3
template< class _CharT>
# 159 "/usr/include/c++/4.4/iomanip" 3
struct _Setfill { _CharT _M_c; };
# 168 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT >
    inline _Setfill < _CharT >
    setfill ( _CharT __c )
    {
      _Setfill < _CharT > __x;
      __x . _M_c = __c;
      return __x;
    }
# 177 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Setfill < _CharT > __f )
    {
      __is . fill ( __f . _M_c );
      return __is;
    }
# 185 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Setfill < _CharT > __f )
    {
      __os . fill ( __f . _M_c );
      return __os;
    }
# 194 "/usr/include/c++/4.4/iomanip" 3
struct _Setprecision { int _M_n; };
# 204 "/usr/include/c++/4.4/iomanip" 3
inline _Setprecision setprecision(int __n)
# 205 "/usr/include/c++/4.4/iomanip" 3
{
# 206 "/usr/include/c++/4.4/iomanip" 3
_Setprecision __x;
# 207 "/usr/include/c++/4.4/iomanip" 3
(__x._M_n) = __n;
# 208 "/usr/include/c++/4.4/iomanip" 3
return __x;
# 209 "/usr/include/c++/4.4/iomanip" 3
}
# 211 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Setprecision __f )
    {
      __is . precision ( __f . _M_n );
      return __is;
    }
# 219 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Setprecision __f )
    {
      __os . precision ( __f . _M_n );
      return __os;
    }
# 228 "/usr/include/c++/4.4/iomanip" 3
struct _Setw { int _M_n; };
# 238 "/usr/include/c++/4.4/iomanip" 3
inline _Setw setw(int __n)
# 239 "/usr/include/c++/4.4/iomanip" 3
{
# 240 "/usr/include/c++/4.4/iomanip" 3
_Setw __x;
# 241 "/usr/include/c++/4.4/iomanip" 3
(__x._M_n) = __n;
# 242 "/usr/include/c++/4.4/iomanip" 3
return __x;
# 243 "/usr/include/c++/4.4/iomanip" 3
}
# 245 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is, _Setw __f )
    {
      __is . width ( __f . _M_n );
      return __is;
    }
# 253 "/usr/include/c++/4.4/iomanip" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os, _Setw __f )
    {
      __os . width ( __f . _M_n );
      return __os;
    }
# 265 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Setfill< char> );
# 266 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Setiosflags);
# 267 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Resetiosflags);
# 268 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Setbase);
# 269 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Setprecision);
# 270 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, _Setw);
# 271 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Setfill< char> );
# 272 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Setiosflags);
# 273 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Resetiosflags);
# 274 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Setbase);
# 275 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Setprecision);
# 276 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, _Setw);
# 279 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Setfill< wchar_t> );
# 280 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Setiosflags);
# 281 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Resetiosflags);
# 282 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Setbase);
# 283 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Setprecision);
# 284 "/usr/include/c++/4.4/iomanip" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, _Setw);
# 285 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Setfill< wchar_t> );
# 286 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Setiosflags);
# 287 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Resetiosflags);
# 288 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Setbase);
# 289 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Setprecision);
# 290 "/usr/include/c++/4.4/iomanip" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, _Setw);
# 294 "/usr/include/c++/4.4/iomanip" 3
}
# 26 "/usr/include/_G_config.h" 3
extern "C" { typedef
# 23 "/usr/include/_G_config.h" 3
struct {
# 24 "/usr/include/_G_config.h" 3
__off_t __pos;
# 25 "/usr/include/_G_config.h" 3
__mbstate_t __state;
# 26 "/usr/include/_G_config.h" 3
} _G_fpos_t; }
# 31 "/usr/include/_G_config.h" 3
extern "C" { typedef
# 28 "/usr/include/_G_config.h" 3
struct {
# 29 "/usr/include/_G_config.h" 3
__off64_t __pos;
# 30 "/usr/include/_G_config.h" 3
__mbstate_t __state;
# 31 "/usr/include/_G_config.h" 3
} _G_fpos64_t; }
# 53 "/usr/include/_G_config.h" 3
extern "C" { typedef short _G_int16_t; }
# 54 "/usr/include/_G_config.h" 3
extern "C" { typedef int _G_int32_t; }
# 55 "/usr/include/_G_config.h" 3
extern "C" { typedef unsigned short _G_uint16_t; }
# 56 "/usr/include/_G_config.h" 3
extern "C" { typedef unsigned _G_uint32_t; }
# 170 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3
extern "C" { typedef void _IO_lock_t; }
# 186 "/usr/include/libio.h" 3
extern "C" { struct _IO_marker {
# 187 "/usr/include/libio.h" 3
_IO_marker *_next;
# 188 "/usr/include/libio.h" 3
_IO_FILE *_sbuf;
# 192 "/usr/include/libio.h" 3
int _pos;
# 203 "/usr/include/libio.h" 3
}; }
# 206 "/usr/include/libio.h" 3
enum __codecvt_result {
# 208 "/usr/include/libio.h" 3
__codecvt_ok,
# 209 "/usr/include/libio.h" 3
__codecvt_partial,
# 210 "/usr/include/libio.h" 3
__codecvt_error,
# 211 "/usr/include/libio.h" 3
__codecvt_noconv
# 212 "/usr/include/libio.h" 3
};
# 271 "/usr/include/libio.h" 3
extern "C" { struct _IO_FILE {
# 272 "/usr/include/libio.h" 3
int _flags;
# 277 "/usr/include/libio.h" 3
char *_IO_read_ptr;
# 278 "/usr/include/libio.h" 3
char *_IO_read_end;
# 279 "/usr/include/libio.h" 3
char *_IO_read_base;
# 280 "/usr/include/libio.h" 3
char *_IO_write_base;
# 281 "/usr/include/libio.h" 3
char *_IO_write_ptr;
# 282 "/usr/include/libio.h" 3
char *_IO_write_end;
# 283 "/usr/include/libio.h" 3
char *_IO_buf_base;
# 284 "/usr/include/libio.h" 3
char *_IO_buf_end;
# 286 "/usr/include/libio.h" 3
char *_IO_save_base;
# 287 "/usr/include/libio.h" 3
char *_IO_backup_base;
# 288 "/usr/include/libio.h" 3
char *_IO_save_end;
# 290 "/usr/include/libio.h" 3
_IO_marker *_markers;
# 292 "/usr/include/libio.h" 3
_IO_FILE *_chain;
# 294 "/usr/include/libio.h" 3
int _fileno;
# 298 "/usr/include/libio.h" 3
int _flags2;
# 300 "/usr/include/libio.h" 3
__off_t _old_offset;
# 304 "/usr/include/libio.h" 3
unsigned short _cur_column;
# 305 "/usr/include/libio.h" 3
signed char _vtable_offset;
# 306 "/usr/include/libio.h" 3
char _shortbuf[1];
# 310 "/usr/include/libio.h" 3
_IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3
__off64_t _offset;
# 328 "/usr/include/libio.h" 3
void *__pad1;
# 329 "/usr/include/libio.h" 3
void *__pad2;
# 330 "/usr/include/libio.h" 3
void *__pad3;
# 331 "/usr/include/libio.h" 3
void *__pad4;
# 332 "/usr/include/libio.h" 3
size_t __pad5;
# 334 "/usr/include/libio.h" 3
int _mode;
# 336 "/usr/include/libio.h" 3
char _unused2[((((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t))];
# 338 "/usr/include/libio.h" 3
}; }
# 344 "/usr/include/libio.h" 3
struct _IO_FILE_plus;
# 346 "/usr/include/libio.h" 3
extern "C" { extern _IO_FILE_plus _IO_2_1_stdin_; }
# 347 "/usr/include/libio.h" 3
extern "C" { extern _IO_FILE_plus _IO_2_1_stdout_; }
# 348 "/usr/include/libio.h" 3
extern "C" { extern _IO_FILE_plus _IO_2_1_stderr_; }
# 364 "/usr/include/libio.h" 3
extern "C" { typedef __ssize_t __io_read_fn(void *, char *, size_t); }
# 372 "/usr/include/libio.h" 3
extern "C" { typedef __ssize_t __io_write_fn(void *, const char *, size_t); }
# 381 "/usr/include/libio.h" 3
extern "C" { typedef int __io_seek_fn(void *, __off64_t *, int); }
# 384 "/usr/include/libio.h" 3
extern "C" { typedef int __io_close_fn(void *); }
# 389 "/usr/include/libio.h" 3
extern "C" { typedef __io_read_fn cookie_read_function_t; }
# 390 "/usr/include/libio.h" 3
extern "C" { typedef __io_write_fn cookie_write_function_t; }
# 391 "/usr/include/libio.h" 3
extern "C" { typedef __io_seek_fn cookie_seek_function_t; }
# 392 "/usr/include/libio.h" 3
extern "C" { typedef __io_close_fn cookie_close_function_t; }
# 401 "/usr/include/libio.h" 3
extern "C" { typedef
# 396 "/usr/include/libio.h" 3
struct {
# 397 "/usr/include/libio.h" 3
__io_read_fn *read;
# 398 "/usr/include/libio.h" 3
__io_write_fn *write;
# 399 "/usr/include/libio.h" 3
__io_seek_fn *seek;
# 400 "/usr/include/libio.h" 3
__io_close_fn *close;
# 401 "/usr/include/libio.h" 3
} _IO_cookie_io_functions_t; }
# 402 "/usr/include/libio.h" 3
extern "C" { typedef _IO_cookie_io_functions_t cookie_io_functions_t; }
# 404 "/usr/include/libio.h" 3
struct _IO_cookie_file;
# 407 "/usr/include/libio.h" 3
extern "C" void _IO_cookie_init(_IO_cookie_file *, int, void *, _IO_cookie_io_functions_t);
# 416 "/usr/include/libio.h" 3
extern "C" int __underflow(_IO_FILE *);
# 417 "/usr/include/libio.h" 3
extern "C" int __uflow(_IO_FILE *);
# 418 "/usr/include/libio.h" 3
extern "C" int __overflow(_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3
extern "C" int _IO_getc(_IO_FILE *);
# 461 "/usr/include/libio.h" 3
extern "C" int _IO_putc(int, _IO_FILE *);
# 462 "/usr/include/libio.h" 3
extern "C" int _IO_feof(_IO_FILE *) throw();
# 463 "/usr/include/libio.h" 3
extern "C" int _IO_ferror(_IO_FILE *) throw();
# 465 "/usr/include/libio.h" 3
extern "C" int _IO_peekc_locked(_IO_FILE *);
# 471 "/usr/include/libio.h" 3
extern "C" void _IO_flockfile(_IO_FILE *) throw();
# 472 "/usr/include/libio.h" 3
extern "C" void _IO_funlockfile(_IO_FILE *) throw();
# 473 "/usr/include/libio.h" 3
extern "C" int _IO_ftrylockfile(_IO_FILE *) throw();
# 490 "/usr/include/libio.h" 3
extern "C" int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__);
# 492 "/usr/include/libio.h" 3
extern "C" int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list);
# 494 "/usr/include/libio.h" 3
extern "C" __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
# 495 "/usr/include/libio.h" 3
extern "C" size_t _IO_sgetn(_IO_FILE *, void *, size_t);
# 497 "/usr/include/libio.h" 3
extern "C" __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
# 498 "/usr/include/libio.h" 3
extern "C" __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
# 500 "/usr/include/libio.h" 3
extern "C" void _IO_free_backup_area(_IO_FILE *) throw();
# 80 "/usr/include/stdio.h" 3
extern "C" { typedef __gnuc_va_list va_list; }
# 91 "/usr/include/stdio.h" 3
extern "C" { typedef _G_fpos_t fpos_t; }
# 97 "/usr/include/stdio.h" 3
extern "C" { typedef _G_fpos64_t fpos64_t; }
# 145 "/usr/include/stdio.h" 3
extern "C" { extern _IO_FILE *stdin; }
# 146 "/usr/include/stdio.h" 3
extern "C" { extern _IO_FILE *stdout; }
# 147 "/usr/include/stdio.h" 3
extern "C" { extern _IO_FILE *stderr; }
# 155 "/usr/include/stdio.h" 3
extern "C" int remove(const char *) throw();
# 157 "/usr/include/stdio.h" 3
extern "C" int rename(const char *, const char *) throw();
# 162 "/usr/include/stdio.h" 3
extern "C" int renameat(int, const char *, int, const char *) throw();
# 172 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile();
# 182 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile64();
# 186 "/usr/include/stdio.h" 3
extern "C" char *tmpnam(char *) throw();
# 192 "/usr/include/stdio.h" 3
extern "C" char *tmpnam_r(char *) throw();
# 204 "/usr/include/stdio.h" 3
extern "C" char *tempnam(const char *, const char *) throw() __attribute__((__malloc__));
# 214 "/usr/include/stdio.h" 3
extern "C" int fclose(FILE *);
# 219 "/usr/include/stdio.h" 3
extern "C" int fflush(FILE *);
# 229 "/usr/include/stdio.h" 3
extern "C" int fflush_unlocked(FILE *);
# 239 "/usr/include/stdio.h" 3
extern "C" int fcloseall();
# 249 "/usr/include/stdio.h" 3
extern "C" FILE *fopen(const char *__restrict__, const char *__restrict__);
# 255 "/usr/include/stdio.h" 3
extern "C" FILE *freopen(const char *__restrict__, const char *__restrict__, FILE *__restrict__);
# 274 "/usr/include/stdio.h" 3
extern "C" FILE *fopen64(const char *__restrict__, const char *__restrict__);
# 276 "/usr/include/stdio.h" 3
extern "C" FILE *freopen64(const char *__restrict__, const char *__restrict__, FILE *__restrict__);
# 283 "/usr/include/stdio.h" 3
extern "C" FILE *fdopen(int, const char *) throw();
# 289 "/usr/include/stdio.h" 3
extern "C" FILE *fopencookie(void *__restrict__, const char *__restrict__, _IO_cookie_io_functions_t) throw();
# 296 "/usr/include/stdio.h" 3
extern "C" FILE *fmemopen(void *, size_t, const char *) throw();
# 302 "/usr/include/stdio.h" 3
extern "C" FILE *open_memstream(char **, size_t *) throw();
# 309 "/usr/include/stdio.h" 3
extern "C" void setbuf(FILE *__restrict__, char *__restrict__) throw();
# 313 "/usr/include/stdio.h" 3
extern "C" int setvbuf(FILE *__restrict__, char *__restrict__, int, size_t) throw();
# 320 "/usr/include/stdio.h" 3
extern "C" void setbuffer(FILE *__restrict__, char *__restrict__, size_t) throw();
# 324 "/usr/include/stdio.h" 3
extern "C" void setlinebuf(FILE *) throw();
# 333 "/usr/include/stdio.h" 3
extern "C" int fprintf(FILE *__restrict__, const char *__restrict__, ...);
# 339 "/usr/include/stdio.h" 3
extern "C" int printf(const char *__restrict__, ...);
# 341 "/usr/include/stdio.h" 3
extern "C" int sprintf(char *__restrict__, const char *__restrict__, ...) throw();
# 348 "/usr/include/stdio.h" 3
extern "C" int vfprintf(FILE *__restrict__, const char *__restrict__, __gnuc_va_list);
# 354 "/usr/include/stdio.h" 3
extern "C" int vprintf(const char *__restrict__, __gnuc_va_list);
# 356 "/usr/include/stdio.h" 3
extern "C" int vsprintf(char *__restrict__, const char *__restrict__, __gnuc_va_list) throw();
# 363 "/usr/include/stdio.h" 3
extern "C" int snprintf(char *__restrict__, size_t, const char *__restrict__, ...) throw();
# 367 "/usr/include/stdio.h" 3
extern "C" int vsnprintf(char *__restrict__, size_t, const char *__restrict__, __gnuc_va_list) throw();
# 376 "/usr/include/stdio.h" 3
extern "C" int vasprintf(char **__restrict__, const char *__restrict__, __gnuc_va_list) throw();
# 379 "/usr/include/stdio.h" 3
extern "C" int __asprintf(char **__restrict__, const char *__restrict__, ...) throw();
# 382 "/usr/include/stdio.h" 3
extern "C" int asprintf(char **__restrict__, const char *__restrict__, ...) throw();
# 394 "/usr/include/stdio.h" 3
extern "C" int vdprintf(int, const char *__restrict__, __gnuc_va_list);
# 397 "/usr/include/stdio.h" 3
extern "C" int dprintf(int, const char *__restrict__, ...);
# 407 "/usr/include/stdio.h" 3
extern "C" int fscanf(FILE *__restrict__, const char *__restrict__, ...);
# 413 "/usr/include/stdio.h" 3
extern "C" int scanf(const char *__restrict__, ...);
# 415 "/usr/include/stdio.h" 3
extern "C" int sscanf(const char *__restrict__, const char *__restrict__, ...) throw();
# 453 "/usr/include/stdio.h" 3
extern "C" int vfscanf(FILE *__restrict__, const char *__restrict__, __gnuc_va_list);
# 461 "/usr/include/stdio.h" 3
extern "C" int vscanf(const char *__restrict__, __gnuc_va_list);
# 465 "/usr/include/stdio.h" 3
extern "C" int vsscanf(const char *__restrict__, const char *__restrict__, __gnuc_va_list) throw();
# 513 "/usr/include/stdio.h" 3
extern "C" int fgetc(FILE *);
# 514 "/usr/include/stdio.h" 3
extern "C" int getc(FILE *);
# 520 "/usr/include/stdio.h" 3
extern "C" int getchar();
# 532 "/usr/include/stdio.h" 3
extern "C" int getc_unlocked(FILE *);
# 533 "/usr/include/stdio.h" 3
extern "C" int getchar_unlocked();
# 543 "/usr/include/stdio.h" 3
extern "C" int fgetc_unlocked(FILE *);
# 555 "/usr/include/stdio.h" 3
extern "C" int fputc(int, FILE *);
# 556 "/usr/include/stdio.h" 3
extern "C" int putc(int, FILE *);
# 562 "/usr/include/stdio.h" 3
extern "C" int putchar(int);
# 576 "/usr/include/stdio.h" 3
extern "C" int fputc_unlocked(int, FILE *);
# 584 "/usr/include/stdio.h" 3
extern "C" int putc_unlocked(int, FILE *);
# 585 "/usr/include/stdio.h" 3
extern "C" int putchar_unlocked(int);
# 592 "/usr/include/stdio.h" 3
extern "C" int getw(FILE *);
# 595 "/usr/include/stdio.h" 3
extern "C" int putw(int, FILE *);
# 604 "/usr/include/stdio.h" 3
extern "C" char *fgets(char *__restrict__, int, FILE *__restrict__);
# 612 "/usr/include/stdio.h" 3
extern "C" char *gets(char *);
# 622 "/usr/include/stdio.h" 3
extern "C" char *fgets_unlocked(char *__restrict__, int, FILE *__restrict__);
# 638 "/usr/include/stdio.h" 3
extern "C" __ssize_t __getdelim(char **__restrict__, size_t *__restrict__, int, FILE *__restrict__);
# 641 "/usr/include/stdio.h" 3
extern "C" __ssize_t getdelim(char **__restrict__, size_t *__restrict__, int, FILE *__restrict__);
# 651 "/usr/include/stdio.h" 3
extern "C" __ssize_t getline(char **__restrict__, size_t *__restrict__, FILE *__restrict__);
# 662 "/usr/include/stdio.h" 3
extern "C" int fputs(const char *__restrict__, FILE *__restrict__);
# 668 "/usr/include/stdio.h" 3
extern "C" int puts(const char *);
# 675 "/usr/include/stdio.h" 3
extern "C" int ungetc(int, FILE *);
# 682 "/usr/include/stdio.h" 3
extern "C" size_t fread(void *__restrict__, size_t, size_t, FILE *__restrict__);
# 688 "/usr/include/stdio.h" 3
extern "C" size_t fwrite(const void *__restrict__, size_t, size_t, FILE *__restrict__);
# 699 "/usr/include/stdio.h" 3
extern "C" int fputs_unlocked(const char *__restrict__, FILE *__restrict__);
# 710 "/usr/include/stdio.h" 3
extern "C" size_t fread_unlocked(void *__restrict__, size_t, size_t, FILE *__restrict__);
# 712 "/usr/include/stdio.h" 3
extern "C" size_t fwrite_unlocked(const void *__restrict__, size_t, size_t, FILE *__restrict__);
# 722 "/usr/include/stdio.h" 3
extern "C" int fseek(FILE *, long, int);
# 727 "/usr/include/stdio.h" 3
extern "C" long ftell(FILE *);
# 732 "/usr/include/stdio.h" 3
extern "C" void rewind(FILE *);
# 746 "/usr/include/stdio.h" 3
extern "C" int fseeko(FILE *, __off_t, int);
# 751 "/usr/include/stdio.h" 3
extern "C" __off_t ftello(FILE *);
# 771 "/usr/include/stdio.h" 3
extern "C" int fgetpos(FILE *__restrict__, fpos_t *__restrict__);
# 776 "/usr/include/stdio.h" 3
extern "C" int fsetpos(FILE *, const fpos_t *);
# 791 "/usr/include/stdio.h" 3
extern "C" int fseeko64(FILE *, __off64_t, int);
# 792 "/usr/include/stdio.h" 3
extern "C" __off64_t ftello64(FILE *);
# 793 "/usr/include/stdio.h" 3
extern "C" int fgetpos64(FILE *__restrict__, fpos64_t *__restrict__);
# 794 "/usr/include/stdio.h" 3
extern "C" int fsetpos64(FILE *, const fpos64_t *);
# 799 "/usr/include/stdio.h" 3
extern "C" void clearerr(FILE *) throw();
# 801 "/usr/include/stdio.h" 3
extern "C" int feof(FILE *) throw();
# 803 "/usr/include/stdio.h" 3
extern "C" int ferror(FILE *) throw();
# 808 "/usr/include/stdio.h" 3
extern "C" void clearerr_unlocked(FILE *) throw();
# 809 "/usr/include/stdio.h" 3
extern "C" int feof_unlocked(FILE *) throw();
# 810 "/usr/include/stdio.h" 3
extern "C" int ferror_unlocked(FILE *) throw();
# 819 "/usr/include/stdio.h" 3
extern "C" void perror(const char *);
# 27 "/usr/include/bits/sys_errlist.h" 3
extern "C" { extern int sys_nerr; }
# 28 "/usr/include/bits/sys_errlist.h" 3
extern "C" { extern const char *const sys_errlist[]; }
# 31 "/usr/include/bits/sys_errlist.h" 3
extern "C" { extern int _sys_nerr; }
# 32 "/usr/include/bits/sys_errlist.h" 3
extern "C" { extern const char *const _sys_errlist[]; }
# 831 "/usr/include/stdio.h" 3
extern "C" int fileno(FILE *) throw();
# 836 "/usr/include/stdio.h" 3
extern "C" int fileno_unlocked(FILE *) throw();
# 846 "/usr/include/stdio.h" 3
extern "C" FILE *popen(const char *, const char *);
# 852 "/usr/include/stdio.h" 3
extern "C" int pclose(FILE *);
# 858 "/usr/include/stdio.h" 3
extern "C" char *ctermid(char *) throw() __attribute__((visibility("default")));
# 864 "/usr/include/stdio.h" 3
extern "C" char *cuserid(char *);
# 869 "/usr/include/stdio.h" 3
struct obstack;
# 872 "/usr/include/stdio.h" 3
extern "C" int obstack_printf(obstack *__restrict__, const char *__restrict__, ...) throw();
# 875 "/usr/include/stdio.h" 3
extern "C" int obstack_vprintf(obstack *__restrict__, const char *__restrict__, __gnuc_va_list) throw();
# 886 "/usr/include/stdio.h" 3
extern "C" void flockfile(FILE *) throw();
# 890 "/usr/include/stdio.h" 3
extern "C" int ftrylockfile(FILE *) throw();
# 893 "/usr/include/stdio.h" 3
extern "C" void funlockfile(FILE *) throw();
# 128 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef unsigned long long CUdeviceptr; }
# 135 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef int CUdevice; }
# 136 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUctx_st *CUcontext; }
# 137 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUmod_st *CUmodule; }
# 138 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUfunc_st *CUfunction; }
# 139 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUarray_st *CUarray; }
# 140 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUtexref_st *CUtexref; }
# 141 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUsurfref_st *CUsurfref; }
# 142 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef CUevent_st *CUevent; }
# 143 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef CUstream_st *CUstream; }
# 144 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUgraphicsResource_st *CUgraphicsResource; }
# 148 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 146 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUuuid_st {
# 147 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
char bytes[16];
# 148 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUuuid; }
# 162 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 153 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUctx_flags_enum {
# 154 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_AUTO,
# 155 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_SPIN,
# 156 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_YIELD,
# 157 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_MASK,
# 158 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_BLOCKING_SYNC,
# 159 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_MAP_HOST = 8,
# 160 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_LMEM_RESIZE_TO_MAX = 16,
# 161 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CTX_FLAGS_MASK = 31
# 162 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUctx_flags; }
# 171 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 167 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUevent_flags_enum {
# 168 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_EVENT_DEFAULT,
# 169 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_EVENT_BLOCKING_SYNC,
# 170 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_EVENT_DISABLE_TIMING
# 171 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUevent_flags; }
# 185 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 176 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUarray_format_enum {
# 177 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT8 = 1,
# 178 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT16,
# 179 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT32,
# 180 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT8 = 8,
# 181 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT16,
# 182 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT32,
# 183 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_HALF = 16,
# 184 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_FLOAT = 32
# 185 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUarray_format; }
# 195 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 190 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUaddress_mode_enum {
# 191 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_WRAP,
# 192 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_CLAMP,
# 193 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_MIRROR,
# 194 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_BORDER
# 195 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUaddress_mode; }
# 203 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 200 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUfilter_mode_enum {
# 201 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_POINT,
# 202 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_LINEAR
# 203 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUfilter_mode; }
# 246 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 208 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUdevice_attribute_enum {
# 209 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
# 210 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X,
# 211 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y,
# 212 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z,
# 213 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X,
# 214 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y,
# 215 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z,
# 216 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK,
# 217 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
# 218 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY,
# 219 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_WARP_SIZE,
# 220 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_PITCH,
# 221 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK,
# 222 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
# 223 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CLOCK_RATE,
# 224 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT,
# 225 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP,
# 226 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,
# 227 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT,
# 228 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_INTEGRATED,
# 229 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY,
# 230 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE,
# 231 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH,
# 232 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH,
# 233 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT,
# 234 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH,
# 235 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT,
# 236 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH,
# 237 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH,
# 238 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT,
# 239 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES,
# 240 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT,
# 241 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS,
# 242 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_ECC_ENABLED,
# 243 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID,
# 244 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID,
# 245 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TCC_DRIVER
# 246 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUdevice_attribute; }
# 262 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 251 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUdevprop_st {
# 252 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int maxThreadsPerBlock;
# 253 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int maxThreadsDim[3];
# 254 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int maxGridSize[3];
# 255 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int sharedMemPerBlock;
# 256 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int totalConstantMemory;
# 257 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int SIMDWidth;
# 258 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int memPitch;
# 259 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int regsPerBlock;
# 260 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int clockRate;
# 261 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
int textureAlign;
# 262 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUdevprop; }
# 317 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 267 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUfunction_attribute_enum {
# 273 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK,
# 280 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES,
# 286 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES,
# 291 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES,
# 296 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_NUM_REGS,
# 305 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION,
# 314 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION,
# 316 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX
# 317 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUfunction_attribute; }
# 326 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 322 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUfunc_cache_enum {
# 323 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_NONE,
# 324 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_SHARED,
# 325 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_L1
# 326 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUfunc_cache; }
# 335 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 331 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUmemorytype_enum {
# 332 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_HOST = 1,
# 333 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_DEVICE,
# 334 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_ARRAY
# 335 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUmemorytype; }
# 344 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 340 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUcomputemode_enum {
# 341 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_DEFAULT,
# 342 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_EXCLUSIVE,
# 343 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_PROHIBITED
# 344 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUcomputemode; }
# 436 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 349 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUjit_option_enum {
# 355 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_MAX_REGISTERS,
# 368 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_THREADS_PER_BLOCK,
# 375 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_WALL_TIME,
# 383 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_INFO_LOG_BUFFER,
# 391 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 399 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER,
# 407 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
# 414 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_OPTIMIZATION_LEVEL,
# 421 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_TARGET_FROM_CUCONTEXT,
# 427 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_TARGET,
# 434 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_JIT_FALLBACK_STRATEGY
# 436 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUjit_option; }
# 449 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 441 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUjit_target_enum {
# 443 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_10,
# 444 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_11,
# 445 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_12,
# 446 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_13,
# 447 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_20,
# 448 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_21
# 449 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUjit_target; }
# 460 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 454 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUjit_fallback_enum {
# 456 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_PREFER_PTX,
# 458 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_PREFER_BINARY
# 460 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUjit_fallback; }
# 467 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 465 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUgraphicsRegisterFlags_enum {
# 466 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_NONE
# 467 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUgraphicsRegisterFlags; }
# 476 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 472 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUgraphicsMapResourceFlags_enum {
# 473 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE,
# 474 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY,
# 475 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 476 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUgraphicsMapResourceFlags; }
# 488 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 481 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUarray_cubemap_face_enum {
# 482 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_X,
# 483 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_X,
# 484 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Y,
# 485 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Y,
# 486 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Z,
# 487 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Z
# 488 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUarray_cubemap_face; }
# 497 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 493 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum CUlimit_enum {
# 494 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_LIMIT_STACK_SIZE,
# 495 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_LIMIT_PRINTF_FIFO_SIZE,
# 496 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CU_LIMIT_MALLOC_HEAP_SIZE
# 497 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUlimit; }
# 728 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 502 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
enum cudaError_enum {
# 508 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_SUCCESS,
# 514 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_VALUE,
# 520 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_OUT_OF_MEMORY,
# 526 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_INITIALIZED,
# 531 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_DEINITIALIZED,
# 538 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_DEVICE = 100,
# 544 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_DEVICE,
# 551 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_IMAGE = 200,
# 561 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT,
# 570 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT,
# 575 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_MAP_FAILED = 205,
# 580 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNMAP_FAILED,
# 586 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_ARRAY_IS_MAPPED,
# 591 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_MAPPED,
# 599 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_BINARY_FOR_GPU,
# 604 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_ACQUIRED,
# 609 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED,
# 615 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_ARRAY,
# 621 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_POINTER,
# 627 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_ECC_UNCORRECTABLE,
# 633 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNSUPPORTED_LIMIT,
# 639 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_SOURCE = 300,
# 644 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_FILE_NOT_FOUND,
# 649 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND,
# 654 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED,
# 659 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_OPERATING_SYSTEM,
# 666 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_HANDLE = 400,
# 673 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_FOUND = 500,
# 682 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_READY = 600,
# 693 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED = 700,
# 704 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES,
# 715 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT,
# 721 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING,
# 727 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNKNOWN = 999
# 728 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUresult; }
# 777 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 756 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY2D_st {
# 757 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcXInBytes;
# 758 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcY;
# 760 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 761 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
const void *srcHost;
# 762 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 763 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 764 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcPitch;
# 766 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstXInBytes;
# 767 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstY;
# 769 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 770 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
void *dstHost;
# 771 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 772 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 773 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstPitch;
# 775 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t WidthInBytes;
# 776 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Height;
# 777 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY2D; }
# 810 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 782 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY3D_st {
# 783 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcXInBytes;
# 784 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcY;
# 785 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcZ;
# 786 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcLOD;
# 787 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 788 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
const void *srcHost;
# 789 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 790 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 791 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
void *reserved0;
# 792 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcPitch;
# 793 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t srcHeight;
# 795 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstXInBytes;
# 796 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstY;
# 797 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstZ;
# 798 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstLOD;
# 799 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 800 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
void *dstHost;
# 801 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 802 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 803 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
void *reserved1;
# 804 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstPitch;
# 805 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t dstHeight;
# 807 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t WidthInBytes;
# 808 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Height;
# 809 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Depth;
# 810 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY3D; }
# 822 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 815 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUDA_ARRAY_DESCRIPTOR_st {
# 817 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Width;
# 818 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Height;
# 820 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 821 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 822 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUDA_ARRAY_DESCRIPTOR; }
# 836 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 827 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
struct CUDA_ARRAY3D_DESCRIPTOR_st {
# 829 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Width;
# 830 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Height;
# 831 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
size_t Depth;
# 833 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 834 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 835 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
unsigned Flags;
# 836 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
} CUDA_ARRAY3D_DESCRIPTOR; }
# 917 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuInit(unsigned);
# 944 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDriverGetVersion(int *);
# 982 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGet(CUdevice *, int);
# 1008 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetCount(int *);
# 1037 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetName(char *, int, CUdevice);
# 1066 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceComputeCapability(int *, int *, CUdevice);
# 1094 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceTotalMem_v2(size_t *, CUdevice);
# 1154 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetProperties(CUdevprop *, CUdevice);
# 1235 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetAttribute(int *, CUdevice_attribute, CUdevice);
# 1333 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxCreate_v2(CUcontext *, unsigned, CUdevice);
# 1367 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDestroy(CUcontext);
# 1403 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxAttach(CUcontext *, unsigned);
# 1435 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDetach(CUcontext);
# 1473 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPushCurrent(CUcontext);
# 1515 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPopCurrent(CUcontext *);
# 1545 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetDevice(CUdevice *);
# 1575 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxSynchronize();
# 1638 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxSetLimit(CUlimit, size_t);
# 1673 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetLimit(size_t *, CUlimit);
# 1716 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetCacheConfig(CUfunc_cache *);
# 1766 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxSetCacheConfig(CUfunc_cache);
# 1803 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetApiVersion(CUcontext, unsigned *);
# 1851 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoad(CUmodule *, const char *);
# 1885 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadData(CUmodule *, const void *);
# 1963 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadDataEx(CUmodule *, const void *, unsigned, CUjit_option *, void **);
# 2000 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadFatBinary(CUmodule *, const void *);
# 2025 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleUnload(CUmodule);
# 2055 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetFunction(CUfunction *, CUmodule, const char *);
# 2089 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetGlobal_v2(CUdeviceptr *, size_t *, CUmodule, const char *);
# 2123 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetTexRef(CUtexref *, CUmodule, const char *);
# 2154 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetSurfRef(CUsurfref *, CUmodule, const char *);
# 2197 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetInfo_v2(size_t *, size_t *);
# 2230 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAlloc_v2(CUdeviceptr *, size_t);
# 2291 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocPitch_v2(CUdeviceptr *, size_t *, size_t, size_t, unsigned);
# 2320 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFree_v2(CUdeviceptr);
# 2353 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetAddressRange_v2(CUdeviceptr *, size_t *, CUdeviceptr);
# 2392 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocHost_v2(void **, size_t);
# 2422 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFreeHost(void *);
# 2494 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostAlloc(void **, size_t, unsigned);
# 2532 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *, void *, unsigned);
# 2557 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostGetFlags(unsigned *, void *);
# 2591 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoD_v2(CUdeviceptr, const void *, size_t);
# 2624 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoH_v2(void *, CUdeviceptr, size_t);
# 2657 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoD_v2(CUdeviceptr, CUdeviceptr, size_t);
# 2691 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoA_v2(CUarray, size_t, CUdeviceptr, size_t);
# 2727 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoD_v2(CUdeviceptr, CUarray, size_t, size_t);
# 2761 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoA_v2(CUarray, size_t, const void *, size_t);
# 2795 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoH_v2(void *, CUarray, size_t, size_t);
# 2833 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoA_v2(CUarray, size_t, CUarray, size_t, size_t);
# 2978 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *);
# 3121 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *);
# 3273 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *);
# 3313 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr, const void *, size_t, CUstream);
# 3353 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoHAsync_v2(void *, CUdeviceptr, size_t, CUstream);
# 3390 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr, CUdeviceptr, size_t, CUstream);
# 3432 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoAAsync_v2(CUarray, size_t, const void *, size_t, CUstream);
# 3474 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoHAsync_v2(void *, CUarray, size_t, size_t, CUstream);
# 3630 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *, CUstream);
# 3790 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *, CUstream);
# 3823 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD8_v2(CUdeviceptr, unsigned char, size_t);
# 3856 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD16_v2(CUdeviceptr, unsigned short, size_t);
# 3889 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD32_v2(CUdeviceptr, unsigned, size_t);
# 3927 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D8_v2(CUdeviceptr, size_t, unsigned char, size_t, size_t);
# 3965 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D16_v2(CUdeviceptr, size_t, unsigned short, size_t, size_t);
# 4003 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D32_v2(CUdeviceptr, size_t, unsigned, size_t, size_t);
# 4040 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD8Async(CUdeviceptr, unsigned char, size_t, CUstream);
# 4077 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD16Async(CUdeviceptr, unsigned short, size_t, CUstream);
# 4113 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD32Async(CUdeviceptr, unsigned, size_t, CUstream);
# 4155 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D8Async(CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream);
# 4197 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D16Async(CUdeviceptr, size_t, unsigned short, size_t, size_t, CUstream);
# 4239 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D32Async(CUdeviceptr, size_t, unsigned, size_t, size_t, CUstream);
# 4342 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayCreate_v2(CUarray *, const CUDA_ARRAY_DESCRIPTOR *);
# 4375 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *, CUarray);
# 4406 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayDestroy(CUarray);
# 4508 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DCreate_v2(CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *);
# 4544 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *, CUarray);
# 4582 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamCreate(CUstream *, unsigned);
# 4622 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamWaitEvent(CUstream, CUevent, unsigned);
# 4646 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamQuery(CUstream);
# 4671 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamSynchronize(CUstream);
# 4693 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamDestroy(CUstream);
# 4741 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventCreate(CUevent *, unsigned);
# 4777 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventRecord(CUevent, CUstream);
# 4809 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventQuery(CUevent);
# 4843 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventSynchronize(CUevent);
# 4866 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventDestroy(CUevent);
# 4909 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventElapsedTime(float *, CUevent, CUevent);
# 4954 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetBlockShape(CUfunction, int, int, int);
# 4985 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetSharedSize(CUfunction, unsigned);
# 5042 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncGetAttribute(int *, CUfunction_attribute, CUfunction);
# 5090 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetCacheConfig(CUfunction, CUfunc_cache);
# 5119 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetSize(CUfunction, unsigned);
# 5149 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSeti(CUfunction, int, unsigned);
# 5179 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetf(CUfunction, int, float);
# 5211 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetv(CUfunction, int, void *, unsigned);
# 5245 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunch(CUfunction);
# 5281 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGrid(CUfunction, int, int);
# 5321 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGridAsync(CUfunction, int, int, CUstream);
# 5354 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetTexRef(CUfunction, int, CUtexref);
# 5395 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetArray(CUtexref, CUarray, unsigned);
# 5433 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddress_v2(size_t *, CUtexref, CUdeviceptr, size_t);
# 5474 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddress2D_v2(CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, size_t);
# 5503 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFormat(CUtexref, CUarray_format, int);
# 5541 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddressMode(CUtexref, int, CUaddress_mode);
# 5574 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFilterMode(CUtexref, CUfilter_mode);
# 5606 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFlags(CUtexref, unsigned);
# 5632 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddress_v2(CUdeviceptr *, CUtexref);
# 5658 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetArray(CUarray *, CUtexref);
# 5684 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddressMode(CUaddress_mode *, CUtexref, int);
# 5708 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFilterMode(CUfilter_mode *, CUtexref);
# 5734 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFormat(CUarray_format *, int *, CUtexref);
# 5757 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFlags(unsigned *, CUtexref);
# 5791 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefCreate(CUtexref *);
# 5811 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefDestroy(CUtexref);
# 5849 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuSurfRefSetArray(CUsurfref, CUarray, unsigned);
# 5870 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuSurfRefGetArray(CUarray *, CUsurfref);
# 5911 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsUnregisterResource(CUgraphicsResource);
# 5949 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsSubResourceGetMappedArray(CUarray *, CUgraphicsResource, unsigned, unsigned);
# 5983 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *, size_t *, CUgraphicsResource);
# 6024 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource, unsigned);
# 6062 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsMapResources(unsigned, CUgraphicsResource *, CUstream);
# 6097 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsUnmapResources(unsigned, CUgraphicsResource *, CUstream);
# 6101 "/usr/local/cuda3.2/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGetExportTable(const void **, const CUuuid *);
# 60 "sdk/cutil.h"
enum CUTBoolean {
# 62 "sdk/cutil.h"
CUTFalse,
# 63 "sdk/cutil.h"
CUTTrue
# 64 "sdk/cutil.h"
};
# 72 "sdk/cutil.h"
extern "C" void cutFree(void *);
# 90 "sdk/cutil.h"
extern "C" void cutCheckBankAccess(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char *, const int, const char *, const int);
# 103 "sdk/cutil.h"
extern "C" char *cutFindFilePath(const char *, const char *);
# 118 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFilef(const char *, float **, unsigned *, bool = false);
# 134 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFiled(const char *, double **, unsigned *, bool = false);
# 150 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFilei(const char *, int **, unsigned *, bool = false);
# 165 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFileui(const char *, unsigned **, unsigned *, bool = false);
# 181 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFileb(const char *, char **, unsigned *, bool = false);
# 197 "sdk/cutil.h"
extern "C" CUTBoolean cutReadFileub(const char *, unsigned char **, unsigned *, bool = false);
# 211 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFilef(const char *, const float *, unsigned, const float, bool = false);
# 225 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFiled(const char *, const float *, unsigned, const double, bool = false);
# 237 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFilei(const char *, const int *, unsigned, bool = false);
# 249 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFileui(const char *, const unsigned *, unsigned, bool = false);
# 261 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFileb(const char *, const char *, unsigned, bool = false);
# 273 "sdk/cutil.h"
extern "C" CUTBoolean cutWriteFileub(const char *, const unsigned char *, unsigned, bool = false);
# 289 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPGMub(const char *, unsigned char **, unsigned *, unsigned *);
# 302 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPPMub(const char *, unsigned char **, unsigned *, unsigned *);
# 316 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPPM4ub(const char *, unsigned char **, unsigned *, unsigned *);
# 332 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPGMi(const char *, unsigned **, unsigned *, unsigned *);
# 348 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPGMs(const char *, unsigned short **, unsigned *, unsigned *);
# 363 "sdk/cutil.h"
extern "C" CUTBoolean cutLoadPGMf(const char *, float **, unsigned *, unsigned *);
# 375 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePGMub(const char *, unsigned char *, unsigned, unsigned);
# 387 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePPMub(const char *, unsigned char *, unsigned, unsigned);
# 400 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePPM4ub(const char *, unsigned char *, unsigned, unsigned);
# 412 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePGMi(const char *, unsigned *, unsigned, unsigned);
# 424 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePGMs(const char *, unsigned short *, unsigned, unsigned);
# 436 "sdk/cutil.h"
extern "C" CUTBoolean cutSavePGMf(const char *, float *, unsigned, unsigned);
# 457 "sdk/cutil.h"
extern "C" CUTBoolean cutCheckCmdLineFlag(const int, const char **, const char *);
# 471 "sdk/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumenti(const int, const char **, const char *, int *);
# 485 "sdk/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentf(const int, const char **, const char *, float *);
# 499 "sdk/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentstr(const int, const char **, const char *, char **);
# 514 "sdk/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentListstr(const int, const char **, const char *, char **, unsigned *);
# 528 "sdk/cutil.h"
extern "C" CUTBoolean cutCheckCondition(int, const char *, const int);
# 540 "sdk/cutil.h"
extern "C" CUTBoolean cutComparef(const float *, const float *, const unsigned);
# 553 "sdk/cutil.h"
extern "C" CUTBoolean cutComparei(const int *, const int *, const unsigned);
# 567 "sdk/cutil.h"
extern "C" CUTBoolean cutCompareuit(const unsigned *, const unsigned *, const unsigned, const float, const float);
# 580 "sdk/cutil.h"
extern "C" CUTBoolean cutCompareub(const unsigned char *, const unsigned char *, const unsigned);
# 595 "sdk/cutil.h"
extern "C" CUTBoolean cutCompareubt(const unsigned char *, const unsigned char *, const unsigned, const float, const float);
# 609 "sdk/cutil.h"
extern "C" CUTBoolean cutCompareube(const unsigned char *, const unsigned char *, const unsigned, const float);
# 623 "sdk/cutil.h"
extern "C" CUTBoolean cutComparefe(const float *, const float *, const unsigned, const float);
# 638 "sdk/cutil.h"
extern "C" CUTBoolean cutComparefet(const float *, const float *, const unsigned, const float, const float);
# 653 "sdk/cutil.h"
extern "C" CUTBoolean cutCompareL2fe(const float *, const float *, const unsigned, const float);
# 668 "sdk/cutil.h"
extern "C" CUTBoolean cutComparePPM(const char *, const char *, const float, const float, bool = false);
# 681 "sdk/cutil.h"
extern "C" CUTBoolean cutCreateTimer(unsigned *);
# 690 "sdk/cutil.h"
extern "C" CUTBoolean cutDeleteTimer(unsigned);
# 698 "sdk/cutil.h"
extern "C" CUTBoolean cutStartTimer(const unsigned);
# 706 "sdk/cutil.h"
extern "C" CUTBoolean cutStopTimer(const unsigned);
# 714 "sdk/cutil.h"
extern "C" CUTBoolean cutResetTimer(const unsigned);
# 723 "sdk/cutil.h"
extern "C" float cutGetTimerValue(const unsigned);
# 734 "sdk/cutil.h"
extern "C" float cutGetAverageTimerValue(const unsigned);
# 30 "sdk/cutil_inline_bankchecker.h"
inline void __cutilBankChecker(unsigned tidx, unsigned tidy, unsigned tidz, unsigned
# 31 "sdk/cutil_inline_bankchecker.h"
bdimx, unsigned bdimy, unsigned bdimz, char *
# 32 "sdk/cutil_inline_bankchecker.h"
aname, int index, char *file, int line)
# 33 "sdk/cutil_inline_bankchecker.h"
{
# 34 "sdk/cutil_inline_bankchecker.h"
cutCheckBankAccess(tidx, tidy, tidz, bdimx, bdimy, bdimz, file, line, aname, index);
# 35 "sdk/cutil_inline_bankchecker.h"
}
# 46 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { typedef float2 cuFloatComplex; }
# 48 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline float cuCrealf(cuFloatComplex x)
# 49 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 50 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return x.x;
# 51 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 53 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline float cuCimagf(cuFloatComplex x)
# 54 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 55 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return x.y;
# 56 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 58 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex make_cuFloatComplex(float
# 59 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
r, float i)
# 60 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 61 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuFloatComplex res;
# 62 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
(res.x) = r;
# 63 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
(res.y) = i;
# 64 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return res;
# 65 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 67 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex cuConjf(cuFloatComplex x)
# 68 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 69 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x));
# 70 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 71 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex cuCaddf(cuFloatComplex x, cuFloatComplex
# 72 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 73 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 74 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y));
# 76 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 78 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex cuCsubf(cuFloatComplex x, cuFloatComplex
# 79 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 80 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 81 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y));
# 83 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 90 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex cuCmulf(cuFloatComplex x, cuFloatComplex
# 91 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 92 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 93 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuFloatComplex prod;
# 94 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y)));
# 98 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return prod;
# 99 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 106 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuFloatComplex cuCdivf(cuFloatComplex x, cuFloatComplex
# 107 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 108 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 109 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuFloatComplex quot;
# 110 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float s = (fabsf(cuCrealf(y)) + fabsf(cuCimagf(y)));
# 111 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float oos = ((1.0F) / s);
# 112 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float ars = (cuCrealf(x) * oos);
# 113 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float ais = (cuCimagf(x) * oos);
# 114 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float brs = (cuCrealf(y) * oos);
# 115 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float bis = (cuCimagf(y) * oos);
# 116 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
s = ((brs * brs) + (bis * bis));
# 117 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
oos = ((1.0F) / s);
# 118 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
# 120 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return quot;
# 121 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 131 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline float cuCabsf(cuFloatComplex x)
# 132 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 133 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float a = cuCrealf(x);
# 134 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float b = cuCimagf(x);
# 135 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float v, w, t;
# 136 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
a = fabsf(a);
# 137 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
b = fabsf(b);
# 138 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
if (a > b) {
# 139 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
v = a;
# 140 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
w = b;
# 141 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} else {
# 142 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
v = b;
# 143 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
w = a;
# 144 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 145 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (w / v);
# 146 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = ((1.0F) + (t * t));
# 147 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (v * sqrtf(t));
# 148 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
if (((v == (0.0F)) || (v > (3.402823466e+38F))) || (w > (3.402823466e+38F))) {
# 149 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (v + w);
# 150 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 151 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return t;
# 152 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 155 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { typedef double2 cuDoubleComplex; }
# 157 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline double cuCreal(cuDoubleComplex x)
# 158 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 159 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return x.x;
# 160 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 162 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline double cuCimag(cuDoubleComplex x)
# 163 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 164 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return x.y;
# 165 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 167 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex make_cuDoubleComplex(double
# 168 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
r, double i)
# 169 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 170 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuDoubleComplex res;
# 171 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
(res.x) = r;
# 172 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
(res.y) = i;
# 173 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return res;
# 174 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 176 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex cuConj(cuDoubleComplex x)
# 177 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 178 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x), -cuCimag(x));
# 179 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 181 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex cuCadd(cuDoubleComplex x, cuDoubleComplex
# 182 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 183 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 184 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y));
# 186 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 188 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex cuCsub(cuDoubleComplex x, cuDoubleComplex
# 189 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 190 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 191 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y));
# 193 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 200 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex cuCmul(cuDoubleComplex x, cuDoubleComplex
# 201 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 202 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 203 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuDoubleComplex prod;
# 204 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));
# 208 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return prod;
# 209 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 216 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline cuDoubleComplex cuCdiv(cuDoubleComplex x, cuDoubleComplex
# 217 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 218 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 219 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
cuDoubleComplex quot;
# 220 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double s = (fabs(cuCreal(y)) + fabs(cuCimag(y)));
# 221 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double oos = ((1.0) / s);
# 222 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double ars = (cuCreal(x) * oos);
# 223 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double ais = (cuCimag(x) * oos);
# 224 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double brs = (cuCreal(y) * oos);
# 225 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double bis = (cuCimag(y) * oos);
# 226 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
s = ((brs * brs) + (bis * bis));
# 227 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
oos = ((1.0) / s);
# 228 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
# 230 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return quot;
# 231 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 239 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
extern "C" { static inline double cuCabs(cuDoubleComplex x)
# 240 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 241 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double a = cuCreal(x);
# 242 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double b = cuCimag(x);
# 243 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double v, w, t;
# 244 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
a = fabs(a);
# 245 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
b = fabs(b);
# 246 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
if (a > b) {
# 247 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
v = a;
# 248 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
w = b;
# 249 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} else {
# 250 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
v = b;
# 251 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
w = a;
# 252 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 253 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (w / v);
# 254 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = ((1.0) + (t * t));
# 255 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (v * sqrt(t));
# 256 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
if (((v == (0.0)) || (v > (1.797693134862315708e+308))) || (w > (1.797693134862315708e+308)))
# 257 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 258 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
t = (v + w);
# 259 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 260 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return t;
# 261 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
} }
# 268 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
typedef cuFloatComplex cuComplex;
# 269 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
static inline cuComplex make_cuComplex(float x, float
# 270 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
y)
# 271 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 272 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuFloatComplex(x, y);
# 273 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 276 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
static inline cuDoubleComplex cuComplexFloatToDouble(cuFloatComplex
# 277 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
c)
# 278 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 279 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuDoubleComplex((double)cuCrealf(c), (double)cuCimagf(c));
# 280 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 282 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
static inline cuFloatComplex cuComplexDoubleToFloat(cuDoubleComplex
# 283 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
c)
# 284 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 285 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuFloatComplex((float)cuCreal(c), (float)cuCimag(c));
# 286 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 289 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
static inline cuComplex cuCfmaf(cuComplex x, cuComplex y, cuComplex d)
# 290 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 291 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float real_res;
# 292 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
float imag_res;
# 294 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
real_res = ((cuCrealf(x) * cuCrealf(y)) + cuCrealf(d));
# 295 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
imag_res = ((cuCrealf(x) * cuCimagf(y)) + cuCimagf(d));
# 297 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
real_res = ((-(cuCimagf(x) * cuCimagf(y))) + real_res);
# 298 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
imag_res = ((cuCimagf(x) * cuCrealf(y)) + imag_res);
# 300 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuComplex(real_res, imag_res);
# 301 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 303 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
static inline cuDoubleComplex cuCfma(cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d)
# 304 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
{
# 305 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double real_res;
# 306 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
double imag_res;
# 308 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
real_res = ((cuCreal(x) * cuCreal(y)) + cuCreal(d));
# 309 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
imag_res = ((cuCreal(x) * cuCimag(y)) + cuCimag(d));
# 311 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
real_res = ((-(cuCimag(x) * cuCimag(y))) + real_res);
# 312 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
imag_res = ((cuCimag(x) * cuCreal(y)) + imag_res);
# 314 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
return make_cuDoubleComplex(real_res, imag_res);
# 315 "/usr/local/cuda3.2/cuda/bin/../include/cuComplex.h"
}
# 72 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef
# 61 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
enum cufftResult_t {
# 62 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_SUCCESS,
# 63 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_INVALID_PLAN,
# 64 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_ALLOC_FAILED,
# 65 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_INVALID_TYPE,
# 66 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_INVALID_VALUE,
# 67 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_INTERNAL_ERROR,
# 68 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_EXEC_FAILED,
# 69 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_SETUP_FAILED,
# 70 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_INVALID_SIZE,
# 71 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_UNALIGNED_DATA
# 72 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
} cufftResult; }
# 77 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef unsigned cufftHandle; }
# 81 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef float cufftReal; }
# 82 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef double cufftDoubleReal; }
# 87 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef cuComplex cufftComplex; }
# 88 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef cuDoubleComplex cufftDoubleComplex; }
# 102 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef
# 95 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
enum cufftType_t {
# 96 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_R2C = 42,
# 97 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_C2R = 44,
# 98 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_C2C = 41,
# 99 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_D2Z = 106,
# 100 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_Z2D = 108,
# 101 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_Z2Z = 105
# 102 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
} cufftType; }
# 131 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" { typedef
# 126 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
enum cufftCompatibility_t {
# 127 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_COMPATIBILITY_NATIVE,
# 128 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_COMPATIBILITY_FFTW_PADDING,
# 129 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_COMPATIBILITY_FFTW_ASYMMETRIC,
# 130 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
CUFFT_COMPATIBILITY_FFTW_ALL
# 131 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
} cufftCompatibility; }
# 135 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftPlan1d(cufftHandle *, int, cufftType, int);
# 140 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftPlan2d(cufftHandle *, int, int, cufftType);
# 144 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftPlan3d(cufftHandle *, int, int, int, cufftType);
# 148 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftPlanMany(cufftHandle *, int, int *, int *, int, int, int *, int, int, cufftType, int);
# 156 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftDestroy(cufftHandle);
# 158 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecC2C(cufftHandle, cufftComplex *, cufftComplex *, int);
# 163 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecR2C(cufftHandle, cufftReal *, cufftComplex *);
# 167 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecC2R(cufftHandle, cufftComplex *, cufftReal *);
# 171 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecZ2Z(cufftHandle, cufftDoubleComplex *, cufftDoubleComplex *, int);
# 176 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecD2Z(cufftHandle, cufftDoubleReal *, cufftDoubleComplex *);
# 180 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftExecZ2D(cufftHandle, cufftDoubleComplex *, cufftDoubleReal *);
# 184 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftSetStream(cufftHandle, cudaStream_t);
# 187 "/usr/local/cuda3.2/cuda/bin/../include/cufft.h"
extern "C" cufftResult cufftSetCompatibilityMode(cufftHandle, cufftCompatibility);
# 43 "sdk/cutil_inline_runtime.h"
inline void __cutilCondition(int val, char *file, int line)
# 44 "sdk/cutil_inline_runtime.h"
{
# 45 "sdk/cutil_inline_runtime.h"
if ((CUTFalse) == (cutCheckCondition(val, file, line))) {
# 46 "sdk/cutil_inline_runtime.h"
exit(1);
# 47 "sdk/cutil_inline_runtime.h"
}
# 48 "sdk/cutil_inline_runtime.h"
}
# 50 "sdk/cutil_inline_runtime.h"
inline void __cutilExit(int argc, char **argv)
# 51 "sdk/cutil_inline_runtime.h"
{
# 52 "sdk/cutil_inline_runtime.h"
if (!(cutCheckCmdLineFlag(argc, (const char **)argv, "noprompt"))) {
# 53 "sdk/cutil_inline_runtime.h"
printf("\nPress ENTER to exit...\n");
# 54 "sdk/cutil_inline_runtime.h"
fflush(stdout);
# 55 "sdk/cutil_inline_runtime.h"
fflush(stderr);
# 56 "sdk/cutil_inline_runtime.h"
getchar();
# 57 "sdk/cutil_inline_runtime.h"
}
# 58 "sdk/cutil_inline_runtime.h"
exit(0);
# 59 "sdk/cutil_inline_runtime.h"
}
# 65 "sdk/cutil_inline_runtime.h"
inline int _ConvertSMVer2Cores(int major, int minor)
# 66 "sdk/cutil_inline_runtime.h"
{
# 71 "sdk/cutil_inline_runtime.h"
typedef
# 68 "sdk/cutil_inline_runtime.h"
struct {
# 69 "sdk/cutil_inline_runtime.h"
int SM;
# 70 "sdk/cutil_inline_runtime.h"
int Cores;
# 71 "sdk/cutil_inline_runtime.h"
} sSMtoCores;
# 73 "sdk/cutil_inline_runtime.h"
sSMtoCores nGpuArchCoresPerSM[] = {{16, 8}, {17, 8}, {18, 8}, {19, 8}, {32, 32}, {33, 48}, {(-1), (-1)}};
# 83 "sdk/cutil_inline_runtime.h"
int index = 0;
# 84 "sdk/cutil_inline_runtime.h"
while ((((nGpuArchCoresPerSM)[index]).SM) != (-1)) {
# 85 "sdk/cutil_inline_runtime.h"
if ((((nGpuArchCoresPerSM)[index]).SM) == ((major << 4) + minor)) {
# 86 "sdk/cutil_inline_runtime.h"
return ((nGpuArchCoresPerSM)[index]).Cores;
# 87 "sdk/cutil_inline_runtime.h"
}
# 88 "sdk/cutil_inline_runtime.h"
index++;
# 89 "sdk/cutil_inline_runtime.h"
}
# 90 "sdk/cutil_inline_runtime.h"
printf("MapSMtoCores undefined SMversion %d.%d!\n", major, minor);
# 91 "sdk/cutil_inline_runtime.h"
return -1;
# 92 "sdk/cutil_inline_runtime.h"
}
# 96 "sdk/cutil_inline_runtime.h"
inline int cutGetMaxGflopsDeviceId()
# 97 "sdk/cutil_inline_runtime.h"
{
# 98 "sdk/cutil_inline_runtime.h"
int current_device = 0, sm_per_multiproc = 0;
# 99 "sdk/cutil_inline_runtime.h"
int max_compute_perf = 0, max_perf_device = 0;
# 100 "sdk/cutil_inline_runtime.h"
int device_count = 0, best_SM_arch = 0;
# 101 "sdk/cutil_inline_runtime.h"
cudaDeviceProp deviceProp;
# 103 "sdk/cutil_inline_runtime.h"
cudaGetDeviceCount(&device_count);
# 105 "sdk/cutil_inline_runtime.h"
while (current_device < device_count) {
# 106 "sdk/cutil_inline_runtime.h"
cudaGetDeviceProperties(&deviceProp, current_device);
# 107 "sdk/cutil_inline_runtime.h"
if (((deviceProp.major) > 0) && ((deviceProp.major) < 9999)) {
# 108 "sdk/cutil_inline_runtime.h"
best_SM_arch = ((best_SM_arch > (deviceProp.major)) ? best_SM_arch : (deviceProp.major));
# 109 "sdk/cutil_inline_runtime.h"
}
# 110 "sdk/cutil_inline_runtime.h"
current_device++;
# 111 "sdk/cutil_inline_runtime.h"
}
# 114 "sdk/cutil_inline_runtime.h"
current_device = 0;
# 115 "sdk/cutil_inline_runtime.h"
while (current_device < device_count) {
# 116 "sdk/cutil_inline_runtime.h"
cudaGetDeviceProperties(&deviceProp, current_device);
# 117 "sdk/cutil_inline_runtime.h"
if (((deviceProp.major) == 9999) && ((deviceProp.minor) == 9999)) {
# 118 "sdk/cutil_inline_runtime.h"
sm_per_multiproc = 1;
# 119 "sdk/cutil_inline_runtime.h"
} else {
# 120 "sdk/cutil_inline_runtime.h"
sm_per_multiproc = _ConvertSMVer2Cores(deviceProp.major, deviceProp.minor);
# 121 "sdk/cutil_inline_runtime.h"
}
# 123 "sdk/cutil_inline_runtime.h"
int compute_perf = (((deviceProp.multiProcessorCount) * sm_per_multiproc) * (deviceProp.clockRate));
# 124 "sdk/cutil_inline_runtime.h"
if (compute_perf > max_compute_perf) {
# 126 "sdk/cutil_inline_runtime.h"
if (best_SM_arch > 2) {
# 128 "sdk/cutil_inline_runtime.h"
if ((deviceProp.major) == best_SM_arch) {
# 129 "sdk/cutil_inline_runtime.h"
max_compute_perf = compute_perf;
# 130 "sdk/cutil_inline_runtime.h"
max_perf_device = current_device;
# 131 "sdk/cutil_inline_runtime.h"
}
# 132 "sdk/cutil_inline_runtime.h"
} else {
# 133 "sdk/cutil_inline_runtime.h"
max_compute_perf = compute_perf;
# 134 "sdk/cutil_inline_runtime.h"
max_perf_device = current_device;
# 135 "sdk/cutil_inline_runtime.h"
}
# 136 "sdk/cutil_inline_runtime.h"
}
# 137 "sdk/cutil_inline_runtime.h"
++current_device;
# 138 "sdk/cutil_inline_runtime.h"
}
# 139 "sdk/cutil_inline_runtime.h"
return max_perf_device;
# 140 "sdk/cutil_inline_runtime.h"
}
# 178 "sdk/cutil_inline_runtime.h"
inline void __cudaSafeCallNoSync(cudaError err, const char *file, const int line)
# 179 "sdk/cutil_inline_runtime.h"
{
# 180 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 181 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cudaSafeCallNoSync() Runtime API error : %s.\n", file, line, cudaGetErrorString(err));
# 183 "sdk/cutil_inline_runtime.h"
exit(-1);
# 184 "sdk/cutil_inline_runtime.h"
}
# 185 "sdk/cutil_inline_runtime.h"
}
# 187 "sdk/cutil_inline_runtime.h"
inline void __cudaSafeCall(cudaError err, const char *file, const int line)
# 188 "sdk/cutil_inline_runtime.h"
{
# 189 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 190 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cudaSafeCall() Runtime API error : %s.\n", file, line, cudaGetErrorString(err));
# 192 "sdk/cutil_inline_runtime.h"
exit(-1);
# 193 "sdk/cutil_inline_runtime.h"
}
# 194 "sdk/cutil_inline_runtime.h"
}
# 196 "sdk/cutil_inline_runtime.h"
inline void __cudaSafeThreadSync(const char *file, const int line)
# 197 "sdk/cutil_inline_runtime.h"
{
# 198 "sdk/cutil_inline_runtime.h"
cudaError err = cudaThreadSynchronize();
# 199 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 200 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cudaThreadSynchronize() Driver API error : %s.\n", file, line, cudaGetErrorString(err));
# 202 "sdk/cutil_inline_runtime.h"
exit(-1);
# 203 "sdk/cutil_inline_runtime.h"
}
# 204 "sdk/cutil_inline_runtime.h"
}
# 206 "sdk/cutil_inline_runtime.h"
inline void __cufftSafeCall(cufftResult err, const char *file, const int line)
# 207 "sdk/cutil_inline_runtime.h"
{
# 208 "sdk/cutil_inline_runtime.h"
if ((CUFFT_SUCCESS) != err) {
# 209 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cufftSafeCall() CUFFT error.\n", file, line);
# 211 "sdk/cutil_inline_runtime.h"
exit(-1);
# 212 "sdk/cutil_inline_runtime.h"
}
# 213 "sdk/cutil_inline_runtime.h"
}
# 215 "sdk/cutil_inline_runtime.h"
inline void __cutilCheckError(CUTBoolean err, const char *file, const int line)
# 216 "sdk/cutil_inline_runtime.h"
{
# 217 "sdk/cutil_inline_runtime.h"
if ((CUTTrue) != err) {
# 218 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : CUTIL CUDA error.\n", file, line);
# 220 "sdk/cutil_inline_runtime.h"
exit(-1);
# 221 "sdk/cutil_inline_runtime.h"
}
# 222 "sdk/cutil_inline_runtime.h"
}
# 224 "sdk/cutil_inline_runtime.h"
inline void __cutilCheckMsg(const char *errorMessage, const char *file, const int line)
# 225 "sdk/cutil_inline_runtime.h"
{
# 226 "sdk/cutil_inline_runtime.h"
cudaError_t err = cudaGetLastError();
# 227 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 228 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cutilCheckMsg() CUTIL CUDA error : %s : %s.\n", file, line, errorMessage, cudaGetErrorString(err));
# 230 "sdk/cutil_inline_runtime.h"
exit(-1);
# 231 "sdk/cutil_inline_runtime.h"
}
# 240 "sdk/cutil_inline_runtime.h"
}
# 241 "sdk/cutil_inline_runtime.h"
inline void __cutilSafeMalloc(void *pointer, const char *file, const int line)
# 242 "sdk/cutil_inline_runtime.h"
{
# 243 "sdk/cutil_inline_runtime.h"
if (!(pointer)) {
# 244 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : cutilSafeMalloc host malloc failure\n", file, line);
# 246 "sdk/cutil_inline_runtime.h"
exit(-1);
# 247 "sdk/cutil_inline_runtime.h"
}
# 248 "sdk/cutil_inline_runtime.h"
}
# 254 "sdk/cutil_inline_runtime.h"
inline int cutilDeviceInit(int ARGC, char **ARGV)
# 255 "sdk/cutil_inline_runtime.h"
{
# 256 "sdk/cutil_inline_runtime.h"
int deviceCount;
# 257 "sdk/cutil_inline_runtime.h"
__cudaSafeCallNoSync(cudaGetDeviceCount(&deviceCount), "sdk/cutil_inline_runtime.h", 257);
# 258 "sdk/cutil_inline_runtime.h"
if (deviceCount == 0) {
# 259 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "CUTIL CUDA error: no devices supporting CUDA.\n");
# 260 "sdk/cutil_inline_runtime.h"
exit(-1);
# 261 "sdk/cutil_inline_runtime.h"
}
# 262 "sdk/cutil_inline_runtime.h"
int dev = 0;
# 263 "sdk/cutil_inline_runtime.h"
cutGetCmdLineArgumenti(ARGC, (const char **)ARGV, "device", &dev);
# 264 "sdk/cutil_inline_runtime.h"
if (dev < 0) {
# 265 "sdk/cutil_inline_runtime.h"
dev = 0; }
# 266 "sdk/cutil_inline_runtime.h"
if (dev > (deviceCount - 1)) {
# 267 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "cutilDeviceInit (Device=%d) invalid GPU device.  %d GPU device(s) detected.\n\n", dev, deviceCount);
# 268 "sdk/cutil_inline_runtime.h"
return -dev;
# 269 "sdk/cutil_inline_runtime.h"
}
# 270 "sdk/cutil_inline_runtime.h"
cudaDeviceProp deviceProp;
# 271 "sdk/cutil_inline_runtime.h"
__cudaSafeCallNoSync(cudaGetDeviceProperties(&deviceProp, dev), "sdk/cutil_inline_runtime.h", 271);
# 272 "sdk/cutil_inline_runtime.h"
if ((deviceProp.major) < 1) {
# 273 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "cutil error: GPU device does not support CUDA.\n");
# 274 "sdk/cutil_inline_runtime.h"
exit(-1); }
# 276 "sdk/cutil_inline_runtime.h"
printf("> Using CUDA device [%d]: %s\n", dev, deviceProp.name);
# 277 "sdk/cutil_inline_runtime.h"
__cudaSafeCall(cudaSetDevice(dev), "sdk/cutil_inline_runtime.h", 277);
# 279 "sdk/cutil_inline_runtime.h"
return dev;
# 280 "sdk/cutil_inline_runtime.h"
}
# 283 "sdk/cutil_inline_runtime.h"
inline int cutilChooseCudaDevice(int argc, char **argv)
# 284 "sdk/cutil_inline_runtime.h"
{
# 285 "sdk/cutil_inline_runtime.h"
cudaDeviceProp deviceProp;
# 286 "sdk/cutil_inline_runtime.h"
int devID = 0;
# 288 "sdk/cutil_inline_runtime.h"
if (cutCheckCmdLineFlag(argc, (const char **)argv, "device")) {
# 289 "sdk/cutil_inline_runtime.h"
devID = cutilDeviceInit(argc, argv);
# 290 "sdk/cutil_inline_runtime.h"
if (devID < 0) {
# 291 "sdk/cutil_inline_runtime.h"
printf("exiting...\n");
# 292 "sdk/cutil_inline_runtime.h"
__cutilExit(argc, argv);
# 293 "sdk/cutil_inline_runtime.h"
exit(0);
# 294 "sdk/cutil_inline_runtime.h"
}
# 295 "sdk/cutil_inline_runtime.h"
} else {
# 297 "sdk/cutil_inline_runtime.h"
devID = cutGetMaxGflopsDeviceId();
# 298 "sdk/cutil_inline_runtime.h"
__cudaSafeCallNoSync(cudaSetDevice(devID), "sdk/cutil_inline_runtime.h", 298);
# 299 "sdk/cutil_inline_runtime.h"
__cudaSafeCallNoSync(cudaGetDeviceProperties(&deviceProp, devID), "sdk/cutil_inline_runtime.h", 299);
# 300 "sdk/cutil_inline_runtime.h"
printf("> Using CUDA device [%d]: %s\n", devID, deviceProp.name);
# 301 "sdk/cutil_inline_runtime.h"
}
# 302 "sdk/cutil_inline_runtime.h"
return devID;
# 303 "sdk/cutil_inline_runtime.h"
}
# 308 "sdk/cutil_inline_runtime.h"
inline void cutilCudaCheckCtxLost(const char *errorMessage, const char *file, const int line)
# 309 "sdk/cutil_inline_runtime.h"
{
# 310 "sdk/cutil_inline_runtime.h"
cudaError_t err = cudaGetLastError();
# 311 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 312 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : CUDA error: %s : %s.\n", file, line, errorMessage, cudaGetErrorString(err));
# 314 "sdk/cutil_inline_runtime.h"
exit(-1);
# 315 "sdk/cutil_inline_runtime.h"
}
# 316 "sdk/cutil_inline_runtime.h"
err = cudaThreadSynchronize();
# 317 "sdk/cutil_inline_runtime.h"
if ((cudaSuccess) != err) {
# 318 "sdk/cutil_inline_runtime.h"
fprintf(stderr, "%s(%i) : CCUDA error: %s : %s.\n", file, line, errorMessage, cudaGetErrorString(err));
# 320 "sdk/cutil_inline_runtime.h"
exit(-1);
# 321 "sdk/cutil_inline_runtime.h"
}
# 322 "sdk/cutil_inline_runtime.h"
}
# 325 "sdk/cutil_inline_runtime.h"
inline bool cutilCudaCapabilities(int major_version, int minor_version)
# 326 "sdk/cutil_inline_runtime.h"
{
# 327 "sdk/cutil_inline_runtime.h"
cudaDeviceProp deviceProp;
# 328 "sdk/cutil_inline_runtime.h"
(deviceProp.major) = 0;
# 329 "sdk/cutil_inline_runtime.h"
(deviceProp.minor) = 0;
# 330 "sdk/cutil_inline_runtime.h"
int dev;
# 336 "sdk/cutil_inline_runtime.h"
__cudaSafeCall(cudaGetDevice(&dev), "sdk/cutil_inline_runtime.h", 336);
# 337 "sdk/cutil_inline_runtime.h"
__cudaSafeCall(cudaGetDeviceProperties(&deviceProp, dev), "sdk/cutil_inline_runtime.h", 337);
# 339 "sdk/cutil_inline_runtime.h"
if (((deviceProp.major) > major_version) || (((deviceProp.major) == major_version) && ((deviceProp.minor) >= minor_version)))
# 341 "sdk/cutil_inline_runtime.h"
{
# 342 "sdk/cutil_inline_runtime.h"
printf("> Device %d: <%16s >, Compute SM %d.%d detected\n", dev, deviceProp.name, deviceProp.major, deviceProp.minor);
# 343 "sdk/cutil_inline_runtime.h"
return true;
# 344 "sdk/cutil_inline_runtime.h"
} else
# 346 "sdk/cutil_inline_runtime.h"
{
# 347 "sdk/cutil_inline_runtime.h"
printf("There is no device supporting CUDA compute capability %d.%d.\n", major_version, minor_version);
# 348 "sdk/cutil_inline_runtime.h"
printf("PASSED\n");
# 349 "sdk/cutil_inline_runtime.h"
return false;
# 350 "sdk/cutil_inline_runtime.h"
}
# 351 "sdk/cutil_inline_runtime.h"
}
# 32 "sdk/cutil_inline_drvapi.h"
inline int _ConvertSMVer2CoresDrvApi(int major, int minor)
# 33 "sdk/cutil_inline_drvapi.h"
{
# 38 "sdk/cutil_inline_drvapi.h"
typedef
# 35 "sdk/cutil_inline_drvapi.h"
struct {
# 36 "sdk/cutil_inline_drvapi.h"
int SM;
# 37 "sdk/cutil_inline_drvapi.h"
int Cores;
# 38 "sdk/cutil_inline_drvapi.h"
} sSMtoCores;
# 40 "sdk/cutil_inline_drvapi.h"
sSMtoCores nGpuArchCoresPerSM[] = {{16, 8}, {17, 8}, {18, 8}, {19, 8}, {32, 32}, {33, 48}, {(-1), (-1)}};
# 50 "sdk/cutil_inline_drvapi.h"
int index = 0;
# 51 "sdk/cutil_inline_drvapi.h"
while ((((nGpuArchCoresPerSM)[index]).SM) != (-1)) {
# 52 "sdk/cutil_inline_drvapi.h"
if ((((nGpuArchCoresPerSM)[index]).SM) == ((major << 4) + minor)) {
# 53 "sdk/cutil_inline_drvapi.h"
return ((nGpuArchCoresPerSM)[index]).Cores;
# 54 "sdk/cutil_inline_drvapi.h"
}
# 55 "sdk/cutil_inline_drvapi.h"
index++;
# 56 "sdk/cutil_inline_drvapi.h"
}
# 57 "sdk/cutil_inline_drvapi.h"
printf("MapSMtoCores undefined SMversion %d.%d!\n", major, minor);
# 58 "sdk/cutil_inline_drvapi.h"
return -1;
# 59 "sdk/cutil_inline_drvapi.h"
}
# 63 "sdk/cutil_inline_drvapi.h"
inline int cutilDrvGetMaxGflopsDeviceId()
# 64 "sdk/cutil_inline_drvapi.h"
{
# 65 "sdk/cutil_inline_drvapi.h"
CUdevice current_device = 0, max_perf_device = 0;
# 66 "sdk/cutil_inline_drvapi.h"
int device_count = 0, sm_per_multiproc = 0;
# 67 "sdk/cutil_inline_drvapi.h"
int max_compute_perf = 0, best_SM_arch = 0;
# 68 "sdk/cutil_inline_drvapi.h"
int major = 0, minor = 0, multiProcessorCount, clockRate;
# 70 "sdk/cutil_inline_drvapi.h"
cuInit(0);
# 71 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetCount(&device_count); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 71); exit(1); } } ;
# 74 "sdk/cutil_inline_drvapi.h"
while (current_device < device_count) {
# 75 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceComputeCapability(&major, &minor, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 75); exit(1); } } ;
# 76 "sdk/cutil_inline_drvapi.h"
if ((major > 0) && (major < 9999)) {
# 77 "sdk/cutil_inline_drvapi.h"
best_SM_arch = ((best_SM_arch > major) ? best_SM_arch : major);
# 78 "sdk/cutil_inline_drvapi.h"
}
# 79 "sdk/cutil_inline_drvapi.h"
current_device++;
# 80 "sdk/cutil_inline_drvapi.h"
}
# 83 "sdk/cutil_inline_drvapi.h"
current_device = 0;
# 84 "sdk/cutil_inline_drvapi.h"
while (current_device < device_count) {
# 85 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetAttribute(&multiProcessorCount, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 87); exit(1); } } ;
# 88 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetAttribute(&clockRate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 90); exit(1); } } ;
# 91 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceComputeCapability(&major, &minor, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 91); exit(1); } } ;
# 93 "sdk/cutil_inline_drvapi.h"
if ((major == 9999) && (minor == 9999)) {
# 94 "sdk/cutil_inline_drvapi.h"
sm_per_multiproc = 1;
# 95 "sdk/cutil_inline_drvapi.h"
} else {
# 96 "sdk/cutil_inline_drvapi.h"
sm_per_multiproc = _ConvertSMVer2CoresDrvApi(major, minor);
# 97 "sdk/cutil_inline_drvapi.h"
}
# 99 "sdk/cutil_inline_drvapi.h"
int compute_perf = ((multiProcessorCount * sm_per_multiproc) * clockRate);
# 100 "sdk/cutil_inline_drvapi.h"
if (compute_perf > max_compute_perf) {
# 102 "sdk/cutil_inline_drvapi.h"
if (best_SM_arch > 2) {
# 104 "sdk/cutil_inline_drvapi.h"
if (major == best_SM_arch) {
# 105 "sdk/cutil_inline_drvapi.h"
max_compute_perf = compute_perf;
# 106 "sdk/cutil_inline_drvapi.h"
max_perf_device = current_device;
# 107 "sdk/cutil_inline_drvapi.h"
}
# 108 "sdk/cutil_inline_drvapi.h"
} else {
# 109 "sdk/cutil_inline_drvapi.h"
max_compute_perf = compute_perf;
# 110 "sdk/cutil_inline_drvapi.h"
max_perf_device = current_device;
# 111 "sdk/cutil_inline_drvapi.h"
}
# 112 "sdk/cutil_inline_drvapi.h"
}
# 113 "sdk/cutil_inline_drvapi.h"
++current_device;
# 114 "sdk/cutil_inline_drvapi.h"
}
# 115 "sdk/cutil_inline_drvapi.h"
return max_perf_device;
# 116 "sdk/cutil_inline_drvapi.h"
}
# 119 "sdk/cutil_inline_drvapi.h"
inline int cutilDrvGetMaxGflopsGraphicsDeviceId()
# 120 "sdk/cutil_inline_drvapi.h"
{
# 121 "sdk/cutil_inline_drvapi.h"
CUdevice current_device = 0, max_perf_device = 0;
# 122 "sdk/cutil_inline_drvapi.h"
int device_count = 0, sm_per_multiproc = 0;
# 123 "sdk/cutil_inline_drvapi.h"
int max_compute_perf = 0, best_SM_arch = 0;
# 124 "sdk/cutil_inline_drvapi.h"
int major = 0, minor = 0, multiProcessorCount, clockRate;
# 125 "sdk/cutil_inline_drvapi.h"
int bTCC = 0;
# 126 "sdk/cutil_inline_drvapi.h"
char deviceName[256];
# 128 "sdk/cutil_inline_drvapi.h"
cuInit(0);
# 129 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetCount(&device_count); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 129); exit(1); } } ;
# 132 "sdk/cutil_inline_drvapi.h"
while (current_device < device_count) {
# 133 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetName(deviceName, 256, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 133); exit(1); } } ;
# 134 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceComputeCapability(&major, &minor, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 134); exit(1); } } ;
# 136 "sdk/cutil_inline_drvapi.h"
if ((major > 0) && (major < 9999)) {
# 137 "sdk/cutil_inline_drvapi.h"
best_SM_arch = ((best_SM_arch > major) ? best_SM_arch : major);
# 138 "sdk/cutil_inline_drvapi.h"
}
# 139 "sdk/cutil_inline_drvapi.h"
current_device++;
# 140 "sdk/cutil_inline_drvapi.h"
}
# 143 "sdk/cutil_inline_drvapi.h"
current_device = 0;
# 144 "sdk/cutil_inline_drvapi.h"
while (current_device < device_count) {
# 145 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetAttribute(&multiProcessorCount, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 147); exit(1); } } ;
# 148 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetAttribute(&clockRate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 150); exit(1); } } ;
# 151 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceComputeCapability(&major, &minor, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 151); exit(1); } } ;
# 154 "sdk/cutil_inline_drvapi.h"
{ CUresult err = cuDeviceGetAttribute(&bTCC, CU_DEVICE_ATTRIBUTE_TCC_DRIVER, current_device); if ((CUDA_SUCCESS) != err) { fprintf(stderr, "Cuda driver error %x in file \'%s\' in line %i.\n", err, "sdk/cutil_inline_drvapi.h", 154); exit(1); } } ;
# 160 "sdk/cutil_inline_drvapi.h"
if ((major == 9999) && (minor == 9999)) {
# 161 "sdk/cutil_inline_drvapi.h"
sm_per_multiproc = 1;
# 162 "sdk/cutil_inline_drvapi.h"
} else {
# 163 "sdk/cutil_inline_drvapi.h"
sm_per_multiproc = _ConvertSMVer2CoresDrvApi(major, minor);
# 164 "sdk/cutil_inline_drvapi.h"
}
# 167 "sdk/cutil_inline_drvapi.h"
if ((major >= 2) && (!(bTCC)))
# 168 "sdk/cutil_inline_drvapi.h"
{
# 169 "sdk/cutil_inline_drvapi.h"
int compute_perf = ((multiProcessorCount * sm_per_multiproc) * clockRate);
# 170 "sdk/cutil_inline_drvapi.h"
if (compute_perf > max_compute_perf) {
# 172 "sdk/cutil_inline_drvapi.h"
if (best_SM_arch > 2) {
# 174 "sdk/cutil_inline_drvapi.h"
if (major == best_SM_arch) {
# 175 "sdk/cutil_inline_drvapi.h"
max_compute_perf = compute_perf;
# 176 "sdk/cutil_inline_drvapi.h"
max_perf_device = current_device;
# 177 "sdk/cutil_inline_drvapi.h"
}
# 178 "sdk/cutil_inline_drvapi.h"
} else {
# 179 "sdk/cutil_inline_drvapi.h"
max_compute_perf = compute_perf;
# 180 "sdk/cutil_inline_drvapi.h"
max_perf_device = current_device;
# 181 "sdk/cutil_inline_drvapi.h"
}
# 182 "sdk/cutil_inline_drvapi.h"
}
# 183 "sdk/cutil_inline_drvapi.h"
}
# 184 "sdk/cutil_inline_drvapi.h"
++current_device;
# 185 "sdk/cutil_inline_drvapi.h"
}
# 186 "sdk/cutil_inline_drvapi.h"
return max_perf_device;
# 187 "sdk/cutil_inline_drvapi.h"
}
# 190 "sdk/cutil_inline_drvapi.h"
inline void __cuSafeCallNoSync(CUresult err, const char *file, const int line)
# 191 "sdk/cutil_inline_drvapi.h"
{
# 192 "sdk/cutil_inline_drvapi.h"
if ((CUDA_SUCCESS) != err) {
# 193 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "cuSafeCallNoSync() Driver API error = %04d from file <%s>, line %i.\n", err, file, line);
# 195 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 196 "sdk/cutil_inline_drvapi.h"
}
# 197 "sdk/cutil_inline_drvapi.h"
}
# 198 "sdk/cutil_inline_drvapi.h"
inline void __cuSafeCall(CUresult err, const char *file, const int line)
# 199 "sdk/cutil_inline_drvapi.h"
{
# 200 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(err, file, line);
# 201 "sdk/cutil_inline_drvapi.h"
}
# 203 "sdk/cutil_inline_drvapi.h"
inline void __cuCtxSync(const char *file, const int line)
# 204 "sdk/cutil_inline_drvapi.h"
{
# 205 "sdk/cutil_inline_drvapi.h"
CUresult err = cuCtxSynchronize();
# 206 "sdk/cutil_inline_drvapi.h"
if ((CUDA_SUCCESS) != err) {
# 207 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "cuCtxSynchronize() API error = %04d in file <%s>, line %i.\n", err, file, line);
# 209 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 210 "sdk/cutil_inline_drvapi.h"
}
# 211 "sdk/cutil_inline_drvapi.h"
}
# 213 "sdk/cutil_inline_drvapi.h"
inline void __cuCheckMsg(const char *msg, const char *file, const int line)
# 214 "sdk/cutil_inline_drvapi.h"
{
# 215 "sdk/cutil_inline_drvapi.h"
CUresult err = cuCtxSynchronize();
# 216 "sdk/cutil_inline_drvapi.h"
if ((CUDA_SUCCESS) != err) {
# 217 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "cutilDrvCheckMsg -> %s", msg);
# 218 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "cutilDrvCheckMsg -> cuCtxSynchronize API error = %04d in file <%s>, line %i.\n", err, file, line);
# 220 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 221 "sdk/cutil_inline_drvapi.h"
}
# 222 "sdk/cutil_inline_drvapi.h"
}
# 228 "sdk/cutil_inline_drvapi.h"
inline int cutilDeviceInitDrv(int ARGC, char **ARGV)
# 229 "sdk/cutil_inline_drvapi.h"
{
# 230 "sdk/cutil_inline_drvapi.h"
int cuDevice = 0;
# 231 "sdk/cutil_inline_drvapi.h"
int deviceCount = 0;
# 232 "sdk/cutil_inline_drvapi.h"
CUresult err = cuInit(0);
# 233 "sdk/cutil_inline_drvapi.h"
if ((CUDA_SUCCESS) == err) {
# 234 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceGetCount(&deviceCount), "sdk/cutil_inline_drvapi.h", 234); }
# 235 "sdk/cutil_inline_drvapi.h"
if (deviceCount == 0) {
# 236 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "CUTIL DeviceInitDrv error: no devices supporting CUDA\n");
# 237 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 238 "sdk/cutil_inline_drvapi.h"
}
# 239 "sdk/cutil_inline_drvapi.h"
int dev = 0;
# 240 "sdk/cutil_inline_drvapi.h"
cutGetCmdLineArgumenti(ARGC, (const char **)ARGV, "device", &dev);
# 241 "sdk/cutil_inline_drvapi.h"
if (dev < 0) { dev = 0; }
# 242 "sdk/cutil_inline_drvapi.h"
if (dev > (deviceCount - 1)) {
# 243 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "cutilDeviceInitDrv (Device=%d) invalid GPU device.  %d GPU device(s) detected.\n\n", dev, deviceCount);
# 244 "sdk/cutil_inline_drvapi.h"
return -dev;
# 245 "sdk/cutil_inline_drvapi.h"
}
# 246 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceGet(&cuDevice, dev), "sdk/cutil_inline_drvapi.h", 246);
# 247 "sdk/cutil_inline_drvapi.h"
char name[100];
# 248 "sdk/cutil_inline_drvapi.h"
cuDeviceGetName(name, 100, cuDevice);
# 249 "sdk/cutil_inline_drvapi.h"
if ((cutCheckCmdLineFlag(ARGC, (const char **)ARGV, "quiet")) == (CUTFalse)) {
# 250 "sdk/cutil_inline_drvapi.h"
printf("> Using CUDA Device [%d]: %s\n", dev, name);
# 251 "sdk/cutil_inline_drvapi.h"
}
# 252 "sdk/cutil_inline_drvapi.h"
return dev;
# 253 "sdk/cutil_inline_drvapi.h"
}
# 260 "sdk/cutil_inline_drvapi.h"
inline CUdevice cutilChooseCudaDeviceDrv(int argc, char **argv, int *p_devID)
# 261 "sdk/cutil_inline_drvapi.h"
{
# 262 "sdk/cutil_inline_drvapi.h"
CUdevice cuDevice;
# 263 "sdk/cutil_inline_drvapi.h"
int devID = 0;
# 265 "sdk/cutil_inline_drvapi.h"
if (cutCheckCmdLineFlag(argc, (const char **)argv, "device")) {
# 266 "sdk/cutil_inline_drvapi.h"
devID = cutilDeviceInitDrv(argc, argv);
# 267 "sdk/cutil_inline_drvapi.h"
if (devID < 0) {
# 268 "sdk/cutil_inline_drvapi.h"
printf("exiting...\n");
# 269 "sdk/cutil_inline_drvapi.h"
exit(0);
# 270 "sdk/cutil_inline_drvapi.h"
}
# 271 "sdk/cutil_inline_drvapi.h"
} else {
# 273 "sdk/cutil_inline_drvapi.h"
char name[100];
# 274 "sdk/cutil_inline_drvapi.h"
devID = cutilDrvGetMaxGflopsDeviceId();
# 275 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceGet(&cuDevice, devID), "sdk/cutil_inline_drvapi.h", 275);
# 276 "sdk/cutil_inline_drvapi.h"
cuDeviceGetName(name, 100, cuDevice);
# 277 "sdk/cutil_inline_drvapi.h"
printf("> Using CUDA Device [%d]: %s\n", devID, name);
# 278 "sdk/cutil_inline_drvapi.h"
}
# 279 "sdk/cutil_inline_drvapi.h"
cuDeviceGet(&cuDevice, devID);
# 280 "sdk/cutil_inline_drvapi.h"
if (p_devID) { (*p_devID) = devID; }
# 281 "sdk/cutil_inline_drvapi.h"
return cuDevice;
# 282 "sdk/cutil_inline_drvapi.h"
}
# 287 "sdk/cutil_inline_drvapi.h"
inline void cutilDrvCudaCheckCtxLost(const char *errorMessage, const char *file, const int line)
# 288 "sdk/cutil_inline_drvapi.h"
{
# 289 "sdk/cutil_inline_drvapi.h"
CUresult err = cuCtxSynchronize();
# 290 "sdk/cutil_inline_drvapi.h"
if ((CUDA_ERROR_INVALID_CONTEXT) != err) {
# 291 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i\n", errorMessage, file, line);
# 293 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 294 "sdk/cutil_inline_drvapi.h"
}
# 295 "sdk/cutil_inline_drvapi.h"
err = cuCtxSynchronize();
# 296 "sdk/cutil_inline_drvapi.h"
if ((CUDA_SUCCESS) != err) {
# 297 "sdk/cutil_inline_drvapi.h"
fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i\n", errorMessage, file, line);
# 299 "sdk/cutil_inline_drvapi.h"
exit(-1);
# 300 "sdk/cutil_inline_drvapi.h"
}
# 301 "sdk/cutil_inline_drvapi.h"
}
# 304 "sdk/cutil_inline_drvapi.h"
inline bool cutilDrvCudaDevCapabilities(int major_version, int minor_version, int deviceNum)
# 305 "sdk/cutil_inline_drvapi.h"
{
# 306 "sdk/cutil_inline_drvapi.h"
int major, minor, dev;
# 307 "sdk/cutil_inline_drvapi.h"
char device_name[256];
# 313 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceGet(&dev, deviceNum), "sdk/cutil_inline_drvapi.h", 313);
# 314 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceComputeCapability(&major, &minor, dev), "sdk/cutil_inline_drvapi.h", 314);
# 315 "sdk/cutil_inline_drvapi.h"
__cuSafeCallNoSync(cuDeviceGetName(device_name, 256, dev), "sdk/cutil_inline_drvapi.h", 315);
# 317 "sdk/cutil_inline_drvapi.h"
if ((major > major_version) || ((major == major_version) && (minor >= minor_version)))
# 319 "sdk/cutil_inline_drvapi.h"
{
# 320 "sdk/cutil_inline_drvapi.h"
printf("> Device %d: < %s >, Compute SM %d.%d detected\n", dev, device_name, major, minor);
# 321 "sdk/cutil_inline_drvapi.h"
return true;
# 322 "sdk/cutil_inline_drvapi.h"
} else
# 324 "sdk/cutil_inline_drvapi.h"
{
# 325 "sdk/cutil_inline_drvapi.h"
printf("There is no device supporting CUDA compute capability %d.%d.\n", major_version, minor_version);
# 326 "sdk/cutil_inline_drvapi.h"
printf("PASSED\n");
# 327 "sdk/cutil_inline_drvapi.h"
return false;
# 328 "sdk/cutil_inline_drvapi.h"
}
# 329 "sdk/cutil_inline_drvapi.h"
}
# 332 "sdk/cutil_inline_drvapi.h"
inline bool cutilDrvCudaCapabilities(int major_version, int minor_version)
# 333 "sdk/cutil_inline_drvapi.h"
{
# 334 "sdk/cutil_inline_drvapi.h"
return cutilDrvCudaDevCapabilities(major_version, minor_version, 0);
# 335 "sdk/cutil_inline_drvapi.h"
}
# 23 "sdk/cutil_inline.h"
inline void print_NVCC_min_spec(const char *sSDKsample, const char *sNVCCReq, const char *sDriverReq)
# 24 "sdk/cutil_inline.h"
{
# 25 "sdk/cutil_inline.h"
printf("CUDA %d.%02d Toolkit built this project.\n", 3020 / 1000, 3020 % 100);
# 26 "sdk/cutil_inline.h"
printf("  [ %s ] requirements:\n", sSDKsample);
# 27 "sdk/cutil_inline.h"
printf(" -> CUDA %s Toolkit\n", sNVCCReq);
# 28 "sdk/cutil_inline.h"
printf(" -> %s NVIDIA Display Driver.\n", sDriverReq);
# 29 "sdk/cutil_inline.h"
}
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.h"
typedef double T;
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.h"
static const int BLOCK_SIZE = 64;
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.h"
static const int GRID_SIZE = 1024;
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.h"
static const int THREADS = (GRID_SIZE * BLOCK_SIZE);
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.h"
static const int DEPTH_RESULT = 128;
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
template< class T>
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
struct rounded_arith {
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T add_down(const T &, const T &);
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T add_up(const T &, const T &);
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T sub_down(const T &, const T &);
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T sub_up(const T &, const T &);
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T mul_down(const T &, const T &);
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T mul_up(const T &, const T &);
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T div_down(const T &, const T &);
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T div_up(const T &, const T &);
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T median(const T &, const T &);
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T sqrt_down(const T &);
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T sqrt_up(const T &);
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T int_down(const T &);
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T int_up(const T &);
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T pos_inf();
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T neg_inf();
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T nan();
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T min(const T &, const T &);
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
T max(const T &, const T &);
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
};
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
template<> struct rounded_arith< float> {
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float add_down(const float &x, const float &y) {int volatile ___ = 1;
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float add_up(const float &x, const float &y) {int volatile ___ = 1;
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float sub_down(const float &x, const float &y) {int volatile ___ = 1;
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float sub_up(const float &x, const float &y) {int volatile ___ = 1;
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float mul_down(const float &x, const float &y) {int volatile ___ = 1;
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float mul_up(const float &x, const float &y) {int volatile ___ = 1;
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float div_down(const float &x, const float &y) {int volatile ___ = 1;
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float div_up(const float &x, const float &y) {int volatile ___ = 1;
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float median(const float &x, const float &y) {int volatile ___ = 1;
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float sqrt_down(const float &x) {int volatile ___ = 1;
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float sqrt_up(const float &x) {int volatile ___ = 1;
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float int_down(const float &x) {int volatile ___ = 1;
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float int_up(const float &x) {int volatile ___ = 1;
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float neg_inf() {int volatile ___ = 1;
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float pos_inf() {int volatile ___ = 1;
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float nan() {
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
return nanf("");
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
}
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float min(const float &x, const float &y) {int volatile ___ = 1;
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
float max(const float &x, const float &y) {int volatile ___ = 1;
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
};
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
__attribute__((unused)) double my_div_ru(double a, double b)
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
{int volatile ___ = 1;
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
__attribute__((unused)) double my_div_rd(double a, double b)
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
{int volatile ___ = 1;
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
template<> struct rounded_arith< double> {
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double add_down(const double &x, const double &y) {int volatile ___ = 1;
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double add_up(const double &x, const double &y) {int volatile ___ = 1;
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double sub_down(const double &x, const double &y) {int volatile ___ = 1;
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double sub_up(const double &x, const double &y) {int volatile ___ = 1;
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double mul_down(const double &x, const double &y) {int volatile ___ = 1;
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double mul_up(const double &x, const double &y) {int volatile ___ = 1;
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double div_down(const double &x, const double &y) {int volatile ___ = 1;
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double div_up(const double &x, const double &y) {int volatile ___ = 1;
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double median(const double &x, const double &y) {int volatile ___ = 1;
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double sqrt_down(const double &x) {int volatile ___ = 1;
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 224 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double sqrt_up(const double &x) {int volatile ___ = 1;
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double int_down(const double &x) {int volatile ___ = 1;
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double int_up(const double &x) {int volatile ___ = 1;
# 234 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double neg_inf() {int volatile ___ = 1;
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double pos_inf() {int volatile ___ = 1;
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 243 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double nan() {
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
return ::nan("");
# 245 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
}
# 247 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double min(const double &x, const double &y) {int volatile ___ = 1;
# 249 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 251 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
double max(const double &x, const double &y) {int volatile ___ = 1;
# 253 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
exit(___);}
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_rounded_arith.h"
};
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T>
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
class interval_gpu {
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
public: inline interval_gpu();
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
inline interval_gpu(const T &);
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
inline interval_gpu(const T &, const T &);
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
inline const T &lower() const;
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
inline const T &upper() const;
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
static inline ::interval_gpu< T> empty();
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
private: T low;
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
T up;
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
};
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::interval_gpu()
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::interval_gpu(const T &l, const T &u) : low(l), up(u)
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::interval_gpu(const T &v) : low(v), up(v)
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline const T &
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::lower() const
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
return low;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline const T &
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::upper() const
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
return up;
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline interval_gpu< T>
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
interval_gpu< T> ::empty()
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
rounded_arith< T> rnd;
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
return ::interval_gpu< T> ((rnd.nan()), (rnd.nan()));
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> inline bool
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
empty(interval_gpu< T> x)
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
T hash = ((x.lower()) + (x.upper()));
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
return hash != hash;
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
}
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline T
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
width(interval_gpu< T> x)
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline const interval_gpu< T> &
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
operator+(const interval_gpu< T> &x)
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
operator-(const interval_gpu< T> &x)
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
operator+(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
operator-(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
__attribute__((unused)) inline float min4(float a, float b, float c, float d)
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
__attribute__((unused)) inline float max4(float a, float b, float c, float d)
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
__attribute__((unused)) inline double min4(double a, double b, double c, double d)
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
__attribute__((unused)) inline double max4(double a, double b, double c, double d)
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
operator*(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline T
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
median(const interval_gpu< T> &x)
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
intersect(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
div_non_zero(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 219 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 221 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
div_positive(const interval_gpu< T> &x, const T &yu)
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 237 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 239 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
div_negative(const interval_gpu< T> &x, const T &yl)
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 257 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 258 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
div_zero_part1(const interval_gpu< T> &x, const interval_gpu< T> &y, bool &b)
# 259 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 279 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 282 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
div_zero_part2(const interval_gpu< T> &x, const interval_gpu< T> &y)
# 283 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 295 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 297 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 298 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
division_part1(const interval_gpu< T> &x, const interval_gpu< T> &y, bool &b)
# 299 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 314 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 316 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 317 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
division_part2(const interval_gpu< T> &x, const interval_gpu< T> &y, bool b = true)
# 318 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 322 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 324 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
template< class T> __attribute__((unused)) inline interval_gpu< T>
# 325 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
square(const interval_gpu< T> &x)
# 326 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
{int volatile ___ = 1;
# 339 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval_lib.h"
exit(___);}
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T, int N>
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
class local_stack {
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
T buf[N];
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
int tos;
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
public: local_stack() : tos((-1))
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int *volatile ___ = 0;free(___);}
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
const T &top() const {int volatile ___ = 1;
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
T &top() {int volatile ___ = 1;
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
void push(const T &v) {int volatile ___ = 1;
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
T pop() {int volatile ___ = 1;
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
bool full() {int volatile ___ = 1;
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
bool empty() {int volatile ___ = 1;
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
};
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T, int N, int THREADS>
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
class global_stack {
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
T *buf;
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
int free_index;
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
public: global_stack(T *buf, int thread_id) : buf(buf), free_index(thread_id)
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int *volatile ___ = 0;free(___);}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
void push(const T &v) {int volatile ___ = 1;
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
T pop() {int volatile ___ = 1;
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
bool full() {int volatile ___ = 1;
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
bool empty() {int volatile ___ = 1;
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
int size() {int volatile ___ = 1;
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
};
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> __attribute__((unused)) interval_gpu< T>
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
f(const interval_gpu< T> &x, int thread_id) {int volatile ___ = 1;
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> __attribute__((unused)) interval_gpu< T>
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
fd(const interval_gpu< T> &x, int thread_id) {int volatile ___ = 1;
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> __attribute__((unused)) bool
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
is_minimal(const interval_gpu< T> &x, int thread_id)
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int volatile ___ = 1;
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> __attribute__((unused)) bool
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
should_bisect(const interval_gpu< T> &x, const interval_gpu< T> &x1, const interval_gpu< T> &
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
x2, T alpha)
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int volatile ___ = 1;
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T, int THREADS, int DEPTH_RESULT> __attribute__((unused)) void
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
newton_interval(global_stack< interval_gpu< T> , DEPTH_RESULT, THREADS> &
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
result, const interval_gpu< T> &
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
ix0, int thread_id)
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int volatile ___ = 1;
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T, int THREADS, int DEPTH_RESULT> __attribute__((unused)) void
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
newton_interval_rec(global_stack< interval_gpu< T> , DEPTH_RESULT, THREADS> &
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
result, const interval_gpu< T> &
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
ix, int thread_id)
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int volatile ___ = 1;
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 259 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T, int THREADS, int DEPTH_RESULT> __attribute__((unused)) void
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
newton_interval_naive(global_stack< interval_gpu< T> , DEPTH_RESULT, THREADS> &
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
result, const interval_gpu< T> &
# 262 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
ix0, int thread_id)
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{int volatile ___ = 1;
# 322 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
exit(___);}
# 324 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> static void
# 325 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
__wrapper__device_stub_test_interval_newton(interval_gpu< T> *&buffer, int *&
# 326 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
nresults, interval_gpu< T> &i, int &
# 327 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
implementation_choice) ;
# 324 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
template< class T> void
# 325 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
test_interval_newton(interval_gpu< T> *buffer, int *
# 326 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
nresults, interval_gpu< T> i, int
# 327 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
implementation_choice)
# 328 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
{__wrapper__device_stub_test_interval_newton<T>(buffer,nresults,i,implementation_choice);
# 356 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cuda_interval.h"
}
# 62 "/usr/include/c++/4.4/bits/stl_construct.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _T1, typename _T2 >
    inline void
    _Construct ( _T1 * __p, const _T2 & __value )
    {


      :: new ( static_cast < void * > ( __p ) ) _T1 ( __value );
    }
# 80 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _Tp >
    inline void
    _Destroy ( _Tp * __pointer )
    { __pointer -> ~ _Tp ( ); }
# 85 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template< bool __T7>
# 86 "/usr/include/c++/4.4/bits/stl_construct.h" 3
struct _Destroy_aux {
# 88 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator __first, _ForwardIterator __last )
 {
   for (; __first != __last; ++ __first )
     std :: _Destroy ( & * __first );
 }
# 95 "/usr/include/c++/4.4/bits/stl_construct.h" 3
};
# 98 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template<> struct _Destroy_aux< true> {
# 100 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator, _ForwardIterator ) { }
# 103 "/usr/include/c++/4.4/bits/stl_construct.h" 3
};
# 110 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
                       _Value_type;
      std :: _Destroy_aux < __has_trivial_destructor ( _Value_type ) > ::
 __destroy ( __first, __last );
    }
# 126 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template< class _Tp> class allocator;
# 128 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Allocator >
    void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      _Allocator & __alloc )
    {
      for (; __first != __last; ++ __first )
 __alloc . destroy ( & * __first );
    }
# 137 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      allocator < _Tp > & )
    {
      _Destroy ( __first, __last );
    }
# 145 "/usr/include/c++/4.4/bits/stl_construct.h" 3
}
# 60 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
namespace std __attribute__((visibility("default"))) {
# 62 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template< bool __T8>
# 63 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_copy {
# 65 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++ __first, ++ __cur )
  :: new ( static_cast < void * > ( & * __cur ) ) typename
      iterator_traits < _ForwardIterator > :: value_type ( * __first );
       return __cur;
     }
   catch ( ... )
     {
       std :: _Destroy ( __result, __cur );
       throw;
     }
 }
# 84 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 87 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_copy< true> {
# 89 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        { return std :: copy ( __first, __last, __result ); }
# 94 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 105 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    uninitialized_copy ( _InputIterator __first, _InputIterator __last,
         _ForwardIterator __result )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType2;

      return std :: __uninitialized_copy < ( __is_pod ( _ValueType1 )
     && __is_pod ( _ValueType2 ) ) > ::
 uninitialized_copy ( __first, __last, __result );
    }
# 121 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template< bool __T9>
# 122 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_fill {
# 124 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 141 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 144 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_fill< true> {
# 146 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        { std :: fill ( __first, __last, __x ); }
# 151 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 162 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    uninitialized_fill ( _ForwardIterator __first, _ForwardIterator __last,
         const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill < __is_pod ( _ValueType ) > ::
 uninitialized_fill ( __first, __last, __x );
    }
# 175 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template< bool __T10>
# 176 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_fill_n {
# 178 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; -- __n, ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 195 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 198 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_fill_n< true> {
# 200 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        { std :: fill_n ( __first, __n, __x ); }
# 205 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 216 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    inline void
    uninitialized_fill_n ( _ForwardIterator __first, _Size __n, const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill_n < __is_pod ( _ValueType ) > ::
 uninitialized_fill_n ( __first, __n, __x );
    }
# 233 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++ __first, ++ __cur )
     __alloc . construct ( & * __cur, * __first );
   return __cur;
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __cur, __alloc );
   throw;
 }
    }
# 253 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp >
    inline _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator < _Tp > & )
    { return std :: uninitialized_copy ( __first, __last, __result ); }
# 259 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      return std :: __uninitialized_copy_a ( ( __first ),
      ( __last ),
      __result, __alloc );
    }
# 270 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Allocator >
    void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 288 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Tp2 >
    inline void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill ( __first, __last, __x ); }
# 294 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator >
    void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; -- __n, ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 313 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2 >
    inline void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill_n ( __first, __n, __x ); }
# 330 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_copy_move ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_copy_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 358 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_copy ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_move_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_copy_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 385 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_fill_move ( _ForwardIterator __result, _ForwardIterator __mid,
         const _Tp & __x, _InputIterator __first,
         _InputIterator __last, _Allocator & __alloc )
    {
      std :: __uninitialized_fill_a ( __result, __mid, __x, __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first, __last, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 407 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator >
    inline void
    __uninitialized_move_fill ( _InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp & __x,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid2 = std :: __uninitialized_move_a ( __first1, __last1,
           __first2,
           __alloc );
      try
 {
   std :: __uninitialized_fill_a ( __mid2, __last2, __x, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first2, __mid2, __alloc );
   throw;
 }
    }
# 476 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
}
# 65 "/usr/include/c++/4.4/bits/stl_vector.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    struct _Vector_base
    {
      typedef typename _Alloc :: template rebind < _Tp > :: other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type :: pointer _M_start;
 typename _Tp_alloc_type :: pointer _M_finish;
 typename _Tp_alloc_type :: pointer _M_end_of_storage;

 _Vector_impl ( )
 : _Tp_alloc_type ( ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }

 _Vector_impl ( _Tp_alloc_type const & __a )
 : _Tp_alloc_type ( __a ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Tp_alloc_type &
      _M_get_Tp_allocator ( )
      { return * static_cast < _Tp_alloc_type * > ( & this -> _M_impl ); }

      const _Tp_alloc_type &
      _M_get_Tp_allocator ( ) const
      { return * static_cast < const _Tp_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Tp_allocator ( ) ); }

      _Vector_base ( )
      : _M_impl ( ) { }

      _Vector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      _Vector_base ( size_t __n, const allocator_type & __a )
      : _M_impl ( __a )
      {
 this -> _M_impl . _M_start = this -> _M_allocate ( __n );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_start;
 this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
      }

      ~ _Vector_base ( )
      { _M_deallocate ( this -> _M_impl . _M_start, this -> _M_impl . _M_end_of_storage
        - this -> _M_impl . _M_start ); }

    public :
      _Vector_impl _M_impl;

      typename _Tp_alloc_type :: pointer
      _M_allocate ( size_t __n )
      { return __n != 0 ? _M_impl . allocate ( __n ) : 0; }

      void
      _M_deallocate ( typename _Tp_alloc_type :: pointer __p, size_t __n )
      {
 if ( __p )
   _M_impl . deallocate ( __p, __n );
      }
    };
# 169 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc = std :: allocator < _Tp > >
    class vector : protected _Vector_base < _Tp, _Alloc >
    {

      typedef typename _Alloc :: value_type _Alloc_value_type;



      typedef _Vector_base < _Tp, _Alloc > _Base;
      typedef typename _Base :: _Tp_alloc_type _Tp_alloc_type;

    public :
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type :: pointer pointer;
      typedef typename _Tp_alloc_type :: const_pointer const_pointer;
      typedef typename _Tp_alloc_type :: reference reference;
      typedef typename _Tp_alloc_type :: const_reference const_reference;
      typedef __gnu_cxx :: __normal_iterator < pointer, vector > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, vector >
      const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected :
      using _Base :: _M_allocate;
      using _Base :: _M_deallocate;
      using _Base :: _M_impl;
      using _Base :: _M_get_Tp_allocator;

    public :





      vector ( )
      : _Base ( ) { }





      explicit
      vector ( const allocator_type & __a )
      : _Base ( __a ) { }
# 226 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      explicit
      vector ( size_type __n, const value_type & __value = value_type ( ),
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __n, __a )
      { _M_fill_initialize ( __n, __value ); }
# 241 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector ( const vector & __x )
      : _Base ( __x . size ( ), __x . _M_get_Tp_allocator ( ) )
      { this -> _M_impl . _M_finish =
   std :: __uninitialized_copy_a ( __x . begin ( ), __x . end ( ),
          this -> _M_impl . _M_start,
          _M_get_Tp_allocator ( ) );
      }
# 265 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        vector ( _InputIterator __first, _InputIterator __last,
        const allocator_type & __a = allocator_type ( ) )
 : _Base ( __a )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_initialize_dispatch ( __first, __last, _Integral ( ) );
 }







      ~ vector ( )
      { std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
        _M_get_Tp_allocator ( ) ); }
# 293 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector &
      operator = ( const vector & __x );
# 306 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      assign ( size_type __n, const value_type & __val )
      { _M_fill_assign ( __n, __val ); }
# 322 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        void
        assign ( _InputIterator __first, _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_assign_dispatch ( __first, __last, _Integral ( ) );
 }


      using _Base :: get_allocator;







      iterator
      begin ( )
      { return iterator ( this -> _M_impl . _M_start ); }






      const_iterator
      begin ( ) const
      { return const_iterator ( this -> _M_impl . _M_start ); }






      iterator
      end ( )
      { return iterator ( this -> _M_impl . _M_finish ); }






      const_iterator
      end ( ) const
      { return const_iterator ( this -> _M_impl . _M_finish ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( begin ( ) ); }



      size_type
      size ( ) const
      { return size_type ( this -> _M_impl . _M_finish - this -> _M_impl . _M_start ); }


      size_type
      max_size ( ) const
      { return _M_get_Tp_allocator ( ) . max_size ( ); }
# 429 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      resize ( size_type __new_size, value_type __x = value_type ( ) )
      {
 if ( __new_size < size ( ) )
   _M_erase_at_end ( this -> _M_impl . _M_start + __new_size );
 else
   insert ( end ( ), __new_size - size ( ), __x );
      }





      size_type
      capacity ( ) const
      { return size_type ( this -> _M_impl . _M_end_of_storage
    - this -> _M_impl . _M_start ); }





      bool
      empty ( ) const
      { return begin ( ) == end ( ); }
# 472 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      reserve ( size_type __n );
# 487 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      operator [ ] ( size_type __n )
      { return * ( this -> _M_impl . _M_start + __n ); }
# 502 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      operator [ ] ( size_type __n ) const
      { return * ( this -> _M_impl . _M_start + __n ); }

    protected :

      void
      _M_range_check ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "vector::_M_range_check" ) );
      }

    public :
# 527 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      at ( size_type __n )
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }
# 545 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      at ( size_type __n ) const
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }





      reference
      front ( )
      { return * begin ( ); }





      const_reference
      front ( ) const
      { return * begin ( ); }





      reference
      back ( )
      { return * ( end ( ) - 1 ); }





      const_reference
      back ( ) const
      { return * ( end ( ) - 1 ); }
# 591 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      pointer
      data ( )
      { return pointer ( this -> _M_impl . _M_start ); }

      const_pointer
      data ( ) const
      { return const_pointer ( this -> _M_impl . _M_start ); }
# 610 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      push_back ( const value_type & __x )
      {
 if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
   {
     this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
     ++ this -> _M_impl . _M_finish;
   }
 else
   _M_insert_aux ( end ( ), __x );
      }
# 631 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      pop_back ( )
      {
 -- this -> _M_impl . _M_finish;
 this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      }
# 649 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      insert ( iterator __position, const value_type & __x );
# 665 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      insert ( iterator __position, size_type __n, const value_type & __x )
      { _M_fill_insert ( __position, __n, __x ); }
# 683 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        void
        insert ( iterator __position, _InputIterator __first,
        _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
 }
# 708 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase ( iterator __position );
# 729 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase ( iterator __first, iterator __last );
# 741 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void



      swap ( vector & __x )

      {
 std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
 std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
 std :: swap ( this -> _M_impl . _M_end_of_storage,
    __x . _M_impl . _M_end_of_storage );



 std :: __alloc_swap < _Tp_alloc_type > :: _S_do_it ( _M_get_Tp_allocator ( ),
          __x . _M_get_Tp_allocator ( ) );
      }







      void
      clear ( )
      { _M_erase_at_end ( this -> _M_impl . _M_start ); }

    protected :




      template < typename _ForwardIterator >
        pointer
        _M_allocate_and_copy ( size_type __n,
        _ForwardIterator __first, _ForwardIterator __last )
        {
   pointer __result = this -> _M_allocate ( __n );
   try
     {
       std :: __uninitialized_copy_a ( __first, __last, __result,
       _M_get_Tp_allocator ( ) );
       return __result;
     }
   catch ( ... )
     {
       _M_deallocate ( __result, __n );
       throw;
     }
 }
# 800 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_initialize_dispatch ( _Integer __n, _Integer __value, __true_type )
        {
   this -> _M_impl . _M_start = _M_allocate ( static_cast < size_type > ( __n ) );
   this -> _M_impl . _M_end_of_storage =
     this -> _M_impl . _M_start + static_cast < size_type > ( __n );
   _M_fill_initialize ( static_cast < size_type > ( __n ), __value );
 }


      template < typename _InputIterator >
        void
        _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
          __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_initialize ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_initialize ( _InputIterator __first,
       _InputIterator __last, std :: input_iterator_tag )
        {
   for (; __first != __last; ++ __first )
     push_back ( * __first );
 }


      template < typename _ForwardIterator >
        void
        _M_range_initialize ( _ForwardIterator __first,
       _ForwardIterator __last, std :: forward_iterator_tag )
        {
   const size_type __n = std :: distance ( __first, __last );
   this -> _M_impl . _M_start = this -> _M_allocate ( __n );
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
   this -> _M_impl . _M_finish =
     std :: __uninitialized_copy_a ( __first, __last,
     this -> _M_impl . _M_start,
     _M_get_Tp_allocator ( ) );
 }



      void
      _M_fill_initialize ( size_type __n, const value_type & __value )
      {
 std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_start, __n, __value,
          _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_end_of_storage;
      }
# 864 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
        { _M_fill_assign ( __n, __val ); }


      template < typename _InputIterator >
        void
        _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
      __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_assign_aux ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_assign_aux ( _InputIterator __first, _InputIterator __last,
        std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
        std :: forward_iterator_tag );



      void
      _M_fill_assign ( size_type __n, const value_type & __val );
# 904 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __val,
      __true_type )
        { _M_fill_insert ( __pos, __n, __val ); }


      template < typename _InputIterator >
        void
        _M_insert_dispatch ( iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_insert ( __pos, __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_insert ( iterator __pos, _InputIterator __first,
   _InputIterator __last, std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_range_insert ( iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std :: forward_iterator_tag );



      void
      _M_fill_insert ( iterator __pos, size_type __n, const value_type & __x );



      void
      _M_insert_aux ( iterator __position, const value_type & __x );







      size_type
      _M_check_len ( size_type __n, const char * __s ) const
      {
 if ( max_size ( ) - size ( ) < __n )
   __throw_length_error ( ( __s ) );

 const size_type __len = size ( ) + std :: max ( size ( ), __n );
 return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
      }





      void
      _M_erase_at_end ( pointer __pos )
      {
 std :: _Destroy ( __pos, this -> _M_impl . _M_finish, _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = __pos;
      }
    };
# 1166 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator == ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ( __x . size ( ) == __y . size ( )
       && std :: equal ( __x . begin ( ), __x . end ( ), __y . begin ( ) ) ); }
# 1183 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator < ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return std :: lexicographical_compare ( __x . begin ( ), __x . end ( ),
       __y . begin ( ), __y . end ( ) ); }
# 1190 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator != ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 1196 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator > ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return __y < __x; }
# 1202 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator <= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 1208 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator >= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 1214 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline void
    swap ( vector < _Tp, _Alloc > & __x, vector < _Tp, _Alloc > & __y )
    { __x . swap ( __y ); }
# 1231 "/usr/include/c++/4.4/bits/stl_vector.h" 3
}
# 62 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef unsigned long _Bit_type;
# 65 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
enum { _S_word_bit = 64};
# 67 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_reference {
# 69 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type *_M_p;
# 70 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type _M_mask;
# 72 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y)
# 73 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 75 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference() : _M_p((0)), _M_mask((0)) { }
# 77 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
operator bool() const
# 78 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(!((*(_M_p)) & (_M_mask))); }
# 81 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference &operator=(bool __x)
# 82 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 83 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (__x) {
# 84 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(*(_M_p)) |= (_M_mask); } else {
# 86 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(*(_M_p)) &= (~(_M_mask)); }
# 87 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 88 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 91 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference &operator=(const _Bit_reference &__x)
# 92 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (((*this)) = (((bool)__x))); }
# 95 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator==(const _Bit_reference &__x) const
# 96 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return ((bool)(*this)) == ((bool)__x); }
# 99 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<(const _Bit_reference &__x) const
# 100 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (!((bool)(*this))) && ((bool)__x); }
# 103 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void flip()
# 104 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ (*(_M_p)) ^= (_M_mask); }
# 105 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 107 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool, long, bool *, bool &> {
# 110 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type *_M_p;
# 111 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
unsigned _M_offset;
# 113 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y)
# 114 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 117 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_bump_up()
# 118 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 119 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (((_M_offset)++) == (((int)_S_word_bit) - 1))
# 120 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 121 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (0);
# 122 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
++(_M_p);
# 123 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 124 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 127 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_bump_down()
# 128 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 129 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (((_M_offset)--) == (0))
# 130 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 131 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (((int)_S_word_bit) - 1);
# 132 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
--(_M_p);
# 133 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 134 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 137 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_incr(ptrdiff_t __i)
# 138 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 139 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
difference_type __n = (__i + (_M_offset));
# 140 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_p) += (__n / ((int)_S_word_bit));
# 141 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__n = (__n % ((int)_S_word_bit));
# 142 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (__n < (0))
# 143 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 144 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__n += ((int)_S_word_bit);
# 145 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
--(_M_p);
# 146 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 147 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (static_cast< unsigned>(__n));
# 148 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 151 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator==(const _Bit_iterator_base &__i) const
# 152 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); }
# 155 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<(const _Bit_iterator_base &__i) const
# 156 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 157 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset)));
# 159 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 162 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator!=(const _Bit_iterator_base &__i) const
# 163 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(((*this)) == (__i)); }
# 166 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator>(const _Bit_iterator_base &__i) const
# 167 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__i < ((*this))); }
# 170 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<=(const _Bit_iterator_base &__i) const
# 171 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(__i < ((*this))); }
# 174 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator>=(const _Bit_iterator_base &__i) const
# 175 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(((*this)) < (__i)); }
# 176 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 179 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y)
# 180 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 181 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return ((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset);
# 183 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 185 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_iterator : public _Bit_iterator_base {
# 187 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_reference reference;
# 188 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_reference *pointer;
# 189 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_iterator iterator;
# 191 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator() : _Bit_iterator_base(0, 0) { }
# 193 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y)
# 194 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 197 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
reference operator*() const
# 198 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return reference(_M_p, 1UL << (_M_offset)); }
# 201 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator++()
# 202 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 203 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 204 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 205 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 208 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator++(int)
# 209 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 210 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 211 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 212 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 213 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 216 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator--()
# 217 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 218 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 219 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 220 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 223 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator--(int)
# 224 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 225 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 226 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 227 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 228 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 231 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator+=(difference_type __i)
# 232 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 233 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_incr(__i);
# 234 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 235 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 238 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator-=(difference_type __i)
# 239 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 240 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*this)) += ((-__i)));
# 241 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 242 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 245 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator+(difference_type __i) const
# 246 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 247 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 248 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp += __i);
# 249 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 252 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator-(difference_type __i) const
# 253 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 254 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 255 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp -= __i);
# 256 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 259 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
reference operator[](difference_type __i) const
# 260 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (*((((*this)) + __i))); }
# 261 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 264 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x)
# 265 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__x + __n); }
# 267 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_const_iterator : public _Bit_iterator_base {
# 269 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef bool reference;
# 270 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef bool const_reference;
# 271 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef const bool *pointer;
# 272 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_const_iterator const_iterator;
# 274 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { }
# 276 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y)
# 277 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 279 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset)
# 280 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 283 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_reference operator*() const
# 284 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); }
# 287 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator++()
# 288 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 289 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 290 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 291 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 294 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator++(int)
# 295 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 296 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 297 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 298 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 299 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 302 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator--()
# 303 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 304 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 305 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 306 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 309 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator--(int)
# 310 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 311 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 312 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 313 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 314 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 317 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator+=(difference_type __i)
# 318 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 319 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_incr(__i);
# 320 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 321 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 324 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator-=(difference_type __i)
# 325 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 326 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*this)) += ((-__i)));
# 327 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 328 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 331 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator+(difference_type __i) const
# 332 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 333 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 334 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp += __i);
# 335 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 338 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator-(difference_type __i) const
# 339 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 340 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 341 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp -= __i);
# 342 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 345 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_reference operator[](difference_type __i) const
# 346 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (*((((*this)) + __i))); }
# 347 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 350 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x)
# 351 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__x + __n); }
# 354 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline void __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
# 355 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 356 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
for (; (__first != (__last)); (++__first)) {
# 357 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*__first)) = __x); }
# 358 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 361 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x)
# 362 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 363 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if ((__first._M_p) != (__last._M_p))
# 364 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 365 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
std::fill((__first._M_p) + 1, __last._M_p, (__x ? (~0) : 0));
# 366 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(__first, _Bit_iterator((__first._M_p) + 1, 0), __x);
# 367 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
# 368 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
} else {
# 370 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(__first, __last, __x); }
# 371 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 373 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template < typename _Alloc >
    struct _Bvector_base
    {
      typedef typename _Alloc :: template rebind < _Bit_type > :: other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type * _M_end_of_storage;

 _Bvector_impl ( )
 : _Bit_alloc_type ( ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }

 _Bvector_impl ( const _Bit_alloc_type & __a )
 : _Bit_alloc_type ( __a ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Bit_alloc_type &
      _M_get_Bit_allocator ( )
      { return * static_cast < _Bit_alloc_type * > ( & this -> _M_impl ); }

      const _Bit_alloc_type &
      _M_get_Bit_allocator ( ) const
      { return * static_cast < const _Bit_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Bit_allocator ( ) ); }

      _Bvector_base ( )
      : _M_impl ( ) { }

      _Bvector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      ~ _Bvector_base ( )
      { this -> _M_deallocate ( ); }

    protected :
      _Bvector_impl _M_impl;

      _Bit_type *
      _M_allocate ( size_t __n )
      { return _M_impl . allocate ( ( __n + int ( _S_word_bit ) - 1 )
    / int ( _S_word_bit ) ); }

      void
      _M_deallocate ( )
      {
 if ( _M_impl . _M_start . _M_p )
   _M_impl . deallocate ( _M_impl . _M_start . _M_p,
        _M_impl . _M_end_of_storage - _M_impl . _M_start . _M_p );
      }
    };
# 449 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 454 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__((visibility("default"))) {
# 473 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template < typename _Alloc >
  class vector < bool, _Alloc > : protected _Bvector_base < _Alloc >
  {
    typedef _Bvector_base < _Alloc > _Base;

  public :
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference * pointer;
    typedef const bool * const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
    typedef std :: reverse_iterator < iterator > reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator ( ) const
    { return _Base :: get_allocator ( ); }

  protected :
    using _Base :: _M_allocate;
    using _Base :: _M_deallocate;
    using _Base :: _M_get_Bit_allocator;

  public :
    vector ( )
    : _Base ( ) { }

    explicit
    vector ( const allocator_type & __a )
    : _Base ( __a ) { }

    explicit
    vector ( size_type __n, const bool & __value = bool ( ),
    const allocator_type & __a = allocator_type ( ) )
    : _Base ( __a )
    {
      _M_initialize ( __n );
      std :: fill ( this -> _M_impl . _M_start . _M_p, this -> _M_impl . _M_end_of_storage,
  __value ? ~ 0 : 0 );
    }

    vector ( const vector & __x )
    : _Base ( __x . _M_get_Bit_allocator ( ) )
    {
      _M_initialize ( __x . size ( ) );
      _M_copy_aligned ( __x . begin ( ), __x . end ( ), this -> _M_impl . _M_start );
    }

    template < typename _InputIterator >
      vector ( _InputIterator __first, _InputIterator __last,
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __a )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_initialize_dispatch ( __first, __last, _Integral ( ) );
      }

    ~ vector ( ) { }

    vector &
    operator = ( const vector & __x )
    {
      if ( & __x == this )
 return * this;
      if ( __x . size ( ) > capacity ( ) )
 {
   this -> _M_deallocate ( );
   _M_initialize ( __x . size ( ) );
 }
      this -> _M_impl . _M_finish = _M_copy_aligned ( __x . begin ( ), __x . end ( ),
      begin ( ) );
      return * this;
    }





    void
    assign ( size_type __n, const bool & __x )
    { _M_fill_assign ( __n, __x ); }

    template < typename _InputIterator >
      void
      assign ( _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_assign_dispatch ( __first, __last, _Integral ( ) );
      }







    iterator
    begin ( )
    { return this -> _M_impl . _M_start; }

    const_iterator
    begin ( ) const
    { return this -> _M_impl . _M_start; }

    iterator
    end ( )
    { return this -> _M_impl . _M_finish; }

    const_iterator
    end ( ) const
    { return this -> _M_impl . _M_finish; }

    reverse_iterator
    rbegin ( )
    { return reverse_iterator ( end ( ) ); }

    const_reverse_iterator
    rbegin ( ) const
    { return const_reverse_iterator ( end ( ) ); }

    reverse_iterator
    rend ( )
    { return reverse_iterator ( begin ( ) ); }

    const_reverse_iterator
    rend ( ) const
    { return const_reverse_iterator ( begin ( ) ); }

    size_type
    size ( ) const
    { return size_type ( end ( ) - begin ( ) ); }

    size_type
    max_size ( ) const
    {
      const size_type __isize =
 __gnu_cxx :: __numeric_traits < difference_type > :: __max
 - int ( _S_word_bit ) + 1;
      const size_type __asize = _M_get_Bit_allocator ( ) . max_size ( );
      return ( __asize <= __isize / int ( _S_word_bit )
       ? __asize * int ( _S_word_bit ) : __isize );
    }

    size_type
    capacity ( ) const
    { return size_type ( const_iterator ( this -> _M_impl . _M_end_of_storage, 0 )
         - begin ( ) ); }

    bool
    empty ( ) const
    { return begin ( ) == end ( ); }

    reference
    operator [ ] ( size_type __n )
    {
      return * iterator ( this -> _M_impl . _M_start . _M_p
         + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

    const_reference
    operator [ ] ( size_type __n ) const
    {
      return * const_iterator ( this -> _M_impl . _M_start . _M_p
        + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

  protected :
    void
    _M_range_check ( size_type __n ) const
    {
      if ( __n >= this -> size ( ) )
        __throw_out_of_range ( ( "vector<bool>::_M_range_check" ) );
    }

  public :
    reference
    at ( size_type __n )
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    const_reference
    at ( size_type __n ) const
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    void
    reserve ( size_type __n );

    reference
    front ( )
    { return * begin ( ); }

    const_reference
    front ( ) const
    { return * begin ( ); }

    reference
    back ( )
    { return * ( end ( ) - 1 ); }

    const_reference
    back ( ) const
    { return * ( end ( ) - 1 ); }






    void
    data ( ) { }

    void
    push_back ( bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( end ( ), __x );
    }

    void



    swap ( vector & __x )

    {
      std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
      std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
      std :: swap ( this -> _M_impl . _M_end_of_storage,
  __x . _M_impl . _M_end_of_storage );



      std :: __alloc_swap < typename _Base :: _Bit_alloc_type > ::
 _S_do_it ( _M_get_Bit_allocator ( ), __x . _M_get_Bit_allocator ( ) );
    }


    static void
    swap ( reference __x, reference __y )
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert ( iterator __position, const bool & __x = bool ( ) )
    {
      const difference_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( __position, __x );
      return begin ( ) + __n;
    }

    template < typename _InputIterator >
      void
      insert ( iterator __position,
      _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
      }

    void
    insert ( iterator __position, size_type __n, const bool & __x )
    { _M_fill_insert ( __position, __n, __x ); }






    void
    pop_back ( )
    { -- this -> _M_impl . _M_finish; }

    iterator
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
        std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      return __position;
    }

    iterator
    erase ( iterator __first, iterator __last )
    {
      _M_erase_at_end ( std :: copy ( __last, end ( ), __first ) );
      return __first;
    }

    void
    resize ( size_type __new_size, bool __x = bool ( ) )
    {
      if ( __new_size < size ( ) )
        _M_erase_at_end ( begin ( ) + difference_type ( __new_size ) );
      else
        insert ( end ( ), __new_size - size ( ), __x );
    }

    void
    flip ( )
    {
      for ( _Bit_type * __p = this -> _M_impl . _M_start . _M_p;
    __p != this -> _M_impl . _M_end_of_storage; ++ __p )
        * __p = ~ * __p;
    }

    void
    clear ( )
    { _M_erase_at_end ( begin ( ) ); }


  protected :

    iterator
    _M_copy_aligned ( const_iterator __first, const_iterator __last,
      iterator __result )
    {
      _Bit_type * __q = std :: copy ( __first . _M_p, __last . _M_p, __result . _M_p );
      return std :: copy ( const_iterator ( __last . _M_p, 0 ), __last,
         iterator ( __q, 0 ) );
    }

    void
    _M_initialize ( size_type __n )
    {
      _Bit_type * __q = this -> _M_allocate ( __n );
      this -> _M_impl . _M_end_of_storage = ( __q
      + ( ( __n + int ( _S_word_bit ) - 1 )
         / int ( _S_word_bit ) ) );
      this -> _M_impl . _M_start = iterator ( __q, 0 );
      this -> _M_impl . _M_finish = this -> _M_impl . _M_start + difference_type ( __n );
    }





    template < typename _Integer >
      void
      _M_initialize_dispatch ( _Integer __n, _Integer __x, __true_type )
      {
 _M_initialize ( static_cast < size_type > ( __n ) );
 std :: fill ( this -> _M_impl . _M_start . _M_p,
    this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
      }

    template < typename _InputIterator >
      void
      _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
        __false_type )
      { _M_initialize_range ( __first, __last,
       std :: __iterator_category ( __first ) ); }

    template < typename _InputIterator >
      void
      _M_initialize_range ( _InputIterator __first, _InputIterator __last,
     std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   push_back ( * __first );
      }

    template < typename _ForwardIterator >
      void
      _M_initialize_range ( _ForwardIterator __first, _ForwardIterator __last,
     std :: forward_iterator_tag )
      {
 const size_type __n = std :: distance ( __first, __last );
 _M_initialize ( __n );
 std :: copy ( __first, __last, this -> _M_impl . _M_start );
      }



    template < typename _Integer >
      void
      _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
      { _M_fill_assign ( __n, __val ); }

    template < class _InputIterator >
      void
      _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_assign_aux ( __first, __last, std :: __iterator_category ( __first ) ); }

    void
    _M_fill_assign ( size_t __n, bool __x )
    {
      if ( __n > size ( ) )
 {
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
   insert ( end ( ), __n - size ( ), __x );
 }
      else
 {
   _M_erase_at_end ( begin ( ) + __n );
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
 }
    }

    template < typename _InputIterator >
      void
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 iterator __cur = begin ( );
 for (; __first != __last && __cur != end ( ); ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }

    template < typename _ForwardIterator >
      void
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );
 if ( __len < size ( ) )
   _M_erase_at_end ( std :: copy ( __first, __last, begin ( ) ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, begin ( ) );
     insert ( end ( ), __mid, __last );
   }
      }





    template < typename _Integer >
      void
      _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __x,
    __true_type )
      { _M_fill_insert ( __pos, __n, __x ); }

    template < typename _InputIterator >
      void
      _M_insert_dispatch ( iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_insert_range ( __pos, __first, __last,
   std :: __iterator_category ( __first ) ); }

    void
    _M_fill_insert ( iterator __position, size_type __n, bool __x );

    template < typename _InputIterator >
      void
      _M_insert_range ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }

    template < typename _ForwardIterator >
      void
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag );

    void
    _M_insert_aux ( iterator __position, bool __x );

    size_type
    _M_check_len ( size_type __n, const char * __s ) const
    {
      if ( max_size ( ) - size ( ) < __n )
 __throw_length_error ( ( __s ) );

      const size_type __len = size ( ) + std :: max ( size ( ), __n );
      return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
    }

    void
    _M_erase_at_end ( iterator __pos )
    { this -> _M_impl . _M_finish = __pos; }
  };
# 1022 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 60 "/usr/include/c++/4.4/bits/vector.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 62 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   const size_type __old_size = size ( );
   pointer __tmp = _M_allocate_and_copy ( __n,
   ( this -> _M_impl . _M_start ),
   ( this -> _M_impl . _M_finish ) );
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __tmp;
   this -> _M_impl . _M_finish = __tmp + __old_size;
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
 }
    }
# 104 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    insert ( iterator __position, const value_type & __x )
    {
      const size_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
   ++ this -> _M_impl . _M_finish;
 }
      else
 {

     _M_insert_aux ( __position, __x );
 }
      return iterator ( this -> _M_impl . _M_start + __n );
    }
# 131 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
 std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      return __position;
    }
# 143 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __first, iterator __last )
    {
      if ( __last != end ( ) )
 std :: copy ( __last, end ( ), __first );
      _M_erase_at_end ( __first . base ( ) + ( end ( ) - __last ) );
      return __first;
    }
# 154 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    vector < _Tp, _Alloc > &
    vector < _Tp, _Alloc > ::
    operator = ( const vector < _Tp, _Alloc > & __x )
    {
      if ( & __x != this )
 {
   const size_type __xlen = __x . size ( );
   if ( __xlen > capacity ( ) )
     {
       pointer __tmp = _M_allocate_and_copy ( __xlen, __x . begin ( ),
         __x . end ( ) );
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __tmp;
       this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __xlen;
     }
   else if ( size ( ) >= __xlen )
     {
       std :: _Destroy ( std :: copy ( __x . begin ( ), __x . end ( ), begin ( ) ),
       end ( ), _M_get_Tp_allocator ( ) );
     }
   else
     {
       std :: copy ( __x . _M_impl . _M_start, __x . _M_impl . _M_start + size ( ),
   this -> _M_impl . _M_start );
       std :: __uninitialized_copy_a ( __x . _M_impl . _M_start + size ( ),
       __x . _M_impl . _M_finish,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
     }
   this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __xlen;
 }
      return * this;
    }
# 193 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_assign ( size_t __n, const value_type & __val )
    {
      if ( __n > capacity ( ) )
 {
   vector __tmp ( __n, __val, _M_get_Tp_allocator ( ) );
   __tmp . swap ( * this );
 }
      else if ( __n > size ( ) )
 {
   std :: fill ( begin ( ), end ( ), __val );
   std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
     __n - size ( ), __val,
     _M_get_Tp_allocator ( ) );
   this -> _M_impl . _M_finish += __n - size ( );
 }
      else
        _M_erase_at_end ( std :: fill_n ( this -> _M_impl . _M_start, __n, __val ) );
    }
# 215 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 pointer __cur ( this -> _M_impl . _M_start );
 for (; __first != __last && __cur != this -> _M_impl . _M_finish;
      ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }
# 232 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );

 if ( __len > capacity ( ) )
   {
     pointer __tmp ( _M_allocate_and_copy ( __len, __first, __last ) );
     std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
     _M_get_Tp_allocator ( ) );
     _M_deallocate ( this -> _M_impl . _M_start,
     this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_start );
     this -> _M_impl . _M_start = __tmp;
     this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __len;
     this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_finish;
   }
 else if ( size ( ) >= __len )
   _M_erase_at_end ( std :: copy ( __first, __last, this -> _M_impl . _M_start ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, this -> _M_impl . _M_start );
     this -> _M_impl . _M_finish =
       std :: __uninitialized_copy_a ( __mid, __last,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
   }
      }
# 293 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_insert_aux ( iterator __position, const _Tp & __x )

    {
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish,
      ( * ( this -> _M_impl . _M_finish - 1 ) ) );

   ++ this -> _M_impl . _M_finish;

   _Tp __x_copy = __x;

   std :: copy_backward ( __position . base ( ), this -> _M_impl . _M_finish - 2, this -> _M_impl . _M_finish - 1 );



   * __position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector::_M_insert_aux" );
   const size_type __elems_before = __position - begin ( );
   pointer __new_start ( this -> _M_allocate ( __len ) );
   pointer __new_finish ( __new_start );
   try
     {




       this -> _M_impl . construct ( __new_start + __elems_before,



                               __x );

       __new_finish = 0;

       __new_finish =
  std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
         __position . base ( ), __new_start,
         _M_get_Tp_allocator ( ) );
       ++ __new_finish;

       __new_finish =
  std :: __uninitialized_move_a ( __position . base ( ),
         this -> _M_impl . _M_finish,
         __new_finish,
         _M_get_Tp_allocator ( ) );
     }
          catch ( ... )
     {
       if ( ! __new_finish )
  this -> _M_impl . destroy ( __new_start + __elems_before );
       else
  std :: _Destroy ( __new_start, __new_finish, _M_get_Tp_allocator ( ) );
       _M_deallocate ( __new_start, __len );
       throw;
     }
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __new_start;
   this -> _M_impl . _M_finish = __new_finish;
   this -> _M_impl . _M_end_of_storage = __new_start + __len;
 }
    }
# 370 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, const value_type & __x )
    {
      if ( __n != 0 )
 {
   if ( size_type ( this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_finish ) >= __n )
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end ( ) - __position;
       pointer __old_finish ( this -> _M_impl . _M_finish );
       if ( __elems_after > __n )
  {
    std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
           this -> _M_impl . _M_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n;
    std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish );

    std :: fill ( __position . base ( ), __position . base ( ) + __n,
       __x_copy );
  }
       else
  {
    std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n - __elems_after;
    std :: __uninitialized_move_a ( __position . base ( ), __old_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __elems_after;
    std :: fill ( __position . base ( ), __old_finish, __x_copy );
  }
     }
   else
     {
       const size_type __len =
  _M_check_len ( __n, "vector::_M_fill_insert" );
       const size_type __elems_before = __position - begin ( );
       pointer __new_start ( this -> _M_allocate ( __len ) );
       pointer __new_finish ( __new_start );
       try
  {

    std :: __uninitialized_fill_n_a ( __new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator ( ) );
    __new_finish = 0;

    __new_finish =
      std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
      __position . base ( ),
      __new_start,
      _M_get_Tp_allocator ( ) );
    __new_finish += __n;

    __new_finish =
      std :: __uninitialized_move_a ( __position . base ( ),
      this -> _M_impl . _M_finish,
      __new_finish,
      _M_get_Tp_allocator ( ) );
  }
       catch ( ... )
  {
    if ( ! __new_finish )
      std :: _Destroy ( __new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator ( ) );
    else
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
    _M_deallocate ( __new_start, __len );
    throw;
  }
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __new_start;
       this -> _M_impl . _M_finish = __new_finish;
       this -> _M_impl . _M_end_of_storage = __new_start + __len;
     }
 }
    }
# 461 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }
# 475 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     const size_type __n = std :: distance ( __first, __last );
     if ( size_type ( this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_finish ) >= __n )
       {
  const size_type __elems_after = end ( ) - __position;
  pointer __old_finish ( this -> _M_impl . _M_finish );
  if ( __elems_after > __n )
    {
      std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
      this -> _M_impl . _M_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n;
      std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish );

      std :: copy ( __first, __last, __position );
    }
  else
    {
      _ForwardIterator __mid = __first;
      std :: advance ( __mid, __elems_after );
      std :: __uninitialized_copy_a ( __mid, __last,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n - __elems_after;
      std :: __uninitialized_move_a ( __position . base ( ),
      __old_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __elems_after;
      std :: copy ( __first, __mid, __position );
    }
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector::_M_range_insert" );
  pointer __new_start ( this -> _M_allocate ( __len ) );
  pointer __new_finish ( __new_start );
  try
    {
      __new_finish =
        std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
        __position . base ( ),
        __new_start,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_copy_a ( __first, __last,
        __new_finish,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_move_a ( __position . base ( ),
        this -> _M_impl . _M_finish,
        __new_finish,
        _M_get_Tp_allocator ( ) );
    }
  catch ( ... )
    {
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
      _M_deallocate ( __new_start, __len );
      throw;
    }
  std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
         _M_get_Tp_allocator ( ) );
  _M_deallocate ( this -> _M_impl . _M_start,
         this -> _M_impl . _M_end_of_storage
         - this -> _M_impl . _M_start );
  this -> _M_impl . _M_start = __new_start;
  this -> _M_impl . _M_finish = __new_finish;
  this -> _M_impl . _M_end_of_storage = __new_start + __len;
       }
   }
      }
# 562 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   _Bit_type * __q = this -> _M_allocate ( __n );
   this -> _M_impl . _M_finish = _M_copy_aligned ( begin ( ), end ( ),
          iterator ( __q, 0 ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
   this -> _M_impl . _M_end_of_storage = ( __q + ( __n + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) );
 }
    }
# 581 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, bool __x )
    {
      if ( __n == 0 )
 return;
      if ( capacity ( ) - size ( ) >= __n )
 {
   std :: copy_backward ( __position, end ( ),
        this -> _M_impl . _M_finish + difference_type ( __n ) );
   std :: fill ( __position, __position + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish += difference_type ( __n );
 }
      else
 {
   const size_type __len =
     _M_check_len ( __n, "vector<bool>::_M_fill_insert" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   std :: fill ( __i, __i + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ),
           __i + difference_type ( __n ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 613 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < bool, _Alloc > ::
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     size_type __n = std :: distance ( __first, __last );
     if ( capacity ( ) - size ( ) >= __n )
       {
  std :: copy_backward ( __position, end ( ),
       this -> _M_impl . _M_finish
       + difference_type ( __n ) );
  std :: copy ( __first, __last, __position );
  this -> _M_impl . _M_finish += difference_type ( __n );
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector<bool>::_M_insert_range" );
  _Bit_type * __q = this -> _M_allocate ( __len );
  iterator __i = _M_copy_aligned ( begin ( ), __position,
            iterator ( __q, 0 ) );
  __i = std :: copy ( __first, __last, __i );
  this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
  this -> _M_deallocate ( );
  this -> _M_impl . _M_end_of_storage = ( __q
         + ( ( __len
             + int ( _S_word_bit ) - 1 )
            / int ( _S_word_bit ) ) );
  this -> _M_impl . _M_start = iterator ( __q, 0 );
       }
   }
      }
# 650 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_insert_aux ( iterator __position, bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
 {
   std :: copy_backward ( __position, this -> _M_impl . _M_finish,
        this -> _M_impl . _M_finish + 1 );
   * __position = __x;
   ++ this -> _M_impl . _M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector<bool>::_M_insert_aux" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   * __i ++ = __x;
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 679 "/usr/include/c++/4.4/bits/vector.tcc" 3
}
# 67 "/usr/include/c++/4.4/bits/stl_relops.h" 3
namespace std __attribute__((visibility("default"))) {
# 69 "/usr/include/c++/4.4/bits/stl_relops.h" 3
namespace rel_ops {
# 83 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator != ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x == __y ); }
# 96 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator > ( const _Tp & __x, const _Tp & __y )
      { return __y < __x; }
# 109 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator <= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __y < __x ); }
# 122 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator >= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x < __y ); }
# 127 "/usr/include/c++/4.4/bits/stl_relops.h" 3
}
# 129 "/usr/include/c++/4.4/bits/stl_relops.h" 3
}
# 468 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/config/suffix.hpp"
namespace boost {
# 470 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/config/suffix.hpp"
typedef long long long_long_type;
# 471 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/config/suffix.hpp"
typedef unsigned long long ulong_long_type;
# 476 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/config/suffix.hpp"
}
# 146 "/usr/include/c++/4.4/limits" 3
namespace std __attribute__((visibility("default"))) {
# 153 "/usr/include/c++/4.4/limits" 3
enum float_round_style {
# 155 "/usr/include/c++/4.4/limits" 3
round_indeterminate = (-1),
# 156 "/usr/include/c++/4.4/limits" 3
round_toward_zero = 0,
# 157 "/usr/include/c++/4.4/limits" 3
round_to_nearest,
# 158 "/usr/include/c++/4.4/limits" 3
round_toward_infinity,
# 159 "/usr/include/c++/4.4/limits" 3
round_toward_neg_infinity
# 160 "/usr/include/c++/4.4/limits" 3
};
# 168 "/usr/include/c++/4.4/limits" 3
enum float_denorm_style {
# 171 "/usr/include/c++/4.4/limits" 3
denorm_indeterminate = (-1),
# 173 "/usr/include/c++/4.4/limits" 3
denorm_absent = 0,
# 175 "/usr/include/c++/4.4/limits" 3
denorm_present
# 176 "/usr/include/c++/4.4/limits" 3
};
# 188 "/usr/include/c++/4.4/limits" 3
struct __numeric_limits_base {
# 192 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = false;
# 197 "/usr/include/c++/4.4/limits" 3
static const int digits = 0;
# 199 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 0;
# 201 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 205 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 210 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 213 "/usr/include/c++/4.4/limits" 3
static const int radix = 0;
# 217 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 220 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 224 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 227 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 230 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 233 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 236 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 238 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 241 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 245 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 249 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = false;
# 254 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 257 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 259 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 263 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 264 "/usr/include/c++/4.4/limits" 3
};
# 277 "/usr/include/c++/4.4/limits" 3
template < typename _Tp >
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp max ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp epsilon ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp round_error ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp infinity ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp quiet_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp signaling_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }



      static _Tp denorm_min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }
    };
# 308 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< bool> {
# 310 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 312 "/usr/include/c++/4.4/limits" 3
static bool min() throw()
# 313 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 314 "/usr/include/c++/4.4/limits" 3
static bool max() throw()
# 315 "/usr/include/c++/4.4/limits" 3
{ return true; }
# 317 "/usr/include/c++/4.4/limits" 3
static const int digits = 1;
# 318 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 0;
# 319 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 320 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 321 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 322 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 323 "/usr/include/c++/4.4/limits" 3
static bool epsilon() throw()
# 324 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 325 "/usr/include/c++/4.4/limits" 3
static bool round_error() throw()
# 326 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 328 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 329 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 330 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 331 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 333 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 334 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 335 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 336 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 337 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 339 "/usr/include/c++/4.4/limits" 3
static bool infinity() throw()
# 340 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 341 "/usr/include/c++/4.4/limits" 3
static bool quiet_NaN() throw()
# 342 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 343 "/usr/include/c++/4.4/limits" 3
static bool signaling_NaN() throw()
# 344 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 345 "/usr/include/c++/4.4/limits" 3
static bool denorm_min() throw()
# 346 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 348 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 349 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 350 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 355 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 356 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 357 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 358 "/usr/include/c++/4.4/limits" 3
};
# 362 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< char> {
# 364 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 366 "/usr/include/c++/4.4/limits" 3
static char min() throw()
# 367 "/usr/include/c++/4.4/limits" 3
{ return (((char)(-1)) < 0) ? (((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) : ((char)0); }
# 368 "/usr/include/c++/4.4/limits" 3
static char max() throw()
# 369 "/usr/include/c++/4.4/limits" 3
{ return (((char)(-1)) < 0) ? ((((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((char)0)); }
# 371 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0));
# 372 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643)) / (2136));
# 373 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = (((char)(-1)) < 0);
# 374 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 375 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 376 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 377 "/usr/include/c++/4.4/limits" 3
static char epsilon() throw()
# 378 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 379 "/usr/include/c++/4.4/limits" 3
static char round_error() throw()
# 380 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 382 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 383 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 384 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 385 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 387 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 388 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 389 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 390 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 391 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 393 "/usr/include/c++/4.4/limits" 3
static char infinity() throw()
# 394 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 395 "/usr/include/c++/4.4/limits" 3
static char quiet_NaN() throw()
# 396 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 397 "/usr/include/c++/4.4/limits" 3
static char signaling_NaN() throw()
# 398 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 399 "/usr/include/c++/4.4/limits" 3
static char denorm_min() throw()
# 400 "/usr/include/c++/4.4/limits" 3
{ return static_cast< char>(0); }
# 402 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 403 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 404 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 406 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 407 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 408 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 409 "/usr/include/c++/4.4/limits" 3
};
# 413 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< signed char> {
# 415 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 417 "/usr/include/c++/4.4/limits" 3
static signed char min() throw()
# 418 "/usr/include/c++/4.4/limits" 3
{ return (-127) - 1; }
# 419 "/usr/include/c++/4.4/limits" 3
static signed char max() throw()
# 420 "/usr/include/c++/4.4/limits" 3
{ return 127; }
# 422 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0));
# 423 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643)) / (2136));
# 424 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 425 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 426 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 427 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 428 "/usr/include/c++/4.4/limits" 3
static signed char epsilon() throw()
# 429 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 430 "/usr/include/c++/4.4/limits" 3
static signed char round_error() throw()
# 431 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 433 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 434 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 435 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 436 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 438 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 439 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 440 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 441 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 442 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 444 "/usr/include/c++/4.4/limits" 3
static signed char infinity() throw()
# 445 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 446 "/usr/include/c++/4.4/limits" 3
static signed char quiet_NaN() throw()
# 447 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 448 "/usr/include/c++/4.4/limits" 3
static signed char signaling_NaN() throw()
# 449 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 450 "/usr/include/c++/4.4/limits" 3
static signed char denorm_min() throw()
# 451 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 453 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 454 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 455 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 457 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 458 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 459 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 460 "/usr/include/c++/4.4/limits" 3
};
# 464 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned char> {
# 466 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 468 "/usr/include/c++/4.4/limits" 3
static unsigned char min() throw()
# 469 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 470 "/usr/include/c++/4.4/limits" 3
static unsigned char max() throw()
# 471 "/usr/include/c++/4.4/limits" 3
{ return ((127) * 2U) + (1); }
# 473 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0));
# 474 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643)) / (2136));
# 475 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 476 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 477 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 478 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 479 "/usr/include/c++/4.4/limits" 3
static unsigned char epsilon() throw()
# 480 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 481 "/usr/include/c++/4.4/limits" 3
static unsigned char round_error() throw()
# 482 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 484 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 485 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 486 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 487 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 489 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 490 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 491 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 492 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 493 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 495 "/usr/include/c++/4.4/limits" 3
static unsigned char infinity() throw()
# 496 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 497 "/usr/include/c++/4.4/limits" 3
static unsigned char quiet_NaN() throw()
# 498 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 499 "/usr/include/c++/4.4/limits" 3
static unsigned char signaling_NaN() throw()
# 500 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 501 "/usr/include/c++/4.4/limits" 3
static unsigned char denorm_min() throw()
# 502 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 504 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 505 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 506 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 508 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 509 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 510 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 511 "/usr/include/c++/4.4/limits" 3
};
# 515 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< wchar_t> {
# 517 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 519 "/usr/include/c++/4.4/limits" 3
static wchar_t min() throw()
# 520 "/usr/include/c++/4.4/limits" 3
{ return (((wchar_t)(-1)) < 0) ? (((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) : ((wchar_t)0); }
# 521 "/usr/include/c++/4.4/limits" 3
static wchar_t max() throw()
# 522 "/usr/include/c++/4.4/limits" 3
{ return (((wchar_t)(-1)) < 0) ? ((((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((wchar_t)0)); }
# 524 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0));
# 525 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643)) / (2136));
# 526 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = (((wchar_t)(-1)) < 0);
# 527 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 528 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 529 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 530 "/usr/include/c++/4.4/limits" 3
static wchar_t epsilon() throw()
# 531 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 532 "/usr/include/c++/4.4/limits" 3
static wchar_t round_error() throw()
# 533 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 535 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 536 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 537 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 538 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 540 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 541 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 542 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 543 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 544 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 546 "/usr/include/c++/4.4/limits" 3
static wchar_t infinity() throw()
# 547 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 548 "/usr/include/c++/4.4/limits" 3
static wchar_t quiet_NaN() throw()
# 549 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 550 "/usr/include/c++/4.4/limits" 3
static wchar_t signaling_NaN() throw()
# 551 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 552 "/usr/include/c++/4.4/limits" 3
static wchar_t denorm_min() throw()
# 553 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 555 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 556 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 557 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 559 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 560 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 561 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 562 "/usr/include/c++/4.4/limits" 3
};
# 670 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< short> {
# 672 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 674 "/usr/include/c++/4.4/limits" 3
static short min() throw()
# 675 "/usr/include/c++/4.4/limits" 3
{ return (-32767) - 1; }
# 676 "/usr/include/c++/4.4/limits" 3
static short max() throw()
# 677 "/usr/include/c++/4.4/limits" 3
{ return 32767; }
# 679 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0));
# 680 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643)) / (2136));
# 681 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 682 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 683 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 684 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 685 "/usr/include/c++/4.4/limits" 3
static short epsilon() throw()
# 686 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 687 "/usr/include/c++/4.4/limits" 3
static short round_error() throw()
# 688 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 690 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 691 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 692 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 693 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 695 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 696 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 697 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 698 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 699 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 701 "/usr/include/c++/4.4/limits" 3
static short infinity() throw()
# 702 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 703 "/usr/include/c++/4.4/limits" 3
static short quiet_NaN() throw()
# 704 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 705 "/usr/include/c++/4.4/limits" 3
static short signaling_NaN() throw()
# 706 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 707 "/usr/include/c++/4.4/limits" 3
static short denorm_min() throw()
# 708 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 710 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 711 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 712 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 714 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 715 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 716 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 717 "/usr/include/c++/4.4/limits" 3
};
# 721 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned short> {
# 723 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 725 "/usr/include/c++/4.4/limits" 3
static unsigned short min() throw()
# 726 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 727 "/usr/include/c++/4.4/limits" 3
static unsigned short max() throw()
# 728 "/usr/include/c++/4.4/limits" 3
{ return ((32767) * 2U) + (1); }
# 730 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0));
# 731 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643)) / (2136));
# 732 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 733 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 734 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 735 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 736 "/usr/include/c++/4.4/limits" 3
static unsigned short epsilon() throw()
# 737 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 738 "/usr/include/c++/4.4/limits" 3
static unsigned short round_error() throw()
# 739 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 741 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 742 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 743 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 744 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 746 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 747 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 748 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 749 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 750 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 752 "/usr/include/c++/4.4/limits" 3
static unsigned short infinity() throw()
# 753 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 754 "/usr/include/c++/4.4/limits" 3
static unsigned short quiet_NaN() throw()
# 755 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 756 "/usr/include/c++/4.4/limits" 3
static unsigned short signaling_NaN() throw()
# 757 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 758 "/usr/include/c++/4.4/limits" 3
static unsigned short denorm_min() throw()
# 759 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 761 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 762 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 763 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 765 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 766 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 767 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 768 "/usr/include/c++/4.4/limits" 3
};
# 772 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< int> {
# 774 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 776 "/usr/include/c++/4.4/limits" 3
static int min() throw()
# 777 "/usr/include/c++/4.4/limits" 3
{ return (-2147483647) - 1; }
# 778 "/usr/include/c++/4.4/limits" 3
static int max() throw()
# 779 "/usr/include/c++/4.4/limits" 3
{ return 2147483647; }
# 781 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0));
# 782 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643)) / (2136));
# 783 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 784 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 785 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 786 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 787 "/usr/include/c++/4.4/limits" 3
static int epsilon() throw()
# 788 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 789 "/usr/include/c++/4.4/limits" 3
static int round_error() throw()
# 790 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 792 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 793 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 794 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 795 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 797 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 798 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 799 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 800 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 801 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 803 "/usr/include/c++/4.4/limits" 3
static int infinity() throw()
# 804 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 805 "/usr/include/c++/4.4/limits" 3
static int quiet_NaN() throw()
# 806 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 807 "/usr/include/c++/4.4/limits" 3
static int signaling_NaN() throw()
# 808 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 809 "/usr/include/c++/4.4/limits" 3
static int denorm_min() throw()
# 810 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 812 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 813 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 814 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 816 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 817 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 818 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 819 "/usr/include/c++/4.4/limits" 3
};
# 823 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned> {
# 825 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 827 "/usr/include/c++/4.4/limits" 3
static unsigned min() throw()
# 828 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 829 "/usr/include/c++/4.4/limits" 3
static unsigned max() throw()
# 830 "/usr/include/c++/4.4/limits" 3
{ return ((2147483647) * 2U) + (1); }
# 832 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0)));
# 833 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643)) / (2136));
# 834 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 835 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 836 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 837 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 838 "/usr/include/c++/4.4/limits" 3
static unsigned epsilon() throw()
# 839 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 840 "/usr/include/c++/4.4/limits" 3
static unsigned round_error() throw()
# 841 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 843 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 844 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 845 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 846 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 848 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 849 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 850 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 851 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 852 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 854 "/usr/include/c++/4.4/limits" 3
static unsigned infinity() throw()
# 855 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 856 "/usr/include/c++/4.4/limits" 3
static unsigned quiet_NaN() throw()
# 857 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 858 "/usr/include/c++/4.4/limits" 3
static unsigned signaling_NaN() throw()
# 859 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 860 "/usr/include/c++/4.4/limits" 3
static unsigned denorm_min() throw()
# 861 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 863 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 864 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 865 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 867 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 868 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 869 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 870 "/usr/include/c++/4.4/limits" 3
};
# 874 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long> {
# 876 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 878 "/usr/include/c++/4.4/limits" 3
static long min() throw()
# 879 "/usr/include/c++/4.4/limits" 3
{ return (-9223372036854775807L) - (1); }
# 880 "/usr/include/c++/4.4/limits" 3
static long max() throw()
# 881 "/usr/include/c++/4.4/limits" 3
{ return 9223372036854775807L; }
# 883 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0)));
# 884 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643)) / (2136));
# 885 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 886 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 887 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 888 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 889 "/usr/include/c++/4.4/limits" 3
static long epsilon() throw()
# 890 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 891 "/usr/include/c++/4.4/limits" 3
static long round_error() throw()
# 892 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 894 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 895 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 896 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 897 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 899 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 900 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 901 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 902 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 903 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 905 "/usr/include/c++/4.4/limits" 3
static long infinity() throw()
# 906 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 907 "/usr/include/c++/4.4/limits" 3
static long quiet_NaN() throw()
# 908 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 909 "/usr/include/c++/4.4/limits" 3
static long signaling_NaN() throw()
# 910 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 911 "/usr/include/c++/4.4/limits" 3
static long denorm_min() throw()
# 912 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 914 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 915 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 916 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 918 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 919 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 920 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 921 "/usr/include/c++/4.4/limits" 3
};
# 925 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned long> {
# 927 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 929 "/usr/include/c++/4.4/limits" 3
static unsigned long min() throw()
# 930 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 931 "/usr/include/c++/4.4/limits" 3
static unsigned long max() throw()
# 932 "/usr/include/c++/4.4/limits" 3
{ return ((9223372036854775807L) * 2UL) + (1); }
# 934 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0)));
# 935 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643)) / (2136));
# 936 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 937 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 938 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 939 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 940 "/usr/include/c++/4.4/limits" 3
static unsigned long epsilon() throw()
# 941 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 942 "/usr/include/c++/4.4/limits" 3
static unsigned long round_error() throw()
# 943 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 945 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 946 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 947 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 948 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 950 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 951 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 952 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 953 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 954 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 956 "/usr/include/c++/4.4/limits" 3
static unsigned long infinity() throw()
# 957 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 958 "/usr/include/c++/4.4/limits" 3
static unsigned long quiet_NaN() throw()
# 959 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 960 "/usr/include/c++/4.4/limits" 3
static unsigned long signaling_NaN() throw()
# 961 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 962 "/usr/include/c++/4.4/limits" 3
static unsigned long denorm_min() throw()
# 963 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 965 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 966 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 967 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 969 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 970 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 971 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 972 "/usr/include/c++/4.4/limits" 3
};
# 976 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long long> {
# 978 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 980 "/usr/include/c++/4.4/limits" 3
static long long min() throw()
# 981 "/usr/include/c++/4.4/limits" 3
{ return (-9223372036854775807LL) - (1); }
# 982 "/usr/include/c++/4.4/limits" 3
static long long max() throw()
# 983 "/usr/include/c++/4.4/limits" 3
{ return 9223372036854775807LL; }
# 985 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0)));
# 986 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643)) / (2136));
# 987 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 988 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 989 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 990 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 991 "/usr/include/c++/4.4/limits" 3
static long long epsilon() throw()
# 992 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 993 "/usr/include/c++/4.4/limits" 3
static long long round_error() throw()
# 994 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 996 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 997 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 998 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 999 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 1001 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 1002 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 1003 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 1004 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 1005 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1007 "/usr/include/c++/4.4/limits" 3
static long long infinity() throw()
# 1008 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1009 "/usr/include/c++/4.4/limits" 3
static long long quiet_NaN() throw()
# 1010 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1011 "/usr/include/c++/4.4/limits" 3
static long long signaling_NaN() throw()
# 1012 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1013 "/usr/include/c++/4.4/limits" 3
static long long denorm_min() throw()
# 1014 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1016 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 1017 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1018 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 1020 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 1021 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1022 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 1023 "/usr/include/c++/4.4/limits" 3
};
# 1027 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned long long> {
# 1029 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1031 "/usr/include/c++/4.4/limits" 3
static unsigned long long min() throw()
# 1032 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1033 "/usr/include/c++/4.4/limits" 3
static unsigned long long max() throw()
# 1034 "/usr/include/c++/4.4/limits" 3
{ return ((9223372036854775807LL) * 2ULL) + (1); }
# 1036 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0)));
# 1037 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643)) / (2136));
# 1038 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 1039 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 1040 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 1041 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1042 "/usr/include/c++/4.4/limits" 3
static unsigned long long epsilon() throw()
# 1043 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1044 "/usr/include/c++/4.4/limits" 3
static unsigned long long round_error() throw()
# 1045 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1047 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 1048 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 1049 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 1050 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 1052 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 1053 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 1054 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 1055 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 1056 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1058 "/usr/include/c++/4.4/limits" 3
static unsigned long long infinity() throw()
# 1059 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1060 "/usr/include/c++/4.4/limits" 3
static unsigned long long quiet_NaN() throw()
# 1061 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1062 "/usr/include/c++/4.4/limits" 3
static unsigned long long signaling_NaN() throw()
# 1063 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1064 "/usr/include/c++/4.4/limits" 3
static unsigned long long denorm_min() throw()
# 1065 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1067 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 1068 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1069 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 1071 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 1072 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1073 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 1074 "/usr/include/c++/4.4/limits" 3
};
# 1078 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< float> {
# 1080 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1082 "/usr/include/c++/4.4/limits" 3
static float min() throw()
# 1083 "/usr/include/c++/4.4/limits" 3
{ return (1.175494351e-38F); }
# 1084 "/usr/include/c++/4.4/limits" 3
static float max() throw()
# 1085 "/usr/include/c++/4.4/limits" 3
{ return (3.402823466e+38F); }
# 1087 "/usr/include/c++/4.4/limits" 3
static const int digits = 24;
# 1088 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 6;
# 1089 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1090 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1091 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1092 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1093 "/usr/include/c++/4.4/limits" 3
static float epsilon() throw()
# 1094 "/usr/include/c++/4.4/limits" 3
{ return (1.192092896e-07F); }
# 1095 "/usr/include/c++/4.4/limits" 3
static float round_error() throw()
# 1096 "/usr/include/c++/4.4/limits" 3
{ return (0.5F); }
# 1098 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-125);
# 1099 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-37);
# 1100 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 128;
# 1101 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 38;
# 1103 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1104 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1105 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1106 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1108 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1110 "/usr/include/c++/4.4/limits" 3
static float infinity() throw()
# 1111 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_valf(); }
# 1112 "/usr/include/c++/4.4/limits" 3
static float quiet_NaN() throw()
# 1113 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nanf(""); }
# 1114 "/usr/include/c++/4.4/limits" 3
static float signaling_NaN() throw()
# 1115 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nansf(""); }
# 1116 "/usr/include/c++/4.4/limits" 3
static float denorm_min() throw()
# 1117 "/usr/include/c++/4.4/limits" 3
{ return (1.401298464e-45F); }
# 1119 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1121 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1122 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1124 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1125 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1126 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1127 "/usr/include/c++/4.4/limits" 3
};
# 1135 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< double> {
# 1137 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1139 "/usr/include/c++/4.4/limits" 3
static double min() throw()
# 1140 "/usr/include/c++/4.4/limits" 3
{ return (2.225073858507201383e-308); }
# 1141 "/usr/include/c++/4.4/limits" 3
static double max() throw()
# 1142 "/usr/include/c++/4.4/limits" 3
{ return (1.797693134862315708e+308); }
# 1144 "/usr/include/c++/4.4/limits" 3
static const int digits = 53;
# 1145 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 15;
# 1146 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1147 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1148 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1149 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1150 "/usr/include/c++/4.4/limits" 3
static double epsilon() throw()
# 1151 "/usr/include/c++/4.4/limits" 3
{ return (2.220446049250313081e-16); }
# 1152 "/usr/include/c++/4.4/limits" 3
static double round_error() throw()
# 1153 "/usr/include/c++/4.4/limits" 3
{ return (0.5); }
# 1155 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-1021);
# 1156 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-307);
# 1157 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 1024;
# 1158 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 308;
# 1160 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1161 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1162 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1163 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1165 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1167 "/usr/include/c++/4.4/limits" 3
static double infinity() throw()
# 1168 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_val(); }
# 1169 "/usr/include/c++/4.4/limits" 3
static double quiet_NaN() throw()
# 1170 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nan(""); }
# 1171 "/usr/include/c++/4.4/limits" 3
static double signaling_NaN() throw()
# 1172 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nans(""); }
# 1173 "/usr/include/c++/4.4/limits" 3
static double denorm_min() throw()
# 1174 "/usr/include/c++/4.4/limits" 3
{ return (4.940656458412465442e-324); }
# 1176 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1178 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1179 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1181 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1182 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1183 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1184 "/usr/include/c++/4.4/limits" 3
};
# 1192 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long double> {
# 1194 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1196 "/usr/include/c++/4.4/limits" 3
static long double min() throw()
# 1197 "/usr/include/c++/4.4/limits" 3
{ return (0.0L); }
# 1198 "/usr/include/c++/4.4/limits" 3
static long double max() throw()
# 1199 "/usr/include/c++/4.4/limits" 3
{ return ((__builtin_huge_vall())); }
# 1201 "/usr/include/c++/4.4/limits" 3
static const int digits = 64;
# 1202 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 18;
# 1203 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1204 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1205 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1206 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1207 "/usr/include/c++/4.4/limits" 3
static long double epsilon() throw()
# 1208 "/usr/include/c++/4.4/limits" 3
{ return (1.084202172485504434e-19L); }
# 1209 "/usr/include/c++/4.4/limits" 3
static long double round_error() throw()
# 1210 "/usr/include/c++/4.4/limits" 3
{ return (0.5L); }
# 1212 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-16381);
# 1213 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-4931);
# 1214 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 16384;
# 1215 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 4932;
# 1217 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1218 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1219 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1220 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1222 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1225 "/usr/include/c++/4.4/limits" 3
static long double infinity() throw()
# 1226 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_vall(); }
# 1227 "/usr/include/c++/4.4/limits" 3
static long double quiet_NaN() throw()
# 1228 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nanl(""); }
# 1229 "/usr/include/c++/4.4/limits" 3
static long double signaling_NaN() throw()
# 1230 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nansl(""); }
# 1231 "/usr/include/c++/4.4/limits" 3
static long double denorm_min() throw()
# 1232 "/usr/include/c++/4.4/limits" 3
{ return (0.0L); }
# 1234 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1236 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1237 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1239 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1240 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1241 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1242 "/usr/include/c++/4.4/limits" 3
};
# 1248 "/usr/include/c++/4.4/limits" 3
}
# 41 "/usr/include/c++/4.4/stdexcept" 3
namespace std __attribute__((visibility("default"))) {
# 53 "/usr/include/c++/4.4/stdexcept" 3
class logic_error : public exception {
# 55 "/usr/include/c++/4.4/stdexcept" 3
string _M_msg;
# 60 "/usr/include/c++/4.4/stdexcept" 3
public: explicit logic_error(const string &);
# 63 "/usr/include/c++/4.4/stdexcept" 3
virtual ~logic_error() throw();
# 68 "/usr/include/c++/4.4/stdexcept" 3
virtual const char *what() const throw();
# 69 "/usr/include/c++/4.4/stdexcept" 3
};
# 73 "/usr/include/c++/4.4/stdexcept" 3
class domain_error : public logic_error {
# 76 "/usr/include/c++/4.4/stdexcept" 3
public: explicit domain_error(const string &);
# 77 "/usr/include/c++/4.4/stdexcept" 3
};
# 80 "/usr/include/c++/4.4/stdexcept" 3
class invalid_argument : public logic_error {
# 83 "/usr/include/c++/4.4/stdexcept" 3
public: explicit invalid_argument(const string &);
# 84 "/usr/include/c++/4.4/stdexcept" 3
};
# 88 "/usr/include/c++/4.4/stdexcept" 3
class length_error : public logic_error {
# 91 "/usr/include/c++/4.4/stdexcept" 3
public: explicit length_error(const string &);
# 92 "/usr/include/c++/4.4/stdexcept" 3
};
# 96 "/usr/include/c++/4.4/stdexcept" 3
class out_of_range : public logic_error {
# 99 "/usr/include/c++/4.4/stdexcept" 3
public: explicit out_of_range(const string &);
# 100 "/usr/include/c++/4.4/stdexcept" 3
};
# 107 "/usr/include/c++/4.4/stdexcept" 3
class runtime_error : public exception {
# 109 "/usr/include/c++/4.4/stdexcept" 3
string _M_msg;
# 114 "/usr/include/c++/4.4/stdexcept" 3
public: explicit runtime_error(const string &);
# 117 "/usr/include/c++/4.4/stdexcept" 3
virtual ~runtime_error() throw();
# 122 "/usr/include/c++/4.4/stdexcept" 3
virtual const char *what() const throw();
# 123 "/usr/include/c++/4.4/stdexcept" 3
};
# 126 "/usr/include/c++/4.4/stdexcept" 3
class range_error : public runtime_error {
# 129 "/usr/include/c++/4.4/stdexcept" 3
public: explicit range_error(const string &);
# 130 "/usr/include/c++/4.4/stdexcept" 3
};
# 133 "/usr/include/c++/4.4/stdexcept" 3
class overflow_error : public runtime_error {
# 136 "/usr/include/c++/4.4/stdexcept" 3
public: explicit overflow_error(const string &);
# 137 "/usr/include/c++/4.4/stdexcept" 3
};
# 140 "/usr/include/c++/4.4/stdexcept" 3
class underflow_error : public runtime_error {
# 143 "/usr/include/c++/4.4/stdexcept" 3
public: explicit underflow_error(const string &);
# 144 "/usr/include/c++/4.4/stdexcept" 3
};
# 148 "/usr/include/c++/4.4/stdexcept" 3
}
# 13 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
namespace boost {
# 14 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
namespace numeric {
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
namespace interval_lib {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
template< class T> struct rounded_math;
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
template< class T> struct checking_strict;
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
class comparison_error;
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
template< class Rounding, class Checking> struct policies;
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
template< class T>
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
struct default_policies {
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
typedef policies< rounded_math< T> , checking_strict< T> > type;
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
};
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
}
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
template< class T, class Policies = typename interval_lib::default_policies< T> ::type> class interval;
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
}
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/interval_prototype.hpp"
}
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
namespace boost {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
namespace numeric {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
namespace interval_lib {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
class comparison_error : public std::runtime_error {
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
public: comparison_error() : std::runtime_error("boost::interval: uncertain comparison")
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{ }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
};
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies>
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
class interval {
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
struct interval_holder;
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
struct number_holder;
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
public: typedef T base_type;
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef Policies traits_type;
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline const T &lower() const;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline const T &upper() const;
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline interval();
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline interval(const T &);
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T1> inline interval(const T1 &);
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline interval(const T &, const T &);
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T1, class T2> inline interval(const T1 &, const T2 &);
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline interval(const numeric::interval< T, Policies> &);
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class Policies1> inline interval(const numeric::interval< T, Policies1> &);
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T1, class Policies1> inline interval(const numeric::interval< T1, Policies1> &);
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator=(const T &);
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T1> inline numeric::interval< T, Policies> &operator=(const T1 &);
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator=(const numeric::interval< T, Policies> &);
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class Policies1> inline numeric::interval< T, Policies> &operator=(const numeric::interval< T, Policies1> &);
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T1, class Policies1> inline numeric::interval< T, Policies> &operator=(const numeric::interval< T1, Policies1> &);
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline void assign(const T &, const T &);
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
static inline numeric::interval< T, Policies> empty();
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
static inline numeric::interval< T, Policies> whole();
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
static inline numeric::interval< T, Policies> hull(const T &, const T &);
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator+=(const T &);
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator+=(const numeric::interval< T, Policies> &);
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator-=(const T &);
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator-=(const numeric::interval< T, Policies> &);
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator*=(const T &);
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator*=(const numeric::interval< T, Policies> &);
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator/=(const T &);
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline numeric::interval< T, Policies> &operator/=(const numeric::interval< T, Policies> &);
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator<(const interval_holder &) const;
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator>(const interval_holder &) const;
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator<=(const interval_holder &) const;
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator>=(const interval_holder &) const;
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator==(const interval_holder &) const;
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator!=(const interval_holder &) const;
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator<(const number_holder &) const;
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator>(const number_holder &) const;
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator<=(const number_holder &) const;
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator>=(const number_holder &) const;
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator==(const number_holder &) const;
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline bool operator!=(const number_holder &) const;
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval(const T &l, const T &u, bool) : low(l), up(u) { }
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline void set_empty();
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline void set_whole();
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
inline void set(const T &, const T &);
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
private: struct interval_holder {
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class Policies2>
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval_holder(const numeric::interval< T, Policies2> &r) : low(((r.lower()))), up(((r.upper())))
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies2::checking checking2;
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking2::is_empty(low, up)) {
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error(); }
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
const T &low;
# 113 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
const T &up;
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
};
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
struct number_holder {
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
number_holder(const T &r) : val((r))
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies::checking checking;
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking::is_nan(r)) {
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error(); }
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
const T &val;
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
};
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies::checking checking;
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies::rounding rounding;
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
T low;
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
T up;
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
};
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval() : low((T)0), up((T)0)
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{ }
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const T &v) : low(v), up(v)
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking::is_nan(v)) { this->set_empty(); }
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class T1> inline
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const T1 &v)
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking::is_nan(v)) { this->set_empty(); } else
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
rounding rnd;
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (rnd.conv_down(v));
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (rnd.conv_up(v));
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 156 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class T1, class T2> inline
# 157 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const T1 &l, const T2 &u)
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((checking::is_nan(l) || checking::is_nan(u)) || (!(l <= u))) { this->set_empty(); } else
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
rounding rnd;
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (rnd.conv_down(l));
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (rnd.conv_up(u));
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const T &l, const T &u) : low(l), up(u)
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((checking::is_nan(l) || checking::is_nan(u)) || (!(l <= u))) {
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
this->set_empty(); }
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const numeric::interval< T, Policies> &r) : low(r.lower()), up(r.upper())
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{ }
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class Policies1> inline
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const numeric::interval< T, Policies1> &r) : low((r.lower())), up((r.upper()))
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies1::checking checking1;
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking1::is_empty((r.lower()), (r.upper()))) { this->set_empty(); }
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class T1, class Policies1> inline
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::interval(const numeric::interval< T1, Policies1> &r)
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies1::checking checking1;
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking1::is_empty((r.lower()), (r.upper()))) { this->set_empty(); } else
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
rounding rnd;
# 193 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (rnd.conv_down((r.lower())));
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (rnd.conv_up((r.upper())));
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator=(const T &v)
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 201 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking::is_nan(v)) { this->set_empty(); } else {
# 202 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = ((up) = v); }
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return *this;
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class T1> inline interval< T, Policies> &
# 207 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator=(const T1 &v)
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 209 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking::is_nan(v)) { this->set_empty(); } else
# 210 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
rounding rnd;
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (rnd.conv_down(v));
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (rnd.conv_up(v));
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return *this;
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 219 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator=(const numeric::interval< T, Policies> &r)
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 221 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = r.lower();
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = r.upper();
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return *this;
# 224 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class Policies1> inline interval< T, Policies> &
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator=(const numeric::interval< T, Policies1> &r)
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies1::checking checking1;
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking1::is_empty((r.lower()), (r.upper()))) { this->set_empty(); } else
# 231 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (r.lower());
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (r.upper());
# 234 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 235 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return *this;
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> template< class T1, class Policies1> inline interval< T, Policies> &
# 239 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator=(const numeric::interval< T1, Policies1> &r)
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
typedef typename Policies1::checking checking1;
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (checking1::is_empty((r.lower()), (r.upper()))) { this->set_empty(); } else
# 243 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
rounding rnd;
# 245 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = (rnd.conv_down((r.lower())));
# 246 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = (rnd.conv_up((r.upper())));
# 247 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 248 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return *this;
# 249 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 251 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline void
# 252 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::assign(const T &l, const T &u)
# 253 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((checking::is_nan(l) || checking::is_nan(u)) || (!(l <= u))) {
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
this->set_empty(); } else {
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
this->set(l, u); }
# 257 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 259 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline void
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::set(const T &l, const T &u)
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 262 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = l;
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = u;
# 264 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 266 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline void
# 267 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::set_empty()
# 268 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 269 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = checking::empty_lower();
# 270 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = checking::empty_upper();
# 271 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 273 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline void
# 274 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::set_whole()
# 275 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 276 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(low) = checking::neg_inf();
# 277 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
(up) = checking::pos_inf();
# 278 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 280 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::hull(const T &x, const T &y)
# 282 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 283 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
bool bad_x = (checking::is_nan(x));
# 284 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
bool bad_y = (checking::is_nan(y));
# 285 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (bad_x) {
# 286 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (bad_y) { return empty(); } else {
# 287 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return numeric::interval< T, Policies> (y, y, true); } } else {
# 289 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (bad_y) { return numeric::interval< T, Policies> (x, x, true); } }
# 290 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (x <= y) { return numeric::interval< T, Policies> (x, y, true); } else {
# 291 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return numeric::interval< T, Policies> (y, x, true); }
# 292 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 294 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 295 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::empty()
# 296 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 297 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return numeric::interval< T, Policies> (checking::empty_lower(), checking::empty_upper(), true);
# 299 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 301 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 302 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::whole()
# 303 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 304 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return numeric::interval< T, Policies> (checking::neg_inf(), checking::pos_inf(), true);
# 305 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 307 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline const T &
# 308 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::lower() const
# 309 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 310 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return low;
# 311 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 313 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline const T &
# 314 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::upper() const
# 315 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 316 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
return up;
# 317 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 323 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 324 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator<(const interval_holder &r) const
# 325 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 326 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 327 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) < (r.low)) { return true; } else {
# 328 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) >= (r.up)) { return false; } }
# 329 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 330 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 331 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 333 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 334 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator>(const interval_holder &r) const
# 335 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 336 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 337 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) > (r.up)) { return true; } else {
# 338 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) <= (r.low)) { return false; } }
# 339 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 340 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 341 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 343 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 344 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator<=(const interval_holder &r) const
# 345 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 346 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 347 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) <= (r.low)) { return true; } else {
# 348 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) > (r.up)) { return false; } }
# 349 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 350 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 351 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 353 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 354 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator>=(const interval_holder &r) const
# 355 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 356 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 357 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) >= (r.up)) { return true; } else {
# 358 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) < (r.low)) { return false; } }
# 359 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 360 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 361 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 363 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 364 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator==(const interval_holder &r) const
# 365 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 366 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 367 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) == (r.low)) && ((low) == (r.up))) { return true; } else {
# 368 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) < (r.low)) || ((low) > (r.up))) { return false; } }
# 369 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 370 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 371 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 373 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 374 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator!=(const interval_holder &r) const
# 375 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 376 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 377 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) < (r.low)) || ((low) > (r.up))) { return true; } else {
# 378 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) == (r.low)) && ((low) == (r.up))) { return false; } }
# 379 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 380 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 381 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 387 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 388 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator<(const number_holder &r) const
# 389 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 390 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 391 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) < (r.val)) { return true; } else {
# 392 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) >= (r.val)) { return false; } }
# 393 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 394 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 395 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 397 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 398 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator>(const number_holder &r) const
# 399 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 400 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 401 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) > (r.val)) { return true; } else {
# 402 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) <= (r.val)) { return false; } }
# 403 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 404 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 405 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 407 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 408 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator<=(const number_holder &r) const
# 409 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 410 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 411 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) <= (r.val)) { return true; } else {
# 412 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) > (r.val)) { return false; } }
# 413 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 414 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 415 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 417 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 418 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator>=(const number_holder &r) const
# 419 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 420 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 421 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((low) >= (r.val)) { return true; } else {
# 422 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if ((up) < (r.val)) { return false; } }
# 423 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 424 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 425 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 427 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 428 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator==(const number_holder &r) const
# 429 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 430 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 431 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) == (r.val)) && ((low) == (r.val))) { return true; } else {
# 432 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) < (r.val)) || ((low) > (r.val))) { return false; } }
# 433 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 434 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 435 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 437 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
template< class T, class Policies> inline bool
# 438 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
interval< T, Policies> ::operator!=(const number_holder &r) const
# 439 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
{
# 440 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (!checking::is_empty(low, up)) {
# 441 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) < (r.val)) || ((low) > (r.val))) { return true; } else {
# 442 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
if (((up) == (r.val)) && ((low) == (r.val))) { return false; } }
# 443 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 444 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
throw interval_lib::comparison_error();
# 445 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 447 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 448 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/interval.hpp"
}
# 15 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
namespace boost {
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
namespace numeric {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
namespace interval_lib {
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
template< class Rounding, class Checking>
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
struct policies {
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef Rounding rounding;
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef Checking checking;
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
};
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
template< class OldInterval, class NewRounding>
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
class change_rounding {
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::base_type T;
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type p;
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type::checking checking;
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
public: typedef interval< typename OldInterval::base_type, policies< NewRounding, typename OldInterval::traits_type::checking> > type;
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
};
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
template< class OldInterval, class NewChecking>
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
class change_checking {
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::base_type T;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type p;
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type::rounding rounding;
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
public: typedef interval< typename OldInterval::base_type, policies< typename OldInterval::traits_type::rounding, NewChecking> > type;
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
};
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
template< class OldInterval>
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
class unprotect {
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::base_type T;
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type p;
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type::rounding r;
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
typedef typename OldInterval::traits_type::rounding::unprotected_rounding newRounding;
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
public: typedef typename change_rounding< OldInterval, typename OldInterval::traits_type::rounding::unprotected_rounding> ::type type;
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
};
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
}
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/policies.hpp"
}
# 13 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
namespace boost {
# 14 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
namespace numeric {
# 15 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
namespace interval_lib {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T>
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
struct rounding_control {
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
typedef int rounding_mode;
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static void get_rounding_mode(rounding_mode &) { }
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static void set_rounding_mode(rounding_mode) { }
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static void upward() { }
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static void downward() { }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static void to_nearest() { }
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static const T &to_int(const T &x) { return x; }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
static const T &force_rounding(const T &x) { return x; }
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
};
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounding_control< T> > struct rounded_arith_exact;
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounding_control< T> > struct rounded_arith_std;
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounding_control< T> > struct rounded_arith_opp;
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding> struct rounded_transc_dummy;
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounded_arith_exact< T, rounding_control< T> > > struct rounded_transc_exact;
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounded_arith_std< T, rounding_control< T> > > struct rounded_transc_std;
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T, class Rounding = rounded_arith_opp< T, rounding_control< T> > > struct rounded_transc_opp;
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
namespace detail {
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class Rounding>
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
struct save_state_unprotected : public Rounding {
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
typedef detail::save_state_unprotected< Rounding> unprotected_rounding;
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
};
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
}
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class Rounding>
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
struct save_state : public Rounding {
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
typename Rounding::rounding_mode mode;
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
save_state() {
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
(this->get_rounding_mode(mode));
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
(this->init());
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
}
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
~save_state() { (this->set_rounding_mode(mode)); }
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
typedef detail::save_state_unprotected< Rounding> unprotected_rounding;
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
};
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class Rounding>
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
struct save_state_nothing : public Rounding {
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
typedef interval_lib::save_state_nothing< Rounding> unprotected_rounding;
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
};
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
template< class T>
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
struct rounded_math : public save_state_nothing< rounded_arith_exact< T, rounding_control< T> > > {
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
};
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
}
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
}
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounding.hpp"
}
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
namespace boost {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
namespace numeric {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
namespace interval_lib {
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class T, class Rounding>
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
struct rounded_arith_exact : public Rounding {
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
void init() { }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_down(const U &v) { return v; }
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_up(const U &v) { return v; }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_down(const T &x, const T &y) { return x + y; }
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_up(const T &x, const T &y) { return x + y; }
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_down(const T &x, const T &y) { return x - y; }
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_up(const T &x, const T &y) { return x - y; }
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_down(const T &x, const T &y) { return x * y; }
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_up(const T &x, const T &y) { return x * y; }
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_down(const T &x, const T &y) { return x / y; }
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_up(const T &x, const T &y) { return x / y; }
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T median(const T &x, const T &y) { return (x + y) / 2; }
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_down(const T &x)
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;return sqrt(x); }
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_up(const T &x)
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;return sqrt(x); }
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_down(const T &x)
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::floor;return floor(x); }
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_up(const T &x)
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::ceil;return ceil(x); }
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
};
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class T, class Rounding>
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
struct rounded_arith_std : public Rounding {
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
void init() { }
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_down(const U &v) { (this->downward()); return (this->force_rounding(v)); }
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_up(const U &v) { (this->upward()); return (this->force_rounding(v)); }
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_down(const T &x, const T &y) { (this->downward()); return (this->force_rounding(x + y)); }
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_down(const T &x, const T &y) { (this->downward()); return (this->force_rounding(x - y)); }
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_down(const T &x, const T &y) { (this->downward()); return (this->force_rounding(x * y)); }
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_down(const T &x, const T &y) { (this->downward()); return (this->force_rounding(x / y)); }
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_up(const T &x, const T &y) { (this->upward()); return (this->force_rounding(x + y)); }
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_up(const T &x, const T &y) { (this->upward()); return (this->force_rounding(x - y)); }
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_up(const T &x, const T &y) { (this->upward()); return (this->force_rounding(x * y)); }
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_up(const T &x, const T &y) { (this->upward()); return (this->force_rounding(x / y)); }
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T median(const T &x, const T &y) { (this->to_nearest()); return (this->force_rounding((x + y) / 2)); }
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_down(const T &x)
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;(this->downward()); return (this->force_rounding(sqrt(x))); }
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_up(const T &x)
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;(this->upward()); return (this->force_rounding(sqrt(x))); }
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_down(const T &x) { (this->downward()); return to_int(x); }
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_up(const T &x) { (this->upward()); return to_int(x); }
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
};
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class T, class Rounding>
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
struct rounded_arith_opp : public Rounding {
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
void init() { (this->upward()); }
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_down(const U &v) { return -(this->force_rounding(-v)); }
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
template< class U> T conv_up(const U &v) { return (this->force_rounding(v)); }
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_down(const T &x, const T &y) { return -(this->force_rounding((-x) - y)); }
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_down(const T &x, const T &y) { return -(this->force_rounding(y - x)); }
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_down(const T &x, const T &y) { return -(this->force_rounding(x * (-y))); }
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_down(const T &x, const T &y) { return -(this->force_rounding(x / (-y))); }
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T add_up(const T &x, const T &y) { return (this->force_rounding(x + y)); }
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sub_up(const T &x, const T &y) { return (this->force_rounding(x - y)); }
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T mul_up(const T &x, const T &y) { return (this->force_rounding(x * y)); }
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T div_up(const T &x, const T &y) { return (this->force_rounding(x / y)); }
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T median(const T &x, const T &y) { (this->to_nearest()); T r = ((this->force_rounding((x + y) / 2))); (this->upward()); return r; }
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_down(const T &x)
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;(this->downward()); T r = ((this->force_rounding(sqrt(x)))); (this->upward()); return r; }
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T sqrt_up(const T &x)
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
{ using std::sqrt;return (this->force_rounding(sqrt(x))); }
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_down(const T &x) { return -to_int(-x); }
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
T int_up(const T &x) { return to_int(x); }
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
};
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
}
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
}
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_arith.hpp"
}
# 29 "/usr/include/bits/fenv.h" 3
enum {
# 30 "/usr/include/bits/fenv.h" 3
FE_INVALID = 1,
# 32 "/usr/include/bits/fenv.h" 3
__FE_DENORM,
# 33 "/usr/include/bits/fenv.h" 3
FE_DIVBYZERO = 4,
# 35 "/usr/include/bits/fenv.h" 3
FE_OVERFLOW = 8,
# 37 "/usr/include/bits/fenv.h" 3
FE_UNDERFLOW = 16,
# 39 "/usr/include/bits/fenv.h" 3
FE_INEXACT = 32
# 41 "/usr/include/bits/fenv.h" 3
};
# 50 "/usr/include/bits/fenv.h" 3
enum {
# 51 "/usr/include/bits/fenv.h" 3
FE_TONEAREST,
# 53 "/usr/include/bits/fenv.h" 3
FE_DOWNWARD = 1024,
# 55 "/usr/include/bits/fenv.h" 3
FE_UPWARD = 2048,
# 57 "/usr/include/bits/fenv.h" 3
FE_TOWARDZERO = 3072
# 59 "/usr/include/bits/fenv.h" 3
};
# 63 "/usr/include/bits/fenv.h" 3
typedef unsigned short fexcept_t;
# 89 "/usr/include/bits/fenv.h" 3
typedef
# 71 "/usr/include/bits/fenv.h" 3
struct {
# 72 "/usr/include/bits/fenv.h" 3
unsigned short __control_word;
# 73 "/usr/include/bits/fenv.h" 3
unsigned short __unused1;
# 74 "/usr/include/bits/fenv.h" 3
unsigned short __status_word;
# 75 "/usr/include/bits/fenv.h" 3
unsigned short __unused2;
# 76 "/usr/include/bits/fenv.h" 3
unsigned short __tags;
# 77 "/usr/include/bits/fenv.h" 3
unsigned short __unused3;
# 78 "/usr/include/bits/fenv.h" 3
unsigned __eip;
# 79 "/usr/include/bits/fenv.h" 3
unsigned short __cs_selector;
# 80 "/usr/include/bits/fenv.h" 3
unsigned __opcode:11;
# 81 "/usr/include/bits/fenv.h" 3
unsigned __unused4:5;
# 82 "/usr/include/bits/fenv.h" 3
unsigned __data_offset;
# 83 "/usr/include/bits/fenv.h" 3
unsigned short __data_selector;
# 84 "/usr/include/bits/fenv.h" 3
unsigned short __unused5;
# 86 "/usr/include/bits/fenv.h" 3
unsigned __mxcsr;
# 89 "/usr/include/bits/fenv.h" 3
} fenv_t;
# 65 "/usr/include/fenv.h" 3
extern "C" int feclearexcept(int) throw();
# 69 "/usr/include/fenv.h" 3
extern "C" int fegetexceptflag(fexcept_t *, int) throw();
# 72 "/usr/include/fenv.h" 3
extern "C" int feraiseexcept(int) throw();
# 76 "/usr/include/fenv.h" 3
extern "C" int fesetexceptflag(const fexcept_t *, int) throw();
# 80 "/usr/include/fenv.h" 3
extern "C" int fetestexcept(int) throw();
# 86 "/usr/include/fenv.h" 3
extern "C" int fegetround() throw();
# 89 "/usr/include/fenv.h" 3
extern "C" int fesetround(int) throw();
# 96 "/usr/include/fenv.h" 3
extern "C" int fegetenv(fenv_t *) throw();
# 101 "/usr/include/fenv.h" 3
extern "C" int feholdexcept(fenv_t *) throw();
# 105 "/usr/include/fenv.h" 3
extern "C" int fesetenv(const fenv_t *) throw();
# 110 "/usr/include/fenv.h" 3
extern "C" int feupdateenv(const fenv_t *) throw();
# 123 "/usr/include/fenv.h" 3
extern "C" int feenableexcept(int) throw();
# 128 "/usr/include/fenv.h" 3
extern "C" int fedisableexcept(int) throw();
# 131 "/usr/include/fenv.h" 3
extern "C" int fegetexcept() throw();
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
namespace interval_lib {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
namespace detail {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
extern "C" double rint(double);
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
struct c99_rounding {
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
typedef int rounding_mode;
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void set_rounding_mode(const rounding_mode mode) { fesetround(mode); }
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void get_rounding_mode(rounding_mode &mode) { mode = fegetround(); }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void downward() { set_rounding_mode(FE_DOWNWARD); }
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void upward() { set_rounding_mode(FE_UPWARD); }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void to_nearest() { set_rounding_mode(FE_TONEAREST); }
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
static void toward_zero() { set_rounding_mode(FE_TOWARDZERO); }
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
template< class T> static T
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
to_int(const T &r) { return rint(r); }
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
};
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
}
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
}
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
}
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99sub_rounding_control.hpp"
}
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
namespace interval_lib {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
namespace detail {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
struct c99_rounding_control : public c99_rounding {
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
template< class T> static T
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
force_rounding(const T &r) { volatile T r_ = (r); return r_; }
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
};
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
}
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
template<> struct rounding_control< float> : public detail::c99_rounding_control {
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
};
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
template<> struct rounding_control< double> : public detail::c99_rounding_control {
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
};
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
template<> struct rounding_control< long double> : public detail::c99_rounding_control {
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
};
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
}
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
}
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/c99_rounding_control.hpp"
}
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
namespace boost {
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
namespace numeric {
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
namespace interval_lib {
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
template<> struct rounded_math< float> : public save_state< rounded_arith_opp< float, rounding_control< float> > > {
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
};
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
template<> struct rounded_math< double> : public save_state< rounded_arith_opp< double, rounding_control< double> > > {
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
};
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
template<> struct rounded_math< long double> : public save_state< rounded_arith_opp< long double, rounding_control< long double> > > {
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
};
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
}
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
}
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/hw_rounding.hpp"
}
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
namespace boost {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
namespace numeric {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
namespace interval_lib {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
template< class T, class Rounding>
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
struct rounded_transc_exact : public Rounding {
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T exp_down(const T &x) { using std::exp;return exp(x); } T exp_up(const T &x) { using std::exp;return exp(x); }
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T log_down(const T &x) { using std::log;return log(x); } T log_up(const T &x) { using std::log;return log(x); }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sin_down(const T &x) { using std::sin;return sin(x); } T sin_up(const T &x) { using std::sin;return sin(x); }
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cos_down(const T &x) { using std::cos;return cos(x); } T cos_up(const T &x) { using std::cos;return cos(x); }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tan_down(const T &x) { using std::tan;return tan(x); } T tan_up(const T &x) { using std::tan;return tan(x); }
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asin_down(const T &x) { using std::asin;return asin(x); } T asin_up(const T &x) { using std::asin;return asin(x); }
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acos_down(const T &x) { using std::acos;return acos(x); } T acos_up(const T &x) { using std::acos;return acos(x); }
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atan_down(const T &x) { using std::atan;return atan(x); } T atan_up(const T &x) { using std::atan;return atan(x); }
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sinh_down(const T &x) { using std::sinh;return sinh(x); } T sinh_up(const T &x) { using std::sinh;return sinh(x); }
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cosh_down(const T &x) { using std::cosh;return cosh(x); } T cosh_up(const T &x) { using std::cosh;return cosh(x); }
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tanh_down(const T &x) { using std::tanh;return tanh(x); } T tanh_up(const T &x) { using std::tanh;return tanh(x); }
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asinh_down(const T &x) { using ::asinh;return asinh(x); } T asinh_up(const T &x) { using ::asinh;return asinh(x); }
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acosh_down(const T &x) { using ::acosh;return acosh(x); } T acosh_up(const T &x) { using ::acosh;return acosh(x); }
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atanh_down(const T &x) { using ::atanh;return atanh(x); } T atanh_up(const T &x) { using ::atanh;return atanh(x); }
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
};
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
template< class T, class Rounding>
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
struct rounded_transc_std : public Rounding {
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T exp_down(const T &x) { using std::exp;(this->downward()); return (this->force_rounding(exp(x))); } T exp_up(const T &x) { using std::exp;(this->upward()); return (this->force_rounding(exp(x))); }
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T log_down(const T &x) { using std::log;(this->downward()); return (this->force_rounding(log(x))); } T log_up(const T &x) { using std::log;(this->upward()); return (this->force_rounding(log(x))); }
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sin_down(const T &x) { using std::sin;(this->downward()); return (this->force_rounding(sin(x))); } T sin_up(const T &x) { using std::sin;(this->upward()); return (this->force_rounding(sin(x))); }
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cos_down(const T &x) { using std::cos;(this->downward()); return (this->force_rounding(cos(x))); } T cos_up(const T &x) { using std::cos;(this->upward()); return (this->force_rounding(cos(x))); }
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tan_down(const T &x) { using std::tan;(this->downward()); return (this->force_rounding(tan(x))); } T tan_up(const T &x) { using std::tan;(this->upward()); return (this->force_rounding(tan(x))); }
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asin_down(const T &x) { using std::asin;(this->downward()); return (this->force_rounding(asin(x))); } T asin_up(const T &x) { using std::asin;(this->upward()); return (this->force_rounding(asin(x))); }
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acos_down(const T &x) { using std::acos;(this->downward()); return (this->force_rounding(acos(x))); } T acos_up(const T &x) { using std::acos;(this->upward()); return (this->force_rounding(acos(x))); }
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atan_down(const T &x) { using std::atan;(this->downward()); return (this->force_rounding(atan(x))); } T atan_up(const T &x) { using std::atan;(this->upward()); return (this->force_rounding(atan(x))); }
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sinh_down(const T &x) { using std::sinh;(this->downward()); return (this->force_rounding(sinh(x))); } T sinh_up(const T &x) { using std::sinh;(this->upward()); return (this->force_rounding(sinh(x))); }
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cosh_down(const T &x) { using std::cosh;(this->downward()); return (this->force_rounding(cosh(x))); } T cosh_up(const T &x) { using std::cosh;(this->upward()); return (this->force_rounding(cosh(x))); }
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tanh_down(const T &x) { using std::tanh;(this->downward()); return (this->force_rounding(tanh(x))); } T tanh_up(const T &x) { using std::tanh;(this->upward()); return (this->force_rounding(tanh(x))); }
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asinh_down(const T &x) { using ::asinh;(this->downward()); return (this->force_rounding(asinh(x))); } T asinh_up(const T &x) { using ::asinh;(this->upward()); return (this->force_rounding(asinh(x))); }
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acosh_down(const T &x) { using ::acosh;(this->downward()); return (this->force_rounding(acosh(x))); } T acosh_up(const T &x) { using ::acosh;(this->upward()); return (this->force_rounding(acosh(x))); }
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atanh_down(const T &x) { using ::atanh;(this->downward()); return (this->force_rounding(atanh(x))); } T atanh_up(const T &x) { using ::atanh;(this->upward()); return (this->force_rounding(atanh(x))); }
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
};
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
template< class T, class Rounding>
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
struct rounded_transc_opp : public Rounding {
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T exp_down(const T &x) { using std::exp;(this->downward()); T y = ((this->force_rounding(exp(x)))); (this->upward()); return y; } T exp_up(const T &x) { using std::exp;return (this->force_rounding(exp(x))); }
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T log_down(const T &x) { using std::log;(this->downward()); T y = ((this->force_rounding(log(x)))); (this->upward()); return y; } T log_up(const T &x) { using std::log;return (this->force_rounding(log(x))); }
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cos_down(const T &x) { using std::cos;(this->downward()); T y = ((this->force_rounding(cos(x)))); (this->upward()); return y; } T cos_up(const T &x) { using std::cos;return (this->force_rounding(cos(x))); }
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acos_down(const T &x) { using std::acos;(this->downward()); T y = ((this->force_rounding(acos(x)))); (this->upward()); return y; } T acos_up(const T &x) { using std::acos;return (this->force_rounding(acos(x))); }
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T cosh_down(const T &x) { using std::cosh;(this->downward()); T y = ((this->force_rounding(cosh(x)))); (this->upward()); return y; } T cosh_up(const T &x) { using std::cosh;return (this->force_rounding(cosh(x))); }
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sin_down(const T &x) { using std::sin;return -(this->force_rounding(-sin(x))); } T sin_up(const T &x) { using std::sin;return (this->force_rounding(sin(x))); }
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tan_down(const T &x) { using std::tan;return -(this->force_rounding(-tan(x))); } T tan_up(const T &x) { using std::tan;return (this->force_rounding(tan(x))); }
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asin_down(const T &x) { using std::asin;return -(this->force_rounding(-asin(x))); } T asin_up(const T &x) { using std::asin;return (this->force_rounding(asin(x))); }
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atan_down(const T &x) { using std::atan;return -(this->force_rounding(-atan(x))); } T atan_up(const T &x) { using std::atan;return (this->force_rounding(atan(x))); }
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T sinh_down(const T &x) { using std::sinh;return -(this->force_rounding(-sinh(x))); } T sinh_up(const T &x) { using std::sinh;return (this->force_rounding(sinh(x))); }
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T tanh_down(const T &x) { using std::tanh;return -(this->force_rounding(-tanh(x))); } T tanh_up(const T &x) { using std::tanh;return (this->force_rounding(tanh(x))); }
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T asinh_down(const T &x) { using ::asinh;(this->downward()); T y = ((this->force_rounding(asinh(x)))); (this->upward()); return y; } T asinh_up(const T &x) { using ::asinh;return (this->force_rounding(asinh(x))); }
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T atanh_down(const T &x) { using ::atanh;(this->downward()); T y = ((this->force_rounding(atanh(x)))); (this->upward()); return y; } T atanh_up(const T &x) { using ::atanh;return (this->force_rounding(atanh(x))); }
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
T acosh_down(const T &x) { using ::acosh;return -(this->force_rounding(-acosh(x))); } T acosh_up(const T &x) { using ::acosh;return (this->force_rounding(acosh(x))); }
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
};
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
}
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
}
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/rounded_transc.hpp"
}
# 13 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
namespace boost {
# 14 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
namespace numeric {
# 15 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
namespace interval_lib {
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
namespace constants {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
static const float pi_f_l = ((13176794.0F) / (1 << 22));
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
static const float pi_f_u = ((13176795.0F) / (1 << 22));
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
static const double pi_d_l = (((3373259426.0) + ((273688.0) / (1 << 21))) / (1 << 30));
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
static const double pi_d_u = (((3373259426.0) + ((273689.0) / (1 << 21))) / (1 << 30));
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_lower() { return 3; }
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_upper() { return 4; }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_half_lower() { return 1; }
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_half_upper() { return 2; }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_twice_lower() { return 6; }
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class T> inline T pi_twice_upper() { return 7; }
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_lower< float> () { return pi_f_l; }
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_upper< float> () { return pi_f_u; }
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_half_lower< float> () { return pi_f_l / (2); }
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_half_upper< float> () { return pi_f_u / (2); }
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_twice_lower< float> () { return pi_f_l * (2); }
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline float pi_twice_upper< float> () { return pi_f_u * (2); }
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_lower< double> () { return pi_d_l; }
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_upper< double> () { return pi_d_u; }
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_half_lower< double> () { return pi_d_l / (2); }
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_half_upper< double> () { return pi_d_u / (2); }
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_twice_lower< double> () { return pi_d_l * (2); }
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline double pi_twice_upper< double> () { return pi_d_u * (2); }
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_lower< long double> () { return pi_d_l; }
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_upper< long double> () { return pi_d_u; }
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_half_lower< long double> () { return pi_d_l / (2); }
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_half_upper< long double> () { return pi_d_u / (2); }
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_twice_lower< long double> () { return pi_d_l * (2); }
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template<> inline long double pi_twice_upper< long double> () { return pi_d_u * (2); }
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class I> inline I
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
pi()
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
{
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
typedef typename I::base_type T;
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
return I(constants::pi_lower< typename I::base_type> (), constants::pi_upper< typename I::base_type> (), true);
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class I> inline I
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
pi_half()
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
{
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
typedef typename I::base_type T;
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
return I(constants::pi_half_lower< typename I::base_type> (), constants::pi_half_upper< typename I::base_type> (), true);
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
template< class I> inline I
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
pi_twice()
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
{
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
typedef typename I::base_type T;
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
return I(constants::pi_twice_lower< typename I::base_type> (), constants::pi_twice_upper< typename I::base_type> (), true);
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/constants.hpp"
}
# 71 "/usr/include/assert.h" 3
extern "C" void __assert_fail(const char *, const char *, unsigned, const char *) throw() __attribute__((__noreturn__));
# 76 "/usr/include/assert.h" 3
extern "C" void __assert_perror_fail(int, const char *, unsigned, const char *) throw() __attribute__((__noreturn__));
# 84 "/usr/include/assert.h" 3
extern "C" void __assert(const char *, const char *, int) throw() __attribute__((__noreturn__));
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
namespace boost {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
namespace numeric {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
namespace interval_lib {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct exception_create_empty {
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
void operator()()
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
throw ((std::runtime_error)("boost::interval: empty interval created"));
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct exception_invalid_number {
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
void operator()()
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
throw ((std::invalid_argument)("boost::interval: invalid number"));
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
template< class T>
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct checking_base {
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T pos_inf()
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
(std::numeric_limits< T> ::has_infinity) ? (static_cast< void>(0)) : __assert_fail("std::numeric_limits<T>::has_infinity", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp", 43, __PRETTY_FUNCTION__);
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return std::numeric_limits< T> ::infinity();
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T neg_inf()
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
(std::numeric_limits< T> ::has_infinity) ? (static_cast< void>(0)) : __assert_fail("std::numeric_limits<T>::has_infinity", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp", 48, __PRETTY_FUNCTION__);
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return -std::numeric_limits< T> ::infinity();
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T nan()
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
(std::numeric_limits< T> ::has_quiet_NaN) ? (static_cast< void>(0)) : __assert_fail("std::numeric_limits<T>::has_quiet_NaN", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp", 53, __PRETTY_FUNCTION__);
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return std::numeric_limits< T> ::quiet_NaN();
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static bool is_nan(const T &x)
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return std::numeric_limits< T> ::has_quiet_NaN && (x != x);
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T empty_lower()
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return (std::numeric_limits< T> ::has_quiet_NaN) ? std::numeric_limits< T> ::quiet_NaN() : ((T)1);
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T empty_upper()
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return (std::numeric_limits< T> ::has_quiet_NaN) ? std::numeric_limits< T> ::quiet_NaN() : ((T)0);
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static bool is_empty(const T &l, const T &u)
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return !(l <= u);
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
template< class T, class Checking = checking_base< T> , class
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
Exception = exception_create_empty>
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct checking_no_empty : public Checking {
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T nan()
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
false ? (static_cast< void>(0)) : __assert_fail("false", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp", 82, __PRETTY_FUNCTION__);
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return Checking::nan();
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T empty_lower()
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
Exception()();
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return Checking::empty_lower();
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static T empty_upper()
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
Exception()();
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return Checking::empty_upper();
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static bool is_empty(const T &, const T &)
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return false;
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
template< class T, class Checking = checking_base< T> >
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct checking_no_nan : public Checking {
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static bool is_nan(const T &)
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return false;
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
template< class T, class Checking = checking_base< T> , class
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
Exception = exception_invalid_number>
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct checking_catch_nan : public Checking {
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
static bool is_nan(const T &x)
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
{
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
if (Checking::is_nan(x)) { Exception()(); }
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
return false;
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
template< class T>
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
struct checking_strict : public checking_no_nan< T, checking_no_empty< T, checking_base< T> , exception_create_empty> > {
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
};
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/checking.hpp"
}
# 15 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
namespace boost {
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
namespace numeric {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
namespace interval_lib {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
namespace user {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T> inline bool
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
is_zero(const T &v) { return v == ((T)0); }
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T> inline bool
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
is_neg(const T &v) { return v < ((T)0); }
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T> inline bool
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
is_pos(const T &v) { return v > ((T)0); }
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
namespace detail {
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies> inline bool
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const interval< T, Policies> &x) {
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies::checking checking;
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking::is_empty((x.lower()), (x.upper()));
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const interval< T, Policies1> &x, const interval< T, Policies2> &y) {
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies1::checking checking1;
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies2::checking checking2;
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking1::is_empty((x.lower()), (x.upper())) || checking2::is_empty((y.lower()), (y.upper()));
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies> inline bool
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const T &x, const interval< T, Policies> &y) {
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies::checking checking;
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking::is_nan(x) || checking::is_empty((y.lower()), (y.upper()));
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies> inline bool
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const interval< T, Policies> &x, const T &y) {
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies::checking checking;
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking::is_empty((x.lower()), (x.upper())) || checking::is_nan(y);
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies> inline bool
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const T &x) {
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies::checking checking;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking::is_nan(x);
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
template< class T, class Policies> inline bool
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
test_input(const T &x, const T &y) {
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
typedef typename Policies::checking checking;
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
return checking::is_nan(x) || checking::is_nan(y);
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/test_input.hpp"
}
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
namespace interval_lib {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
namespace compare {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
namespace certain {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator<(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.upper()) < (y.lower());
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator<(const interval< T, Policies> &x, const T &y)
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.upper()) < y;
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator<=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.upper()) <= (y.lower());
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator<=(const interval< T, Policies> &x, const T &y)
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.upper()) <= y;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator>(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.lower()) > (y.upper());
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator>(const interval< T, Policies> &x, const T &y)
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.lower()) > y;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator>=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.lower()) >= (y.upper());
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator>=(const interval< T, Policies> &x, const T &y)
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return (x.lower()) >= y;
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator==(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return ((x.upper()) == (y.lower())) && ((x.lower()) == (y.upper()));
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator==(const interval< T, Policies> &x, const T &y)
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return ((x.upper()) == y) && ((x.lower()) == y);
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator!=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return ((x.upper()) < (y.lower())) || ((x.lower()) > (y.upper()));
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
template< class T, class Policies> inline bool
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
operator!=(const interval< T, Policies> &x, const T &y)
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
{
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
return ((x.upper()) < y) || ((x.lower()) > y);
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/certain.hpp"
}
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
namespace interval_lib {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
namespace compare {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
namespace possible {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator<(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.lower()) < (y.upper());
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator<(const interval< T, Policies> &x, const T &y)
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.lower()) < y;
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator<=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.lower()) <= (y.upper());
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator<=(const interval< T, Policies> &x, const T &y)
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.lower()) <= y;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator>(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.upper()) > (y.lower());
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator>(const interval< T, Policies> &x, const T &y)
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.upper()) > y;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator>=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.upper()) >= (y.lower());
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator>=(const interval< T, Policies> &x, const T &y)
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return (x.upper()) >= y;
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator==(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return ((x.lower()) <= (y.upper())) && ((x.upper()) >= (y.lower()));
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator==(const interval< T, Policies> &x, const T &y)
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return ((x.lower()) <= y) && ((x.upper()) >= y);
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator!=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return ((x.lower()) != (y.upper())) || ((x.upper()) != (y.lower()));
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
template< class T, class Policies> inline bool
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
operator!=(const interval< T, Policies> &x, const T &y)
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
{
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
return ((x.lower()) != y) || ((x.upper()) != y);
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/possible.hpp"
}
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
namespace interval_lib {
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerlt(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) < (y.lower());
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerlt(const interval< T, Policies> &x, const T &y)
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) < y;
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerlt(const T &x, const interval< T, Policies> &y)
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x < (y.lower());
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerle(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) <= (y.lower());
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerle(const interval< T, Policies> &x, const T &y)
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) <= y;
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerle(const T &x, const interval< T, Policies> &y)
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x <= (y.lower());
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cergt(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) > (y.upper());
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cergt(const interval< T, Policies> &x, const T &y)
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) > y;
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cergt(const T &x, const interval< T, Policies> &y)
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x > (y.upper());
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerge(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) >= (y.upper());
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerge(const interval< T, Policies> &x, const T &y)
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) >= y;
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerge(const T &x, const interval< T, Policies> &y)
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x >= (y.upper());
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cereq(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.lower()) == (y.upper())) && ((y.lower()) == (x.upper()));
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cereq(const interval< T, Policies> &x, const T &y)
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.lower()) == y) && ((x.upper()) == y);
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cereq(const T &x, const interval< T, Policies> &y)
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x == (y.lower())) && (x == (y.upper()));
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerne(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) < (y.lower())) || ((y.upper()) < (x.lower()));
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerne(const interval< T, Policies> &x, const T &y)
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) < y) || (y < (x.lower()));
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
cerne(const T &x, const interval< T, Policies> &y)
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x < (y.lower())) || ((y.upper()) < x);
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poslt(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) < (y.upper());
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poslt(const interval< T, Policies> &x, const T &y)
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) < y;
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poslt(const T &x, const interval< T, Policies> &y)
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x < (y.upper());
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posle(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 156 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 157 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) <= (y.upper());
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posle(const interval< T, Policies> &x, const T &y)
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.lower()) <= y;
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 166 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posle(const T &x, const interval< T, Policies> &y)
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x <= (y.upper());
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posgt(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) > (y.lower());
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posgt(const interval< T, Policies> &x, const T &y)
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) > y;
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posgt(const T &x, const interval< T, Policies> &y)
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x > (y.lower());
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posge(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 193 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) >= (y.lower());
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 197 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posge(const interval< T, Policies> &x, const T &y)
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x.upper()) >= y;
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 202 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posge(const T &x, const interval< T, Policies> &y)
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 205 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return x >= (y.lower());
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 209 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poseq(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 210 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) >= (y.lower())) && ((y.upper()) >= (x.lower()));
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poseq(const interval< T, Policies> &x, const T &y)
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) >= y) && (y >= (x.lower()));
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 221 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
poseq(const T &x, const interval< T, Policies> &y)
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x >= (y.lower())) && ((y.upper()) >= x);
# 224 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posne(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) != (y.lower())) || ((y.upper()) != (x.lower()));
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posne(const interval< T, Policies> &x, const T &y)
# 234 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 235 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return ((x.upper()) != y) || (y != (x.lower()));
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
template< class T, class Policies> inline bool
# 239 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
posne(const T &x, const interval< T, Policies> &y)
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
{
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
return (x != (y.lower())) || ((y.upper()) != x);
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 245 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 246 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/explicit.hpp"
}
# 16 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
namespace boost {
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
namespace numeric {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
namespace interval_lib {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
namespace compare {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
namespace lexicographic {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator<(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &yl = ((y.lower()));
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl < yl) || ((xl == yl) && ((x.upper()) < (y.upper())));
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator<(const interval< T, Policies> &x, const T &y)
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (x.lower()) < y;
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator<=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &yl = ((y.lower()));
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl < yl) || ((xl == yl) && ((x.upper()) <= (y.upper())));
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator<=(const interval< T, Policies> &x, const T &y)
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl < y) || ((xl == y) && ((x.upper()) <= y));
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator>(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &yl = ((y.lower()));
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl > yl) || ((xl == yl) && ((x.upper()) > (y.upper())));
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator>(const interval< T, Policies> &x, const T &y)
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl > y) || ((xl == y) && ((x.upper()) > y));
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator>=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &xl = ((x.lower()));
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
const T &yl = ((y.lower()));
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (xl > yl) || ((xl == yl) && ((x.upper()) >= (y.upper())));
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator>=(const interval< T, Policies> &x, const T &y)
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return (x.lower()) >= y;
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator==(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return ((x.lower()) == (y.lower())) && ((x.upper()) == (y.upper()));
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator==(const interval< T, Policies> &x, const T &y)
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return ((x.lower()) == y) && ((x.upper()) == y);
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator!=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return ((x.lower()) != (y.lower())) || ((x.upper()) != (y.upper()));
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
template< class T, class Policies> inline bool
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
operator!=(const interval< T, Policies> &x, const T &y)
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
{
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
if (detail::test_input(x, y)) { throw comparison_error(); }
# 113 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
return ((x.lower()) != y) || ((x.upper()) != y);
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/lexicographic.hpp"
}
# 40 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 198 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    bool
    binary_search ( _FIter, _FIter, const _Tp & );
# 202 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    bool
    binary_search ( _FIter, _FIter, const _Tp &, _Compare );
# 206 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter);
# 210 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2);
# 227 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    pair < _FIter, _FIter >
    equal_range ( _FIter, _FIter, const _Tp & );
# 231 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    pair < _FIter, _FIter >
    equal_range ( _FIter, _FIter, const _Tp &, _Compare );
# 235 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &);
# 246 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &);
# 252 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    find_end ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 256 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    find_end ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 273 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2 >
    bool
    includes ( _IIter1, _IIter1, _IIter2, _IIter2 );
# 277 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _Compare >
    bool
    includes ( _IIter1, _IIter1, _IIter2, _IIter2, _Compare );
# 281 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    void
    inplace_merge ( _BIter, _BIter, _BIter );
# 285 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    void
    inplace_merge ( _BIter, _BIter, _BIter, _Compare );
# 327 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2);
# 331 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    lower_bound ( _FIter, _FIter, const _Tp & );
# 335 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    _FIter
    lower_bound ( _FIter, _FIter, const _Tp &, _Compare );
# 339 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    make_heap ( _RAIter, _RAIter );
# 343 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    make_heap ( _RAIter, _RAIter, _Compare );
# 347 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp> inline const _Tp &max(const _Tp &, const _Tp &);
# 351 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp, class _Compare> inline const _Tp &max(const _Tp &, const _Tp &, _Compare);
# 358 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp> inline const _Tp &min(const _Tp &, const _Tp &);
# 362 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp, class _Compare> inline const _Tp &min(const _Tp &, const _Tp &, _Compare);
# 412 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    bool
    next_permutation ( _BIter, _BIter );
# 416 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    bool
    next_permutation ( _BIter, _BIter, _Compare );
# 429 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _RAIter >
    _RAIter
    partial_sort_copy ( _IIter, _IIter, _RAIter, _RAIter );
# 433 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _RAIter, typename _Compare >
    _RAIter
    partial_sort_copy ( _IIter, _IIter, _RAIter, _RAIter, _Compare );
# 450 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    pop_heap ( _RAIter, _RAIter );
# 454 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    pop_heap ( _RAIter, _RAIter, _Compare );
# 458 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    bool
    prev_permutation ( _BIter, _BIter );
# 462 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    bool
    prev_permutation ( _BIter, _BIter, _Compare );
# 466 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    push_heap ( _RAIter, _RAIter );
# 470 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    push_heap ( _RAIter, _RAIter, _Compare );
# 476 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    remove ( _FIter, _FIter, const _Tp & );
# 480 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Predicate >
    _FIter
    remove_if ( _FIter, _FIter, _Predicate );
# 484 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Tp >
    _OIter
    remove_copy ( _IIter, _IIter, _OIter, const _Tp & );
# 488 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Predicate >
    _OIter
    remove_copy_if ( _IIter, _IIter, _OIter, _Predicate );
# 494 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Tp >
    _OIter
    replace_copy ( _IIter, _IIter, _OIter, const _Tp &, const _Tp & );
# 498 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _Iter, typename _OIter, typename _Predicate, typename _Tp >
    _OIter
    replace_copy_if ( _Iter, _Iter, _OIter, _Predicate, const _Tp & );
# 504 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    void
    reverse ( _BIter, _BIter );
# 508 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _OIter >
    _OIter
    reverse_copy ( _BIter, _BIter, _OIter );
# 512 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    void
    rotate ( _FIter, _FIter, _FIter );
# 516 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _OIter >
    _OIter
    rotate_copy ( _FIter, _FIter, _FIter, _OIter );
# 527 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    sort_heap ( _RAIter, _RAIter );
# 531 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    sort_heap ( _RAIter, _RAIter, _Compare );
# 535 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Predicate >
    _BIter
    stable_partition ( _BIter, _BIter, _Predicate );
# 539 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp> inline void swap(_Tp &, _Tp &);
# 543 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _Tp, size_t _Nm> inline void swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);
# 547 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2);
# 553 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    unique ( _FIter, _FIter );
# 557 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _BinaryPredicate >
    _FIter
    unique ( _FIter, _FIter, _BinaryPredicate );
# 563 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    upper_bound ( _FIter, _FIter, const _Tp & );
# 567 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    _FIter
    upper_bound ( _FIter, _FIter, const _Tp &, _Compare );
# 571 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
}
# 573 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 575 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    adjacent_find ( _FIter, _FIter );
# 579 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _BinaryPredicate >
    _FIter
    adjacent_find ( _FIter, _FIter, _BinaryPredicate );
# 583 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Tp >
    typename iterator_traits < _IIter > :: difference_type
    count ( _IIter, _IIter, const _Tp & );
# 587 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Predicate >
    typename iterator_traits < _IIter > :: difference_type
    count_if ( _IIter, _IIter, _Predicate );
# 591 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2);
# 595 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 599 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Tp >
    _IIter
    find ( _IIter, _IIter, const _Tp & );
# 603 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    find_first_of ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 607 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    find_first_of ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 611 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Predicate >
    _IIter
    find_if ( _IIter, _IIter, _Predicate );
# 615 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Funct >
    _Funct
    for_each ( _IIter, _IIter, _Funct );
# 619 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Generator >
    void
    generate ( _FIter, _FIter, _Generator );
# 630 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _OIter, typename _Size, typename _Generator >
    _OIter
    generate_n ( _OIter, _Size, _Generator );
# 634 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);
# 638 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _Compare> bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
# 642 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    max_element ( _FIter, _FIter );
# 646 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Compare >
    _FIter
    max_element ( _FIter, _FIter, _Compare );
# 650 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    merge ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 654 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    merge ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 659 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    min_element ( _FIter, _FIter );
# 663 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Compare >
    _FIter
    min_element ( _FIter, _FIter, _Compare );
# 667 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2);
# 671 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 675 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    nth_element ( _RAIter, _RAIter, _RAIter );
# 679 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    nth_element ( _RAIter, _RAIter, _RAIter, _Compare );
# 683 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    partial_sort ( _RAIter, _RAIter, _RAIter );
# 687 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    partial_sort ( _RAIter, _RAIter, _RAIter, _Compare );
# 691 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Predicate >
    _BIter
    partition ( _BIter, _BIter, _Predicate );
# 695 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    random_shuffle ( _RAIter, _RAIter );
# 699 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Generator >
    void
    random_shuffle ( _RAIter, _RAIter, _Generator & );
# 703 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    void
    replace ( _FIter, _FIter, const _Tp &, const _Tp & );
# 707 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Predicate, typename _Tp >
    void
    replace_if ( _FIter, _FIter, _Predicate, const _Tp & );
# 711 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    search ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 715 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    search ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 719 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Size, typename _Tp >
    _FIter
    search_n ( _FIter, _FIter, _Size, const _Tp & );
# 723 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate >
    _FIter
    search_n ( _FIter, _FIter, _Size, const _Tp &, _BinaryPredicate );
# 728 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 732 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 737 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_intersection ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 741 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_intersection ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 746 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_symmetric_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 750 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_symmetric_difference ( _IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare );
# 756 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_union ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 760 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_union ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 765 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    sort ( _RAIter, _RAIter );
# 769 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    sort ( _RAIter, _RAIter, _Compare );
# 773 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    stable_sort ( _RAIter, _RAIter );
# 777 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    stable_sort ( _RAIter, _RAIter, _Compare );
# 781 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _UnaryOperation >
    _OIter
    transform ( _IIter, _IIter, _OIter, _UnaryOperation );
# 785 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation >
    _OIter
    transform ( _IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation );
# 790 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter >
    _OIter
    unique_copy ( _IIter, _IIter, _OIter );
# 794 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _BinaryPredicate >
    _OIter
    unique_copy ( _IIter, _IIter, _OIter, _BinaryPredicate );
# 798 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
}
# 62 "/usr/include/c++/4.4/bits/stl_heap.h" 3
namespace std __attribute__((visibility("default"))) {
# 69 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    _Distance
    __is_heap_until ( _RandomAccessIterator __first, _Distance __n )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __first [ __parent ] < __first [ __child ] )
     return __child;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return __n;
    }
# 84 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Compare >
    _Distance
    __is_heap_until ( _RandomAccessIterator __first, _Distance __n,
      _Compare __comp )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __comp ( __first [ __parent ], __first [ __child ] ) )
     return __child;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return __n;
    }
# 103 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _Distance __n )
    { return std :: __is_heap_until ( __first, __n ) == __n; }
# 108 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare,
    typename _Distance >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _Compare __comp, _Distance __n )
    { return std :: __is_heap_until ( __first, __n, __comp ) == __n; }
# 114 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    { return std :: __is_heap ( __first, std :: distance ( __first, __last ) ); }
# 119 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    { return std :: __is_heap ( __first, __comp, std :: distance ( __first, __last ) ); }
# 128 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __push_heap ( _RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex && * ( __first + __parent ) < __value )
 {
   * ( __first + __holeIndex ) = ( * ( __first + __parent ) );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = ( __value );
    }
# 152 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;
      ;

      _ValueType __value = ( * ( __last - 1 ) );
      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), ( __value ) );
    }
# 173 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare >
    void
    __push_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex
      && __comp ( * ( __first + __parent ), __value ) )
 {
   * ( __first + __holeIndex ) = ( * ( __first + __parent ) );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = ( __value );
    }
# 201 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;
      ;

      _ValueType __value = ( * ( __last - 1 ) );
      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), ( __value ), __comp );
    }
# 222 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while ( __secondChild < ( __len - 1 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   if ( * ( __first + __secondChild ) < * ( __first + ( __secondChild - 1 ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = ( * ( __first + __secondChild ) );
   __holeIndex = __secondChild;
 }
      if ( ( __len & 1 ) == 0 && __secondChild == ( __len - 2 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   * ( __first + __holeIndex ) = ( * ( __first + ( __secondChild - 1 ) ) );

   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex,
         ( __value ) );
    }
# 248 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;

      _ValueType __value = ( * __result );
      * __result = ( * __first );
      std :: __adjust_heap ( __first, _DistanceType ( 0 ),
    _DistanceType ( __last - __first ),
    ( __value ) );
    }
# 274 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      -- __last;
      std :: __pop_heap ( __first, __last, __last );
    }
# 292 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while ( __secondChild < ( __len - 1 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   if ( __comp ( * ( __first + __secondChild ),
       * ( __first + ( __secondChild - 1 ) ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = ( * ( __first + __secondChild ) );
   __holeIndex = __secondChild;
 }
      if ( ( __len & 1 ) == 0 && __secondChild == ( __len - 2 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   * ( __first + __holeIndex ) = ( * ( __first + ( __secondChild - 1 ) ) );

   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex,
         ( __value ), __comp );
    }
# 320 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;

      _ValueType __value = ( * __result );
      * __result = ( * __first );
      std :: __adjust_heap ( __first, _DistanceType ( 0 ),
    _DistanceType ( __last - __first ),
    ( __value ), __comp );
    }
# 348 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    pop_heap ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {



      ;
      ;

      -- __last;
      std :: __pop_heap ( __first, __last, __last, __comp );
    }
# 371 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   _ValueType __value = ( * ( __first + __parent ) );
   std :: __adjust_heap ( __first, __parent, __len, ( __value ) );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 411 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   _ValueType __value = ( * ( __first + __parent ) );
   std :: __adjust_heap ( __first, __parent, __len, ( __value ),
        __comp );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 450 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {





      ;
      ;

      while ( __last - __first > 1 )
 {
   -- __last;
   std :: __pop_heap ( __first, __last, __last );
 }
    }
# 479 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {



      ;
      ;

      while ( __last - __first > 1 )
 {
   -- __last;
   std :: __pop_heap ( __first, __last, __last, __comp );
 }
    }
# 576 "/usr/include/c++/4.4/bits/stl_heap.h" 3
}
# 64 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
namespace std __attribute__((visibility("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _Tp >
    pair < _Tp *, ptrdiff_t >
    get_temporary_buffer ( ptrdiff_t __len )
    {
      const ptrdiff_t __max =
 __gnu_cxx :: __numeric_traits < ptrdiff_t > :: __max / sizeof ( _Tp );
      if ( __len > __max )
 __len = __max;

      while ( __len > 0 )
 {
   _Tp * __tmp = static_cast < _Tp * > ( :: operator new ( __len * sizeof ( _Tp ),
       std :: nothrow ) );
   if ( __tmp != 0 )
     return std :: pair < _Tp *, ptrdiff_t > ( __tmp, __len );
   __len /= 2;
 }
      return std :: pair < _Tp *, ptrdiff_t > ( static_cast < _Tp * > ( 0 ), 0 );
    }
# 110 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _Tp >
    inline void
    return_temporary_buffer ( _Tp * __p )
    { :: operator delete ( __p, std :: nothrow ); }
# 121 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    class _Temporary_buffer
    {



    public :
      typedef _Tp value_type;
      typedef value_type * pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected :
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public :

      size_type
      size ( ) const
      { return _M_len; }


      size_type
      requested_size ( ) const
      { return _M_original_len; }


      iterator
      begin ( )
      { return _M_buffer; }


      iterator
      end ( )
      { return _M_buffer + _M_len; }





      _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last );

      ~ _Temporary_buffer ( )
      {
 std :: _Destroy ( _M_buffer, _M_buffer + _M_len );
 std :: return_temporary_buffer ( _M_buffer );
      }

    private :

      _Temporary_buffer ( const _Temporary_buffer & );

      void
      operator = ( const _Temporary_buffer & );
    };
# 179 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    _Temporary_buffer < _ForwardIterator, _Tp > ::
    _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last )
    : _M_original_len ( std :: distance ( __first, __last ) ),
      _M_len ( 0 ), _M_buffer ( 0 )
    {
      try
 {
   std :: pair < pointer, size_type > __p ( std :: get_temporary_buffer <
         value_type > ( _M_original_len ) );
   _M_buffer = __p . first;
   _M_len = __p . second;
   if ( ! __is_pod ( _Tp ) && _M_len > 0 )
     std :: uninitialized_fill_n ( _M_buffer, _M_len, * __first );
 }
      catch ( ... )
 {
   std :: return_temporary_buffer ( _M_buffer );
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }
# 203 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
}
# 69 "/usr/include/c++/4.4/bits/stl_algo.h" 3
namespace std __attribute__((visibility("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Tp >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c )
    {


      if ( __a < __b )
 if ( __b < __c )
   return __b;
 else if ( __a < __c )
   return __c;
 else
   return __a;
      else if ( __a < __c )
 return __a;
      else if ( __b < __c )
 return __c;
      else
 return __b;
    }
# 117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c, _Compare __comp )
    {



      if ( __comp ( __a, __b ) )
 if ( __comp ( __b, __c ) )
   return __b;
 else if ( __comp ( __a, __c ) )
   return __c;
 else
   return __a;
      else if ( __comp ( __a, __c ) )
 return __a;
      else if ( __comp ( __b, __c ) )
 return __c;
      else
 return __b;
    }
# 142 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    __find ( _InputIterator __first, _InputIterator __last,
    const _Tp & __val, input_iterator_tag )
    {
      while ( __first != __last && ! ( * __first == __val ) )
 ++ __first;
      return __first;
    }
# 153 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    __find_if ( _InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag )
    {
      while ( __first != __last && ! bool ( __pred ( * __first ) ) )
 ++ __first;
      return __first;
    }
# 164 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __find ( _RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp & __val, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 2 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 1 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 212 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Predicate >
    _RandomAccessIterator
    __find_if ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 2 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 1 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 338 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        std :: forward_iterator_tag )
    {
      __first = std :: find ( __first, __last, __val );
      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && * __i == __val )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = std :: find ( ++ __i, __last, __val );
 }
      return __last;
    }
# 370 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! ( * __lookAhead == __val ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        * __backTrack == __val; -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 423 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: forward_iterator_tag )
    {
      while ( __first != __last && ! bool ( __binary_pred ( * __first, __val ) ) )
        ++ __first;

      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && bool ( __binary_pred ( * __i, __val ) ) )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = ++ __i;
   while ( __first != __last
   && ! bool ( __binary_pred ( * __first, __val ) ) )
     ++ __first;
 }
      return __last;
    }
# 462 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! bool ( __binary_pred ( * __lookAhead, __val ) ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred ( * __backTrack, __val ); -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 509 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2, __last2 );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 536 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2,
      __last2, __comp );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 567 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2 >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ),
             __rlast1,
             _RevIterator2 ( __last2 ),
             __rlast2 );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 601 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ), __rlast1,
         _RevIterator2 ( __last2 ), __rlast2,
         __comp );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 661 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ) );
    }
# 707 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ),
        __comp );
    }
# 886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    remove_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp & __value )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! ( * __first == __value ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 923 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate >
    _OutputIterator
    remove_copy_if ( _InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! bool ( __pred ( * __first ) ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 1098 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    remove ( _ForwardIterator __first, _ForwardIterator __last,
    const _Tp & __value )
    {





      ;

      __first = std :: find ( __first, __last, __value );
      if ( __first == __last )
        return __first;
      _ForwardIterator __result = __first;
      ++ __first;
      for (; __first != __last; ++ __first )
        if ( ! ( * __first == __value ) )
          {
            * __result = ( * __first );
            ++ __result;
          }
      return __result;
    }
# 1141 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    remove_if ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      __first = std :: find_if ( __first, __last, __pred );
      if ( __first == __last )
        return __first;
      _ForwardIterator __result = __first;
      ++ __first;
      for (; __first != __last; ++ __first )
        if ( ! bool ( __pred ( * __first ) ) )
          {
            * __result = ( * __first );
            ++ __result;
          }
      return __result;
    }
# 1181 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last )
    {





      ;


      __first = std :: adjacent_find ( __first, __last );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! ( * __dest == * __first ) )
   * ++ __dest = ( * __first );
      return ++ __dest;
    }
# 1221 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred )
    {






      ;


      __first = std :: adjacent_find ( __first, __last, __binary_pred );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( * __dest, * __first ) ) )
   * ++ __dest = ( * __first );
      return ++ __dest;
    }
# 1253 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag )
    {

      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! ( * __first == * __next ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1276 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag )
    {

      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! ( __value == * __first ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1299 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag )
    {

      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! ( * __result == * __first ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1319 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag )
    {





      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! bool ( __binary_pred ( * __first, * __next ) ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1348 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag )
    {





      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( __value, * __first ) ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1377 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag )
    {





      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( * __result, * __first ) ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {
      while ( true )
 if ( __first == __last || __first == -- __last )
   return;
 else
   {
     std :: iter_swap ( __first, __last );
     ++ __first;
   }
    }
# 1421 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __reverse ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag )
    {
      if ( __first == __last )
 return;
      -- __last;
      while ( __first < __last )
 {
   std :: iter_swap ( __first, __last );
   ++ __first;
   -- __last;
 }
    }
# 1449 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    inline void
    reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last )
    {



      ;
      std :: __reverse ( __first, __last, std :: __iterator_category ( __first ) );
    }
# 1476 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _OutputIterator >
    _OutputIterator
    reverse_copy ( _BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result )
    {





      ;

      while ( __first != __last )
 {
   -- __last;
   * __result = * __last;
   ++ __result;
 }
      return __result;
    }
# 1501 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _EuclideanRingElement >
    _EuclideanRingElement
    __gcd ( _EuclideanRingElement __m, _EuclideanRingElement __n )
    {
      while ( __n != 0 )
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }
# 1515 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    void
    __rotate ( _ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag )
    {
      if ( __first == __middle || __last == __middle )
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std :: iter_swap ( __first, __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
 }
      while ( __first2 != __last );

      __first2 = __middle;

      while ( __first2 != __last )
 {
   std :: iter_swap ( __first, __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
   else if ( __first2 == __last )
     __first2 = __middle;
 }
    }
# 1551 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __rotate ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
      std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );

      while ( __first != __middle && __middle != __last )
 {
   std :: iter_swap ( __first, -- __last );
   ++ __first;
 }

      if ( __first == __middle )
 std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );
      else
 std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
    }
# 1581 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __rotate ( _RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if ( __k == __l )
 {
   std :: swap_ranges ( __first, __middle, __middle );
   return;
 }

      const _Distance __d = std :: __gcd ( __n, __k );

      for ( _Distance __i = 0; __i < __d; __i ++ )
 {
   _ValueType __tmp = ( * __first );
   _RandomAccessIterator __p = __first;

   if ( __k < __l )
     {
       for ( _Distance __j = 0; __j < __l / __d; __j ++ )
  {
    if ( __p > __first + __l )
      {
        * __p = ( * ( __p - __l ) );
        __p -= __l;
      }

    * __p = ( * ( __p + __k ) );
    __p += __k;
  }
     }
   else
     {
       for ( _Distance __j = 0; __j < __k / __d - 1; __j ++ )
  {
    if ( __p < __last - __k )
      {
        * __p = ( * ( __p + __k ) );
        __p += __k;
      }
    * __p = ( * ( __p - __l ) );
    __p -= __l;
  }
     }

   * __p = ( __tmp );
   ++ __first;
 }
    }
# 1669 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    inline void
    rotate ( _ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last )
    {



      ;
      ;

      typedef typename iterator_traits < _ForwardIterator > :: iterator_category
 _IterType;
      std :: __rotate ( __first, __middle, __last, _IterType ( ) );
    }
# 1703 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    rotate_copy ( _ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result )
    {




      ;
      ;

      return std :: copy ( __first, __middle,
                       std :: copy ( __middle, __last, __result ) );
    }
# 1720 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    __partition ( _ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag )
    {
      if ( __first == __last )
 return __first;

      while ( __pred ( * __first ) )
 if ( ++ __first == __last )
   return __first;

      _ForwardIterator __next = __first;

      while ( ++ __next != __last )
 if ( __pred ( * __next ) )
   {
     std :: iter_swap ( __first, __next );
     ++ __first;
   }

      return __first;
    }
# 1745 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Predicate >
    _BidirectionalIterator
    __partition ( _BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag )
    {
      while ( true )
 {
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( __pred ( * __first ) )
       ++ __first;
     else
       break;
   -- __last;
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( ! bool ( __pred ( * __last ) ) )
       -- __last;
     else
       break;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 1775 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Distance >
    _ForwardIterator
    __inplace_stable_partition ( _ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len )
    {
      if ( __len == 1 )
 return __pred ( * __first ) ? __last : __first;
      _ForwardIterator __middle = __first;
      std :: advance ( __middle, __len / 2 );
      _ForwardIterator __begin = std :: __inplace_stable_partition ( __first,
         __middle,
         __pred,
         __len / 2 );
      _ForwardIterator __end = std :: __inplace_stable_partition ( __middle, __last,
              __pred,
              __len
              - __len / 2 );
      std :: rotate ( __begin, __middle, __end );
      std :: advance ( __begin, std :: distance ( __middle, __end ) );
      return __begin;
    }
# 1799 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance >
    _ForwardIterator
    __stable_partition_adaptive ( _ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size )
    {
      if ( __len <= __buffer_size )
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++ __first )
     if ( __pred ( * __first ) )
       {
  * __result1 = * __first;
  ++ __result1;
       }
     else
       {
  * __result2 = * __first;
  ++ __result2;
       }
   std :: copy ( __buffer, __result2, __result1 );
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std :: advance ( __middle, __len / 2 );
   _ForwardIterator __begin =
     std :: __stable_partition_adaptive ( __first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size );
   _ForwardIterator __end =
     std :: __stable_partition_adaptive ( __middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size );
   std :: rotate ( __begin, __middle, __end );
   std :: advance ( __begin, std :: distance ( __middle, __end ) );
   return __begin;
 }
    }
# 1861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    stable_partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      if ( __first == __last )
 return __first;
      else
 {
   typedef typename iterator_traits < _ForwardIterator > :: value_type
     _ValueType;
   typedef typename iterator_traits < _ForwardIterator > :: difference_type
     _DistanceType;

   _Temporary_buffer < _ForwardIterator, _ValueType > __buf ( __first,
        __last );
 if ( __buf . size ( ) > 0 )
   return
     std :: __stable_partition_adaptive ( __first, __last, __pred,
       _DistanceType ( __buf . requested_size ( ) ),
       __buf . begin ( ),
       _DistanceType ( __buf . size ( ) ) );
 else
   return
     std :: __inplace_stable_partition ( __first, __last, __pred,
      _DistanceType ( __buf . requested_size ( ) ) );
 }
    }
# 1898 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last )
    {
      std :: make_heap ( __first, __middle );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( * __i < * __first )
   std :: __pop_heap ( __first, __middle, __i );
    }
# 1911 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp )
    {
      std :: make_heap ( __first, __middle, __comp );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( __comp ( * __i, * __first ) )
   std :: __pop_heap ( __first, __middle, __i, __comp );
    }
# 1943 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 1963 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last );
      while ( __first != __last )
 {
   if ( * __first < * __result_first )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ) );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last );
      return __result_real_last;
    }
# 2009 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator, typename _Compare >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 2033 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last, __comp );
      while ( __first != __last )
 {
   if ( __comp ( * __first, * __result_first ) )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ),
          __comp );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last, __comp );
      return __result_real_last;
    }
# 2061 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __val < * __next )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2077 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val,
         _Compare __comp )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __comp ( __val, * __next ) )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2094 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last )
    {
      if ( __first == __last )
 return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __val < * __first )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val );
 }
    }
# 2117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __first == __last ) return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __comp ( __val, * __first ) )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val, __comp );
 }
    }
# 2139 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ) );
    }
# 2152 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ), __comp );
    }
# 2168 "/usr/include/c++/4.4/bits/stl_algo.h" 3
enum { _S_threshold = 16};
# 2171 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ) );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last );
 }
      else
 std :: __insertion_sort ( __first, __last );
    }
# 2186 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ), __comp );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last,
       __comp );
 }
      else
 std :: __insertion_sort ( __first, __last, __comp );
    }
# 2202 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot )
    {
      while ( true )
 {
   while ( * __first < __pivot )
     ++ __first;
   -- __last;
   while ( __pivot < * __last )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2222 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp )
    {
      while ( true )
 {
   while ( __comp ( * __first, __pivot ) )
     ++ __first;
   -- __last;
   while ( __comp ( __pivot, * __last ) )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2243 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   std :: __introsort_loop ( __cut, __last, __depth_limit );
   __last = __cut;
 }
    }
# 2275 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last, __comp );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   std :: __introsort_loop ( __cut, __last, __depth_limit, __comp );
   __last = __cut;
 }
    }
# 2308 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Size >
    inline _Size
    __lg ( _Size __n )
    {
      _Size __k;
      for ( __k = 0; __n != 0; __n >>= 1 )
 ++ __k;
      return __k - 1;
    }
# 2319 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline int __lg(int __n)
# 2320 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); }
# 2323 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline long __lg(long __n)
# 2324 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); }
# 2327 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline long long __lg(long long __n)
# 2328 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); }
# 2332 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last );


       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 2368 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last, __comp );

       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 2418 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2469 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2518 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __val < * __middle )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2569 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2624 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;
      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __val < * __middle )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 2686 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val,
  _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;







      ;

      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val, __comp );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val, __comp );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 2747 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;




      ;
      ;

      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val );
      return __i != __last && ! ( __val < * __i );
    }
# 2780 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;





      ;

      ;


      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val, __comp );
      return __i != __last && ! bool ( __comp ( __val, * __i ) );
    }
# 2804 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3 >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( * __last2 < * __last1 )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 2839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( __comp ( * __last2, * __last1 ) )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 2875 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance >
    _BidirectionalIterator1
    __rotate_adaptive ( _BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size )
    {
      _BidirectionalIterator2 __buffer_end;
      if ( __len1 > __len2 && __len2 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: copy_backward ( __first, __middle, __last );
   return std :: copy ( __buffer, __buffer_end, __first );
 }
      else if ( __len1 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: copy ( __middle, __last, __first );
   return std :: copy_backward ( __buffer, __buffer_end, __last );
 }
      else
 {
   std :: rotate ( __first, __middle, __last );
   std :: advance ( __first, std :: distance ( __middle, __last ) );
   return __first;
 }
    }
# 2907 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Pointer >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last,
    __first );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer,
    __buffer_end, __last );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last,
           * __first_cut );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle,
          * __second_cut );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size );
 }
    }
# 2963 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last,
    __first, __comp );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer, __buffer_end,
    __last, __comp );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
           __comp );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
          __comp );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp );
 }
    }
# 3021 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2 )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( * __middle < * __first )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22 );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22 );
    }
# 3064 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Compare >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( __comp ( * __middle, * __first ) )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
       __comp );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
      __comp );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22, __comp );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp );
    }
# 3128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;





      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      _DistanceType __len1 = std :: distance ( __first, __middle );
      _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1, __len2 );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ) );
    }
# 3183 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;






      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      const _DistanceType __len1 = std :: distance ( __first, __middle );
      const _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1,
        __len2, __comp );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ),
         __comp );
    }
# 3220 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
        __first + __step_size,
        __first + __two_step,
        __result );
   __first += __two_step;
 }

      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );
      std :: merge ( __first, __first + __step_size,
       __first + __step_size, __last,
       __result );
    }
# 3245 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp );
   __first += __two_step;
 }
      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );

      std :: merge ( __first, __first + __step_size,
       __first + __step_size, __last, __result, __comp );
    }
# 3269 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 3283 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Compare >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size, __comp );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 3298 "/usr/include/c++/4.4/bits/stl_algo.h" 3
enum { _S_chunk_size = 7};
# 3300 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer, __step_size );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first, __step_size );
   __step_size *= 2;
 }
    }
# 3324 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer, typename _Compare >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size, __comp );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer,
     __step_size, __comp );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first,
     __step_size, __comp );
   __step_size *= 2;
 }
    }
# 3350 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle,
          __buffer, __buffer_size );
   std :: __stable_sort_adaptive ( __middle, __last,
          __buffer, __buffer_size );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size );
    }
# 3377 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle, __buffer,
          __buffer_size, __comp );
   std :: __stable_sort_adaptive ( __middle, __last, __buffer,
          __buffer_size, __comp );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer, __comp );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer, __comp );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size,
       __comp );
    }
# 3407 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle );
      std :: __inplace_stable_sort ( __middle, __last );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle );
    }
# 3426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last, __comp );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle, __comp );
      std :: __inplace_stable_sort ( __middle, __last, __comp );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp );
    }
# 3468 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2 )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;






      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first2 < * __first1 )
   return false;
 else if ( * __first1 < * __first2 )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 3517 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _Compare >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 3536 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first2, * __first1 ) )
   return false;
 else if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 3572 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __i < * __ii )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * __i < * -- __j ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3629 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __i, * __ii ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! bool ( __comp ( * __i, * -- __j ) ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3685 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __ii < * __i )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * -- __j < * __i ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __ii, * __i ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! bool ( __comp ( * -- __j, * __i ) ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3802 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    replace_copy ( _InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp & __old_value, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( * __first == __old_value )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 3839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp >
    _OutputIterator
    replace_copy_if ( _InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( __pred ( * __first ) )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 4176 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}
# 4178 "/usr/include/c++/4.4/bits/stl_algo.h" 3
namespace std __attribute__((visibility("default"))) {
# 4192 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Function >
    _Function
    for_each ( _InputIterator __first, _InputIterator __last, _Function __f )
    {


      ;
      for (; __first != __last; ++ __first )
 __f ( * __first );
      return __f;
    }
# 4213 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    find ( _InputIterator __first, _InputIterator __last,
  const _Tp & __val )
    {




      ;
      return std :: __find ( __first, __last, __val,
           std :: __iterator_category ( __first ) );
    }
# 4237 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    find_if ( _InputIterator __first, _InputIterator __last,
     _Predicate __pred )
    {




      ;
      return std :: __find_if ( __first, __last, __pred,
       std :: __iterator_category ( __first ) );
    }
# 4266 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2 )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( * __first1 == * __iter )
     return __first1;
      return __last1;
    }
# 4305 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( __comp ( * __first1, * __iter ) )
     return __first1;
      return __last1;
    }
# 4337 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( * __first == * __next )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4369 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred )
    {





      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( __binary_pred ( * __first, * __next ) )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    typename iterator_traits < _InputIterator > :: difference_type
    count ( _InputIterator __first, _InputIterator __last, const _Tp & __value )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( * __first == __value )
   ++ __n;
      return __n;
    }
# 4426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    typename iterator_traits < _InputIterator > :: difference_type
    count_if ( _InputIterator __first, _InputIterator __last, _Predicate __pred )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   ++ __n;
      return __n;
    }
# 4466 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;


      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __p1 ( __first2 );
      if ( ++ __p1 == __last2 )
 return std :: find ( __first1, __last1, * __first2 );


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;; )
 {
   __first1 = std :: find ( __first1, __last1, * __first2 );
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( * __current == * __p )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 4537 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate )
    {






      ;
      ;


      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __p1 ( __first2 );
      if ( ++ __p1 == __last2 )
 {
   while ( __first1 != __last1
   && ! bool ( __predicate ( * __first1, * __first2 ) ) )
     ++ __first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;; )
 {
   while ( __first1 != __last1
   && ! bool ( __predicate ( * __first1, * __first2 ) ) )
     ++ __first1;
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( __predicate ( * __current, * __p ) )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 4611 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 return std :: find ( __first, __last, __val );
      return std :: __search_n ( __first, __last, __count, __val,
        std :: __iterator_category ( __first ) );
    }
# 4647 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val,
      _BinaryPredicate __binary_pred )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 {
   while ( __first != __last && ! bool ( __binary_pred ( * __first, __val ) ) )
     ++ __first;
   return __first;
 }
      return std :: __search_n ( __first, __last, __count, __val, __binary_pred,
        std :: __iterator_category ( __first ) );
    }
# 4689 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation >
    _OutputIterator
    transform ( _InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op )
    {





      ;

      for (; __first != __last; ++ __first, ++ __result )
 * __result = __unary_op ( * __first );
      return __result;
    }
# 4725 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation >
    _OutputIterator
    transform ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op )
    {






      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2, ++ __result )
 * __result = __binary_op ( * __first1, * __first2 );
      return __result;
    }
# 4758 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    void
    replace ( _ForwardIterator __first, _ForwardIterator __last,
     const _Tp & __old_value, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( * __first == __old_value )
   * __first = __new_value;
    }
# 4790 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Tp >
    void
    replace_if ( _ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   * __first = __new_value;
    }
# 4822 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Generator >
    void
    generate ( _ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen )
    {




      ;

      for (; __first != __last; ++ __first )
 * __first = __gen ( );
    }
# 4850 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _OutputIterator, typename _Size, typename _Generator >
    _OutputIterator
    generate_n ( _OutputIterator __first, _Size __n, _Generator __gen )
    {





      for (; __n > 0; -- __n, ++ __first )
 * __first = __gen ( );
      return __first;
    }
# 4886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result )
    {






      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 4925 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred )
    {




      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result, __binary_pred,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 4957 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {



      ;

      if ( __first != __last )
 for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
   std :: iter_swap ( __i, __first + ( std :: rand ( ) % ( ( __i - __first ) + 1 ) ) );
    }
# 4985 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _RandomNumberGenerator >
    void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator & __rand )
    {



      ;

      if ( __first == __last )
 return;
      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 std :: iter_swap ( __i, __first + __rand ( ( __i - __first ) + 1 ) );
    }
# 5017 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    inline _ForwardIterator
    partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      return std :: __partition ( __first, __last, __pred,
         std :: __iterator_category ( __first ) );
    }
# 5051 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      std :: __heap_select ( __first, __middle, __last );
      std :: sort_heap ( __first, __middle );
    }
# 5090 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      std :: __heap_select ( __first, __middle, __last, __comp );
      std :: sort_heap ( __first, __middle, __comp );
    }
# 5128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2 );
    }
# 5167 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
    }
# 5205 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2 );
   std :: __final_insertion_sort ( __first, __last );
 }
    }
# 5241 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
   std :: __final_insertion_sort ( __first, __last, __comp );
 }
    }
# 5282 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5302 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5345 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5366 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5405 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;





      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ) );
    }
# 5447 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;







      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last, __comp );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ), __comp );
    }
# 5493 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5514 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first1 < * __first2 )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5560 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5583 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5627 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5646 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   ++ __first1;
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 5684 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5705 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 5742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5761 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 5803 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5824 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 5861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5882 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2, std :: copy ( __first1,
          __last1, __result ) );
    }
# 5927 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5951 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2,
         std :: copy ( __first1, __last1, __result ) );
    }
# 5984 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __first < * __result )
   __result = __first;
      return __result;
    }
# 6012 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __first, * __result ) )
   __result = __first;
      return __result;
    }
# 6040 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __result < * __first )
   __result = __first;
      return __result;
    }
# 6068 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last ) return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __result, * __first ) )
   __result = __first;
      return __result;
    }
# 6088 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
namespace boost {
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
namespace numeric {
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline const T &
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
lower(const interval< T, Policies> &x)
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (x.lower());
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline const T &
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
upper(const interval< T, Policies> &x)
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (x.upper());
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline T
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
checked_lower(const interval< T, Policies> &x)
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(x)) {
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef typename Policies::checking checking;
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return checking::nan();
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (x.lower());
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline T
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
checked_upper(const interval< T, Policies> &x)
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(x)) {
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef typename Policies::checking checking;
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return checking::nan();
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (x.upper());
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline T
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
width(const interval< T, Policies> &x)
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) { return (T)0; }
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typename Policies::rounding rnd;
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (rnd.sub_up((x.upper()), (x.lower())));
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline T
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
median(const interval< T, Policies> &x)
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) {
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef typename Policies::checking checking;
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return checking::nan();
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typename Policies::rounding rnd;
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (rnd.median((x.lower()), (x.upper())));
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
widen(const interval< T, Policies> &x, const T &v)
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) {
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> ::empty(); }
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typename Policies::rounding rnd;
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> ((rnd.sub_down((x.lower()), v)), (rnd.add_up((x.upper()), v)), true);
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
empty(const interval< T, Policies> &x)
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval_lib::detail::test_input(x);
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
zero_in(const interval< T, Policies> &x)
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) { return false; }
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (!interval_lib::user::is_pos((x.lower()))) && (!interval_lib::user::is_neg((x.upper())));
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
in_zero(const interval< T, Policies> &x)
# 113 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return zero_in< T, Policies> (x);
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
in(const T &x, const interval< T, Policies> &y)
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) { return false; }
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return ((y.lower()) <= x) && (x <= (y.upper()));
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
subset(const interval< T, Policies> &x, const interval< T, Policies> &
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(x)) { return true; }
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return ((!empty(y)) && ((y.lower()) <= (x.lower()))) && ((x.upper()) <= (y.upper()));
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
proper_subset(const interval< T, Policies1> &x, const interval< T, Policies2> &
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(y)) { return false; }
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(x)) { return true; }
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (((y.lower()) <= (x.lower())) && ((x.upper()) <= (y.upper()))) && (((y.lower()) != (x.lower())) || ((x.upper()) != (y.upper())));
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
overlap(const interval< T, Policies1> &x, const interval< T, Policies2> &
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) { return false; }
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (((x.lower()) <= (y.lower())) && ((y.lower()) <= (x.upper()))) || (((y.lower()) <= (x.lower())) && ((x.lower()) <= (y.upper())));
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline bool
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
singleton(const interval< T, Policies> &x)
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return (!empty(x)) && ((x.lower()) == (x.upper()));
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 157 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
equal(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (empty(x)) { return empty(y); }
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return ((!empty(y)) && ((x.lower()) == (y.lower()))) && ((x.upper()) == (y.upper()));
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
intersect(const interval< T, Policies> &x, const interval< T, Policies> &
# 166 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> ::empty(); }
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
const T &l = (max((x.lower()), (y.lower())));
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
const T &u = (min((x.upper()), (y.upper())));
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (l <= u) { return interval< T, Policies> (l, u, true); } else {
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> ::empty(); }
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
hull(const interval< T, Policies> &x, const interval< T, Policies> &
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_x = (interval_lib::detail::test_input(x));
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_y = (interval_lib::detail::test_input(y));
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_x) {
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_y) { return interval< T, Policies> ::empty(); } else {
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return y; } } else {
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_y) { return x; } }
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> (min((x.lower()), (y.lower())), max((x.upper()), (y.upper())), true);
# 193 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
hull(const interval< T, Policies> &x, const T &y)
# 197 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_x = (interval_lib::detail::test_input(x));
# 201 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_y = (interval_lib::detail::test_input< T, Policies> (y));
# 202 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_y) {
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_x) { return interval< T, Policies> ::empty(); } else {
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return x; } } else {
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_x) { return interval< T, Policies> (y, y, true); } }
# 207 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> (min((x.lower()), y), max((x.upper()), y), true);
# 209 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
hull(const T &x, const interval< T, Policies> &y)
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_x = (interval_lib::detail::test_input< T, Policies> (x));
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bool bad_y = (interval_lib::detail::test_input(y));
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_x) {
# 219 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_y) { return interval< T, Policies> ::empty(); } else {
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return y; } } else {
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (bad_y) { return interval< T, Policies> (x, x, true); } }
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, Policies> (min(x, (y.lower())), max(x, (y.upper())), true);
# 225 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T> inline interval< T, typename interval_lib::default_policies< T> ::type>
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
hull(const T &x, const T &y)
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return interval< T, typename interval_lib::default_policies< T> ::type> ::hull(x, y);
# 231 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline std::pair< interval< T, Policies> , interval< T, Policies> >
# 235 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
bisect(const interval< T, Policies> &x)
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 237 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) {
# 239 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return std::pair< interval< T, Policies> , interval< T, Policies> > (I::empty(), I::empty()); }
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
const T m = (median(x));
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return std::pair< interval< T, Policies> , interval< T, Policies> > (I((x.lower()), m, true), I(m, (x.upper()), true));
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 248 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline T
# 249 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
norm(const interval< T, Policies> &x)
# 250 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 251 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 252 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) {
# 253 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef typename Policies::checking checking;
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return checking::nan();
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 257 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return max(static_cast< T>((-(x.lower()))), (x.upper()));
# 258 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
abs(const interval< T, Policies> &x)
# 262 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 264 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x)) {
# 265 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 266 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (!interval_lib::user::is_neg((x.lower()))) { return x; }
# 267 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (!interval_lib::user::is_pos((x.upper()))) { return -x; }
# 268 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 269 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I((T)0, max(static_cast< T>((-(x.lower()))), (x.upper())), true);
# 270 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 272 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 273 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
max(const interval< T, Policies> &x, const interval< T, Policies> &
# 274 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 275 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 276 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 277 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 278 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 279 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 280 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(max((x.lower()), (y.lower())), max((x.upper()), (y.upper())), true);
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 283 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 284 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
max(const interval< T, Policies> &x, const T &y)
# 285 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 286 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 287 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 288 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 289 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 290 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(max((x.lower()), y), max((x.upper()), y), true);
# 291 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 293 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 294 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
max(const T &x, const interval< T, Policies> &y)
# 295 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 296 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 297 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 298 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 299 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::max;
# 300 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(max(x, (y.lower())), max(x, (y.upper())), true);
# 301 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 303 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 304 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
min(const interval< T, Policies> &x, const interval< T, Policies> &
# 305 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
y)
# 306 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 307 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 308 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 309 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 310 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 311 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(min((x.lower()), (y.lower())), min((x.upper()), (y.upper())), true);
# 312 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 314 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 315 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
min(const interval< T, Policies> &x, const T &y)
# 316 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 317 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 318 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 319 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 320 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 321 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(min((x.lower()), y), min((x.upper()), y), true);
# 322 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 324 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 325 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
min(const T &x, const interval< T, Policies> &y)
# 326 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
{
# 327 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
typedef interval< T, Policies> I;
# 328 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 329 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I::empty(); }
# 330 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
using std::min;
# 331 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
return I(min(x, (y.lower())), min(x, (y.upper())), true);
# 332 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 334 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 335 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/utility.hpp"
}
# 17 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
namespace boost {
# 18 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
namespace numeric {
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
namespace interval_lib {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
namespace compare {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
namespace set {
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator<(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return proper_subset(x, y);
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator<(const interval< T, Policies> &x, const T &y)
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator<=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return subset(x, y);
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator<=(const interval< T, Policies> &x, const T &y)
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator>(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return proper_subset(y, x);
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator>(const interval< T, Policies> &x, const T &y)
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator>=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return subset(y, x);
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator>=(const interval< T, Policies> &x, const T &y)
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator==(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return equal(y, x);
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator==(const interval< T, Policies> &x, const T &y)
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies1, class Policies2> inline bool
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator!=(const interval< T, Policies1> &x, const interval< T, Policies2> &y)
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
return !equal(y, x);
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
template< class T, class Policies> inline bool
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
operator!=(const interval< T, Policies> &x, const T &y)
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
{
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
throw comparison_error();
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/compare/set.hpp"
}
# 19 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
namespace boost {
# 20 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
namespace numeric {
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
namespace interval_lib {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
namespace detail {
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_non_zero(const interval< T, Policies> &x, const interval< T, Policies> &
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
y)
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xl = ((x.lower()));
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xu = ((x.upper()));
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yl = ((y.lower()));
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yu = ((y.upper()));
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xu)) {
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(yu)) {
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xu, yl)), (rnd.div_up(xl, yu)), true); } else {
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xl, yl)), (rnd.div_up(xu, yu)), true); } } else {
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xl)) {
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(yu)) {
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xu, yu)), (rnd.div_up(xl, yu)), true); } else {
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xl, yl)), (rnd.div_up(xu, yl)), true); } } else {
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(yu)) {
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xu, yu)), (rnd.div_up(xl, yl)), true); } else {
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xl, yu)), (rnd.div_up(xu, yl)), true); } } }
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_non_zero(const T &x, const interval< T, Policies> &y)
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yl = ((y.lower()));
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yu = ((y.upper()));
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(x)) {
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(x, yl)), (rnd.div_up(x, yu)), true); } else {
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(x, yu)), (rnd.div_up(x, yl)), true); }
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_positive(const interval< T, Policies> &x, const T &yu)
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero((x.lower())) && user::is_zero((x.upper()))) {
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return x; }
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xl = ((x.lower()));
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xu = ((x.upper()));
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xu)) {
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), (rnd.div_up(xu, yu)), true); } else {
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xl)) {
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), checking::pos_inf(), true); } else {
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xl, yu)), checking::pos_inf(), true); } }
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_positive(const T &x, const T &yu)
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero(x)) {
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((T)0, (T)0, true); }
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(x)) {
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), (rnd.div_up(x, yu)), true); } else {
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(x, yu)), checking::pos_inf(), true); }
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_negative(const interval< T, Policies> &x, const T &yl)
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero((x.lower())) && user::is_zero((x.upper()))) {
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return x; }
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xl = ((x.lower()));
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xu = ((x.upper()));
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 113 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xu)) {
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(xu, yl)), checking::pos_inf(), true); } else {
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xl)) {
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), checking::pos_inf(), true); } else {
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), (rnd.div_up(xl, yl)), true); } }
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_negative(const T &x, const T &yl)
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero(x)) {
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((T)0, (T)0, true); }
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(x)) {
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down(x, yl)), checking::pos_inf(), true); } else {
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I(checking::neg_inf(), (rnd.div_up(x, yl)), true); }
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_zero(const interval< T, Policies> &x)
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero((x.lower())) && user::is_zero((x.upper()))) {
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return x; } else {
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return interval< T, Policies> ::whole(); }
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_zero(const T &x)
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero(x)) {
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return interval< T, Policies> ((T)0, (T)0, true); } else {
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return interval< T, Policies> ::whole(); }
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_zero_part1(const interval< T, Policies> &x, const interval< T, Policies> &
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
y, bool &b)
# 156 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_zero((x.lower())) && user::is_zero((x.upper())))
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{ b = false; return x; }
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xl = ((x.lower()));
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &xu = ((x.upper()));
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yl = ((y.lower()));
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
const T &yu = ((y.upper()));
# 166 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xu))
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{ b = true; return I(checking::neg_inf(), (rnd.div_up(xu, yu)), true); } else {
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg(xl))
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{ b = false; return I(checking::neg_inf(), checking::pos_inf(), true); } else
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{ b = true; return I(checking::neg_inf(), (rnd.div_up(xl, yl)), true); } }
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
div_zero_part2(const interval< T, Policies> &x, const interval< T, Policies> &
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
y)
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
{
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typename Policies::rounding rnd;
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef interval< T, Policies> I;
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
typedef typename Policies::checking checking;
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
if (user::is_neg((x.upper()))) {
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down((x.upper()), (y.lower()))), checking::pos_inf(), true); } else {
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
return I((rnd.div_down((x.lower()), (y.upper()))), checking::pos_inf(), true); }
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/detail/division.hpp"
}
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
namespace boost {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
namespace numeric {
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline const interval< T, Policies> &
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator+(const interval< T, Policies> &x)
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return x;
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator-(const interval< T, Policies> &x)
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x)) {
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> (-(x.upper()), -(x.lower()), true);
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator+=(const numeric::interval< T, Policies> &r)
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(*this, r)) {
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set_empty(); } else
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set((rnd.add_down(low, r.low)), (rnd.add_up(up, r.up)));
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return *this;
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator+=(const T &r)
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(*this, r)) {
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set_empty(); } else
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set((rnd.add_down(low, r)), (rnd.add_up(up, r)));
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return *this;
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator-=(const numeric::interval< T, Policies> &r)
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(*this, r)) {
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set_empty(); } else
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set((rnd.sub_down(low, r.up)), (rnd.sub_up(up, r.low)));
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return *this;
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator-=(const T &r)
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(*this, r)) {
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set_empty(); } else
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
this->set((rnd.sub_down(low, r)), (rnd.sub_up(up, r)));
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return *this;
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator*=(const numeric::interval< T, Policies> &r)
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return (*this) = ((*this) * r);
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator*=(const T &r)
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return (*this) = (r * (*this));
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator/=(const numeric::interval< T, Policies> &r)
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return (*this) = ((*this) / r);
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies> &
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
interval< T, Policies> ::operator/=(const T &r)
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return (*this) = ((*this) / r);
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator+(const interval< T, Policies> &x, const interval< T, Policies> &
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
y)
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.add_down((x.lower()), (y.lower()))), (rnd.add_up((x.upper()), (y.upper()))), true);
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator+(const T &x, const interval< T, Policies> &y)
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.add_down(x, (y.lower()))), (rnd.add_up(x, (y.upper()))), true);
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator+(const interval< T, Policies> &x, const T &y)
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{ return y + x; }
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator-(const interval< T, Policies> &x, const interval< T, Policies> &
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
y)
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.sub_down((x.lower()), (y.upper()))), (rnd.sub_up((x.upper()), (y.lower()))), true);
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator-(const T &x, const interval< T, Policies> &y)
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 156 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.sub_down(x, (y.upper()))), (rnd.sub_up(x, (y.lower()))), true);
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator-(const interval< T, Policies> &x, const T &y)
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 166 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.sub_down((x.lower()), y)), (rnd.sub_up((x.upper()), y)), true);
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator*(const interval< T, Policies> &x, const interval< T, Policies> &
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
y)
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
using std::min;
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
using std::max;
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typedef interval< T, Policies> I;
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I::empty(); }
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &xl = ((x.lower()));
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &xu = ((x.upper()));
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &yl = ((y.lower()));
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &yu = ((y.upper()));
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(xl)) {
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(xu)) {
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(yl)) {
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I(min((rnd.mul_down(xl, yu)), (rnd.mul_down(xu, yl))), max((rnd.mul_up(xl, yl)), (rnd.mul_up(xu, yu))), true); } else {
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xu, yl)), (rnd.mul_up(xl, yl)), true); } } else {
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xl, yu)), (rnd.mul_up(xu, yu)), true); } else {
# 197 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((T)0, (T)0, true); } } } else {
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(yl)) {
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 201 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xl, yu)), (rnd.mul_up(xl, yl)), true); } else {
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xu, yu)), (rnd.mul_up(xl, yl)), true); } } else {
# 205 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xl, yu)), (rnd.mul_up(xu, yl)), true); } else {
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((T)0, (T)0, true); } } } } else {
# 210 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(xu)) {
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(yl)) {
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xu, yl)), (rnd.mul_up(xu, yu)), true); } else {
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xu, yl)), (rnd.mul_up(xl, yu)), true); } } else {
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_pos(yu)) {
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(xl, yl)), (rnd.mul_up(xu, yu)), true); } else {
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((T)0, (T)0, true); } } } else {
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((T)0, (T)0, true); } }
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 225 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator*(const T &x, const interval< T, Policies> &y)
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typedef interval< T, Policies> I;
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I::empty(); }
# 231 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &yl = ((y.lower()));
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &yu = ((y.upper()));
# 235 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(x)) {
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(x, yu)), (rnd.mul_up(x, yl)), true); } else {
# 237 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_zero(x)) {
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((T)0, (T)0, true); } else {
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return I((rnd.mul_down(x, yl)), (rnd.mul_up(x, yu)), true); } }
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 243 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator*(const interval< T, Policies> &x, const T &y)
# 245 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{ return y * x; }
# 247 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 248 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator/(const interval< T, Policies> &x, const interval< T, Policies> &
# 249 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
y)
# 250 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 251 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 252 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 253 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (zero_in(y)) {
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.lower()))) {
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.upper()))) {
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_zero(x); } else {
# 258 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_negative(x, (y.lower())); } } else {
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.upper()))) {
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_positive(x, (y.upper())); } else {
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); } } } else {
# 265 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_non_zero(x, y); }
# 266 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 268 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 269 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator/(const T &x, const interval< T, Policies> &y)
# 270 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 271 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 272 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 273 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (zero_in(y)) {
# 274 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.lower()))) {
# 275 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.upper()))) {
# 276 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_zero< T, Policies> (x); } else {
# 278 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_negative< T, Policies> (x, (y.lower())); } } else {
# 280 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (!interval_lib::user::is_zero((y.upper()))) {
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_positive< T, Policies> (x, (y.upper())); } else {
# 283 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); } } } else {
# 285 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval_lib::detail::div_non_zero(x, y); }
# 286 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 288 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 289 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
operator/(const interval< T, Policies> &x, const T &y)
# 290 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
{
# 291 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::detail::test_input(x, y) || interval_lib::user::is_zero(y)) {
# 292 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ::empty(); }
# 293 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
typename Policies::rounding rnd;
# 294 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &xl = ((x.lower()));
# 295 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
const T &xu = ((x.upper()));
# 296 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
if (interval_lib::user::is_neg(y)) {
# 297 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.div_down(xu, y)), (rnd.div_up(xl, y)), true); } else {
# 299 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
return interval< T, Policies> ((rnd.div_down(xl, y)), (rnd.div_up(xu, y)), true); }
# 300 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 302 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 303 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith.hpp"
}
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace boost {
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace numeric {
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
fmod(const interval< T, Policies> &x, const interval< T, Policies> &
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
y)
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return interval< T, Policies> ::empty(); }
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type I;
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
const T &yb = ((interval_lib::user::is_neg((x.lower()))) ? (y.lower()) : (y.upper()));
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T n = ((rnd.int_down((rnd.div_down((x.lower()), yb)))));
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return ((const I &)x) - (n * ((const I &)y));
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
fmod(const interval< T, Policies> &x, const T &y)
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return interval< T, Policies> ::empty(); }
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type I;
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T n = ((rnd.int_down((rnd.div_down((x.lower()), y)))));
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return ((const I &)x) - (n * ((I)(y)));
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
fmod(const T &x, const interval< T, Policies> &y)
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x, y)) {
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return interval< T, Policies> ::empty(); }
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type I;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
const T &yb = ((interval_lib::user::is_neg(x)) ? (y.lower()) : (y.upper()));
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T n = ((rnd.int_down((rnd.div_down(x, yb)))));
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return x - (n * ((const I &)y));
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace interval_lib {
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
division_part1(const interval< T, Policies> &x, const interval< T, Policies> &
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
y, bool &b)
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
b = false;
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (detail::test_input(x, y)) {
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); }
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (zero_in(y)) {
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((y.lower()))) {
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((y.upper()))) {
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return detail::div_zero_part1(x, y, b); } else {
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return detail::div_negative(x, (y.lower())); } } else {
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((y.upper()))) {
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return detail::div_positive(x, (y.upper())); } else {
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); } } } else {
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return detail::div_non_zero(x, y); }
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
division_part2(const interval< T, Policies> &x, const interval< T, Policies> &
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
y, bool b = true)
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!b) { return interval< T, Policies> ::empty(); }
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return detail::div_zero_part2(x, y);
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 101 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
multiplicative_inverse(const interval< T, Policies> &x)
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (detail::test_input(x)) {
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); }
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T one = ((T)1);
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (zero_in(x)) {
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename Policies::checking checking;
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((x.lower()))) {
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((x.upper()))) {
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::whole(); } else {
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(checking::neg_inf(), (rnd.div_up(one, (x.lower()))), true); } } else {
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!user::is_zero((x.upper()))) {
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((rnd.div_down(one, (x.upper()))), checking::pos_inf(), true); } else {
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); } }
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} else {
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((rnd.div_down(one, (x.upper()))), (rnd.div_up(one, (x.lower()))), true); }
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace detail {
# 126 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Rounding> inline T
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pow_dn(const T &x_, int pwr, Rounding &rnd)
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T x = (x_);
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T y = ((pwr & 1) ? x_ : ((T)1));
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pwr >>= 1;
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
while (pwr > 0) {
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
x = (rnd.mul_down(x, x));
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr & 1) { y = (rnd.mul_down(x, y)); }
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pwr >>= 1;
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return y;
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Rounding> inline T
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pow_up(const T &x_, int pwr, Rounding &rnd)
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T x = (x_);
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T y = ((pwr & 1) ? x_ : ((T)1));
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pwr >>= 1;
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
while (pwr > 0) {
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
x = (rnd.mul_up(x, x));
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr & 1) { y = (rnd.mul_up(x, y)); }
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pwr >>= 1;
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return y;
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 157 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
pow(const interval< T, Policies> &x, int pwr)
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
using std::max;
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
using interval_lib::detail::pow_dn;
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
using interval_lib::detail::pow_up;
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x)) {
# 166 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); }
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr == 0) {
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::user::is_zero((x.lower())) && interval_lib::user::is_zero((x.upper()))) {
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); } else {
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return ((I)((T)1)); } } else {
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr < 0) {
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return interval_lib::multiplicative_inverse(pow(x, -pwr)); } }
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::user::is_neg((x.upper()))) {
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T yl = (pow_dn(static_cast< T>((-(x.upper()))), pwr, rnd));
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T yu = (pow_up(static_cast< T>((-(x.lower()))), pwr, rnd));
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr & 1) {
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(-yu, -yl, true); } else {
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(yl, yu, true); }
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} else { if (interval_lib::user::is_neg((x.lower()))) {
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (pwr & 1) {
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(-pow_up(-(x.lower()), pwr, rnd), pow_up((x.upper()), pwr, rnd), true);
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} else {
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((T)0, pow_up(max(static_cast< T>((-(x.lower()))), (x.upper())), pwr, rnd), true);
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} else {
# 193 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(pow_dn((x.lower()), pwr, rnd), pow_up((x.upper()), pwr, rnd), true);
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} }
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 197 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
sqrt(const interval< T, Policies> &x)
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 201 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x) || interval_lib::user::is_neg((x.upper()))) {
# 202 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); }
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T l = ((!interval_lib::user::is_pos((x.lower()))) ? ((T)0) : (rnd.sqrt_down((x.lower()))));
# 205 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(l, (rnd.sqrt_up((x.upper()))), true);
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 209 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
square(const interval< T, Policies> &x)
# 210 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x)) {
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); }
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
const T &xl = ((x.lower()));
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
const T &xu = ((x.upper()));
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::user::is_neg(xu)) {
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((rnd.mul_down(xu, xu)), (rnd.mul_up(xl, xl)), true); } else {
# 219 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::user::is_pos((x.lower()))) {
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((rnd.mul_down(xl, xl)), (rnd.mul_up(xu, xu)), true); } else {
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((T)0, ((-xl) > xu) ? (rnd.mul_up(xl, xl)) : (rnd.mul_up(xu, xu)), true); } }
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 225 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace interval_lib {
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
namespace detail {
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class I> inline I
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
root_aux(const typename I::base_type &x, int k)
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 231 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename I::base_type T;
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T tk(k);
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
I y((T)1, x, true);
# 234 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
for (; ;) {
# 235 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T y0 = (median(y));
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
I yy = (intersect(y, y0 - ((pow(I(y0, y0, true), k) - x) / (tk * pow(y, k - 1)))));
# 237 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (equal(y, yy)) { return y; }
# 238 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
y = yy;
# 239 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class I> inline typename I::base_type
# 243 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
root_aux_dn(const typename I::base_type &x, int k)
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 245 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename I::base_type T;
# 246 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename I::traits_type Policies;
# 247 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename I::traits_type::rounding rnd;
# 248 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T one(1);
# 249 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (x > one) { return (root_aux< I> (x, k).lower()); }
# 250 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (x == one) { return one; }
# 251 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return (rnd.div_down(one, (root_aux< I> ((rnd.div_up(one, x)), k).upper())));
# 252 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class I> inline typename I::base_type
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
root_aux_up(const typename I::base_type &x, int k)
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 257 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename I::base_type T;
# 258 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename I::traits_type Policies;
# 259 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename I::traits_type::rounding rnd;
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T one(1);
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (x > one) { return (root_aux< I> (x, k).upper()); }
# 262 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (x == one) { return one; }
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return (rnd.div_up(one, (root_aux< I> ((rnd.div_down(one, x)), k).lower())));
# 264 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 266 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 267 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 269 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 270 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
nth_root(const interval< T, Policies> &x, int k)
# 271 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 272 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef interval< T, Policies> I;
# 273 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::detail::test_input(x)) { return I::empty(); }
# 274 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
(k > 0) ? (static_cast< void>(0)) : __assert_fail("k > 0", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp", 274, __PRETTY_FUNCTION__);
# 275 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (k == 1) { return x; }
# 276 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typename Policies::rounding rnd;
# 277 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type R;
# 278 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!interval_lib::user::is_pos((x.upper()))) {
# 279 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (interval_lib::user::is_zero((x.upper()))) {
# 280 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T zero(0);
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if ((!(k & 1)) || interval_lib::user::is_zero((x.lower()))) {
# 282 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(zero, zero, true); } else {
# 284 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(-interval_lib::detail::root_aux_up< typename interval_lib::unprotect< interval< T, Policies> > ::type> (-(x.lower()), k), zero, true); }
# 285 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} else { if (!(k & 1)) {
# 286 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I::empty(); } else
# 287 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
{
# 288 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(-interval_lib::detail::root_aux_up< typename interval_lib::unprotect< interval< T, Policies> > ::type> (-(x.lower()), k), -interval_lib::detail::root_aux_dn< typename interval_lib::unprotect< interval< T, Policies> > ::type> (-(x.upper()), k), true);
# 290 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
} }
# 291 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 292 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
T u = (interval_lib::detail::root_aux_up< typename interval_lib::unprotect< interval< T, Policies> > ::type> ((x.upper()), k));
# 293 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if (!interval_lib::user::is_pos((x.lower()))) {
# 294 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
if ((!(k & 1)) || interval_lib::user::is_zero((x.lower()))) {
# 295 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I((T)0, u, true); } else {
# 297 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(-interval_lib::detail::root_aux_up< typename interval_lib::unprotect< interval< T, Policies> > ::type> (-(x.lower()), k), u, true); } } else {
# 299 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
return I(interval_lib::detail::root_aux_dn< typename interval_lib::unprotect< interval< T, Policies> > ::type> ((x.lower()), k), u, true); }
# 300 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 302 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 303 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith2.hpp"
}
# 21 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
namespace boost {
# 22 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
namespace numeric {
# 23 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
namespace interval_lib {
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
template< class I> inline I
# 26 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
add(const typename I::base_type &x, const typename I::base_type &y)
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
{
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typedef typename I::traits_type Policies;
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
if (detail::test_input< typename I::base_type, typename I::traits_type> (x, y)) {
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I::empty(); }
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typename I::traits_type::rounding rnd;
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I((rnd.add_down(x, y)), (rnd.add_up(x, y)), true);
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
template< class I> inline I
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
sub(const typename I::base_type &x, const typename I::base_type &y)
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
{
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typedef typename I::traits_type Policies;
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
if (detail::test_input< typename I::base_type, typename I::traits_type> (x, y)) {
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I::empty(); }
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typename I::traits_type::rounding rnd;
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I((rnd.sub_down(x, y)), (rnd.sub_up(x, y)), true);
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
template< class I> inline I
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
mul(const typename I::base_type &x, const typename I::base_type &y)
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
{
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typedef typename I::traits_type Policies;
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
if (detail::test_input< typename I::base_type, typename I::traits_type> (x, y)) {
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I::empty(); }
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typename I::traits_type::rounding rnd;
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I((rnd.mul_down(x, y)), (rnd.mul_up(x, y)), true);
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
template< class I> inline I
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
div(const typename I::base_type &x, const typename I::base_type &y)
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
{
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typedef typename I::traits_type Policies;
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
if (detail::test_input< typename I::base_type, typename I::traits_type> (x, y) || user::is_zero(y)) {
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I::empty(); }
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
typename I::traits_type::rounding rnd;
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
return I((rnd.div_down(x, y)), (rnd.div_up(x, y)), true);
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/arith3.hpp"
}
# 24 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
namespace boost {
# 25 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
namespace numeric {
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
exp(const interval< T, Policies> &x)
# 29 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 32 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 33 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.exp_down((x.lower()))), (rnd.exp_up((x.upper()))), true);
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 37 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
log(const interval< T, Policies> &x)
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x) || (!interval_lib::user::is_pos((x.upper())))) {
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef typename Policies::checking checking;
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = ((!interval_lib::user::is_pos((x.lower()))) ? checking::neg_inf() : (rnd.log_down((x.lower()))));
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I(l, (rnd.log_up((x.upper()))), true);
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
cos(const interval< T, Policies> &x)
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return interval< T, Policies> ::empty(); }
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type R;
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
const R pi2 = (interval_lib::pi_twice< typename interval_lib::unprotect< interval< T, Policies> > ::type> ());
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
R tmp = (fmod((const R &)x, pi2));
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (width(tmp) >= (pi2.lower())) {
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((T)(-1), (T)1, true); }
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if ((tmp.lower()) >= interval_lib::constants::pi_upper< T> ()) {
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return -cos(tmp - interval_lib::pi< typename interval_lib::unprotect< interval< T, Policies> > ::type> ()); }
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = ((tmp.lower()));
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T u = ((tmp.upper()));
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
using std::min;
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (u <= interval_lib::constants::pi_lower< T> ()) {
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.cos_down(u)), (rnd.cos_up(l)), true); } else {
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (u <= (pi2.lower())) {
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((T)(-1), (rnd.cos_up(min((rnd.sub_down((pi2.lower()), u)), l))), true); } else {
# 77 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((T)(-1), (T)1, true); } }
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
sin(const interval< T, Policies> &x)
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 86 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type R;
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
I r = cos(((const R &)x) - interval_lib::pi_half< typename interval_lib::unprotect< interval< T, Policies> > ::type> ());
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
(void)(&rnd);
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return r;
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
tan(const interval< T, Policies> &x)
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef typename interval_lib::unprotect< interval< T, Policies> > ::type R;
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
const R pi = (interval_lib::pi< typename interval_lib::unprotect< interval< T, Policies> > ::type> ());
# 104 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
R tmp = (fmod((const R &)x, pi));
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
const T pi_half_d = (interval_lib::constants::pi_half_lower< T> ());
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if ((tmp.lower()) >= pi_half_d) {
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
tmp -= pi; }
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (((tmp.lower()) <= (-pi_half_d)) || ((tmp.upper()) >= pi_half_d)) {
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::whole(); }
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.tan_down((tmp.lower()))), (rnd.tan_up((tmp.upper()))), true);
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 113 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
asin(const interval< T, Policies> &x)
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 117 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if ((interval_lib::detail::test_input(x) || ((x.upper()) < ((T)(-1)))) || ((x.lower()) > ((T)1))) {
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = (((x.lower()) <= ((T)(-1))) ? (-interval_lib::constants::pi_half_upper< T> ()) : (rnd.asin_down((x.lower()))));
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T u = (((x.upper()) >= ((T)1)) ? interval_lib::constants::pi_half_upper< T> () : (rnd.asin_up((x.upper()))));
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I(l, u, true);
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
acos(const interval< T, Policies> &x)
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if ((interval_lib::detail::test_input(x) || ((x.upper()) < ((T)(-1)))) || ((x.lower()) > ((T)1))) {
# 136 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = (((x.upper()) >= ((T)1)) ? ((T)0) : (rnd.acos_down((x.upper()))));
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T u = (((x.lower()) <= ((T)(-1))) ? interval_lib::constants::pi_upper< T> () : (rnd.acos_up((x.lower()))));
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I(l, u, true);
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 148 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
atan(const interval< T, Policies> &x)
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 154 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.atan_down((x.lower()))), (rnd.atan_up((x.upper()))), true);
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 157 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
sinh(const interval< T, Policies> &x)
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 160 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 161 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.sinh_down((x.lower()))), (rnd.sinh_up((x.upper()))), true);
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 167 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
cosh(const interval< T, Policies> &x)
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 171 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 172 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::user::is_neg((x.upper()))) {
# 175 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.cosh_down((x.upper()))), (rnd.cosh_up((x.lower()))), true); } else {
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (!interval_lib::user::is_neg((x.lower()))) {
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.cosh_down((x.lower()))), (rnd.cosh_up((x.upper()))), true); } else {
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((T)0, (rnd.cosh_up(((-(x.lower())) > (x.upper())) ? (x.lower()) : (x.upper()))), true); } }
# 180 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
tanh(const interval< T, Policies> &x)
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 187 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.tanh_down((x.lower()))), (rnd.tanh_up((x.upper()))), true);
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 192 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 193 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
asinh(const interval< T, Policies> &x)
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x)) {
# 197 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I((rnd.asinh_down((x.lower()))), (rnd.asinh_up((x.upper()))), true);
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 202 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
acosh(const interval< T, Policies> &x)
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 205 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 206 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if (interval_lib::detail::test_input(x) || ((x.upper()) < ((T)1))) {
# 207 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 209 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = (((x.lower()) <= ((T)1)) ? ((T)0) : (rnd.acosh_down((x.lower()))));
# 210 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I(l, (rnd.acosh_up((x.upper()))), true);
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
template< class T, class Policies> inline interval< T, Policies>
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
atanh(const interval< T, Policies> &x)
# 215 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
{
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef interval< T, Policies> I;
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
if ((interval_lib::detail::test_input(x) || ((x.upper()) < ((T)(-1)))) || ((x.lower()) > ((T)1))) {
# 219 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I::empty(); }
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typename Policies::rounding rnd;
# 221 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
typedef typename Policies::checking checking;
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T l = (((x.lower()) <= ((T)(-1))) ? checking::neg_inf() : (rnd.atanh_down((x.lower()))));
# 224 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
T u = (((x.upper()) >= ((T)1)) ? checking::pos_inf() : (rnd.atanh_up((x.upper()))));
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
return I(l, u, true);
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 230 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/boost/numeric/interval/transc.hpp"
}
# 27 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
using boost::numeric::interval;
# 28 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
using namespace boost::numeric;
# 30 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class T, int N, int THREADS>
# 31 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
class global_stack_cpu {
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T *buf;
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
int free_index;
# 39 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
public: global_stack_cpu(T *buf, int thread_id) : buf(buf), free_index(thread_id)
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{ }
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
void push(const T &v) {
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
((buf)[free_index]) = v;
# 44 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(free_index) += THREADS;
# 45 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T pop() {
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(free_index) -= THREADS;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (buf)[free_index];
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 50 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
bool full() {
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (free_index) >= (N * THREADS);
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
bool empty() {
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (free_index) < THREADS;
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
int size() {
# 57 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (free_index) / THREADS;
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
};
# 63 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I> I
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
f_cpu(const I &x, int thread_id) {
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T alpha = ((-((T)(thread_id))) / ((T)(THREADS)));
# 67 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return square(x - ((I)(1))) + (((I)(alpha)) * x);
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 71 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I> I
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
fd_cpu(const I &x, int thread_id) {
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T alpha = ((-((T)(thread_id))) / ((T)(THREADS)));
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (((I)(2)) * x) + ((I)(alpha - 2));
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I> bool
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
is_minimal_cpu(const I &x, int thread_id)
# 81 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
const T epsilon_x = (9.999999975e-07F);
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
const T epsilon_y = (9.999999975e-07F);
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (!empty(x)) && ((width(x) <= (epsilon_x * abs(median(x)))) || (width(f_cpu(x, thread_id)) <= epsilon_y));
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 92 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I> bool
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
should_bisect_cpu(const I &x, const I &x1, const I &x2, typename I::base_type alpha)
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 95 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T wmax = (alpha * width(x));
# 97 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return (width(x1) > wmax) || (width(x2) > wmax);
# 98 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
static const int DEPTH_WORK = 128;
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I, int THREADS, int DEPTH_RESULT> void
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
newton_interval_cpu(global_stack_cpu< I, DEPTH_RESULT, THREADS> &result, const I &
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
ix0, int thread_id)
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
const T alpha = (0.9900000095F);
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I local_buffer[DEPTH_WORK];
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
global_stack_cpu< I, 128, 1> work(local_buffer, 0);
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I ix = (ix0);
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
while (true) {
# 123 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T x = (median(ix));
# 124 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I iq = (f_cpu(((I)(x)), thread_id));
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I id = (fd_cpu(ix, thread_id));
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
bool has_part2;
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I part1, part2;
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = division_part1(iq, id, has_part2);
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = intersect(((I)(x)) - part1, ix);
# 131 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2) {
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = division_part2(iq, id);
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = intersect(((I)(x)) - part2, ix);
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 137 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (is_minimal_cpu(part1, thread_id)) {
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(result.push(part1));
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = I::empty();
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 142 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2 && is_minimal_cpu(part2, thread_id)) {
# 143 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(result.push(part2));
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = I::empty();
# 145 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (should_bisect_cpu(ix, part1, part2, alpha)) {
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = I((ix.lower()), x);
# 151 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = I(x, (ix.upper()));
# 152 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
has_part2 = true;
# 153 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 155 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (!empty(part1)) {
# 158 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
ix = part1;
# 159 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2 && (!empty(part2))) {
# 162 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(work.push(part2));
# 163 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 164 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
} else {
# 165 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2 && (!empty(part2))) {
# 168 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
ix = part2;
# 169 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
} else
# 170 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 173 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if ((work.empty())) {
# 174 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
break; } else {
# 176 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
ix = (work.pop()); }
# 177 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
} }
# 178 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 179 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 181 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I, int THREADS, int DEPTH_RESULT> void
# 182 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
newton_interval_rec_cpu(global_stack_cpu< I, DEPTH_RESULT, THREADS> &result, const I &
# 183 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
ix, int thread_id)
# 184 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 185 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 186 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
const T alpha = (0.9900000095F);
# 188 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (is_minimal_cpu(ix, thread_id)) {
# 189 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(result.push(ix));
# 190 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
return;
# 191 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 194 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
T x = (median(ix));
# 195 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I iq = (f_cpu(((I)(x)), thread_id));
# 196 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I id = (fd_cpu(ix, thread_id));
# 198 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
bool has_part2;
# 199 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
I part1, part2;
# 200 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = division_part1(iq, id, has_part2);
# 201 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = intersect(((I)(x)) - part1, ix);
# 203 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2) {
# 204 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = division_part2(iq, id);
# 205 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = intersect(((I)(x)) - part2, ix);
# 207 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 208 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (should_bisect_cpu(ix, part1, part2, alpha)) {
# 211 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part1 = I((ix.lower()), x);
# 212 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
part2 = I(x, (ix.upper()));
# 213 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
has_part2 = true;
# 214 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 216 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (!empty(part1)) {
# 217 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
newton_interval_rec_cpu< I, THREADS, DEPTH_RESULT> (result, part1, thread_id);
# 218 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 220 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (has_part2 && (!empty(part2))) {
# 221 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
newton_interval_rec_cpu< I, THREADS, DEPTH_RESULT> (result, part2, thread_id);
# 222 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 223 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 226 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
template< class I> void
# 227 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
test_interval_newton_cpu(I *buffer, int *nresults, I i)
# 228 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 229 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef typename I::base_type T;
# 232 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
for (int thread_id = 0; thread_id != (BLOCK_SIZE * GRID_SIZE); ++thread_id) {
# 233 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
global_stack_cpu< I, 128, 65536> result(buffer, thread_id);
# 236 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
newton_interval_rec_cpu< I, THREADS> (result, i, thread_id);
# 240 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
(nresults[thread_id]) = (result.size());
# 241 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 242 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 244 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef boost::numeric::interval< double, boost::numeric::interval_lib::policies< boost::numeric::interval_lib::rounded_math< double> , boost::numeric::interval_lib::checking_base< double> > > Ibase;
# 250 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
typedef Ibase I_CPU;
# 253 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
void checkAgainstHost(int *h_nresults, int *h_nresults_cpu, I_CPU *h_result, I_CPU *h_result_cpu)
# 254 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 255 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
((std::cout) << (("\nCheck against Host computation...\n\n")));
# 256 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
int success = 1;
# 257 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
int success1 = 1;
# 258 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
int success2 = 1;
# 260 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if ((h_nresults_cpu[0]) == (h_nresults[0]))
# 261 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 262 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
for (int i = 0; i != (h_nresults[0]); ++i)
# 263 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 264 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
double diff1 = abs((h_result[(THREADS * i) + 0]).lower() - (h_result_cpu[(THREADS * i) + 0]).lower());
# 265 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
double diff2 = abs((h_result[(THREADS * i) + 0]).upper() - (h_result_cpu[(THREADS * i) + 0]).upper());
# 266 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if ((diff1 > ((9.999999975e-07F))) || (diff2 > ((9.999999975e-07F))))
# 267 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 268 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
success1 = 0;
# 269 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
break;
# 270 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 271 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 274 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
for (int i = 0; i != (h_nresults[0]); ++i)
# 275 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 276 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
double diff1 = abs((h_result[(THREADS * i) + 0]).lower() - (h_result_cpu[(THREADS * (((h_nresults[0]) - i) - 1)) + 0]).lower());
# 277 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
double diff2 = abs((h_result[(THREADS * i) + 0]).upper() - (h_result_cpu[(THREADS * (((h_nresults[0]) - i) - 1)) + 0]).upper());
# 278 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if ((diff1 > ((9.999999975e-07F))) || (diff2 > ((9.999999975e-07F))))
# 279 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
{
# 280 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
success2 = 0;
# 281 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
break;
# 282 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 283 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 285 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
success = ((success1) || (success2));
# 286 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
} else {
# 288 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
success = 0; }
# 290 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
if (success == 1) {
# 291 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
((std::cout) << (("PASSED\n\n"))); } else {
# 293 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
((std::cout) << (("FAILED\n\n"))); }
# 294 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/cpu_interval.h"
}
# 34 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int main(int argc, char *argv[])
# 35 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 36 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int implementation_choice = 0;
# 38 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("[%s]  starting ...\n\n", sSDKsample);
# 40 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
if (argc > 1)
# 41 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 42 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
cutGetCmdLineArgumenti(argc, (const char **)argv, "n", (int *)(&implementation_choice));
# 43 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 46 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int devID = cutilChooseCudaDevice(argc, argv);
# 47 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
cudaDeviceProp deviceProp;
# 48 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
cudaGetDeviceProperties(&deviceProp, devID);
# 49 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("> GPU Device has Compute Capabilities SM %d.%d\n\n", deviceProp.major, deviceProp.minor);
# 51 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int version = (((deviceProp.major) * 16) + (deviceProp.minor));
# 52 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
if (version < 19) {
# 53 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("%s: requires minimum of Compute Capability 1.3 or higher, waiving test...\n", sSDKsample);
# 54 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("PASSED\n");
# 55 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
__cutilExit(argc, argv);
# 56 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 58 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
switch (implementation_choice)
# 59 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 60 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
case 0:
# 61 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("GPU naive implementation\n");
# 62 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
break;
# 64 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
case 1:
# 65 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("GPU optimized implementation\n");
# 66 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
break;
# 68 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
case 2:
# 69 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
if ((deviceProp.major) >= 2) {
# 70 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("GPU recursive implementation (requires Compute SM 2.0+)\n"); } else
# 72 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 73 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("GPU naive implementation is used instead of the recursive implementation, which requires a GPU with CUDA capability 2.0+\n");
# 74 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
implementation_choice = 0;
# 75 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 76 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
break;
# 78 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
default:
# 79 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
printf("GPU naive implementation\n");
# 80 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 82 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
interval_gpu< double> *d_result;
# 83 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int *d_nresults;
# 84 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int h_nresults[THREADS];
# 85 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
cudaEvent_t start, stop;
# 87 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaSetDevice(devID); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 87, "cudaSetDevice(devID)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 88 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaMalloc((void **)(&d_result), (THREADS * DEPTH_RESULT) * sizeof(*d_result)); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 88, "cudaMalloc((void**)&d_result, THREADS * DEPTH_RESULT * sizeof(*d_result))", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 89 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaMalloc((void **)(&d_nresults), (THREADS) * sizeof(*d_nresults)); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 89, "cudaMalloc((void**)&d_nresults, THREADS * sizeof(*d_nresults))", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 90 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventCreate(&start); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 90, "cudaEventCreate(&start)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 91 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventCreate(&stop); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 91, "cudaEventCreate(&stop)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 93 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
if ((deviceProp.major) >= 2)
# 94 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 96 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaFuncSetCacheConfig(test_interval_newton< double> , cudaFuncCachePreferL1); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 96, "cudaFuncSetCacheConfig(test_interval_newton<T>, cudaFuncCachePreferL1)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 99 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaThreadSetLimit(cudaLimitStackSize, 8192); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 99, "cudaThreadSetLimit (cudaLimitStackSize, 8192)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 100 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 102 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
interval_gpu< double> i(((0.009999999776F)), ((4.0F)));
# 103 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
((((((((((((std::cout) << (("Searching for roots in [")))) << (i.lower())))) << ((", ")))) << (i.upper())))) << (("]...\n")));
# 105 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventRecord(start, 0); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 105, "cudaEventRecord(start, 0)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 106 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
for (int it = 0; it < 100; ++it)
# 107 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 108 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
cudaConfigureCall(GRID_SIZE, BLOCK_SIZE) ? ((void)0) : (test_interval_newton< double> )(d_result, d_nresults, i, implementation_choice);
# 109 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaGetLastError(); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 109, "cudaGetLastError()", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 110 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 111 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventRecord(stop, 0); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 111, "cudaEventRecord(stop, 0)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 112 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaThreadSynchronize(); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 112, "cudaThreadSynchronize()", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 114 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
I_CPU *h_result = (new I_CPU [(65536 * 128)]);
# 115 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaMemcpy(h_result, d_result, (THREADS * DEPTH_RESULT) * sizeof(*d_result), cudaMemcpyDeviceToHost); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 115, "cudaMemcpy(h_result, d_result, THREADS * DEPTH_RESULT * sizeof(*d_result), cudaMemcpyDeviceToHost)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 116 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaMemcpy(h_nresults, d_nresults, (THREADS) * sizeof(*d_nresults), cudaMemcpyDeviceToHost); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 116, "cudaMemcpy(h_nresults, d_nresults, THREADS * sizeof(*d_nresults), cudaMemcpyDeviceToHost)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 118 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
(((((((std::cout) << (("Found ")))) << (((h_nresults)[0]))))) << ((" intervals that may contain the root(s)\n")));
# 119 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
((std::cout) << (std::setprecision(15)));
# 120 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
for (int i = 0; i != ((h_nresults)[0]); ++i)
# 121 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
{
# 122 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
((((((((((((((((((((std::cout) << ((" i[")))) << i))) << (("] ="))))) << ((" [")))) << ((h_result[(THREADS * i) + 0]).lower())))) << ((", ")))) << ((h_result[(THREADS * i) + 0]).upper())))) << (("]\n")));
# 125 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 127 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
float time;
# 128 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventElapsedTime(&time, start, stop); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 128, "cudaEventElapsedTime(&time, start, stop)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 129 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
(((((((std::cout) << (("Number of equations solved: ")))) << (THREADS)))) << (("\n")));
# 130 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
(((((((std::cout) << (("Time per equation: ")))) << ((((1000000.0F) * (time / ((float)THREADS))) / (100)))))) << ((" us\n")));
# 132 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventDestroy(start); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 132, "cudaEventDestroy(start)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 133 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaEventDestroy(stop); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 133, "cudaEventDestroy(stop)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 134 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaFree(d_result); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 134, "cudaFree(d_result)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 135 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
do { cudaError_t err = cudaFree(d_nresults); if (err != (cudaSuccess)) { printf("%s(%d): ERROR: %s returned %s (err#%d)\n", "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu", 135, "cudaFree(d_nresults)", cudaGetErrorString(err), err); exit(-1); } } while (0);
# 138 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
I_CPU i_cpu((0.009999999776F), (4.0F));
# 139 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
I_CPU *h_result_cpu = (new I_CPU [(65536 * 128)]);
# 140 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
int h_nresults_cpu[THREADS];
# 141 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
test_interval_newton_cpu< boost::numeric::interval< double, boost::numeric::interval_lib::policies< boost::numeric::interval_lib::rounded_math< double> , boost::numeric::interval_lib::checking_base< double> > > > (h_result_cpu, h_nresults_cpu, i_cpu);
# 144 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
checkAgainstHost(h_nresults, h_nresults_cpu, h_result, h_result_cpu);
# 146 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
delete [] h_result_cpu;
# 147 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
delete [] h_result;
# 149 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
__cutilExit(argc, argv); return 0;
# 150 "/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu"
}
# 1 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.stub.c"
# 1 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.stub.c" 1
# 1 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 1
# 91 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h"
extern "C" {

extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterSurface(
        void **fatCubinHandle,
  const struct surfaceReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int ext
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);



extern int atexit(void(*)(void)) throw();







}

static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

# 1 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h" 1
# 90 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 1 3
# 948 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/math_constants.h" 1 3
# 949 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 2 3
# 2973 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/crt/func_macro.h" 1 3
# 2974 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 2 3
# 4683 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak__)) double rsqrt(double a); double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

extern __attribute__((__weak__)) double rcbrt(double a); double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  }
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;



  if (__signbit(a))

  {
    t = -t;
  }
  return t;
}

extern __attribute__((__weak__)) double sinpi(double a); double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  }
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

extern __attribute__((__weak__)) double erfinv(double a); double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (fa == 1.0) {
      t = a * exp(1000.0);
    }
  } else if (fa >= 0.9375) {




    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {




    t = a * a - .87890625;
    p = .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q = t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {




    t = a * a - .5625;
    p = - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q = t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

extern __attribute__((__weak__)) double erfcinv(double a); double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);
    }
  }
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q = t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

extern __attribute__((__weak__)) float rsqrtf(float a); float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

extern __attribute__((__weak__)) float rcbrtf(float a); float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

extern __attribute__((__weak__)) float sinpif(float a); float sinpif(float a)
{
  return (float)sinpi((double)a);
}

extern __attribute__((__weak__)) float erfinvf(float a); float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

extern __attribute__((__weak__)) float erfcinvf(float a); float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}







extern __attribute__((__weak__)) int min(int a, int b); int min(int a, int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) unsigned int umin(unsigned int a, unsigned int b); unsigned int umin(unsigned int a, unsigned int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) long long int llmin(long long int a, long long int b); long long int llmin(long long int a, long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) unsigned long long int ullmin(unsigned long long int a, unsigned long long int b); unsigned long long int ullmin(unsigned long long int a, unsigned long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) int max(int a, int b); int max(int a, int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) unsigned int umax(unsigned int a, unsigned int b); unsigned int umax(unsigned int a, unsigned int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) long long int llmax(long long int a, long long int b); long long int llmax(long long int a, long long int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) unsigned long long int ullmax(unsigned long long int a, unsigned long long int b); unsigned long long int ullmax(unsigned long long int a, unsigned long long int b)
{
  return a > b ? a : b;
}
# 5006 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda3.2/cuda/bin/../include/math_functions_dbl_ptx3.h" 1 3
# 5007 "/usr/local/cuda3.2/cuda/bin/../include/math_functions.h" 2 3
# 91 "/usr/local/cuda3.2/cuda/bin/../include/common_functions.h" 2
# 164 "/usr/local/cuda3.2/cuda/bin/../include/crt/host_runtime.h" 2







#pragma pack()
# 2 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.stub.c" 2
# 1 "/tmp/tmpxft_000003ac_00000000-3_interval.fatbin.c" 1
# 1 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h" 1
# 83 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
extern "C" {
# 97 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* cubin;
} __cudaFatCubinEntry;
# 113 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* ptx;
} __cudaFatPtxEntry;
# 125 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatDebugEntryRec {
    char* gpuProfileName;
    char* debug;
    struct __cudaFatDebugEntryRec *next;
    unsigned int size;
} __cudaFatDebugEntry;

typedef struct __cudaFatElfEntryRec {
    char* gpuProfileName;
    char* elf;
    struct __cudaFatElfEntryRec *next;
    unsigned int size;
} __cudaFatElfEntry;

typedef enum {
      __cudaFatDontSearchFlag = (1 << 0),
      __cudaFatDontCacheFlag = (1 << 1),
      __cudaFatSassDebugFlag = (1 << 2)
} __cudaFatCudaBinaryFlag;
# 152 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* name;
} __cudaFatSymbol;
# 166 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatCudaBinaryRec {
    unsigned long magic;
    unsigned long version;
    unsigned long gpuInfoVersion;
    char* key;
    char* ident;
    char* usageMode;
    __cudaFatPtxEntry *ptx;
    __cudaFatCubinEntry *cubin;
    __cudaFatDebugEntry *debug;
    void* debugInfo;
    unsigned int flags;
    __cudaFatSymbol *exported;
    __cudaFatSymbol *imported;
    struct __cudaFatCudaBinaryRec *dependends;
    unsigned int characteristic;
    __cudaFatElfEntry *elf;
} __cudaFatCudaBinary;
# 203 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
    typedef enum {
        __cudaFatAvoidPTX,
        __cudaFatPreferBestCode,
        __cudaFatForcePTX
    } __cudaFatCompilationPolicy;
# 227 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
void fatGetCubinForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *cubin, char* *dbgInfoFile );
# 240 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
unsigned char fatCheckJitForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *ptx );
# 250 "/usr/local/cuda3.2/cuda/bin/../include/__cudaFatFormat.h"
void fatFreeCubin( char* cubin, char* dbgInfoFile );





void __cudaFatFreePTX( char* ptx );


}
# 2 "/tmp/tmpxft_000003ac_00000000-3_interval.fatbin.c" 2

asm(
".section .rodata\n"
".align 32\n"
"__deviceText_$compute_20$:\n"
".quad 0x6f69737265762e09,0x2e090a322e32206e,0x7320746567726174,0x2f2f090a30325f6d\n"
".quad 0x656c69706d6f6320,0x2f20687469772064,0x61636f6c2f727375,0x2e33616475632f6c\n"
".quad 0x6f2f616475632f32,0x696c2f34366e6570,0x2f090a65622f2f62,0x6e65706f766e202f\n"
".quad 0x6220322e33206363,0x206e6f20746c6975,0x2d39302d30313032,0x69762e090a0a3830\n"
".quad 0x662e20656c626973,0x61702e2820636e75,0x3436662e206d6172,0x72616475635f5f20\n"
".quad 0x6d395a5f5f667465,0x75725f7669645f79,0x6d395a5f20296464,0x75725f7669645f79\n"
".quad 0x7261702e28206464,0x203436662e206d61,0x6170616475635f5f,0x395a5f5f31666d72\n"
".quad 0x725f7669645f796d,0x61702e202c646475,0x3436662e206d6172,0x70616475635f5f20\n"
".quad 0x5a5f5f32666d7261,0x5f7669645f796d39,0x090a0a2964647572,0x656c62697369762e\n"
".quad 0x2820636e75662e20,0x2e206d617261702e,0x75635f5f20343666,0x5f5f667465726164\n"
".quad 0x7669645f796d395a,0x5f2029646464725f,0x7669645f796d395a,0x2e2820646464725f\n"
".quad 0x662e206d61726170,0x6475635f5f203436,0x5f31666d72617061,0x69645f796d395a5f\n"
".quad 0x202c646464725f76,0x2e206d617261702e,0x75635f5f20343666,0x32666d7261706164\n"
".quad 0x645f796d395a5f5f,0x29646464725f7669,0x697369762e090a0a,0x6e75662e20656c62\n"
".quad 0x656e31325a5f2063,0x746e695f6e6f7477,0x616e5f6c61767265,0x36694c6449657669\n"
".quad 0x31694c4536333535,0x3231527645453832,0x735f6c61626f6c67,0x693231496b636174\n"
".quad 0x5f6c61767265746e,0x58455f5449757067,0x5f305458455f3154,0x695f33534b524545\n"
".quad 0x6d617261702e2820,0x5f5f203436752e20,0x6d72617061647563,0x6e31325a5f5f3166\n"
".quad 0x6e695f6e6f747765,0x6e5f6c6176726574,0x694c644965766961,0x694c453633353536\n"
".quad 0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f,0x617261702e202c69\n"
".quad 0x5f203436752e206d,0x726170616475635f,0x31325a5f5f32666d,0x695f6e6f7477656e\n"
".quad 0x5f6c61767265746e,0x4c6449657669616e,0x4c45363335353669,0x5276454538323169\n"
".quad 0x6c61626f6c673231,0x31496b636174735f,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x5458455f31545845,0x33534b5245455f30,0x7261702e202c695f,0x203233732e206d61\n"
".quad 0x6170616475635f5f,0x325a5f5f33666d72,0x5f6e6f7477656e31,0x6c61767265746e69\n"
".quad 0x6449657669616e5f,0x453633353536694c,0x764545383231694c,0x61626f6c67323152\n"
".quad 0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61,0x58455f315458455f\n"
".quad 0x534b5245455f3054,0x2e090a0a29695f33,0x20656c6269736976,0x5a5f20636e75662e\n"
".quad 0x7265746e6932314e,0x497570675f6c6176,0x2820764531434564,0x2e206d617261702e\n"
".quad 0x75635f5f20343675,0x31666d7261706164,0x6e6932314e5a5f5f,0x675f6c6176726574\n"
".quad 0x4531434564497570,0x69762e090a0a2976,0x662e20656c626973,0x61702e2820636e75\n"
".quad 0x3233732e206d6172,0x72616475635f5f20,0x30315a5f5f667465,0x6d696e696d5f7369\n"
".quad 0x4b52624564496c61,0x767265746e693231,0x54497570675f6c61,0x315a5f202969455f\n"
".quad 0x696e696d5f736930,0x52624564496c616d,0x7265746e6932314b,0x497570675f6c6176\n"
".quad 0x702e282069455f54,0x36752e206d617261,0x616475635f5f2034,0x5f5f31666d726170\n"
".quad 0x696d5f736930315a,0x4564496c616d696e,0x746e6932314b5262,0x70675f6c61767265\n"
".quad 0x202c69455f544975,0x2e206d617261702e,0x75635f5f20323373,0x32666d7261706164\n"
".quad 0x5f736930315a5f5f,0x496c616d696e696d,0x6932314b52624564,0x5f6c61767265746e\n"
".quad 0x69455f5449757067,0x7369762e090a0a29,0x75662e20656c6269,0x7261702e2820636e\n"
".quad 0x67696c612e206d61,0x2038622e2038206e,0x6572616475635f5f,0x4966315a5f5f6674\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x20295d36315b695f\n"
".quad 0x3145644966315a5f,0x61767265746e6932,0x5f54497570675f6c,0x20695f32534b5245\n"
".quad 0x206d617261702e28,0x635f5f203436752e,0x666d726170616475,0x644966315a5f5f31\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x617261702e202c69\n"
".quad 0x5f203233732e206d,0x726170616475635f,0x66315a5f5f32666d,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x2e090a0a29695f32,0x20656c6269736976\n"
".quad 0x2e2820636e75662e,0x612e206d61726170,0x2e2038206e67696c,0x6475635f5f203862\n"
".quad 0x5a5f5f6674657261,0x3231456449646632,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x315b695f32534b52,0x66325a5f20295d36,0x6e69323145644964,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x702e2820695f3253,0x36752e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f31666d726170,0x314564496466325a,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x2c695f32534b5245,0x206d617261702e20,0x635f5f203233732e,0x666d726170616475\n"
".quad 0x496466325a5f5f32,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x762e090a0a29695f,0x2e20656c62697369,0x702e2820636e7566,0x6c612e206d617261\n"
".quad 0x622e2038206e6769,0x616475635f5f2038,0x315a5f5f66746572,0x6f69736976696434\n"
".quad 0x4931747261705f6e,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x315b62525f34535f,0x34315a5f20295d36,0x6e6f697369766964,0x644931747261705f\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x2e282062525f3453\n"
".quad 0x752e206d61726170,0x6475635f5f203436,0x5f31666d72617061,0x6976696434315a5f\n"
".quad 0x7261705f6e6f6973,0x6932314564493174,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x525f34535f32534b,0x617261702e202c62,0x5f203436752e206d,0x726170616475635f\n"
".quad 0x34315a5f5f32666d,0x6e6f697369766964,0x644931747261705f,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x2e202c62525f3453,0x752e206d61726170\n"
".quad 0x6475635f5f203436,0x5f33666d72617061,0x6976696434315a5f,0x7261705f6e6f6973\n"
".quad 0x6932314564493174,0x5f6c61767265746e,0x52455f5449757067,0x525f34535f32534b\n"
".quad 0x69762e090a0a2962,0x662e20656c626973,0x61702e2820636e75,0x696c612e206d6172\n"
".quad 0x38622e2038206e67,0x72616475635f5f20,0x69395a5f5f667465,0x746365737265746e\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x36315b5f34535f32\n"
".quad 0x6e69395a5f20295d,0x4974636573726574,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x702e28205f34535f,0x36752e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f31666d726170,0x737265746e69395a,0x3231456449746365,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x5f34535f32534b52,0x6d617261702e202c,0x5f5f203436752e20\n"
".quad 0x6d72617061647563,0x6e69395a5f5f3266,0x4974636573726574,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x090a0a295f34535f,0x656c62697369762e\n"
".quad 0x2820636e75662e20,0x2e206d617261702e,0x2038206e67696c61,0x75635f5f2038622e\n"
".quad 0x5f5f667465726164,0x7a5f76696434315a,0x747261705f6f7265,0x6e69323145644932\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x315b5f34535f3253,0x34315a5f20295d36\n"
".quad 0x6f72657a5f766964,0x644932747261705f,0x7265746e69323145,0x497570675f6c6176\n"
".quad 0x5f32534b52455f54,0x61702e28205f3453,0x3436752e206d6172,0x70616475635f5f20\n"
".quad 0x5a5f5f31666d7261,0x657a5f7669643431,0x32747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x2e202c5f34535f32,0x752e206d61726170\n"
".quad 0x6475635f5f203436,0x5f32666d72617061,0x5f76696434315a5f,0x7261705f6f72657a\n"
".quad 0x6932314564493274,0x5f6c61767265746e,0x52455f5449757067,0x295f34535f32534b\n"
".quad 0x697369762e090a0a,0x6e75662e20656c62,0x617261702e282063,0x5f203233732e206d\n"
".quad 0x746572616475635f,0x687333315a5f5f66,0x7369625f646c756f,0x5262456449746365\n"
".quad 0x7265746e6932314b,0x497570675f6c6176,0x34535f3453455f54,0x5a5f20295f31535f\n"
".quad 0x646c756f68733331,0x497463657369625f,0x6932314b52624564,0x5f6c61767265746e\n"
".quad 0x53455f5449757067,0x5f31535f34535f34,0x6d617261702e2820,0x5f5f203436752e20\n"
".quad 0x6d72617061647563,0x7333315a5f5f3166,0x69625f646c756f68,0x6245644974636573\n"
".quad 0x65746e6932314b52,0x7570675f6c617672,0x535f3453455f5449,0x2e202c5f31535f34\n"
".quad 0x752e206d61726170,0x6475635f5f203436,0x5f32666d72617061,0x756f687333315a5f\n"
".quad 0x63657369625f646c,0x314b526245644974,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x535f34535f345345,0x7261702e202c5f31,0x203436752e206d61,0x6170616475635f5f\n"
".quad 0x315a5f5f33666d72,0x5f646c756f687333,0x6449746365736962,0x6e6932314b526245\n"
".quad 0x675f6c6176726574,0x3453455f54497570,0x2c5f31535f34535f,0x206d617261702e20\n"
".quad 0x635f5f203436662e,0x666d726170616475,0x687333315a5f5f34,0x7369625f646c756f\n"
".quad 0x5262456449746365,0x7265746e6932314b,0x497570675f6c6176,0x34535f3453455f54\n"
".quad 0x090a0a295f31535f,0x656c62697369762e,0x2820636e75662e20,0x2e206d617261702e\n"
".quad 0x75635f5f20343666,0x5f5f667465726164,0x496874646977355a,0x6e6932315f544564\n"
".quad 0x675f6c6176726574,0x29455f3053497570,0x74646977355a5f20,0x32315f5445644968\n"
".quad 0x6c61767265746e69,0x5f3053497570675f,0x617261702e282045,0x6e67696c612e206d\n"
".quad 0x5f2038622e203820,0x726170616475635f,0x77355a5f5f31666d,0x5445644968746469\n"
".quad 0x7265746e6932315f,0x497570675f6c6176,0x5d36315b455f3053,0x7369762e090a0a29\n"
".quad 0x75662e20656c6269,0x7261702e2820636e,0x67696c612e206d61,0x2038622e2038206e\n"
".quad 0x6572616475635f5f,0x7173365a5f5f6674,0x3145644965726175,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x315b5f32534b5245,0x73365a5f20295d36,0x4564496572617571\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x205f32534b52455f,0x206d617261702e28\n"
".quad 0x635f5f203436752e,0x666d726170616475,0x757173365a5f5f31,0x3231456449657261\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x0a0a295f32534b52,0x6c62697369762e09\n"
".quad 0x20636e75662e2065,0x206d617261702e28,0x38206e67696c612e,0x635f5f2038622e20\n"
".quad 0x5f66746572616475,0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493174\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x525f34535f32534b,0x5f20295d36315b62\n"
".quad 0x7a5f76696434315a,0x747261705f6f7265,0x6e69323145644931,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x62525f34535f3253,0x6d617261702e2820,0x5f5f203436752e20\n"
".quad 0x6d72617061647563,0x6434315a5f5f3166,0x5f6f72657a5f7669,0x4564493174726170\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x535f32534b52455f,0x702e202c62525f34\n"
".quad 0x36752e206d617261,0x616475635f5f2034,0x5f5f32666d726170,0x7a5f76696434315a\n"
".quad 0x747261705f6f7265,0x6e69323145644931,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x62525f34535f3253,0x6d617261702e202c,0x5f5f203436752e20,0x6d72617061647563\n"
".quad 0x6434315a5f5f3366,0x5f6f72657a5f7669,0x4564493174726170,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x535f32534b52455f,0x090a0a2962525f34,0x656c62697369762e\n"
".quad 0x2820636e75662e20,0x2e206d617261702e,0x2038206e67696c61,0x75635f5f2038622e\n"
".quad 0x5f5f667465726164,0x6e5f76696432315a,0x4965766974616765,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315b5f31534b525f,0x32315a5f20295d36\n"
".quad 0x6167656e5f766964,0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x4b525f32534b5245,0x61702e28205f3153,0x3436752e206d6172,0x70616475635f5f20\n"
".quad 0x5a5f5f31666d7261,0x656e5f7669643231,0x6449657669746167,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x2e202c5f31534b52,0x752e206d61726170\n"
".quad 0x6475635f5f203436,0x5f32666d72617061,0x5f76696432315a5f,0x657669746167656e\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x295f31534b525f32\n"
".quad 0x697369762e090a0a,0x6e75662e20656c62,0x617261702e282063,0x6e67696c612e206d\n"
".quad 0x5f2038622e203820,0x746572616475635f,0x696432315a5f5f66,0x697469736f705f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x5f20295d36315b5f,0x705f76696432315a,0x496576697469736f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x28205f31534b525f,0x2e206d617261702e\n"
".quad 0x75635f5f20343675,0x31666d7261706164,0x76696432315a5f5f,0x76697469736f705f\n"
".quad 0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570,0x5f31534b525f3253\n"
".quad 0x6d617261702e202c,0x5f5f203436752e20,0x6d72617061647563,0x6432315a5f5f3266\n"
".quad 0x7469736f705f7669,0x3231456449657669,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x534b525f32534b52,0x762e090a0a295f31,0x2e20656c62697369,0x702e2820636e7566\n"
".quad 0x6c612e206d617261,0x622e2038206e6769,0x616475635f5f2038,0x315a5f5f66746572\n"
".quad 0x6e6f6e5f76696432,0x4564496f72657a5f,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x535f32534b52455f,0x20295d36315b5f34,0x5f76696432315a5f,0x6f72657a5f6e6f6e\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x2e28205f34535f32\n"
".quad 0x752e206d61726170,0x6475635f5f203436,0x5f31666d72617061,0x5f76696432315a5f\n"
".quad 0x6f72657a5f6e6f6e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x2e202c5f34535f32,0x752e206d61726170,0x6475635f5f203436,0x5f32666d72617061\n"
".quad 0x5f76696432315a5f,0x6f72657a5f6e6f6e,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x0a0a295f34535f32,0x6c62697369762e09,0x20636e75662e2065\n"
".quad 0x7477656e35315a5f,0x7265746e695f6e6f,0x36694c64496c6176,0x31694c4536333535\n"
".quad 0x3231527645453832,0x735f6c61626f6c67,0x693231496b636174,0x5f6c61767265746e\n"
".quad 0x58455f5449757067,0x5f305458455f3154,0x695f33534b524545,0x6d617261702e2820\n"
".quad 0x5f5f203436752e20,0x6d72617061647563,0x6e35315a5f5f3166,0x6e695f6e6f747765\n"
".quad 0x64496c6176726574,0x453633353536694c,0x764545383231694c,0x61626f6c67323152\n"
".quad 0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61,0x58455f315458455f\n"
".quad 0x534b5245455f3054,0x61702e202c695f33,0x3436752e206d6172,0x70616475635f5f20\n"
".quad 0x5a5f5f32666d7261,0x6e6f7477656e3531,0x61767265746e695f,0x353536694c64496c\n"
".quad 0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f,0x746e693231496b63\n"
".quad 0x70675f6c61767265,0x315458455f544975,0x45455f305458455f,0x202c695f33534b52\n"
".quad 0x2e206d617261702e,0x75635f5f20323373,0x33666d7261706164,0x77656e35315a5f5f\n"
".quad 0x65746e695f6e6f74,0x694c64496c617672,0x694c453633353536,0x3152764545383231\n"
".quad 0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x305458455f315458,0x5f33534b5245455f,0x69762e090a0a2969,0x662e20656c626973\n"
".quad 0x39315a5f20636e75,0x695f6e6f7477656e,0x5f6c61767265746e,0x36694c6449636572\n"
".quad 0x31694c4536333535,0x3231527645453832,0x735f6c61626f6c67,0x693231496b636174\n"
".quad 0x5f6c61767265746e,0x58455f5449757067,0x5f305458455f3154,0x695f33534b524545\n"
".quad 0x6d617261702e2820,0x5f5f203436752e20,0x6d72617061647563,0x6e39315a5f5f3166\n"
".quad 0x6e695f6e6f747765,0x725f6c6176726574,0x3536694c64496365,0x3231694c45363335\n"
".quad 0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574\n"
".quad 0x5458455f54497570,0x455f305458455f31,0x2c695f33534b5245,0x206d617261702e20\n"
".quad 0x635f5f203436752e,0x666d726170616475,0x656e39315a5f5f32,0x746e695f6e6f7477\n"
".quad 0x65725f6c61767265,0x353536694c644963,0x383231694c453633,0x6c67323152764545\n"
".quad 0x6174735f6c61626f,0x746e693231496b63,0x70675f6c61767265,0x315458455f544975\n"
".quad 0x45455f305458455f,0x202c695f33534b52,0x2e206d617261702e,0x75635f5f20323373\n"
".quad 0x33666d7261706164,0x77656e39315a5f5f,0x65746e695f6e6f74,0x6365725f6c617672\n"
".quad 0x33353536694c6449,0x45383231694c4536,0x6f6c673231527645,0x636174735f6c6162\n"
".quad 0x65746e693231496b,0x7570675f6c617672,0x5f315458455f5449,0x5245455f30545845\n"
".quad 0x0a0a29695f33534b,0x6c62697369762e09,0x20636e75662e2065,0x746e6932314e5a5f\n"
".quad 0x70675f6c61767265,0x5245314345644975,0x2e28205f3253644b,0x752e206d61726170\n"
".quad 0x6475635f5f203436,0x5f31666d72617061,0x746e6932314e5a5f,0x70675f6c61767265\n"
".quad 0x5245314345644975,0x2e202c5f3253644b,0x752e206d61726170,0x6475635f5f203436\n"
".quad 0x5f32666d72617061,0x746e6932314e5a5f,0x70675f6c61767265,0x5245314345644975\n"
".quad 0x2e202c5f3253644b,0x752e206d61726170,0x6475635f5f203436,0x5f33666d72617061\n"
".quad 0x746e6932314e5a5f,0x70675f6c61767265,0x5245314345644975,0x0a0a295f3253644b\n"
".quad 0x6c62697369762e09,0x20636e75662e2065,0x206d617261702e28,0x635f5f203436752e\n"
".quad 0x5f66746572616475,0x6e6932314b4e5a5f,0x675f6c6176726574,0x6f6c354564497570\n"
".quad 0x5f20297645726577,0x746e6932314b4e5a,0x70675f6c61767265,0x776f6c3545644975\n"
".quad 0x702e282076457265,0x36752e206d617261,0x616475635f5f2034,0x5f5f31666d726170\n"
".quad 0x746e6932314b4e5a,0x70675f6c61767265,0x776f6c3545644975,0x090a0a2976457265\n"
".quad 0x656c62697369762e,0x2820636e75662e20,0x2e206d617261702e,0x75635f5f20343675\n"
".quad 0x5f5f667465726164,0x746e6932314b4e5a,0x70675f6c61767265,0x7070753545644975\n"
".quad 0x5a5f202976457265,0x65746e6932314b4e,0x7570675f6c617672,0x6570707535456449\n"
".quad 0x61702e2820764572,0x3436752e206d6172,0x70616475635f5f20,0x5a5f5f31666d7261\n"
".quad 0x65746e6932314b4e,0x7570675f6c617672,0x6570707535456449,0x2f090a0a29764572\n"
".quad 0x2d2d2d2d2d2d2d2f,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2f2f090a2d2d2d2d\n"
".quad 0x696c69706d6f4320,0x2f706d742f20676e,0x305f746678706d74,0x5f63613330303030\n"
".quad 0x3030303030303030,0x7265746e695f372d,0x337070632e6c6176,0x706d742f2820692e\n"
".quad 0x432e23494263632f,0x090a2956466e4d36,0x2d2d2d2d2d2d2f2f,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x090a0a2d2d2d2d2d,0x2d2d2d2d2d2d2f2f,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2f090a2d2d2d2d2d,0x6e6f6974704f202f,0x2d2d2f2f090a3a73\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x5420202f2f090a2d\n"
".quad 0x74703a7465677261,0x733a415349202c78,0x6e45202c30325f6d,0x74696c3a6e616964\n"
".quad 0x696f50202c656c74,0x7a6953207265746e,0x2f2f090a34363a65,0x4f2809334f2d2020\n"
".quad 0x74617a696d697470,0x6576656c206e6f69,0x20202f2f090a296c,0x626544280930672d\n"
".quad 0x6c6576656c206775,0x2d20202f2f090a29,0x6f7065522809326d,0x7369766461207472\n"
".quad 0x090a29736569726f,0x2d2d2d2d2d2d2f2f,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d,0x2d2d2d2d2d2d2d2d\n"
".quad 0x090a0a2d2d2d2d2d,0x093109656c69662e,0x6e616d6d6f633c22,0x223e656e696c2d64\n"
".quad 0x09656c69662e090a,0x2f706d742f220932,0x305f746678706d74,0x5f63613330303030\n"
".quad 0x3030303030303030,0x7265746e695f362d,0x616475632e6c6176,0x227570672e326566\n"
".quad 0x09656c69662e090a,0x656d6f682f220933,0x2f776572646e612f,0x6f7469736f706572\n"
".quad 0x7570672f73656972,0x742f746f6c65636f,0x6475632f73747365,0x7365742f322e3361\n"
".quad 0x7265746e492f7374,0x616475632f6c6176,0x61767265746e695f,0x22682e62696c5f6c\n"
".quad 0x09656c69662e090a,0x656d6f682f220934,0x2f776572646e612f,0x6f7469736f706572\n"
".quad 0x7570672f73656972,0x742f746f6c65636f,0x6475632f73747365,0x7365742f322e3361\n"
".quad 0x7265746e492f7374,0x616475632f6c6176,0x61767265746e695f,0x662e090a22682e6c\n"
".quad 0x2f22093509656c69,0x2f62696c2f727375,0x5f3638782f636367,0x78756e696c2d3436\n"
".quad 0x342e342f756e672d,0x756c636e692f332e,0x65646474732f6564,0x662e090a22682e66\n"
".quad 0x2f22093609656c69,0x61636f6c2f727375,0x2e33616475632f6c,0x622f616475632f32\n"
".quad 0x6e692f2e2e2f6e69,0x72632f6564756c63,0x6563697665642f74,0x656d69746e75725f\n"
".quad 0x69662e090a22682e,0x752f22093709656c,0x6c61636f6c2f7273,0x322e33616475632f\n"
".quad 0x69622f616475632f,0x636e692f2e2e2f6e,0x736f682f6564756c,0x656e696665645f74\n"
".quad 0x662e090a22682e73,0x2f22093809656c69,0x61636f6c2f727375,0x2e33616475632f6c\n"
".quad 0x622f616475632f32,0x6e692f2e2e2f6e69,0x75622f6564756c63,0x79745f6e69746c69\n"
".quad 0x090a22682e736570,0x093909656c69662e,0x6f6c2f7273752f22,0x616475632f6c6163\n"
".quad 0x616475632f322e33,0x2f2e2e2f6e69622f,0x2f6564756c636e69,0x745f656369766564\n"
".quad 0x0a22682e73657079,0x3109656c69662e09,0x2f7273752f220930,0x75632f6c61636f6c\n"
".quad 0x75632f322e336164,0x2e2f6e69622f6164,0x64756c636e692f2e,0x7265766972642f65\n"
".quad 0x682e73657079745f,0x656c69662e090a22,0x73752f2209313109,0x2f6c61636f6c2f72\n"
".quad 0x2f322e3361647563,0x6e69622f61647563,0x6c636e692f2e2e2f,0x667275732f656475\n"
".quad 0x657079745f656361,0x662e090a22682e73,0x2209323109656c69,0x636f6c2f7273752f\n"
".quad 0x33616475632f6c61,0x2f616475632f322e,0x692f2e2e2f6e6962,0x742f6564756c636e\n"
".quad 0x745f657275747865,0x0a22682e73657079,0x3109656c69662e09,0x2f7273752f220933\n"
".quad 0x75632f6c61636f6c,0x75632f322e336164,0x2e2f6e69622f6164,0x64756c636e692f2e\n"
".quad 0x726f746365762f65,0x682e73657079745f,0x656c69662e090a22,0x73752f2209343109\n"
".quad 0x2f6c61636f6c2f72,0x2f322e3361647563,0x6e69622f61647563,0x6c636e692f2e2e2f\n"
".quad 0x697665642f656475,0x636e75616c5f6563,0x656d617261705f68,0x0a22682e73726574\n"
".quad 0x3109656c69662e09,0x2f7273752f220935,0x75632f6c61636f6c,0x75632f322e336164\n"
".quad 0x2e2f6e69622f6164,0x64756c636e692f2e,0x74732f7472632f65,0x6c635f656761726f\n"
".quad 0x090a22682e737361,0x363109656c69662e,0x692f7273752f2209,0x622f6564756c636e\n"
".quad 0x657079742f737469,0x662e090a22682e73,0x2209373109656c69,0x636e692f7273752f\n"
".quad 0x6d69742f6564756c,0x662e090a22682e65,0x2209383109656c69,0x6e612f656d6f682f\n"
".quad 0x7065722f77657264,0x6569726f7469736f,0x65636f7570672f73,0x747365742f746f6c\n"
".quad 0x2e33616475632f73,0x2f73747365742f32,0x6c61767265746e49,0x61767265746e692f\n"
".quad 0x662e090a22682e6c,0x2209393109656c69,0x6e612f656d6f682f,0x7065722f77657264\n"
".quad 0x6569726f7469736f,0x65636f7570672f73,0x747365742f746f6c,0x2e33616475632f73\n"
".quad 0x2f73747365742f32,0x6c61767265746e49,0x6e695f616475632f,0x725f6c6176726574\n"
".quad 0x615f6465646e756f,0x0a22682e68746972,0x3209656c69662e09,0x2f7273752f220930\n"
".quad 0x75632f6c61636f6c,0x75632f322e336164,0x2e2f6e69622f6164,0x64756c636e692f2e\n"
".quad 0x6e6f6d6d6f632f65,0x6f6974636e75665f,0x2e090a22682e736e,0x09313209656c6966\n"
".quad 0x6f6c2f7273752f22,0x616475632f6c6163,0x616475632f322e33,0x2f2e2e2f6e69622f\n"
".quad 0x2f6564756c636e69,0x6e75665f6874616d,0x682e736e6f697463,0x656c69662e090a22\n"
".quad 0x73752f2209323209,0x2f6c61636f6c2f72,0x2f322e3361647563,0x6e69622f61647563\n"
".quad 0x6c636e692f2e2e2f,0x6874616d2f656475,0x6e6174736e6f635f,0x2e090a22682e7374\n"
".quad 0x09333209656c6966,0x6f6c2f7273752f22,0x616475632f6c6163,0x616475632f322e33\n"
".quad 0x2f2e2e2f6e69622f,0x2f6564756c636e69,0x665f656369766564,0x736e6f6974636e75\n"
".quad 0x69662e090a22682e,0x2f2209343209656c,0x61636f6c2f727375,0x2e33616475632f6c\n"
".quad 0x622f616475632f32,0x6e692f2e2e2f6e69,0x6d732f6564756c63,0x6d6f74615f31315f\n"
".quad 0x74636e75665f6369,0x0a22682e736e6f69,0x3209656c69662e09,0x2f7273752f220935\n"
".quad 0x75632f6c61636f6c,0x75632f322e336164,0x2e2f6e69622f6164,0x64756c636e692f2e\n"
".quad 0x5f32315f6d732f65,0x665f63696d6f7461,0x736e6f6974636e75,0x69662e090a22682e\n"
".quad 0x2f2209363209656c,0x61636f6c2f727375,0x2e33616475632f6c,0x622f616475632f32\n"
".quad 0x6e692f2e2e2f6e69,0x6d732f6564756c63,0x62756f645f33315f,0x74636e75665f656c\n"
".quad 0x0a22682e736e6f69,0x3209656c69662e09,0x2f7273752f220937,0x75632f6c61636f6c\n"
".quad 0x75632f322e336164,0x2e2f6e69622f6164,0x64756c636e692f2e,0x5f30325f6d732f65\n"
".quad 0x665f63696d6f7461,0x736e6f6974636e75,0x69662e090a22682e,0x2f2209383209656c\n"
".quad 0x61636f6c2f727375,0x2e33616475632f6c,0x622f616475632f32,0x6e692f2e2e2f6e69\n"
".quad 0x6d732f6564756c63,0x72746e695f30325f,0x682e736369736e69,0x656c69662e090a22\n"
".quad 0x73752f2209393209,0x2f6c61636f6c2f72,0x2f322e3361647563,0x6e69622f61647563\n"
".quad 0x6c636e692f2e2e2f,0x667275732f656475,0x636e75665f656361,0x22682e736e6f6974\n"
".quad 0x09656c69662e090a,0x7273752f22093033,0x632f6c61636f6c2f,0x632f322e33616475\n"
".quad 0x2f6e69622f616475,0x756c636e692f2e2e,0x75747865742f6564,0x68637465665f6572\n"
".quad 0x6f6974636e75665f,0x2e090a22682e736e,0x09313309656c6966,0x6f6c2f7273752f22\n"
".quad 0x616475632f6c6163,0x616475632f322e33,0x2f2e2e2f6e69622f,0x2f6564756c636e69\n"
".quad 0x6e75665f6874616d,0x645f736e6f697463,0x2e337874705f6c62,0x762e090a0a0a2268\n"
".quad 0x2e20656c62697369,0x702e2820636e7566,0x36662e206d617261,0x616475635f5f2034\n"
".quad 0x395a5f5f66746572,0x725f7669645f796d,0x395a5f2029646475,0x725f7669645f796d\n"
".quad 0x61702e2820646475,0x3436662e206d6172,0x70616475635f5f20,0x5a5f5f31666d7261\n"
".quad 0x5f7669645f796d39,0x702e202c64647572,0x36662e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f32666d726170,0x7669645f796d395a,0x090a29646475725f,0x206765722e090a7b\n"
".quad 0x3c7225203233752e,0x722e090a3b3e3436,0x203436752e206765,0x0a3b3e353c647225\n"
".quad 0x662e206765722e09,0x3e343c6625203233,0x206765722e090a3b,0x646625203436662e\n"
".quad 0x2e090a3b3e32343c,0x6572702e20676572,0x3e31313c70252064,0x09636f6c2e090a3b\n"
".quad 0x3009383231093931,0x67656257444c240a,0x796d395a5f5f6e69,0x6475725f7669645f\n"
".quad 0x702e646c090a3a64,0x3436662e6d617261,0x202c316466250920,0x70616475635f5f5b\n"
".quad 0x5a5f5f31666d7261,0x5f7669645f796d39,0x090a3b5d64647572,0x203436662e766f6d\n"
".quad 0x25202c3264662509,0x646c090a3b316466,0x662e6d617261702e,0x3364662509203436\n"
".quad 0x6475635f5f5b202c,0x5f32666d72617061,0x69645f796d395a5f,0x3b5d646475725f76\n"
".quad 0x36662e766f6d090a,0x2c34646625092034,0x090a3b3364662520,0x09393109636f6c2e\n"
".quad 0x6d090a3009303331,0x09203436662e766f,0x6625202c35646625,0x736261090a3b3464\n"
".quad 0x662509203436662e,0x34646625202c3664,0x662e766f6d090a3b,0x3764662509203436\n"
".quad 0x303130306430202c,0x3030303030303030,0x2f2f093b30303030,0x37303532322e3220\n"
".quad 0x73090a3830332d65,0x662e746c2e707465,0x2c31702509203436,0x25202c3664662520\n"
".quad 0x2140090a3b376466,0x2061726220317025,0x385f305f744c2409,0x6c2e090a3b343931\n"
".quad 0x393109313309636f,0x6f6d090a30093138,0x2509203436662e76,0x346430202c386466\n"
".quad 0x3030303030303533,0x3b30303030303030,0x30382e31202f2f09,0x0a36312b65343431\n"
".quad 0x3436662e6c756d09,0x202c356466250920,0x6625202c34646625,0x766f6d090a3b3864\n"
".quad 0x722509203233752e,0x090a3b3435202c31,0x20696e752e617262,0x375f305f744c2409\n"
".quad 0x744c240a3b383339,0x3a343931385f305f,0x3309636f6c2e090a,0x3009343839310931\n"
".quad 0x33752e766f6d090a,0x202c317225092032,0x305f744c240a3b30,0x090a3a383339375f\n"
".quad 0x203436622e766f6d,0x72252c3272257b09,0x35646625202c7d33,0x732e726873090a3b\n"
".quad 0x2c34722509203233,0x3032202c33722520,0x622e646e61090a3b,0x2c35722509203233\n"
".quad 0x3032202c34722520,0x766f6d090a3b3734,0x722509203233752e,0x3b37343032202c36\n"
".quad 0x71652e746573090a,0x3233752e3233752e,0x25202c3772250920,0x3b367225202c3572\n"
".quad 0x33732e67656e090a,0x202c387225092032,0x6f6d090a3b377225,0x2509203436662e76\n"
".quad 0x306430202c396466,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x33752e71652e7465,0x2509203436662e32,0x36646625202c3972,0x0a3b39646625202c\n"
".quad 0x3233732e67656e09,0x202c303172250920,0x726f090a3b397225,0x722509203233622e\n"
".quad 0x2c387225202c3131,0x090a3b3031722520,0x203233752e766f6d,0x30202c3231722509\n"
".quad 0x2e70746573090a3b,0x09203233732e7165,0x317225202c327025,0x3b32317225202c31\n"
".quad 0x622032702540090a,0x5f744c2409206172,0x0a3b363037385f30,0x313309636f6c2e09\n"
".quad 0x0a30093938393109,0x3436662e64646109,0x202c356466250920,0x6625202c35646625\n"
".quad 0x766f6d090a3b3564,0x722509203233752e,0x090a3b30202c3331,0x20696e752e617262\n"
".quad 0x385f305f744c2409,0x744c240a3b303534,0x3a363037385f305f,0x3309636f6c2e090a\n"
".quad 0x3009313939310931,0x33752e627573090a,0x2c34317225092032,0x7225202c35722520\n"
".quad 0x2e627573090a3b31,0x3172250920323375,0x2c34317225202c33,0x090a3b3232303120\n"
".quad 0x09313309636f6c2e,0x090a300932393931,0x203436622e766f6d,0x25202c3164722509\n"
".quad 0x6e61090a3b356466,0x2509203436622e64,0x647225202c326472,0x383132392d202c31\n"
".quad 0x3232373334383638,0x3b33313335303437,0x3436622e726f090a,0x202c336472250920\n"
".quad 0x3634202c32647225,0x3931383837363230,0x3139363436323731,0x2e766f6d090a3b32\n"
".quad 0x6466250920343662,0x3b33647225202c35,0x385f305f744c240a,0x6c2e090a3a303534\n"
".quad 0x333109393109636f,0x67656e090a300938,0x662509203436662e,0x646625202c303164\n"
".quad 0x2e747663090a3b35,0x662e3233662e6e72,0x2c31662509203436,0x090a3b3564662520\n"
".quad 0x662e6e722e706372,0x2c32662509203233,0x63090a3b31662520,0x662e3436662e7476\n"
".quad 0x3164662509203233,0x0a3b326625202c31,0x3436662e766f6d09,0x2c32316466250920\n"
".quad 0x3030666633643020,0x3030303030303030,0x202f2f093b303030,0x722e64616d090a31\n"
".quad 0x2509203436662e6e,0x6625202c33316466,0x646625202c303164,0x31646625202c3131\n"
".quad 0x2e64616d090a3b32,0x09203436662e6e72,0x25202c3431646625,0x6625202c33316466\n"
".quad 0x646625202c333164,0x64616d090a3b3331,0x203436662e6e722e,0x202c353164662509\n"
".quad 0x25202c3131646625,0x6625202c34316466,0x6f6d090a3b313164,0x2509203436662e76\n"
".quad 0x6430202c36316466,0x3030303030666633,0x3030303030303030,0x090a31202f2f093b\n"
".quad 0x662e6e722e64616d,0x3164662509203436,0x3031646625202c37,0x2c3531646625202c\n"
".quad 0x0a3b363164662520,0x393109636f6c2e09,0x090a300939333109,0x662e6e722e64616d\n"
".quad 0x3164662509203436,0x3531646625202c38,0x2c3731646625202c,0x0a3b353164662520\n"
".quad 0x393109636f6c2e09,0x090a300933343109,0x662e6e722e6c756d,0x3164662509203436\n"
".quad 0x2c32646625202c39,0x0a3b313164662520,0x3436662e67656e09,0x2c30326466250920\n"
".quad 0x0a3b393164662520,0x2e6e722e64616d09,0x6466250920343666,0x32646625202c3132\n"
".quad 0x2c35646625202c30,0x090a3b3264662520,0x662e6e722e64616d,0x3264662509203436\n"
".quad 0x3132646625202c32,0x2c3531646625202c,0x0a3b393164662520,0x393109636f6c2e09\n"
".quad 0x090a300937343109,0x203436662e67656e,0x202c333264662509,0x090a3b3232646625\n"
".quad 0x662e70722e64616d,0x3264662509203436,0x3332646625202c34,0x202c35646625202c\n"
".quad 0x6d090a3b32646625,0x36662e70722e6461,0x3532646625092034,0x2c3432646625202c\n"
".quad 0x202c383164662520,0x090a3b3232646625,0x203436662e736261,0x202c363264662509\n"
".quad 0x090a3b3532646625,0x203436662e766f6d,0x202c373264662509,0x3030306666376430\n"
".quad 0x3030303030303030,0x69202f2f093b3030,0x70746573090a666e,0x203436662e656c2e\n"
".quad 0x6625202c33702509,0x646625202c363264,0x6c6573090a3b3732,0x2509203233732e70\n"
".quad 0x202c30202c353172,0x0a3b337025202c31,0x3436662e766f6d09,0x2c38326466250920\n"
".quad 0x3030666637643020,0x3030303030303030,0x202f2f093b303030,0x746573090a666e69\n"
".quad 0x2e3233752e71652e,0x3172250920343666,0x3632646625202c36,0x3b3832646625202c\n"
".quad 0x33732e67656e090a,0x2c37317225092032,0x090a3b3631722520,0x203436662e766f6d\n"
".quad 0x202c393264662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x71652e746573090a,0x3436662e3233752e,0x202c383172250920,0x25202c3632646625\n"
".quad 0x6e090a3b39326466,0x09203233732e6765,0x7225202c39317225,0x2e726f090a3b3831\n"
".quad 0x3272250920323362,0x2c37317225202c30,0x090a3b3931722520,0x09203233622e726f\n"
".quad 0x7225202c31327225,0x30327225202c3531,0x752e766f6d090a3b,0x3232722509203233\n"
".quad 0x6573090a3b30202c,0x33732e71652e7074,0x202c347025092032,0x7225202c31327225\n"
".quad 0x702540090a3b3232,0x2409206172622034,0x3639385f305f744c,0x636f6c2e090a3b32\n"
".quad 0x3733393109313309,0x2e646461090a3009,0x6466250920343666,0x32646625202c3033\n"
".quad 0x3532646625202c35,0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65\n"
".quad 0x5f6c616e7265746e,0x656b5f6932707865,0x3737315f6c656e72,0x5f744c240a3b315f\n"
".quad 0x0a3a323639385f30,0x3233732e67656e09,0x202c333272250920,0x6d090a3b33317225\n"
".quad 0x09203233752e766f,0x3b30202c34327225,0x6e2e70746573090a,0x2509203233732e65\n"
".quad 0x33327225202c3570,0x0a3b34327225202c,0x7262203570254009,0x305f744c24092061\n"
".quad 0x090a3b343734395f,0x09313309636f6c2e,0x090a300930343931,0x203436662e766f6d\n"
".quad 0x202c303364662509,0x090a3b3532646625,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x65746e695f5f5f69,0x7078655f6c616e72,0x656e72656b5f6932,0x3b315f3737315f6c\n"
".quad 0x395f305f744c240a,0x6f6d090a3a343734,0x2509203233732e76,0x303232202c353272\n"
".quad 0x70746573090a3b30,0x203233732e74672e,0x7225202c36702509,0x35327225202c3332\n"
".quad 0x732e766f6d090a3b,0x3632722509203233,0x0a3b30303232202c,0x33732e706c657309\n"
".quad 0x2c37327225092032,0x25202c3632722520,0x367025202c333272,0x732e766f6d090a3b\n"
".quad 0x3832722509203233,0x3b303032322d202c,0x6c2e70746573090a,0x2509203233732e74\n"
".quad 0x37327225202c3770,0x0a3b38327225202c,0x3233732e766f6d09,0x202c393272250920\n"
".quad 0x090a3b303032322d,0x3233732e706c6573,0x202c303372250920,0x7225202c39327225\n"
".quad 0x3b377025202c3732,0x33752e646461090a,0x2c31337225092032,0x31202c3033722520\n"
".quad 0x6f6d090a3b313230,0x2509203233752e76,0x343032202c323372,0x70746573090a3b32\n"
".quad 0x203233752e74672e,0x7225202c38702509,0x32337225202c3133,0x2038702540090a3b\n"
".quad 0x744c240920617262,0x3b363839395f305f,0x3309636f6c2e090a,0x3009353439310931\n"
".quad 0x33732e646461090a,0x2c33337225092032,0x31202c3033722520,0x6873090a3b333230\n"
".quad 0x2509203233622e6c,0x337225202c343372,0x090a3b3032202c33,0x203233732e766f6d\n"
".quad 0x30202c3533722509,0x622e766f6d090a3b,0x3364662509203436,0x353372257b202c31\n"
".quad 0x0a3b7d343372252c,0x3436662e6c756d09,0x2c30336466250920,0x202c353264662520\n"
".quad 0x090a3b3133646625,0x20696e752e617262,0x646e6557444c2409,0x65746e695f5f5f69\n"
".quad 0x7078655f6c616e72,0x656e72656b5f6932,0x3b315f3737315f6c,0x395f305f744c240a\n"
".quad 0x6c2e090a3a363839,0x393109313309636f,0x6461090a30093734,0x2509203233752e64\n"
".quad 0x337225202c363372,0x3b33343032202c30,0x33752e766f6d090a,0x2c37337225092032\n"
".quad 0x090a3b3638303420,0x2e74672e70746573,0x3970250920323375,0x202c36337225202c\n"
".quad 0x40090a3b37337225,0x2061726220397025,0x375f305f744c2409,0x6c2e090a3b363234\n"
".quad 0x393109313309636f,0x6873090a30093934,0x2509203233732e72,0x337225202c383372\n"
".quad 0x090a3b3133202c30,0x203233732e766f6d,0x31202c3933722509,0x622e646e61090a3b\n"
".quad 0x3034722509203233,0x202c38337225202c,0x61090a3b39337225,0x09203233732e6464\n"
".quad 0x7225202c31347225,0x30337225202c3034,0x732e726873090a3b,0x3234722509203233\n"
".quad 0x202c31347225202c,0x2e627573090a3b31,0x3472250920323373,0x2c30337225202c33\n"
".quad 0x090a3b3234722520,0x203233732e646461,0x25202c3434722509,0x323031202c333472\n"
".quad 0x2e6c6873090a3b33,0x3472250920323362,0x2c34347225202c35,0x6f6d090a3b303220\n"
".quad 0x2509203233732e76,0x0a3b30202c363472,0x3436622e766f6d09,0x2c32336466250920\n"
".quad 0x252c363472257b20,0x61090a3b7d353472,0x09203233732e6464,0x7225202c37347225\n"
".quad 0x33323031202c3234,0x622e6c6873090a3b,0x3834722509203233,0x202c37347225202c\n"
".quad 0x766f6d090a3b3032,0x722509203233732e,0x090a3b30202c3934,0x203436622e766f6d\n"
".quad 0x202c333364662509,0x72252c393472257b,0x756d090a3b7d3834,0x2509203436662e6c\n"
".quad 0x6625202c34336466,0x646625202c353264,0x6c756d090a3b3333,0x662509203436662e\n"
".quad 0x646625202c303364,0x33646625202c3233,0x2e617262090a3b34,0x444c240920696e75\n"
".quad 0x5f5f5f69646e6557,0x6c616e7265746e69,0x6b5f69327078655f,0x37315f6c656e7265\n"
".quad 0x744c240a3b315f37,0x3a363234375f305f,0x3309636f6c2e090a,0x0a30093335330931\n"
".quad 0x3233732e72687309,0x202c303572250920,0x3133202c30337225,0x732e766f6d090a3b\n"
".quad 0x3135722509203233,0x6e61090a3b33202c,0x2509203233622e64,0x357225202c323572\n"
".quad 0x3b31357225202c30,0x33732e646461090a,0x2c33357225092032,0x25202c3235722520\n"
".quad 0x6873090a3b303372,0x2509203233732e72,0x357225202c343572,0x6d090a3b32202c33\n"
".quad 0x33732e6f6c2e6c75,0x2c35357225092032,0x33202c3435722520,0x732e627573090a3b\n"
".quad 0x3635722509203233,0x202c30337225202c,0x61090a3b35357225,0x09203233732e6464\n"
".quad 0x7225202c37357225,0x33323031202c3635,0x622e6c6873090a3b,0x3835722509203233\n"
".quad 0x202c37357225202c,0x766f6d090a3b3032,0x722509203233732e,0x090a3b30202c3935\n"
".quad 0x203436622e766f6d,0x202c353364662509,0x72252c393572257b,0x6c2e090a3b7d3835\n"
".quad 0x393109313309636f,0x6461090a30093435,0x2509203233732e64,0x357225202c303672\n"
".quad 0x3b33323031202c34,0x33622e6c6873090a,0x2c31367225092032,0x32202c3036722520\n"
".quad 0x2e766f6d090a3b30,0x3672250920323373,0x6d090a3b30202c32,0x09203436622e766f\n"
".quad 0x7b202c3633646625,0x3672252c32367225,0x6c756d090a3b7d31,0x662509203436662e\n"
".quad 0x646625202c373364,0x33646625202c3532,0x2e6c756d090a3b36,0x6466250920343666\n"
".quad 0x33646625202c3833,0x3733646625202c36,0x662e6c756d090a3b,0x3364662509203436\n"
".quad 0x3633646625202c39,0x3b3833646625202c,0x36662e6c756d090a,0x3033646625092034\n"
".quad 0x2c3533646625202c,0x0a3b393364662520,0x69646e6557444c24,0x7265746e695f5f5f\n"
".quad 0x327078655f6c616e,0x6c656e72656b5f69,0x0a3a315f3737315f,0x393109636f6c2e09\n"
".quad 0x090a300937343109,0x203436662e766f6d,0x202c303464662509,0x090a3b3033646625\n"
".quad 0x6d617261702e7473,0x5f5b09203436662e,0x746572616475635f,0x5f796d395a5f5f66\n"
".quad 0x646475725f766964,0x3034646625202c5d,0x0a3b746572090a3b,0x5f646e6557444c24\n"
".quad 0x69645f796d395a5f,0x0a3a646475725f76,0x5a5f202f2f207d09,0x5f7669645f796d39\n"
".quad 0x2e090a0a64647572,0x20656c6269736976,0x2e2820636e75662e,0x662e206d61726170\n"
".quad 0x6475635f5f203436,0x5a5f5f6674657261,0x5f7669645f796d39,0x5a5f202964646472\n"
".quad 0x5f7669645f796d39,0x702e282064646472,0x36662e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f31666d726170,0x7669645f796d395a,0x2e202c646464725f,0x662e206d61726170\n"
".quad 0x6475635f5f203436,0x5f32666d72617061,0x69645f796d395a5f,0x0a29646464725f76\n"
".quad 0x6765722e090a7b09,0x7225203233752e20,0x2e090a3b3e34363c,0x3436752e20676572\n"
".quad 0x3b3e353c64722520,0x2e206765722e090a,0x343c662520323366,0x6765722e090a3b3e\n"
".quad 0x6625203436662e20,0x090a3b3e32343c64,0x72702e206765722e,0x31313c7025206465\n"
".quad 0x636f6c2e090a3b3e,0x0931353109393109,0x656257444c240a30,0x6d395a5f5f6e6967\n"
".quad 0x64725f7669645f79,0x2e646c090a3a6464,0x36662e6d61726170,0x2c31646625092034\n"
".quad 0x616475635f5f5b20,0x5f5f31666d726170,0x7669645f796d395a,0x0a3b5d646464725f\n"
".quad 0x3436662e766f6d09,0x202c326466250920,0x6c090a3b31646625,0x2e6d617261702e64\n"
".quad 0x6466250920343666,0x75635f5f5b202c33,0x32666d7261706164,0x645f796d395a5f5f\n"
".quad 0x5d646464725f7669,0x662e766f6d090a3b,0x3464662509203436,0x0a3b33646625202c\n"
".quad 0x393109636f6c2e09,0x090a300933353109,0x203436662e766f6d,0x25202c3564662509\n"
".quad 0x6261090a3b346466,0x2509203436662e73,0x646625202c366466,0x2e766f6d090a3b34\n"
".quad 0x6466250920343666,0x3130306430202c37,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x303532322e32202f,0x090a3830332d6537,0x2e746c2e70746573,0x3170250920343666\n"
".quad 0x202c36646625202c,0x40090a3b37646625,0x6172622031702521,0x5f315f744c240920\n"
".quad 0x2e090a3b34393138,0x3109313309636f6c,0x6d090a3009313839,0x09203436662e766f\n"
".quad 0x6430202c38646625,0x3030303030353334,0x3030303030303030,0x382e31202f2f093b\n"
".quad 0x36312b6534343130,0x36662e6c756d090a,0x2c35646625092034,0x25202c3464662520\n"
".quad 0x6f6d090a3b386466,0x2509203233752e76,0x0a3b3435202c3172,0x696e752e61726209\n"
".quad 0x5f315f744c240920,0x4c240a3b38333937,0x343931385f315f74,0x09636f6c2e090a3a\n"
".quad 0x0934383931093133,0x752e766f6d090a30,0x2c31722509203233,0x5f744c240a3b3020\n"
".quad 0x0a3a383339375f31,0x3436622e766f6d09,0x252c3272257b0920,0x646625202c7d3372\n"
".quad 0x2e726873090a3b35,0x3472250920323373,0x32202c337225202c,0x2e646e61090a3b30\n"
".quad 0x3572250920323362,0x32202c347225202c,0x6f6d090a3b373430,0x2509203233752e76\n"
".quad 0x37343032202c3672,0x652e746573090a3b,0x33752e3233752e71,0x202c377225092032\n"
".quad 0x367225202c357225,0x732e67656e090a3b,0x2c38722509203233,0x6d090a3b37722520\n"
".quad 0x09203436662e766f,0x6430202c39646625,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x752e71652e746573,0x09203436662e3233,0x646625202c397225\n"
".quad 0x3b39646625202c36,0x33732e67656e090a,0x2c30317225092032,0x6f090a3b39722520\n"
".quad 0x2509203233622e72,0x387225202c313172,0x0a3b30317225202c,0x3233752e766f6d09\n"
".quad 0x202c323172250920,0x70746573090a3b30,0x203233732e71652e,0x7225202c32702509\n"
".quad 0x32317225202c3131,0x2032702540090a3b,0x744c240920617262,0x3b363037385f315f\n"
".quad 0x3309636f6c2e090a,0x3009393839310931,0x36662e646461090a,0x2c35646625092034\n"
".quad 0x25202c3564662520,0x6f6d090a3b356466,0x2509203233752e76,0x0a3b30202c333172\n"
".quad 0x696e752e61726209,0x5f315f744c240920,0x4c240a3b30353438,0x363037385f315f74\n"
".quad 0x09636f6c2e090a3a,0x0931393931093133,0x752e627573090a30,0x3431722509203233\n"
".quad 0x25202c357225202c,0x627573090a3b3172,0x722509203233752e,0x34317225202c3331\n"
".quad 0x0a3b32323031202c,0x313309636f6c2e09,0x0a30093239393109,0x3436622e766f6d09\n"
".quad 0x202c316472250920,0x61090a3b35646625,0x09203436622e646e,0x7225202c32647225\n"
".quad 0x3132392d202c3164,0x3237333438363838,0x3331333530343732,0x36622e726f090a3b\n"
".quad 0x2c33647225092034,0x34202c3264722520,0x3138383736323036,0x3936343632373139\n"
".quad 0x766f6d090a3b3231,0x662509203436622e,0x33647225202c3564,0x5f315f744c240a3b\n"
".quad 0x2e090a3a30353438,0x3109393109636f6c,0x656e090a30093036,0x2509203436662e67\n"
".quad 0x6625202c30316466,0x747663090a3b3564,0x2e3233662e6e722e,0x3166250920343666\n"
".quad 0x0a3b35646625202c,0x2e6e722e70637209,0x3266250920323366,0x090a3b316625202c\n"
".quad 0x2e3436662e747663,0x6466250920323366,0x3b326625202c3131,0x36662e766f6d090a\n"
".quad 0x3231646625092034,0x306666336430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x2e64616d090a3120,0x09203436662e6e72,0x25202c3331646625,0x6625202c30316466\n"
".quad 0x646625202c313164,0x64616d090a3b3231,0x203436662e6e722e,0x202c343164662509\n"
".quad 0x25202c3331646625,0x6625202c33316466,0x616d090a3b333164,0x3436662e6e722e64\n"
".quad 0x2c35316466250920,0x202c313164662520,0x25202c3431646625,0x6d090a3b31316466\n"
".quad 0x09203436662e766f,0x30202c3631646625,0x3030303066663364,0x3030303030303030\n"
".quad 0x0a31202f2f093b30,0x2e6e722e64616d09,0x6466250920343666,0x31646625202c3731\n"
".quad 0x3531646625202c30,0x3b3631646625202c,0x3109636f6c2e090a,0x0a30093136310939\n"
".quad 0x2e6e722e64616d09,0x6466250920343666,0x31646625202c3831,0x3731646625202c35\n"
".quad 0x3b3531646625202c,0x3109636f6c2e090a,0x0a30093536310939,0x2e6e722e6c756d09\n"
".quad 0x6466250920343666,0x32646625202c3931,0x3b3131646625202c,0x36662e67656e090a\n"
".quad 0x3032646625092034,0x3b3931646625202c,0x6e722e64616d090a,0x662509203436662e\n"
".quad 0x646625202c313264,0x35646625202c3032,0x0a3b32646625202c,0x2e6e722e64616d09\n"
".quad 0x6466250920343666,0x32646625202c3232,0x3531646625202c31,0x3b3931646625202c\n"
".quad 0x3109636f6c2e090a,0x0a30093936310939,0x3436662e67656e09,0x2c33326466250920\n"
".quad 0x0a3b323264662520,0x2e6d722e64616d09,0x6466250920343666,0x32646625202c3432\n"
".quad 0x2c35646625202c33,0x090a3b3264662520,0x662e6d722e64616d,0x3264662509203436\n"
".quad 0x3432646625202c35,0x2c3831646625202c,0x0a3b323264662520,0x3436662e73626109\n"
".quad 0x2c36326466250920,0x0a3b353264662520,0x3436662e766f6d09,0x2c37326466250920\n"
".quad 0x3030666637643020,0x3030303030303030,0x202f2f093b303030,0x746573090a666e69\n"
".quad 0x3436662e656c2e70,0x25202c3370250920,0x6625202c36326466,0x6573090a3b373264\n"
".quad 0x09203233732e706c,0x2c30202c35317225,0x3b337025202c3120,0x36662e766f6d090a\n"
".quad 0x3832646625092034,0x306666376430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x6573090a666e6920,0x3233752e71652e74,0x722509203436662e,0x32646625202c3631\n"
".quad 0x3832646625202c36,0x732e67656e090a3b,0x3731722509203233,0x0a3b36317225202c\n"
".quad 0x3436662e766f6d09,0x2c39326466250920,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x652e746573090a30,0x36662e3233752e71,0x2c38317225092034\n"
".quad 0x202c363264662520,0x090a3b3932646625,0x203233732e67656e,0x25202c3931722509\n"
".quad 0x726f090a3b383172,0x722509203233622e,0x37317225202c3032,0x0a3b39317225202c\n"
".quad 0x203233622e726f09,0x25202c3132722509,0x327225202c353172,0x2e766f6d090a3b30\n"
".quad 0x3272250920323375,0x73090a3b30202c32,0x732e71652e707465,0x2c34702509203233\n"
".quad 0x25202c3132722520,0x2540090a3b323272,0x0920617262203470,0x39385f315f744c24\n"
".quad 0x6f6c2e090a3b3236,0x3339310931330963,0x646461090a300937,0x662509203436662e\n"
".quad 0x646625202c303364,0x32646625202c3532,0x2e617262090a3b35,0x444c240920696e75\n"
".quad 0x5f5f5f69646e6557,0x6c616e7265746e69,0x6b5f69327078655f,0x37315f6c656e7265\n"
".quad 0x744c240a3b315f38,0x3a323639385f315f,0x33732e67656e090a,0x2c33327225092032\n"
".quad 0x090a3b3331722520,0x203233752e766f6d,0x30202c3432722509,0x2e70746573090a3b\n"
".quad 0x09203233732e656e,0x327225202c357025,0x3b34327225202c33,0x622035702540090a\n"
".quad 0x5f744c2409206172,0x0a3b343734395f31,0x313309636f6c2e09,0x0a30093034393109\n"
".quad 0x3436662e766f6d09,0x2c30336466250920,0x0a3b353264662520,0x696e752e61726209\n"
".quad 0x6e6557444c240920,0x746e695f5f5f6964,0x78655f6c616e7265,0x6e72656b5f693270\n"
".quad 0x315f3837315f6c65,0x5f315f744c240a3b,0x6d090a3a34373439,0x09203233732e766f\n"
".quad 0x3232202c35327225,0x746573090a3b3030,0x3233732e74672e70,0x25202c3670250920\n"
".quad 0x327225202c333272,0x2e766f6d090a3b35,0x3272250920323373,0x3b30303232202c36\n"
".quad 0x732e706c6573090a,0x3732722509203233,0x202c36327225202c,0x7025202c33327225\n"
".quad 0x2e766f6d090a3b36,0x3272250920323373,0x303032322d202c38,0x2e70746573090a3b\n"
".quad 0x09203233732e746c,0x327225202c377025,0x3b38327225202c37,0x33732e766f6d090a\n"
".quad 0x2c39327225092032,0x0a3b303032322d20,0x33732e706c657309,0x2c30337225092032\n"
".quad 0x25202c3932722520,0x377025202c373272,0x752e646461090a3b,0x3133722509203233\n"
".quad 0x202c30337225202c,0x6d090a3b31323031,0x09203233752e766f,0x3032202c32337225\n"
".quad 0x746573090a3b3234,0x3233752e74672e70,0x25202c3870250920,0x337225202c313372\n"
".quad 0x38702540090a3b32,0x4c24092061726220,0x363839395f315f74,0x09636f6c2e090a3b\n"
".quad 0x0935343931093133,0x732e646461090a30,0x3333722509203233,0x202c30337225202c\n"
".quad 0x73090a3b33323031,0x09203233622e6c68,0x7225202c34337225,0x0a3b3032202c3333\n"
".quad 0x3233732e766f6d09,0x202c353372250920,0x2e766f6d090a3b30,0x6466250920343662\n"
".quad 0x3372257b202c3133,0x3b7d343372252c35,0x36662e6c756d090a,0x3033646625092034\n"
".quad 0x2c3532646625202c,0x0a3b313364662520,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x746e695f5f5f6964,0x78655f6c616e7265,0x6e72656b5f693270,0x315f3837315f6c65\n"
".quad 0x5f315f744c240a3b,0x2e090a3a36383939,0x3109313309636f6c,0x61090a3009373439\n"
".quad 0x09203233752e6464,0x7225202c36337225,0x33343032202c3033,0x752e766f6d090a3b\n"
".quad 0x3733722509203233,0x0a3b36383034202c,0x74672e7074657309,0x702509203233752e\n"
".quad 0x2c36337225202c39,0x090a3b3733722520,0x6172622039702540,0x5f315f744c240920\n"
".quad 0x2e090a3b36323437,0x3109313309636f6c,0x73090a3009393439,0x09203233732e7268\n"
".quad 0x7225202c38337225,0x0a3b3133202c3033,0x3233732e766f6d09,0x202c393372250920\n"
".quad 0x2e646e61090a3b31,0x3472250920323362,0x2c38337225202c30,0x090a3b3933722520\n"
".quad 0x203233732e646461,0x25202c3134722509,0x337225202c303472,0x2e726873090a3b30\n"
".quad 0x3472250920323373,0x2c31347225202c32,0x627573090a3b3120,0x722509203233732e\n"
".quad 0x30337225202c3334,0x0a3b32347225202c,0x3233732e64646109,0x202c343472250920\n"
".quad 0x3031202c33347225,0x6c6873090a3b3332,0x722509203233622e,0x34347225202c3534\n"
".quad 0x6d090a3b3032202c,0x09203233732e766f,0x3b30202c36347225,0x36622e766f6d090a\n"
".quad 0x3233646625092034,0x2c363472257b202c,0x090a3b7d35347225,0x203233732e646461\n"
".quad 0x25202c3734722509,0x323031202c323472,0x2e6c6873090a3b33,0x3472250920323362\n"
".quad 0x2c37347225202c38,0x6f6d090a3b303220,0x2509203233732e76,0x0a3b30202c393472\n"
".quad 0x3436622e766f6d09,0x2c33336466250920,0x252c393472257b20,0x6d090a3b7d383472\n"
".quad 0x09203436662e6c75,0x25202c3433646625,0x6625202c35326466,0x756d090a3b333364\n"
".quad 0x2509203436662e6c,0x6625202c30336466,0x646625202c323364,0x617262090a3b3433\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x616e7265746e695f,0x5f69327078655f6c\n"
".quad 0x315f6c656e72656b,0x4c240a3b315f3837,0x363234375f315f74,0x09636f6c2e090a3a\n"
".quad 0x3009333533093133,0x33732e726873090a,0x2c30357225092032,0x33202c3033722520\n"
".quad 0x2e766f6d090a3b31,0x3572250920323373,0x61090a3b33202c31,0x09203233622e646e\n"
".quad 0x7225202c32357225,0x31357225202c3035,0x732e646461090a3b,0x3335722509203233\n"
".quad 0x202c32357225202c,0x73090a3b30337225,0x09203233732e7268,0x7225202c34357225\n"
".quad 0x090a3b32202c3335,0x732e6f6c2e6c756d,0x3535722509203233,0x202c34357225202c\n"
".quad 0x2e627573090a3b33,0x3572250920323373,0x2c30337225202c36,0x090a3b3535722520\n"
".quad 0x203233732e646461,0x25202c3735722509,0x323031202c363572,0x2e6c6873090a3b33\n"
".quad 0x3572250920323362,0x2c37357225202c38,0x6f6d090a3b303220,0x2509203233732e76\n"
".quad 0x0a3b30202c393572,0x3436622e766f6d09,0x2c35336466250920,0x252c393572257b20\n"
".quad 0x2e090a3b7d383572,0x3109313309636f6c,0x61090a3009343539,0x09203233732e6464\n"
".quad 0x7225202c30367225,0x33323031202c3435,0x622e6c6873090a3b,0x3136722509203233\n"
".quad 0x202c30367225202c,0x766f6d090a3b3032,0x722509203233732e,0x090a3b30202c3236\n"
".quad 0x203436622e766f6d,0x202c363364662509,0x72252c323672257b,0x756d090a3b7d3136\n"
".quad 0x2509203436662e6c,0x6625202c37336466,0x646625202c353264,0x6c756d090a3b3633\n"
".quad 0x662509203436662e,0x646625202c383364,0x33646625202c3633,0x2e6c756d090a3b37\n"
".quad 0x6466250920343666,0x33646625202c3933,0x3833646625202c36,0x662e6c756d090a3b\n"
".quad 0x3364662509203436,0x3533646625202c30,0x3b3933646625202c,0x646e6557444c240a\n"
".quad 0x65746e695f5f5f69,0x7078655f6c616e72,0x656e72656b5f6932,0x3a315f3837315f6c\n"
".quad 0x3109636f6c2e090a,0x0a30093936310939,0x3436662e766f6d09,0x2c30346466250920\n"
".quad 0x0a3b303364662520,0x617261702e747309,0x5b09203436662e6d,0x6572616475635f5f\n"
".quad 0x796d395a5f5f6674,0x6464725f7669645f,0x34646625202c5d64,0x3b746572090a3b30\n"
".quad 0x646e6557444c240a,0x645f796d395a5f5f,0x3a646464725f7669,0x5f202f2f207d090a\n"
".quad 0x7669645f796d395a,0x090a0a646464725f,0x656c62697369762e,0x5f20636e75662e20\n"
".quad 0x6f7477656e31325a,0x767265746e695f6e,0x657669616e5f6c61,0x33353536694c6449\n"
".quad 0x45383231694c4536,0x6f6c673231527645,0x636174735f6c6162,0x65746e693231496b\n"
".quad 0x7570675f6c617672,0x5f315458455f5449,0x5245455f30545845,0x2e2820695f33534b\n"
".quad 0x752e206d61726170,0x6475635f5f203436,0x5f31666d72617061,0x7477656e31325a5f\n"
".quad 0x7265746e695f6e6f,0x7669616e5f6c6176,0x353536694c644965,0x383231694c453633\n"
".quad 0x6c67323152764545,0x6174735f6c61626f,0x746e693231496b63,0x70675f6c61767265\n"
".quad 0x315458455f544975,0x45455f305458455f,0x202c695f33534b52,0x2e206d617261702e\n"
".quad 0x75635f5f20343675,0x32666d7261706164,0x77656e31325a5f5f,0x65746e695f6e6f74\n"
".quad 0x69616e5f6c617672,0x3536694c64496576,0x3231694c45363335,0x6732315276454538\n"
".quad 0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574,0x5458455f54497570\n"
".quad 0x455f305458455f31,0x2c695f33534b5245,0x206d617261702e20,0x635f5f203233732e\n"
".quad 0x666d726170616475,0x656e31325a5f5f33,0x746e695f6e6f7477,0x616e5f6c61767265\n"
".quad 0x36694c6449657669,0x31694c4536333535,0x3231527645453832,0x735f6c61626f6c67\n"
".quad 0x693231496b636174,0x5f6c61767265746e,0x58455f5449757067,0x5f305458455f3154\n"
".quad 0x695f33534b524545,0x722e090a7b090a29,0x203233752e206765,0x0a3b3e36343c7225\n"
".quad 0x752e206765722e09,0x323c647225203436,0x65722e090a3b3e39,0x25203436662e2067\n"
".quad 0x3b3e3634313c6466,0x2e206765722e090a,0x3c70252064657270,0x6c2e090a3b3e3034\n"
".quad 0x6c612e206c61636f,0x622e2038206e6769,0x616475635f5f2038,0x5f616475635f5f5f\n"
".quad 0x61765f6c61636f6c,0x5f30313837365f72,0x635f6e6f6e5f3233,0x726f775f74736e6f\n"
".quad 0x30325b3036315f6b,0x6c2e090a3b5d3635,0x333632093409636f,0x6257444c240a3009\n"
".quad 0x325a5f5f6e696765,0x5f6e6f7477656e31,0x6c61767265746e69,0x6449657669616e5f\n"
".quad 0x453633353536694c,0x764545383231694c,0x61626f6c67323152,0x496b636174735f6c\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x58455f315458455f,0x534b5245455f3054\n"
".quad 0x646c090a3a695f33,0x752e6d617261702e,0x3164722509203436,0x6475635f5f5b202c\n"
".quad 0x5f31666d72617061,0x7477656e31325a5f,0x7265746e695f6e6f,0x7669616e5f6c6176\n"
".quad 0x353536694c644965,0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f\n"
".quad 0x746e693231496b63,0x70675f6c61767265,0x315458455f544975,0x45455f305458455f\n"
".quad 0x3b5d695f33534b52,0x36732e766f6d090a,0x2c32647225092034,0x090a3b3164722520\n"
".quad 0x6d617261702e646c,0x722509203436752e,0x635f5f5b202c3364,0x666d726170616475\n"
".quad 0x656e31325a5f5f32,0x746e695f6e6f7477,0x616e5f6c61767265,0x36694c6449657669\n"
".quad 0x31694c4536333535,0x3231527645453832,0x735f6c61626f6c67,0x693231496b636174\n"
".quad 0x5f6c61767265746e,0x58455f5449757067,0x5f305458455f3154,0x695f33534b524545\n"
".quad 0x2e766f6d090a3b5d,0x6472250920343673,0x3b33647225202c34,0x7261702e646c090a\n"
".quad 0x09203233752e6d61,0x5f5f5b202c317225,0x6d72617061647563,0x6e31325a5f5f3366\n"
".quad 0x6e695f6e6f747765,0x6e5f6c6176726574,0x694c644965766961,0x694c453633353536\n"
".quad 0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f,0x766f6d090a3b5d69\n"
".quad 0x722509203233732e,0x0a3b317225202c32,0x093409636f6c2e09,0x6d090a3009323732\n"
".quad 0x09203233732e766f,0x0a3b30202c337225,0x61636f6c2e747309,0x5b09203233732e6c\n"
".quad 0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163,0x32335f3031383736\n"
".quad 0x6e6f635f6e6f6e5f,0x5f6b726f775f7473,0x383430322b303631,0x0a3b337225202c5d\n"
".quad 0x203436662e646c09,0x5b202c3164662509,0x3b5d302b34647225,0x636f6c2e7473090a\n"
".quad 0x09203436662e6c61,0x5f616475635f5f5b,0x6c5f616475635f5f,0x7261765f6c61636f\n"
".quad 0x335f30313837365f,0x6f635f6e6f6e5f32,0x6b726f775f74736e,0x2c5d302b3036315f\n"
".quad 0x090a3b3164662520,0x09203436662e646c,0x255b202c32646625,0x0a3b5d382b346472\n"
".quad 0x61636f6c2e747309,0x5b09203436662e6c,0x5f5f616475635f5f,0x6f6c5f616475635f\n"
".quad 0x5f7261765f6c6163,0x32335f3031383736,0x6e6f635f6e6f6e5f,0x5f6b726f775f7473\n"
".quad 0x202c5d382b303631,0x63090a3b32646625,0x61636f6c2e617476,0x2509203436752e6c\n"
".quad 0x635f5f202c356472,0x75635f5f5f616475,0x6c61636f6c5f6164,0x3837365f7261765f\n"
".quad 0x6f6e5f32335f3031,0x5f74736e6f635f6e,0x3036315f6b726f77,0x5f325f744c240a3b\n"
".quad 0x0a3a303735333731,0x706f6f6c3c2f2f20,0x6220706f6f4c203e,0x656e696c2079646f\n"
".quad 0x6c2e090a36373220,0x363732093409636f,0x2e766f6d090a3009,0x3472250920323373\n"
".quad 0x090a3b337225202c,0x203233732e627573,0x7225202c33722509,0x73090a3b31202c34\n"
".quad 0x2e6c61636f6c2e74,0x5f5f5b0920323373,0x635f5f5f61647563,0x61636f6c5f616475\n"
".quad 0x37365f7261765f6c,0x6e5f32335f303138,0x74736e6f635f6e6f,0x36315f6b726f775f\n"
".quad 0x2c5d383430322b30,0x63090a3b33722520,0x732e3436732e7476,0x3664722509203233\n"
".quad 0x090a3b337225202c,0x656469772e6c756d,0x722509203233732e,0x2c337225202c3764\n"
".quad 0x6461090a3b363120,0x2509203436752e64,0x647225202c386472,0x3b35647225202c37\n"
".quad 0x3436662e646c090a,0x202c336466250920,0x36312b386472255b,0x662e646c090a3b5d\n"
".quad 0x3464662509203436,0x2b386472255b202c,0x6c2e090a3b5d3432,0x383732093409636f\n"
".quad 0x2e646461090a3009,0x6466250920343666,0x2c33646625202c35,0x090a3b3464662520\n"
".quad 0x2e71652e70746573,0x3170250920343666,0x202c35646625202c,0x40090a3b35646625\n"
".quad 0x6172622031702521,0x5f325f744c240920,0x0a3b383536383931,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c36373220\n"
".quad 0x6c6562616c206461,0x325f744c24206465,0x0a3037353337315f,0x093409636f6c2e09\n"
".quad 0x6e090a3009383031,0x09203436662e6765,0x6625202c36646625,0x646461090a3b3364\n"
".quad 0x203436662e70722e,0x25202c3764662509,0x646625202c346466,0x2e766f6d090a3b36\n"
".quad 0x6466250920343666,0x6566336430202c38,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x6d090a352e30202f,0x09203436662e6c75,0x6625202c39646625,0x38646625202c3564\n"
".quad 0x662e736261090a3b,0x3164662509203436,0x3b39646625202c30,0x36662e766f6d090a\n"
".quad 0x3131646625092034,0x306265336430202c,0x3030306137663663,0x2f2f093b30303030\n"
".quad 0x090a36302d653120,0x203436662e6c756d,0x202c323164662509,0x25202c3031646625\n"
".quad 0x73090a3b31316466,0x662e656c2e707465,0x2c32702509203436,0x25202c3764662520\n"
".quad 0x40090a3b32316466,0x2061726220327025,0x315f325f744c2409,0x200a3b3039323830\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093233,0x2509203436662e76,0x6430202c33316466\n"
".quad 0x3030303030666662,0x3030303030303030,0x0a312d202f2f093b,0x2e6d722e64646109\n"
".quad 0x6466250920343666,0x33646625202c3431,0x3b3331646625202c,0x36662e766f6d090a\n"
".quad 0x3531646625092034,0x303030306430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x70746573090a3020,0x203436662e65672e,0x6625202c33702509,0x646625202c343164\n"
".quad 0x252140090a3b3531,0x0920617262203370,0x31315f325f744c24,0x2f200a3b30313433\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337\n"
".quad 0x3333093309636f6c,0x6c756d090a300933,0x203436662e6d722e,0x202c363164662509\n"
".quad 0x25202c3431646625,0x6d090a3b34316466,0x09203436662e766f,0x30202c3731646625\n"
".quad 0x3030303066666264,0x3030303030303030,0x312d202f2f093b30,0x70722e646461090a\n"
".quad 0x662509203436662e,0x646625202c383164,0x3731646625202c34,0x722e6c756d090a3b\n"
".quad 0x2509203436662e70,0x6625202c39316466,0x646625202c383164,0x617262090a3b3831\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x657261757173365a,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x325f3937315f5f32,0x325f744c240a3b34\n"
".quad 0x3a3031343331315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x3037353337315f32,0x3309636f6c2e090a,0x090a300934333309,0x203436662e766f6d\n"
".quad 0x202c303264662509,0x3030306666626430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x722e646461090a31,0x2509203436662e70,0x6625202c38316466,0x32646625202c3464\n"
".quad 0x2e766f6d090a3b30,0x6466250920343666,0x30306430202c3132,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e656c2e7074,0x202c347025092034\n"
".quad 0x25202c3831646625,0x40090a3b31326466,0x6172622034702521,0x5f325f744c240920\n"
".quad 0x0a3b363636333131,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c36373220,0x6c6562616c206461,0x325f744c24206465\n"
".quad 0x0a3037353337315f,0x093309636f6c2e09,0x6d090a3009353333,0x36662e6d722e6c75\n"
".quad 0x3631646625092034,0x2c3831646625202c,0x0a3b383164662520,0x2e70722e6c756d09\n"
".quad 0x6466250920343666,0x31646625202c3931,0x3431646625202c34,0x752e617262090a3b\n"
".quad 0x57444c240920696e,0x365a5f5f69646e65,0x6449657261757173,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x3b34325f3937315f,0x315f325f744c240a\n"
".quad 0x200a3a3636363331,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064\n"
".quad 0x090a303735333731,0x33093309636f6c2e,0x756d090a30093733,0x3436662e70722e6c\n"
".quad 0x2c32326466250920,0x202c343164662520,0x090a3b3431646625,0x662e70722e6c756d\n"
".quad 0x3264662509203436,0x3831646625202c33,0x3b3831646625202c,0x36662e78616d090a\n"
".quad 0x3931646625092034,0x2c3232646625202c,0x0a3b333264662520,0x3436662e766f6d09\n"
".quad 0x2c36316466250920,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x6e6557444c240a30,0x7173365a5f5f6964,0x3145644965726175,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x315f5f32534b5245,0x200a3a34325f3937,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c363732\n"
".quad 0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731,0x31093409636f6c2e\n"
".quad 0x7663090a30093830,0x3436662e6e722e74,0x662509203233732e,0x327225202c343264\n"
".quad 0x662e67656e090a3b,0x3264662509203436,0x3432646625202c35,0x662e766f6d090a3b\n"
".quad 0x3264662509203436,0x6665336430202c36,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x383532352e31202f,0x6d090a35302d6538,0x09203436662e6c75,0x25202c3732646625\n"
".quad 0x6625202c35326466,0x756d090a3b363264,0x3436662e6d722e6c,0x2c38326466250920\n"
".quad 0x202c373264662520,0x6d090a3b33646625,0x36662e6d722e6c75,0x3932646625092034\n"
".quad 0x2c3732646625202c,0x090a3b3464662520,0x662e70722e6c756d,0x3364662509203436\n"
".quad 0x3732646625202c30,0x0a3b33646625202c,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x32646625202c3133,0x3b34646625202c37,0x36662e6e696d090a,0x3233646625092034\n"
".quad 0x2c3832646625202c,0x0a3b393264662520,0x2e6d722e64646109,0x6466250920343666\n"
".quad 0x31646625202c3333,0x3233646625202c36,0x662e78616d090a3b,0x3364662509203436\n"
".quad 0x3033646625202c34,0x3b3133646625202c,0x70722e646461090a,0x662509203436662e\n"
".quad 0x646625202c353364,0x33646625202c3931,0x2e646461090a3b34,0x6466250920343666\n"
".quad 0x33646625202c3633,0x3533646625202c33,0x2e70746573090a3b,0x203436662e75656e\n"
".quad 0x6625202c35702509,0x646625202c363364,0x252140090a3b3633,0x0920617262203570\n"
".quad 0x37315f325f744c24,0x2f200a3b38333334,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637,0x64656c6562616c20\n"
".quad 0x315f325f744c2420,0x2e090a3037353337,0x3838093309636f6c,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x30306430202c3733,0x3030303030303030,0x093b303030303030\n"
".quad 0x7262090a30202f2f,0x240920696e752e61,0x5f69646e6557444c,0x6874646977355a5f\n"
".quad 0x6932315f54456449,0x5f6c61767265746e,0x455f305349757067,0x3b36325f3937315f\n"
".quad 0x315f325f744c240a,0x200a3a3833333437,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c363732,0x656c6562616c2064\n"
".quad 0x5f325f744c242064,0x090a303735333731,0x39093309636f6c2e,0x67656e090a300930\n"
".quad 0x662509203436662e,0x646625202c383364,0x646461090a3b3333,0x203436662e70722e\n"
".quad 0x202c373364662509,0x25202c3533646625,0x4c240a3b38336466,0x5f5f69646e655744\n"
".quad 0x496874646977355a,0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570\n"
".quad 0x0a3a36325f393731,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c36373220,0x6c6562616c206461,0x325f744c24206465\n"
".quad 0x0a3037353337315f,0x093409636f6c2e09,0x6d090a3009383031,0x09203436662e766f\n"
".quad 0x30202c3933646625,0x6636633062653364,0x3030303030306137,0x6531202f2f093b30\n"
".quad 0x746573090a36302d,0x3436662e656c2e70,0x25202c3670250920,0x6625202c37336466\n"
".quad 0x2140090a3b393364,0x2061726220367025,0x315f325f744c2409,0x240a3b3835363839\n"
".quad 0x3830315f325f744c,0x2f2f200a3a303932,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6f6d090a30373533,0x2509203233732e76,0x090a3b31202c3572\n"
".quad 0x20696e752e617262,0x315f325f744c2409,0x240a3b3236333131,0x3839315f325f744c\n"
".quad 0x744c240a3a383536,0x34353830315f325f,0x6c3c2f2f200a3a36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x353337315f325f74,0x2e766f6d090a3037,0x3572250920323373\n"
".quad 0x744c240a3b30202c,0x36333131315f325f,0x6c3c2f2f200a3a32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x353337315f325f74,0x636f6c2e090a3037,0x3009383732093409\n"
".quad 0x33752e766f6d090a,0x202c367225092032,0x70746573090a3b30,0x203233732e71652e\n"
".quad 0x7225202c37702509,0x0a3b367225202c35,0x7262203770254009,0x325f744c24092061\n"
".quad 0x3b3630313537315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x3037353337315f32,0x3409636f6c2e090a,0x090a300930383209,0x09203436752e646c\n"
".quad 0x255b202c39647225,0x0a3b5d302b326472,0x203233732e646c09,0x255b202c37722509\n"
".quad 0x0a3b5d382b326472,0x3436732e74766309,0x722509203233732e,0x377225202c303164\n"
".quad 0x772e6c756d090a3b,0x203233732e656469,0x202c313164722509,0x3b3631202c377225\n"
".quad 0x36752e646461090a,0x3231647225092034,0x202c39647225202c,0x090a3b3131647225\n"
".quad 0x09203436662e7473,0x302b32316472255b,0x3b33646625202c5d,0x3436752e646c090a\n"
".quad 0x2c33316472250920,0x302b326472255b20,0x732e646c090a3b5d,0x2c38722509203233\n"
".quad 0x382b326472255b20,0x2e747663090a3b5d,0x203233732e343673,0x202c343164722509\n"
".quad 0x756d090a3b387225,0x732e656469772e6c,0x3164722509203233,0x202c387225202c35\n"
".quad 0x646461090a3b3631,0x722509203436752e,0x647225202c363164,0x31647225202c3331\n"
".quad 0x662e7473090a3b35,0x6472255b09203436,0x25202c5d382b3631,0x646c090a3b346466\n"
".quad 0x722509203233732e,0x326472255b202c39,0x6461090a3b5d382b,0x2509203233732e64\n"
".quad 0x397225202c303172,0x3b3633353536202c,0x3233732e7473090a,0x2b326472255b0920\n"
".quad 0x30317225202c5d38,0x752e617262090a3b,0x5f744c240920696e,0x3035343030325f32\n"
".quad 0x5f325f744c240a3b,0x0a3a363031353731,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c36373220,0x6c6562616c206461\n"
".quad 0x325f744c24206465,0x0a3037353337315f,0x093309636f6c2e09,0x6d090a3009323333\n"
".quad 0x09203436662e766f,0x30202c3034646625,0x3030303065663364,0x3030303030303030\n"
".quad 0x2e30202f2f093b30,0x662e6c756d090a35,0x3464662509203436,0x2c35646625202c31\n"
".quad 0x0a3b303464662520,0x3436662e766f6d09,0x2c32346466250920,0x3030666662643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x2e646461090a312d,0x09203436662e6d72\n"
".quad 0x25202c3334646625,0x6625202c31346466,0x6f6d090a3b323464,0x2509203436662e76\n"
".quad 0x6430202c34346466,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x2e65672e70746573,0x3870250920343666,0x2c3334646625202c,0x0a3b343464662520\n"
".quad 0x6220387025214009,0x5f744c2409206172,0x3433343431315f32,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c36373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x37353337315f325f,0x09636f6c2e090a30\n"
".quad 0x0a30093333330933,0x2e6d722e6c756d09,0x6466250920343666,0x34646625202c3534\n"
".quad 0x3334646625202c33,0x662e766f6d090a3b,0x3464662509203436,0x6666626430202c36\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x6461090a312d202f,0x3436662e70722e64\n"
".quad 0x2c37346466250920,0x202c313464662520,0x090a3b3634646625,0x662e70722e6c756d\n"
".quad 0x3464662509203436,0x3734646625202c38,0x3b3734646625202c,0x6e752e617262090a\n"
".quad 0x6557444c24092069,0x73365a5f5f69646e,0x4564496572617571,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x5f5f32534b52455f,0x0a3b32325f393731,0x31315f325f744c24\n"
".quad 0x2f200a3a34333434,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420\n"
".quad 0x2e090a3037353337,0x3333093309636f6c,0x766f6d090a300934,0x662509203436662e\n"
".quad 0x626430202c393464,0x3030303030306666,0x3b30303030303030,0x090a312d202f2f09\n"
".quad 0x662e70722e646461,0x3464662509203436,0x3134646625202c37,0x3b3934646625202c\n"
".quad 0x36662e766f6d090a,0x3035646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e656c2e,0x6625202c39702509\n"
".quad 0x646625202c373464,0x252140090a3b3035,0x0920617262203970,0x31315f325f744c24\n"
".quad 0x2f200a3b30393634,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420\n"
".quad 0x2e090a3037353337,0x3333093309636f6c,0x6c756d090a300935,0x203436662e6d722e\n"
".quad 0x202c353464662509,0x25202c3734646625,0x6d090a3b37346466,0x36662e70722e6c75\n"
".quad 0x3834646625092034,0x2c3334646625202c,0x0a3b333464662520,0x696e752e61726209\n"
".quad 0x6e6557444c240920,0x7173365a5f5f6964,0x3145644965726175,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x315f5f32534b5245,0x240a3b32325f3937,0x3431315f325f744c\n"
".quad 0x2f2f200a3a303936,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c,0x37315f325f744c24\n"
".quad 0x6c2e090a30373533,0x373333093309636f,0x2e6c756d090a3009,0x09203436662e7072\n"
".quad 0x25202c3135646625,0x6625202c33346466,0x756d090a3b333464,0x3436662e70722e6c\n"
".quad 0x2c32356466250920,0x202c373464662520,0x090a3b3734646625,0x203436662e78616d\n"
".quad 0x202c383464662509,0x25202c3135646625,0x6d090a3b32356466,0x09203436662e766f\n"
".quad 0x30202c3534646625,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x69646e6557444c24,0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x3937315f5f32534b,0x2f2f200a3a32325f,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36\n"
".quad 0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533,0x313033093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x30346430202c3335,0x3030303030303030\n"
".quad 0x093b303030303030,0x756d090a32202f2f,0x3436662e70722e6c,0x2c34356466250920\n"
".quad 0x202c333564662520,0x6d090a3b33646625,0x09203436662e766f,0x30202c3535646625\n"
".quad 0x3030303030303464,0x3030303030303030,0x0a32202f2f093b30,0x2e70722e6c756d09\n"
".quad 0x6466250920343666,0x35646625202c3635,0x3b34646625202c35,0x6e722e747663090a\n"
".quad 0x3233732e3436662e,0x2c37356466250920,0x6d090a3b32722520,0x09203436662e766f\n"
".quad 0x30202c3835646625,0x3030303030303464,0x3030303030303030,0x0a32202f2f093b30\n"
".quad 0x2e6d722e6c756d09,0x6466250920343666,0x35646625202c3935,0x3b33646625202c38\n"
".quad 0x36662e766f6d090a,0x3036646625092034,0x303030346430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x2e6c756d090a3220,0x09203436662e6d72,0x25202c3136646625\n"
".quad 0x6625202c30366466,0x67656e090a3b3464,0x662509203436662e,0x646625202c323664\n"
".quad 0x766f6d090a3b3735,0x662509203436662e,0x336430202c333664,0x3030303030306665\n"
".quad 0x3b30303030303030,0x32352e31202f2f09,0x0a35302d65383835,0x3436662e6c756d09\n"
".quad 0x2c37326466250920,0x202c323664662520,0x090a3b3336646625,0x203436662e766f6d\n"
".quad 0x202c343664662509,0x3030303030636430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x662e646461090a32,0x3664662509203436,0x3732646625202c35,0x3b3436646625202c\n"
".quad 0x36662e78616d090a,0x3636646625092034,0x2c3435646625202c,0x0a3b363564662520\n"
".quad 0x2e70722e64646109,0x6466250920343666,0x36646625202c3736,0x3536646625202c36\n"
".quad 0x662e6e696d090a3b,0x3664662509203436,0x3935646625202c38,0x3b3136646625202c\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x646625202c393664,0x36646625202c3836\n"
".quad 0x2e766f6d090a3b35,0x6466250920343666,0x30306430202c3037,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x3233752e65672e74,0x722509203436662e\n"
".quad 0x36646625202c3131,0x3037646625202c37,0x732e67656e090a3b,0x3231722509203233\n"
".quad 0x0a3b31317225202c,0x3436662e766f6d09,0x2c31376466250920,0x3030303030643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x6c2e746573090a30,0x36662e3233752e65\n"
".quad 0x2c33317225092034,0x202c393664662520,0x090a3b3137646625,0x203233732e67656e\n"
".quad 0x25202c3431722509,0x6e61090a3b333172,0x2509203233622e64,0x317225202c353172\n"
".quad 0x3b34317225202c32,0x33752e766f6d090a,0x2c36317225092032,0x746573090a3b3020\n"
".quad 0x3233732e71652e70,0x202c303170250920,0x7225202c35317225,0x702540090a3b3631\n"
".quad 0x0920617262203031,0x32315f325f744c24,0x2f200a3b32323736,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3033093309636f6c\n"
".quad 0x766f6d090a300932,0x662509203436662e,0x306430202c323764,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e656e2e707465,0x3131702509203436\n"
".quad 0x2c3736646625202c,0x0a3b323764662520,0x3436662e766f6d09,0x2c33376466250920\n"
".quad 0x3030303030643020,0x3030303030303030,0x202f2f093b303030,0x2e70746573090a30\n"
".quad 0x203436662e75656e,0x25202c3231702509,0x6625202c39366466,0x2140090a3b333764\n"
".quad 0x6172622032317025,0x5f325f744c240920,0x0a3b383739363231,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c36373220\n"
".quad 0x6c6562616c206461,0x325f744c24206465,0x0a3037353337315f,0x093309636f6c2e09\n"
".quad 0x40090a3009333033,0x7262203131702521,0x325f744c24092061,0x3b3433323732315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c,0x3037353337315f32\n"
".quad 0x3309636f6c2e090a,0x090a300934303309,0x662e6d722e6c756d,0x3764662509203436\n"
".quad 0x3732646625202c34,0x3b3134646625202c,0x70722e6c756d090a,0x662509203436662e\n"
".quad 0x646625202c353764,0x34646625202c3732,0x2e646461090a3b31,0x09203436662e6d72\n"
".quad 0x25202c3637646625,0x6625202c35346466,0x6461090a3b343764,0x3436662e70722e64\n"
".quad 0x2c37376466250920,0x202c383464662520,0x090a3b3537646625,0x203436662e766f6d\n"
".quad 0x202c383764662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x71652e746573090a,0x3436662e3233752e,0x202c373172250920,0x25202c3737646625\n"
".quad 0x6e090a3b38376466,0x09203233732e6765,0x7225202c38317225,0x766f6d090a3b3731\n"
".quad 0x662509203436662e,0x306430202c393764,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x33752e71652e7465,0x2509203436662e32,0x646625202c393172\n"
".quad 0x37646625202c3637,0x2e67656e090a3b39,0x3272250920323373,0x3b39317225202c30\n"
".quad 0x33622e646e61090a,0x2c31327225092032,0x25202c3831722520,0x6f6d090a3b303272\n"
".quad 0x2509203233752e76,0x0a3b30202c323272,0x71652e7074657309,0x702509203233732e\n"
".quad 0x31327225202c3331,0x0a3b32327225202c,0x6220333170254009,0x5f744c2409206172\n"
".quad 0x3835343937315f32,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x37353337315f325f,0x09636f6c2e090a30,0x0a30093236320933,0x3436662e766f6d09\n"
".quad 0x2c30386466250920,0x0a3b363764662520,0x3436662e766f6d09,0x2c31386466250920\n"
".quad 0x0a3b373764662520,0x3233732e766f6d09,0x202c333272250920,0x2e617262090a3b30\n"
".quad 0x444c240920696e75,0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32\n"
".quad 0x0a3b39315f393731,0x37315f325f744c24,0x2f200a3a38353439,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3732093309636f6c\n"
".quad 0x766f6d090a300930,0x662509203436662e,0x306430202c323864,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x3431702509203436\n"
".quad 0x2c3737646625202c,0x0a3b323864662520,0x2034317025214009,0x744c240920617262\n"
".quad 0x34373732315f325f,0x6c3c2f2f200a3b36,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x353337315f325f74,0x636f6c2e090a3037,0x3009323732093309,0x70722e766964090a\n"
".quad 0x662509203436662e,0x646625202c313864,0x36646625202c3737,0x2e766f6d090a3b37\n"
".quad 0x6466250920343666,0x66666430202c3038,0x3030303030303066,0x093b303030303030\n"
".quad 0x0a666e692d202f2f,0x3233732e766f6d09,0x202c333272250920,0x2e617262090a3b31\n"
".quad 0x444c240920696e75,0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32\n"
".quad 0x0a3b39315f393731,0x32315f325f744c24,0x2f200a3a36343737,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3732093309636f6c\n"
".quad 0x766f6d090a300933,0x662509203436662e,0x306430202c333864,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x3531702509203436\n"
".quad 0x2c3637646625202c,0x0a3b333864662520,0x2035317025214009,0x744c240920617262\n"
".quad 0x30303832315f325f,0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x353337315f325f74,0x2e766f6d090a3037,0x6466250920343666,0x66376430202c3138\n"
".quad 0x3030303030303066,0x093b303030303030,0x090a666e69202f2f,0x203436662e766f6d\n"
".quad 0x202c303864662509,0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x766f6d090a666e69,0x722509203233732e,0x090a3b30202c3332,0x20696e752e617262\n"
".quad 0x646e6557444c2409,0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644931747261\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x34535f32534b5245,0x5f3937315f62525f\n"
".quad 0x5f744c240a3b3931,0x3230303832315f32,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x37353337315f325f,0x09636f6c2e090a30,0x0a30093837320933\n"
".quad 0x2e70722e76696409,0x6466250920343666,0x37646625202c3138,0x3936646625202c36\n"
".quad 0x662e766f6d090a3b,0x3864662509203436,0x6666666430202c30,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x090a666e692d202f,0x203233732e766f6d,0x31202c3332722509\n"
".quad 0x6e6557444c240a3b,0x6434315a5f5f6964,0x5f6f72657a5f7669,0x4564493174726170\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x535f32534b52455f,0x3937315f62525f34\n"
".quad 0x2f2f200a3a39315f,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c,0x37315f325f744c24\n"
".quad 0x6c2e090a30373533,0x343033093309636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x38646625202c3438,0x2e766f6d090a3b30,0x6466250920343666,0x38646625202c3538\n"
".quad 0x2e617262090a3b31,0x444c240920696e75,0x5f5f5f69646e6557,0x6c616e7265746e69\n"
".quad 0x72656b5f6e616e5f,0x5f3937315f6c656e,0x5f744c240a3b3431,0x3433323732315f32\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c36373220656e,0x62616c2064616568,0x744c242064656c65,0x37353337315f325f\n"
".quad 0x09636f6c2e090a30,0x0a30093630330933,0x2e6d722e6c756d09,0x6466250920343666\n"
".quad 0x32646625202c3437,0x3134646625202c37,0x722e6c756d090a3b,0x2509203436662e70\n"
".quad 0x6625202c35376466,0x646625202c373264,0x646461090a3b3134,0x203436662e6d722e\n"
".quad 0x202c363764662509,0x25202c3534646625,0x61090a3b34376466,0x36662e70722e6464\n"
".quad 0x3737646625092034,0x2c3834646625202c,0x0a3b353764662520,0x3436662e766f6d09\n"
".quad 0x2c36386466250920,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x652e746573090a30,0x36662e3233752e71,0x2c34327225092034,0x202c373764662520\n"
".quad 0x090a3b3638646625,0x203233732e67656e,0x25202c3532722509,0x6f6d090a3b343272\n"
".quad 0x2509203436662e76,0x6430202c37386466,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x752e71652e746573,0x09203436662e3233,0x6625202c36327225\n"
".quad 0x646625202c363764,0x67656e090a3b3738,0x722509203233732e,0x36327225202c3732\n"
".quad 0x622e646e61090a3b,0x3832722509203233,0x202c35327225202c,0x6d090a3b37327225\n"
".quad 0x09203233752e766f,0x3b30202c39327225,0x652e70746573090a,0x2509203233732e71\n"
".quad 0x327225202c363170,0x3b39327225202c38,0x203631702540090a,0x744c240920617262\n"
".quad 0x37393937315f325f,0x6c3c2f2f200a3b30,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x353337315f325f74,0x636f6c2e090a3037,0x3009343432093309,0x36662e766f6d090a\n"
".quad 0x3838646625092034,0x3b3637646625202c,0x36662e766f6d090a,0x3938646625092034\n"
".quad 0x3b3737646625202c,0x6e752e617262090a,0x6557444c24092069,0x32315a5f5f69646e\n"
".quad 0x6167656e5f766964,0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x4b525f32534b5245,0x5f3937315f5f3153,0x5f744c240a3b3731,0x3037393937315f32\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c36373220656e,0x62616c2064616568,0x744c242064656c65,0x37353337315f325f\n"
".quad 0x09636f6c2e090a30,0x0a30093934320933,0x3436662e766f6d09,0x2c30396466250920\n"
".quad 0x3030303030643020,0x3030303030303030,0x202f2f093b303030,0x2e70746573090a30\n"
".quad 0x09203436662e746c,0x6625202c37317025,0x646625202c373764,0x252140090a3b3039\n"
".quad 0x2061726220373170,0x315f325f744c2409,0x200a3b3431353832,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c363732\n"
".quad 0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731,0x32093309636f6c2e\n"
".quad 0x6964090a30093035,0x3436662e6d722e76,0x2c38386466250920,0x202c373764662520\n"
".quad 0x090a3b3936646625,0x203436662e766f6d,0x202c393864662509,0x3030306666376430\n"
".quad 0x3030303030303030,0x69202f2f093b3030,0x2e617262090a666e,0x444c240920696e75\n"
".quad 0x5a5f5f69646e6557,0x656e5f7669643231,0x6449657669746167,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x37315f5f31534b52,0x4c240a3b37315f39\n"
".quad 0x353832315f325f74,0x3c2f2f200a3a3431,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x36373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x3337315f325f744c,0x6f6c2e090a303735,0x0931353209330963,0x662e766f6d090a30\n"
".quad 0x3964662509203436,0x3030306430202c31,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x746573090a30202f,0x3436662e746c2e70,0x202c383170250920,0x25202c3637646625\n"
".quad 0x40090a3b31396466,0x7262203831702521,0x325f744c24092061,0x3b3037373832315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c,0x3037353337315f32\n"
".quad 0x36662e766f6d090a,0x3938646625092034,0x306666376430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x6f6d090a666e6920,0x2509203436662e76,0x6430202c38386466\n"
".quad 0x3030303030666666,0x3030303030303030,0x6e692d202f2f093b,0x752e617262090a66\n"
".quad 0x57444c240920696e,0x315a5f5f69646e65,0x67656e5f76696432,0x4564496576697461\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x525f32534b52455f,0x3937315f5f31534b\n"
".quad 0x744c240a3b37315f,0x37373832315f325f,0x6c3c2f2f200a3a30,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x353337315f325f74,0x636f6c2e090a3037,0x3009343532093309\n"
".quad 0x70722e766964090a,0x662509203436662e,0x646625202c393864,0x36646625202c3637\n"
".quad 0x2e766f6d090a3b39,0x6466250920343666,0x66666430202c3838,0x3030303030303066\n"
".quad 0x093b303030303030,0x0a666e692d202f2f,0x69646e6557444c24,0x76696432315a5f5f\n"
".quad 0x7669746167656e5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f31534b525f3253,0x3a37315f3937315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x3037353337315f32,0x3309636f6c2e090a,0x090a300936303309\n"
".quad 0x203436662e766f6d,0x202c343864662509,0x090a3b3838646625,0x203436662e766f6d\n"
".quad 0x202c353864662509,0x090a3b3938646625,0x203233732e766f6d,0x30202c3332722509\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x315f3937315f6c65,0x325f744c240a3b34,0x3a3837393632315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c,0x3037353337315f32\n"
".quad 0x3309636f6c2e090a,0x090a300938303309,0x6220313170252140,0x5f744c2409206172\n"
".quad 0x3632303932315f32,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x37353337315f325f,0x09636f6c2e090a30,0x0a30093930330933,0x2e6d722e6c756d09\n"
".quad 0x6466250920343666,0x32646625202c3437,0x3134646625202c37,0x722e6c756d090a3b\n"
".quad 0x2509203436662e70,0x6625202c35376466,0x646625202c373264,0x646461090a3b3134\n"
".quad 0x203436662e6d722e,0x202c363764662509,0x25202c3534646625,0x61090a3b34376466\n"
".quad 0x36662e70722e6464,0x3737646625092034,0x2c3834646625202c,0x0a3b353764662520\n"
".quad 0x3436662e766f6d09,0x2c32396466250920,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x652e746573090a30,0x36662e3233752e71,0x2c30337225092034\n"
".quad 0x202c373764662520,0x090a3b3239646625,0x203233732e67656e,0x25202c3133722509\n"
".quad 0x6f6d090a3b303372,0x2509203436662e76,0x6430202c33396466,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573,0x09203436662e3233\n"
".quad 0x6625202c32337225,0x646625202c363764,0x67656e090a3b3339,0x722509203233732e\n"
".quad 0x32337225202c3333,0x622e646e61090a3b,0x3433722509203233,0x202c31337225202c\n"
".quad 0x6d090a3b33337225,0x09203233752e766f,0x3b30202c35337225,0x652e70746573090a\n"
".quad 0x2509203233732e71,0x337225202c393170,0x3b35337225202c34,0x203931702540090a\n"
".quad 0x744c240920617262,0x38343038315f325f,0x6c3c2f2f200a3b32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x353337315f325f74,0x636f6c2e090a3037,0x3009363232093309\n"
".quad 0x36662e766f6d090a,0x3439646625092034,0x3b3637646625202c,0x36662e766f6d090a\n"
".quad 0x3539646625092034,0x3b3737646625202c,0x6e752e617262090a,0x6557444c24092069\n"
".quad 0x32315a5f5f69646e,0x69736f705f766964,0x3145644965766974,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x4b525f32534b5245,0x5f3937315f5f3153,0x5f744c240a3b3531\n"
".quad 0x3238343038315f32,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x37353337315f325f,0x09636f6c2e090a30,0x0a30093133320933,0x3436662e766f6d09\n"
".quad 0x2c36396466250920,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e70746573090a30,0x09203436662e746c,0x6625202c30327025,0x646625202c373764\n"
".quad 0x252140090a3b3639,0x2061726220303270,0x315f325f744c2409,0x200a3b3833353932\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731\n"
".quad 0x32093309636f6c2e,0x6964090a30093233,0x3436662e70722e76,0x2c35396466250920\n"
".quad 0x202c373764662520,0x090a3b3736646625,0x203436662e766f6d,0x202c343964662509\n"
".quad 0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030,0x617262090a666e69\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x705f76696432315a,0x496576697469736f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f\n"
".quad 0x240a3b35315f3937,0x3932315f325f744c,0x2f2f200a3a383335,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36\n"
".quad 0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533,0x333332093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x30306430202c3739,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074,0x2c31327025092034\n"
".quad 0x202c363764662520,0x090a3b3739646625,0x6220313270252140,0x5f744c2409206172\n"
".quad 0x3439373932315f32,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x37353337315f325f,0x662e766f6d090a30,0x3964662509203436,0x6666376430202c35\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x6d090a666e69202f,0x09203436662e766f\n"
".quad 0x30202c3439646625,0x3030303066666664,0x3030303030303030,0x692d202f2f093b30\n"
".quad 0x2e617262090a666e,0x444c240920696e75,0x5a5f5f69646e6557,0x6f705f7669643231\n"
".quad 0x6449657669746973,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x37315f5f31534b52,0x4c240a3b35315f39,0x373932315f325f74,0x3c2f2f200a3a3439\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x36373220656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x3337315f325f744c,0x6f6c2e090a303735\n"
".quad 0x0936333209330963,0x722e766964090a30,0x2509203436662e6d,0x6625202c34396466\n"
".quad 0x646625202c363764,0x766f6d090a3b3736,0x662509203436662e,0x376430202c353964\n"
".quad 0x3030303030306666,0x3b30303030303030,0x0a666e69202f2f09,0x69646e6557444c24\n"
".quad 0x76696432315a5f5f,0x76697469736f705f,0x6e69323145644965,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x5f31534b525f3253,0x3a35315f3937315f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3637322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x3037353337315f32,0x3309636f6c2e090a\n"
".quad 0x090a300939303309,0x203436662e766f6d,0x202c343864662509,0x090a3b3439646625\n"
".quad 0x203436662e766f6d,0x202c353864662509,0x090a3b3539646625,0x203233732e766f6d\n"
".quad 0x30202c3332722509,0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65\n"
".quad 0x5f6c616e7265746e,0x6e72656b5f6e616e,0x315f3937315f6c65,0x325f744c240a3b34\n"
".quad 0x3a3632303932315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x3037353337315f32,0x3309636f6c2e090a,0x090a300931313309,0x203436662e766f6d\n"
".quad 0x202c353864662509,0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030\n"
".quad 0x2e766f6d090a6e61,0x6466250920343666,0x66376430202c3438,0x3030303030303866\n"
".quad 0x093b303030303030,0x090a6e616e202f2f,0x203233732e766f6d,0x30202c3332722509\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x315f3937315f6c65,0x325f744c240a3b34,0x3a3232373632315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c,0x3037353337315f32\n"
".quad 0x3309636f6c2e090a,0x090a300933313309,0x203436662e766f6d,0x202c383964662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a\n"
".quad 0x2509203436662e74,0x646625202c323270,0x39646625202c3736,0x70252140090a3b38\n"
".quad 0x0920617262203232,0x38315f325f744c24,0x2f200a3b36343335,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3931093309636f6c\n"
".quad 0x6c756d090a300932,0x203436662e70722e,0x202c353764662509,0x25202c3732646625\n"
".quad 0x61090a3b31346466,0x36662e70722e6464,0x3737646625092034,0x2c3834646625202c\n"
".quad 0x0a3b353764662520,0x3436662e766f6d09,0x2c39396466250920,0x0a3b373764662520\n"
".quad 0x093309636f6c2e09,0x6d090a3009333931,0x36662e6d722e6c75,0x3437646625092034\n"
".quad 0x2c3732646625202c,0x0a3b313464662520,0x2e6d722e64646109,0x6466250920343666\n"
".quad 0x34646625202c3637,0x3437646625202c35,0x662e766f6d090a3b,0x3164662509203436\n"
".quad 0x37646625202c3030,0x2e617262090a3b36,0x744c240920696e75,0x39303538315f325f\n"
".quad 0x325f744c240a3b30,0x3a3634333538315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x3037353337315f32,0x3309636f6c2e090a,0x090a300936393109\n"
".quad 0x662e6d722e6c756d,0x3764662509203436,0x3732646625202c34,0x3b3134646625202c\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x646625202c363764,0x37646625202c3534\n"
".quad 0x2e766f6d090a3b34,0x6466250920343666,0x37646625202c3939,0x636f6c2e090a3b36\n"
".quad 0x3009373931093309,0x70722e6c756d090a,0x662509203436662e,0x646625202c353764\n"
".quad 0x34646625202c3732,0x2e646461090a3b31,0x09203436662e7072,0x25202c3737646625\n"
".quad 0x6625202c38346466,0x6f6d090a3b353764,0x2509203436662e76,0x25202c3030316466\n"
".quad 0x4c240a3b37376466,0x303538315f325f74,0x3c2f2f200a3a3039,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x36373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x3337315f325f744c,0x766f6d090a303735,0x662509203436662e\n"
".quad 0x6430202c31303164,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x2e746c2e70746573,0x3270250920343666,0x3737646625202c33,0x313031646625202c\n"
".quad 0x3270252140090a3b,0x2409206172622033,0x3538315f325f744c,0x2f2f200a3b383538\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c36,0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533\n"
".quad 0x313032093309636f,0x2e766f6d090a3009,0x6466250920343666,0x646625202c323031\n"
".quad 0x6f6c2e090a3b3936,0x0932303209330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x36646625202c3330,0x2e617262090a3b37,0x744c240920696e75,0x31313638315f325f\n"
".quad 0x325f744c240a3b34,0x3a3835383538315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x3037353337315f32,0x36662e766f6d090a,0x3031646625092034\n"
".quad 0x3030306430202c34,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e746c2e70,0x202c343270250920,0x25202c3637646625,0x090a3b3430316466\n"
".quad 0x6220343270252140,0x5f744c2409206172,0x3037333638315f32,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c36373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x37353337315f325f,0x3270252140090a30\n"
".quad 0x2409206172622032,0x3638315f325f744c,0x2f2f200a3b323838,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36\n"
".quad 0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533,0x363032093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x646625202c323031,0x6f6c2e090a3b3736\n"
".quad 0x0937303209330963,0x662e766f6d090a30,0x3164662509203436,0x36646625202c3330\n"
".quad 0x2e617262090a3b37,0x744c240920696e75,0x31313638315f325f,0x325f744c240a3b34\n"
".quad 0x3a3238383638315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x3037353337315f32,0x3309636f6c2e090a,0x090a300930313209,0x203436662e766f6d\n"
".quad 0x2c32303164662509,0x0a3b393664662520,0x093309636f6c2e09,0x6d090a3009313132\n"
".quad 0x09203436662e766f,0x202c333031646625,0x090a3b3936646625,0x20696e752e617262\n"
".quad 0x315f325f744c2409,0x240a3b3431313638,0x3638315f325f744c,0x2f2f200a3a303733\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c36,0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533\n"
".quad 0x353132093309636f,0x2e766f6d090a3009,0x6466250920343666,0x646625202c323031\n"
".quad 0x6f6c2e090a3b3736,0x0936313209330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x36646625202c3330,0x325f744c240a3b39,0x3a3431313638315f,0x315f325f744c240a\n"
".quad 0x200a3a3230363538,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064\n"
".quad 0x090a303735333731,0x33093309636f6c2e,0x6964090a30093331,0x3436662e6d722e76\n"
".quad 0x2c34386466250920,0x202c393964662520,0x0a3b323031646625,0x2e70722e76696409\n"
".quad 0x6466250920343666,0x31646625202c3538,0x31646625202c3030,0x766f6d090a3b3330\n"
".quad 0x722509203233732e,0x240a3b30202c3332,0x5f69646e6557444c,0x6e7265746e695f5f\n"
".quad 0x6b5f6e616e5f6c61,0x37315f6c656e7265,0x2f200a3a34315f39,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3731093309636f6c\n"
".quad 0x67656e090a300936,0x662509203436662e,0x6625202c35303164,0x6461090a3b353864\n"
".quad 0x3436662e6d722e64,0x3630316466250920,0x2c3134646625202c,0x3b35303164662520\n"
".quad 0x36662e67656e090a,0x3031646625092034,0x3438646625202c37,0x722e646461090a3b\n"
".quad 0x2509203436662e70,0x25202c3830316466,0x6625202c31346466,0x6d090a3b37303164\n"
".quad 0x09203436662e7861,0x202c393031646625,0x202c363031646625,0x6d090a3b33646625\n"
".quad 0x09203436662e6e69,0x202c303131646625,0x202c383031646625,0x73090a3b34646625\n"
".quad 0x662e656c2e707465,0x3532702509203436,0x393031646625202c,0x303131646625202c\n"
".quad 0x3270252140090a3b,0x2409206172622035,0x3234315f325f744c,0x2f2f200a3b303538\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c36,0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533\n"
".quad 0x373731093309636f,0x2e766f6d090a3009,0x6466250920343666,0x646625202c313131\n"
".quad 0x6f6d090a3b393031,0x2509203436662e76,0x25202c3231316466,0x090a3b3031316466\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x65746e695f5f5f69,0x6e616e5f6c616e72\n"
".quad 0x5f6c656e72656b5f,0x0a3b32315f393731,0x34315f325f744c24,0x2f200a3a30353832\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337\n"
".quad 0x3731093309636f6c,0x766f6d090a300939,0x662509203436662e,0x6430202c32313164\n"
".quad 0x3030303038666637,0x3030303030303030,0x6e616e202f2f093b,0x36662e766f6d090a\n"
".quad 0x3131646625092034,0x6666376430202c31,0x3030303030303038,0x2f093b3030303030\n"
".quad 0x4c240a6e616e202f,0x5f5f69646e655744,0x616e7265746e695f,0x656b5f6e616e5f6c\n"
".quad 0x3937315f6c656e72,0x2f2f200a3a32315f,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6c2e090a30373533,0x333932093409636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x646625202c333131,0x6f6d090a3b313131,0x2509203436662e76\n"
".quad 0x25202c3431316466,0x090a3b3331316466,0x203436662e766f6d,0x2c35313164662509\n"
".quad 0x3b32313164662520,0x36662e766f6d090a,0x3131646625092034,0x3131646625202c36\n"
".quad 0x2e766f6d090a3b35,0x3372250920323373,0x73090a3b30202c36,0x732e656e2e707465\n"
".quad 0x3632702509203233,0x202c33327225202c,0x40090a3b36337225,0x7262203632702521\n"
".quad 0x325f744c24092061,0x3b3039343139315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x3037353337315f32,0x3309636f6c2e090a,0x090a300931393209\n"
".quad 0x662e70722e6c756d,0x3764662509203436,0x3732646625202c35,0x3b3134646625202c\n"
".quad 0x70722e646461090a,0x662509203436662e,0x646625202c373764,0x37646625202c3834\n"
".quad 0x2e766f6d090a3b35,0x6466250920343666,0x306430202c373131,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x3732702509203436\n"
".quad 0x2c3737646625202c,0x3b37313164662520,0x373270252140090a,0x4c24092061726220\n"
".quad 0x313535315f325f74,0x3c2f2f200a3b3833,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x36373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x3337315f325f744c,0x6f6c2e090a303735,0x0932393209330963,0x722e766964090a30\n"
".quad 0x2509203436662e6d,0x25202c3831316466,0x6625202c37376466,0x7262090a3b393664\n"
".quad 0x240920696e752e61,0x5f69646e6557444c,0x5f76696434315a5f,0x7261705f6f72657a\n"
".quad 0x6932314564493274,0x5f6c61767265746e,0x52455f5449757067,0x5f5f34535f32534b\n"
".quad 0x0a3b30315f393731,0x35315f325f744c24,0x2f200a3a38333135,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3932093309636f6c\n"
".quad 0x6c756d090a300934,0x203436662e6d722e,0x2c39313164662509,0x202c373264662520\n"
".quad 0x090a3b3134646625,0x662e6d722e646461,0x3164662509203436,0x34646625202c3032\n"
".quad 0x3131646625202c35,0x2e766964090a3b39,0x09203436662e6d72,0x202c383131646625\n"
".quad 0x202c303231646625,0x240a3b3736646625,0x5f69646e6557444c,0x5f76696434315a5f\n"
".quad 0x7261705f6f72657a,0x6932314564493274,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x5f5f34535f32534b,0x0a3a30315f393731,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c36373220,0x6c6562616c206461\n"
".quad 0x325f744c24206465,0x0a3037353337315f,0x093309636f6c2e09,0x6d090a3009363731\n"
".quad 0x09203436662e766f,0x202c313231646625,0x3030306666666430,0x3030303030303030\n"
".quad 0x2d202f2f093b3030,0x646461090a666e69,0x203436662e6d722e,0x2c32323164662509\n"
".quad 0x202c313464662520,0x0a3b313231646625,0x3436662e67656e09,0x3332316466250920\n"
".quad 0x383131646625202c,0x722e646461090a3b,0x2509203436662e70,0x25202c3432316466\n"
".quad 0x6625202c31346466,0x6d090a3b33323164,0x09203436662e7861,0x202c353231646625\n"
".quad 0x202c323231646625,0x6d090a3b33646625,0x09203436662e6e69,0x202c363231646625\n"
".quad 0x202c343231646625,0x73090a3b34646625,0x662e656c2e707465,0x3832702509203436\n"
".quad 0x353231646625202c,0x363231646625202c,0x3270252140090a3b,0x2409206172622038\n"
".quad 0x3535315f325f744c,0x2f2f200a3b343933,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6c2e090a30373533,0x373731093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x646625202c373231,0x6f6d090a3b353231,0x2509203436662e76\n"
".quad 0x25202c3832316466,0x090a3b3632316466,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x65746e695f5f5f69,0x6e616e5f6c616e72,0x5f6c656e72656b5f,0x240a3b385f393731\n"
".quad 0x3535315f325f744c,0x2f2f200a3a343933,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6c2e090a30373533,0x393731093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x376430202c383231,0x3030303030386666,0x3b30303030303030\n"
".quad 0x0a6e616e202f2f09,0x3436662e766f6d09,0x3732316466250920,0x386666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x444c240a6e616e20,0x5f5f5f69646e6557\n"
".quad 0x6c616e7265746e69,0x72656b5f6e616e5f,0x5f3937315f6c656e,0x6c3c2f2f200a3a38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x353337315f325f74,0x636f6c2e090a3037\n"
".quad 0x3009383932093409,0x36662e766f6d090a,0x3231646625092034,0x3231646625202c39\n"
".quad 0x2e766f6d090a3b37,0x6466250920343666,0x646625202c303331,0x7262090a3b383231\n"
".quad 0x240920696e752e61,0x3139315f325f744c,0x744c240a3b343332,0x39343139315f325f\n"
".quad 0x6c3c2f2f200a3a30,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c36373220656e69,0x616c206461656820,0x4c242064656c6562,0x353337315f325f74\n"
".quad 0x2e766f6d090a3037,0x6466250920343666,0x376430202c303331,0x3030303030386666\n"
".quad 0x3b30303030303030,0x0a6e616e202f2f09,0x3436662e766f6d09,0x3932316466250920\n"
".quad 0x386666376430202c,0x3030303030303030,0x2f2f093b30303030,0x744c240a6e616e20\n"
".quad 0x33323139315f325f,0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c36373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x353337315f325f74,0x636f6c2e090a3037,0x3009393131093409,0x6e2e70746573090a\n"
".quad 0x09203436662e7565,0x6625202c39327025,0x35646625202c3564,0x3270252140090a3b\n"
".quad 0x2409206172622039,0x3539315f325f744c,0x2f2f200a3b323438,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36\n"
".quad 0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533,0x093838093309636f\n"
".quad 0x662e766f6d090a30,0x3164662509203436,0x30306430202c3133,0x3030303030303030\n"
".quad 0x093b303030303030,0x7262090a30202f2f,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x6874646977355a5f,0x6932315f54456449,0x5f6c61767265746e,0x455f305349757067\n"
".quad 0x0a3b365f3937315f,0x39315f325f744c24,0x2f200a3a32343835,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637\n"
".quad 0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337,0x3039093309636f6c\n"
".quad 0x2e67656e090a3009,0x6466250920343666,0x646625202c323331,0x2e646461090a3b33\n"
".quad 0x09203436662e7072,0x202c313331646625,0x6625202c34646625,0x4c240a3b32333164\n"
".quad 0x5f5f69646e655744,0x496874646977355a,0x6e6932315f544564,0x675f6c6176726574\n"
".quad 0x5f455f3053497570,0x200a3a365f393731,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c363732,0x656c6562616c2064\n"
".quad 0x5f325f744c242064,0x090a303735333731,0x31093409636f6c2e,0x6461090a30093931\n"
".quad 0x2509203436662e64,0x25202c3333316466,0x25202c3531316466,0x090a3b3331316466\n"
".quad 0x2e71652e70746573,0x3370250920343666,0x3331646625202c30,0x3331646625202c33\n"
".quad 0x70252140090a3b33,0x0920617262203033,0x39315f325f744c24,0x2f200a3b36323439\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420,0x2e090a3037353337\n"
".quad 0x3231093409636f6c,0x746573090a300930,0x36662e75656e2e70,0x2c31337025092034\n"
".quad 0x2c33333164662520,0x3b33333164662520,0x313370252140090a,0x4c24092061726220\n"
".quad 0x333639315f325f74,0x3c2f2f200a3b3435,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x36373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x3337315f325f744c,0x6f6c2e090a303735,0x3009383809330963,0x36662e766f6d090a\n"
".quad 0x3331646625092034,0x3030306430202c34,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x617262090a30202f,0x4c240920696e752e,0x5f5f69646e655744,0x496874646977355a\n"
".quad 0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570,0x240a3b345f393731\n"
".quad 0x3639315f325f744c,0x2f2f200a3a343533,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6c2e090a30373533,0x093039093309636f,0x662e67656e090a30\n"
".quad 0x3164662509203436,0x31646625202c3533,0x646461090a3b3331,0x203436662e70722e\n"
".quad 0x2c34333164662509,0x2c35313164662520,0x3b35333164662520,0x646e6557444c240a\n"
".quad 0x646977355a5f5f69,0x315f544564496874,0x61767265746e6932,0x3053497570675f6c\n"
".quad 0x345f3937315f455f,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c36373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x37353337315f325f,0x09636f6c2e090a30,0x0a30093032310934,0x3436662e766f6d09\n"
".quad 0x3633316466250920,0x666566336430202c,0x3030303834316561,0x2f2f093b30303030\n"
".quad 0x6d090a39392e3020,0x09203436662e6c75,0x202c373331646625,0x202c313331646625\n"
".quad 0x0a3b363331646625,0x74672e7074657309,0x702509203436662e,0x31646625202c3233\n"
".quad 0x31646625202c3433,0x252140090a3b3733,0x2061726220323370,0x315f325f744c2409\n"
".quad 0x200a3b3632343939,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064\n"
".quad 0x090a303735333731,0x20696e752e617262,0x315f325f744c2409,0x240a3b3833393330\n"
".quad 0x3939315f325f744c,0x744c240a3a363234,0x35343430315f325f,0x6c3c2f2f200a3a30\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x353337315f325f74,0x2e646461090a3037\n"
".quad 0x6466250920343666,0x646625202c383331,0x646625202c303331,0x6573090a3b393231\n"
".quad 0x36662e71652e7074,0x2c33337025092034,0x2c38333164662520,0x3b38333164662520\n"
".quad 0x333370252140090a,0x4c24092061726220,0x393939315f325f74,0x3c2f2f200a3b3833\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x36373220656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x3337315f325f744c,0x67656e090a303735\n"
".quad 0x662509203436662e,0x6625202c39333164,0x61090a3b39323164,0x36662e70722e6464\n"
".quad 0x3431646625092034,0x3331646625202c30,0x3331646625202c30,0x2e766f6d090a3b39\n"
".quad 0x6466250920343666,0x336430202c313431,0x3834316561666566,0x3b30303030303030\n"
".quad 0x39392e30202f2f09,0x36662e6c756d090a,0x3431646625092034,0x3331646625202c32\n"
".quad 0x3431646625202c31,0x70746573090a3b31,0x203436662e74672e,0x25202c3433702509\n"
".quad 0x25202c3034316466,0x090a3b3234316466,0x6220343370252140,0x5f744c2409206172\n"
".quad 0x3833393939315f32,0x5f325f744c240a3b,0x0a3a383339333031,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c36373220\n"
".quad 0x6c6562616c206461,0x325f744c24206465,0x0a3037353337315f,0x3233732e766f6d09\n"
".quad 0x202c373372250920,0x2e617262090a3b31,0x744c240920696e75,0x34323630315f325f\n"
".quad 0x325f744c240a3b32,0x3a3833393939315f,0x315f325f744c240a,0x200a3a3439313430\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731\n"
".quad 0x203233732e766f6d,0x30202c3733722509,0x5f325f744c240a3b,0x0a3a323432363031\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c36373220,0x6c6562616c206461,0x325f744c24206465,0x0a3037353337315f\n"
".quad 0x093409636f6c2e09,0x6d090a3009323033,0x09203233752e766f,0x3b30202c38337225\n"
".quad 0x652e70746573090a,0x2509203233732e71,0x337225202c353370,0x3b38337225202c37\n"
".quad 0x203533702540090a,0x744c240920617262,0x37333739315f325f,0x6c3c2f2f200a3b38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c36373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x353337315f325f74,0x636f6c2e090a3037\n"
".quad 0x3009363033093409,0x36662e766f6d090a,0x3131646625092034,0x3b33646625202c34\n"
".quad 0x36662e766f6d090a,0x3131646625092034,0x3134646625202c36,0x09636f6c2e090a3b\n"
".quad 0x0a30093730330934,0x3436662e766f6d09,0x3932316466250920,0x3b3134646625202c\n"
".quad 0x36662e766f6d090a,0x3331646625092034,0x3b34646625202c30,0x33732e766f6d090a\n"
".quad 0x2c39337225092032,0x766f6d090a3b3020,0x722509203233732e,0x090a3b31202c3034\n"
".quad 0x2e656e2e70746573,0x3270250920323373,0x2c30347225202c36,0x240a3b3933722520\n"
".quad 0x3739315f325f744c,0x2f2f200a3a383733,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36,0x2064656c6562616c\n"
".quad 0x37315f325f744c24,0x6461090a30373533,0x2509203436662e64,0x25202c3334316466\n"
".quad 0x25202c3431316466,0x090a3b3631316466,0x2e71652e70746573,0x3370250920343666\n"
".quad 0x3431646625202c36,0x3431646625202c33,0x70252140090a3b33,0x0920617262203633\n"
".quad 0x39315f325f744c24,0x2f200a3b30393837,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3637,0x64656c6562616c20\n"
".quad 0x315f325f744c2420,0x2e090a3037353337,0x3133093409636f6c,0x2e7473090a300933\n"
".quad 0x33732e6c61636f6c,0x75635f5f5b092032,0x6475635f5f5f6164,0x5f6c61636f6c5f61\n"
".quad 0x313837365f726176,0x6e6f6e5f32335f30,0x775f74736e6f635f,0x2b3036315f6b726f\n"
".quad 0x25202c5d38343032,0x646461090a3b3472,0x722509203436752e,0x647225202c373164\n"
".quad 0x3b35647225202c37,0x36752e646461090a,0x3831647225092034,0x2c3731647225202c\n"
".quad 0x7473090a3b363120,0x255b09203436662e,0x2c5d302b38316472,0x3b34313164662520\n"
".quad 0x636f6c2e646c090a,0x09203233732e6c61,0x5f5b202c31347225,0x5f5f5f616475635f\n"
".quad 0x636f6c5f61647563,0x365f7261765f6c61,0x5f32335f30313837,0x736e6f635f6e6f6e\n"
".quad 0x315f6b726f775f74,0x5d383430322b3036,0x732e747663090a3b,0x09203233732e3436\n"
".quad 0x25202c3931647225,0x756d090a3b313472,0x732e656469772e6c,0x3264722509203233\n"
".quad 0x2c31347225202c30,0x6461090a3b363120,0x2509203436752e64,0x7225202c31326472\n"
".quad 0x32647225202c3564,0x662e7473090a3b30,0x6472255b09203436,0x25202c5d382b3132\n"
".quad 0x240a3b3631316466,0x3739315f325f744c,0x2f2f200a3a303938,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c36\n"
".quad 0x2064656c6562616c,0x37315f325f744c24,0x6c2e090a30373533,0x363133093409636f\n"
".quad 0x70252140090a3009,0x0920617262203632,0x30325f325f744c24,0x2f200a3b30353430\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3637,0x64656c6562616c20,0x315f325f744c2420,0x61090a3037353337\n"
".quad 0x09203436662e6464,0x202c343431646625,0x202c303331646625,0x0a3b393231646625\n"
".quad 0x71652e7074657309,0x702509203436662e,0x31646625202c3733,0x31646625202c3434\n"
".quad 0x252140090a3b3434,0x2061726220373370,0x325f325f744c2409,0x200a3b3035343030\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c363732,0x656c6562616c2064,0x5f325f744c242064,0x090a303735333731\n"
".quad 0x33093409636f6c2e,0x646c090a30093831,0x732e6c61636f6c2e,0x3234722509203233\n"
".quad 0x6475635f5f5b202c,0x616475635f5f5f61,0x765f6c61636f6c5f,0x30313837365f7261\n"
".quad 0x5f6e6f6e5f32335f,0x6f775f74736e6f63,0x322b3036315f6b72,0x61090a3b5d383430\n"
".quad 0x09203233732e6464,0x347225202c337225,0x73090a3b31202c32,0x2e6c61636f6c2e74\n"
".quad 0x5f5f5b0920323373,0x635f5f5f61647563,0x61636f6c5f616475,0x37365f7261765f6c\n"
".quad 0x6e5f32335f303138,0x74736e6f635f6e6f,0x36315f6b726f775f,0x2c5d383430322b30\n"
".quad 0x63090a3b33722520,0x732e3436732e7476,0x3264722509203233,0x0a3b337225202c32\n"
".quad 0x6469772e6c756d09,0x2509203233732e65,0x7225202c33326472,0x090a3b3631202c33\n"
".quad 0x203436752e646461,0x202c343264722509,0x7225202c35647225,0x7473090a3b333264\n"
".quad 0x255b09203436662e,0x2c5d302b34326472,0x3b39323164662520,0x636f6c2e646c090a\n"
".quad 0x09203233732e6c61,0x5f5b202c33347225,0x5f5f5f616475635f,0x636f6c5f61647563\n"
".quad 0x365f7261765f6c61,0x5f32335f30313837,0x736e6f635f6e6f6e,0x315f6b726f775f74\n"
".quad 0x5d383430322b3036,0x732e747663090a3b,0x09203233732e3436,0x25202c3532647225\n"
".quad 0x756d090a3b333472,0x732e656469772e6c,0x3264722509203233,0x2c33347225202c36\n"
".quad 0x6461090a3b363120,0x2509203436752e64,0x7225202c37326472,0x32647225202c3564\n"
".quad 0x662e7473090a3b36,0x6472255b09203436,0x25202c5d382b3732,0x240a3b3033316466\n"
".quad 0x3030325f325f744c,0x744c240a3a303534,0x36323730315f325f,0x325f744c240a3a36\n"
".quad 0x3a3035383437315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3637322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x3037353337315f32,0x3409636f6c2e090a,0x090a300936313309,0x6c61636f6c2e646c\n"
".quad 0x722509203233732e,0x75635f5f5b202c33,0x6475635f5f5f6164,0x5f6c61636f6c5f61\n"
".quad 0x313837365f726176,0x6e6f6e5f32335f30,0x775f74736e6f635f,0x2b3036315f6b726f\n"
".quad 0x090a3b5d38343032,0x203233752e766f6d,0x2d202c3434722509,0x70746573090a3b31\n"
".quad 0x203233732e656e2e,0x25202c3833702509,0x34347225202c3372,0x3833702540090a3b\n"
".quad 0x4c24092061726220,0x353337315f325f74,0x6f6c2e090a3b3037,0x0932323309340963\n"
".quad 0x0a3b746572090a30,0x5f646e6557444c24,0x7477656e31325a5f,0x7265746e695f6e6f\n"
".quad 0x7669616e5f6c6176,0x353536694c644965,0x383231694c453633,0x6c67323152764545\n"
".quad 0x6174735f6c61626f,0x746e693231496b63,0x70675f6c61767265,0x315458455f544975\n"
".quad 0x45455f305458455f,0x0a3a695f33534b52,0x5a5f202f2f207d09,0x6e6f7477656e3132\n"
".quad 0x61767265746e695f,0x49657669616e5f6c,0x3633353536694c64,0x4545383231694c45\n"
".quad 0x626f6c6732315276,0x6b636174735f6c61,0x7265746e69323149,0x497570675f6c6176\n"
".quad 0x455f315458455f54,0x4b5245455f305458,0x2e090a0a695f3353,0x20656c6269736976\n"
".quad 0x2e2820636e75662e,0x732e206d61726170,0x6475635f5f203233,0x5a5f5f6674657261\n"
".quad 0x6e696d5f73693031,0x624564496c616d69,0x65746e6932314b52,0x7570675f6c617672\n"
".quad 0x5f202969455f5449,0x696d5f736930315a,0x4564496c616d696e,0x746e6932314b5262\n"
".quad 0x70675f6c61767265,0x282069455f544975,0x2e206d617261702e,0x75635f5f20343675\n"
".quad 0x31666d7261706164,0x5f736930315a5f5f,0x496c616d696e696d,0x6932314b52624564\n"
".quad 0x5f6c61767265746e,0x69455f5449757067,0x6d617261702e202c,0x5f5f203233732e20\n"
".quad 0x6d72617061647563,0x6930315a5f5f3266,0x616d696e696d5f73,0x314b52624564496c\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x090a7b090a296945,0x33752e206765722e\n"
".quad 0x3b3e363c72252032,0x2e206765722e090a,0x3c64722520343675,0x65722e090a3b3e34\n"
".quad 0x25203436662e2067,0x0a3b3e38333c6466,0x702e206765722e09,0x393c702520646572\n"
".quad 0x636f6c2e090a3b3e,0x3009353031093409,0x67656257444c240a,0x6930315a5f5f6e69\n"
".quad 0x616d696e696d5f73,0x314b52624564496c,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x2e646c090a3a6945,0x36752e6d61726170,0x2c31647225092034,0x616475635f5f5b20\n"
".quad 0x5f5f31666d726170,0x696d5f736930315a,0x4564496c616d696e,0x746e6932314b5262\n"
".quad 0x70675f6c61767265,0x3b5d69455f544975,0x36732e766f6d090a,0x2c32647225092034\n"
".quad 0x090a3b3164722520,0x6d617261702e646c,0x722509203233752e,0x75635f5f5b202c31\n"
".quad 0x32666d7261706164,0x5f736930315a5f5f,0x496c616d696e696d,0x6932314b52624564\n"
".quad 0x5f6c61767265746e,0x69455f5449757067,0x2e766f6d090a3b5d,0x3272250920323373\n"
".quad 0x090a3b317225202c,0x31093409636f6c2e,0x646c090a30093830,0x662509203436662e\n"
".quad 0x6472255b202c3164,0x6c090a3b5d302b32,0x2509203436662e64,0x72255b202c326466\n"
".quad 0x090a3b5d382b3264,0x203436662e646461,0x25202c3364662509,0x646625202c326466\n"
".quad 0x70746573090a3b31,0x203436662e71652e,0x6625202c31702509,0x33646625202c3364\n"
".quad 0x3170252140090a3b,0x4c24092061726220,0x323836375f335f74,0x2e70746573090a3b\n"
".quad 0x203436662e75656e,0x6625202c32702509,0x33646625202c3364,0x3270252140090a3b\n"
".quad 0x4c24092061726220,0x383536365f335f74,0x09636f6c2e090a3b,0x090a300938380933\n"
".quad 0x203436662e766f6d,0x30202c3464662509,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x696e752e61726209,0x6e6557444c240920,0x6977355a5f5f6964\n"
".quad 0x5f54456449687464,0x767265746e693231,0x53497570675f6c61,0x5f3138315f455f30\n"
".quad 0x335f744c240a3b35,0x090a3a383536365f,0x39093309636f6c2e,0x67656e090a300930\n"
".quad 0x662509203436662e,0x31646625202c3564,0x722e646461090a3b,0x2509203436662e70\n"
".quad 0x646625202c346466,0x3b35646625202c32,0x646e6557444c240a,0x646977355a5f5f69\n"
".quad 0x315f544564496874,0x61767265746e6932,0x3053497570675f6c,0x355f3138315f455f\n"
".quad 0x09636f6c2e090a3a,0x0a30093830310934,0x3436662e766f6d09,0x202c366466250920\n"
".quad 0x3030306566336430,0x3030303030303030,0x30202f2f093b3030,0x2e6c756d090a352e\n"
".quad 0x6466250920343666,0x2c33646625202c37,0x090a3b3664662520,0x203436662e736261\n"
".quad 0x25202c3864662509,0x6f6d090a3b376466,0x2509203436662e76,0x336430202c396466\n"
".quad 0x6137663663306265,0x3b30303030303030,0x302d6531202f2f09,0x662e6c756d090a36\n"
".quad 0x3164662509203436,0x2c38646625202c30,0x090a3b3964662520,0x2e656c2e70746573\n"
".quad 0x3370250920343666,0x202c34646625202c,0x090a3b3031646625,0x6172622033702540\n"
".quad 0x5f335f744c240920,0x2e090a3b34393731,0x3139093409636f6c,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x66626430202c3131,0x3030303030303066,0x093b303030303030\n"
".quad 0x61090a312d202f2f,0x36662e6d722e6464,0x3231646625092034,0x202c31646625202c\n"
".quad 0x090a3b3131646625,0x203436662e766f6d,0x202c333164662509,0x3030306666626430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x722e646461090a31,0x2509203436662e70\n"
".quad 0x6625202c34316466,0x31646625202c3264,0x636f6c2e090a3b33,0x3009323333093309\n"
".quad 0x36662e766f6d090a,0x3531646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e65672e,0x6625202c34702509\n"
".quad 0x646625202c323164,0x252140090a3b3531,0x0920617262203470,0x33355f335f744c24\n"
".quad 0x6f6c2e090a3b3837,0x0933333309330963,0x722e6c756d090a30,0x2509203436662e6d\n"
".quad 0x6625202c36316466,0x646625202c323164,0x6c756d090a3b3231,0x203436662e70722e\n"
".quad 0x202c373164662509,0x25202c3431646625,0x62090a3b34316466,0x0920696e752e6172\n"
".quad 0x69646e6557444c24,0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x3138315f5f32534b,0x5f744c240a3b315f,0x0a3a383733355f33\n"
".quad 0x093309636f6c2e09,0x6d090a3009343333,0x09203436662e766f,0x30202c3831646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x656c2e7074657309\n"
".quad 0x702509203436662e,0x3431646625202c35,0x3b3831646625202c,0x203570252140090a\n"
".quad 0x744c240920617262,0x3b343336355f335f,0x3309636f6c2e090a,0x090a300935333309\n"
".quad 0x662e6d722e6c756d,0x3164662509203436,0x3431646625202c36,0x3b3431646625202c\n"
".quad 0x70722e6c756d090a,0x662509203436662e,0x646625202c373164,0x31646625202c3231\n"
".quad 0x2e617262090a3b32,0x444c240920696e75,0x5a5f5f69646e6557,0x4965726175717336\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x3b315f3138315f5f\n"
".quad 0x355f335f744c240a,0x6c2e090a3a343336,0x373333093309636f,0x2e6c756d090a3009\n"
".quad 0x09203436662e7072,0x25202c3931646625,0x6625202c32316466,0x756d090a3b323164\n"
".quad 0x3436662e70722e6c,0x2c30326466250920,0x202c343164662520,0x090a3b3431646625\n"
".quad 0x203436662e78616d,0x202c373164662509,0x25202c3931646625,0x6d090a3b30326466\n"
".quad 0x09203436662e766f,0x30202c3631646625,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x69646e6557444c24,0x61757173365a5f5f,0x6932314564496572\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x3138315f5f32534b,0x6f6c2e090a3a315f\n"
".quad 0x3009313909340963,0x6e722e747663090a,0x3233732e3436662e,0x2c31326466250920\n"
".quad 0x6e090a3b32722520,0x09203436662e6765,0x25202c3232646625,0x6d090a3b31326466\n"
".quad 0x09203436662e766f,0x30202c3332646625,0x3030303066653364,0x3030303030303030\n"
".quad 0x2e31202f2f093b30,0x302d653838353235,0x662e6c756d090a35,0x3264662509203436\n"
".quad 0x3232646625202c34,0x3b3332646625202c,0x6d722e6c756d090a,0x662509203436662e\n"
".quad 0x646625202c353264,0x31646625202c3432,0x722e6c756d090a3b,0x2509203436662e6d\n"
".quad 0x6625202c36326466,0x646625202c343264,0x2e6c756d090a3b32,0x09203436662e7072\n"
".quad 0x25202c3732646625,0x6625202c34326466,0x6c756d090a3b3164,0x203436662e70722e\n"
".quad 0x202c383264662509,0x25202c3432646625,0x6c2e090a3b326466,0x383031093409636f\n"
".quad 0x2e6e696d090a3009,0x6466250920343666,0x32646625202c3932,0x3532646625202c36\n"
".quad 0x662e78616d090a3b,0x3364662509203436,0x3832646625202c30,0x3b3732646625202c\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x646625202c313364,0x32646625202c3631\n"
".quad 0x2e646461090a3b39,0x09203436662e7072,0x25202c3233646625,0x6625202c37316466\n"
".quad 0x6461090a3b303364,0x2509203436662e64,0x6625202c33336466,0x646625202c313364\n"
".quad 0x746573090a3b3233,0x36662e75656e2e70,0x202c367025092034,0x25202c3333646625\n"
".quad 0x40090a3b33336466,0x6172622036702521,0x5f335f744c240920,0x2e090a3b30373137\n"
".quad 0x3838093309636f6c,0x2e766f6d090a3009,0x6466250920343666,0x30306430202c3433\n"
".quad 0x3030303030303030,0x093b303030303030,0x7262090a30202f2f,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x6874646977355a5f,0x6932315f54456449,0x5f6c61767265746e\n"
".quad 0x455f305349757067,0x0a3b335f3138315f,0x31375f335f744c24,0x6f6c2e090a3a3037\n"
".quad 0x3009303909330963,0x36662e67656e090a,0x3533646625092034,0x3b3133646625202c\n"
".quad 0x70722e646461090a,0x662509203436662e,0x646625202c343364,0x33646625202c3233\n"
".quad 0x6557444c240a3b35,0x77355a5f5f69646e,0x5445644968746469,0x7265746e6932315f\n"
".quad 0x497570675f6c6176,0x3138315f455f3053,0x6f6c2e090a3a335f,0x0938303109340963\n"
".quad 0x662e766f6d090a30,0x3364662509203436,0x6265336430202c36,0x3030613766366330\n"
".quad 0x2f093b3030303030,0x0a36302d6531202f,0x656c2e7074657309,0x702509203436662e\n"
".quad 0x3433646625202c37,0x3b3633646625202c,0x203770252140090a,0x744c240920617262\n"
".quad 0x3b303530325f335f,0x315f335f744c240a,0x6f6d090a3a343937,0x2509203233732e76\n"
".quad 0x090a3b31202c3372,0x20696e752e617262,0x345f335f744c2409,0x744c240a3b363638\n"
".quad 0x3a323836375f335f,0x325f335f744c240a,0x6f6d090a3a303530,0x2509203233732e76\n"
".quad 0x240a3b30202c3372,0x3638345f335f744c,0x2e766f6d090a3a36,0x3472250920323373\n"
".quad 0x090a3b337225202c,0x6d617261702e7473,0x5f5b09203233732e,0x746572616475635f\n"
".quad 0x736930315a5f5f66,0x6c616d696e696d5f,0x32314b5262456449,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x3b347225202c5d69,0x240a3b746572090a,0x5f5f646e6557444c\n"
".quad 0x696d5f736930315a,0x4564496c616d696e,0x746e6932314b5262,0x70675f6c61767265\n"
".quad 0x0a3a69455f544975,0x5a5f202f2f207d09,0x6e696d5f73693031,0x624564496c616d69\n"
".quad 0x65746e6932314b52,0x7570675f6c617672,0x090a0a69455f5449,0x656c62697369762e\n"
".quad 0x2820636e75662e20,0x2e206d617261702e,0x75635f5f20343666,0x5f5f667465726164\n"
".quad 0x496874646977355a,0x6e6932315f544564,0x675f6c6176726574,0x29455f3053497570\n"
".quad 0x74646977355a5f20,0x32315f5445644968,0x6c61767265746e69,0x5f3053497570675f\n"
".quad 0x617261702e282045,0x6e67696c612e206d,0x5f2038622e203820,0x726170616475635f\n"
".quad 0x77355a5f5f31666d,0x5445644968746469,0x7265746e6932315f,0x497570675f6c6176\n"
".quad 0x5d36315b455f3053,0x722e090a7b090a29,0x203436662e206765,0x3b3e30313c646625\n"
".quad 0x2e206765722e090a,0x3c70252064657270,0x6f6c2e090a3b3e33,0x3009363809330963\n"
".quad 0x67656257444c240a,0x6977355a5f5f6e69,0x5f54456449687464,0x767265746e693231\n"
".quad 0x53497570675f6c61,0x646c090a3a455f30,0x662e6d617261702e,0x3164662509203436\n"
".quad 0x6475635f5f5b202c,0x5f31666d72617061,0x6874646977355a5f,0x6932315f54456449\n"
".quad 0x5f6c61767265746e,0x455f305349757067,0x6f6d090a3b5d302b,0x2509203436662e76\n"
".quad 0x646625202c326466,0x702e646c090a3b31,0x3436662e6d617261,0x202c336466250920\n"
".quad 0x70616475635f5f5b,0x5a5f5f31666d7261,0x6449687464697735,0x746e6932315f5445\n"
".quad 0x70675f6c61767265,0x382b455f30534975,0x2e766f6d090a3b5d,0x6466250920343666\n"
".quad 0x3b33646625202c34,0x36662e646461090a,0x2c35646625092034,0x25202c3264662520\n"
".quad 0x6573090a3b346466,0x662e75656e2e7074,0x2c31702509203436,0x25202c3564662520\n"
".quad 0x2140090a3b356466,0x2061726220317025,0x315f345f744c2409,0x6c2e090a3b363230\n"
".quad 0x093838093309636f,0x662e766f6d090a30,0x3664662509203436,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x2e617262090a3020,0x424c240920696e75\n"
".quad 0x6977355a5f5f3442,0x5f54456449687464,0x767265746e693231,0x53497570675f6c61\n"
".quad 0x744c240a3b455f30,0x3a363230315f345f,0x3309636f6c2e090a,0x6e090a3009303909\n"
".quad 0x09203436662e6765,0x6625202c37646625,0x646461090a3b3264,0x203436662e70722e\n"
".quad 0x25202c3664662509,0x646625202c346466,0x3442424c240a3b37,0x74646977355a5f5f\n"
".quad 0x32315f5445644968,0x6c61767265746e69,0x5f3053497570675f,0x2e766f6d090a3a45\n"
".quad 0x6466250920343666,0x3b36646625202c38,0x7261702e7473090a,0x09203436662e6d61\n"
".quad 0x72616475635f5f5b,0x77355a5f5f667465,0x5445644968746469,0x7265746e6932315f\n"
".quad 0x497570675f6c6176,0x25202c5d455f3053,0x6572090a3b386466,0x6557444c240a3b74\n"
".quad 0x6977355a5f5f646e,0x5f54456449687464,0x767265746e693231,0x53497570675f6c61\n"
".quad 0x207d090a3a455f30,0x6977355a5f202f2f,0x5f54456449687464,0x767265746e693231\n"
".quad 0x53497570675f6c61,0x762e090a0a455f30,0x2e20656c62697369,0x702e2820636e7566\n"
".quad 0x6c612e206d617261,0x622e2038206e6769,0x616475635f5f2038,0x315a5f5f66746572\n"
".quad 0x6e69323145644966,0x675f6c6176726574,0x4b52455f54497570,0x5d36315b695f3253\n"
".quad 0x644966315a5f2029,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x617261702e282069,0x5f203436752e206d,0x726170616475635f,0x66315a5f5f31666d\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x61702e202c695f32\n"
".quad 0x3233732e206d6172,0x70616475635f5f20,0x5a5f5f32666d7261,0x6932314564496631\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x090a29695f32534b,0x206765722e090a7b\n"
".quad 0x3c7225203233752e,0x65722e090a3b3e34,0x25203436752e2067,0x090a3b3e343c6472\n"
".quad 0x36662e206765722e,0x37323c6466252034,0x6765722e090a3b3e,0x2520646572702e20\n"
".quad 0x2e090a3b3e343c70,0x3838093409636f6c,0x6257444c240a3009,0x315a5f5f6e696765\n"
".quad 0x6e69323145644966,0x675f6c6176726574,0x4b52455f54497570,0x6c090a3a695f3253\n"
".quad 0x2e6d617261702e64,0x6472250920343675,0x75635f5f5b202c31,0x31666d7261706164\n"
".quad 0x45644966315a5f5f,0x767265746e693231,0x54497570675f6c61,0x695f32534b52455f\n"
".quad 0x2e766f6d090a3b5d,0x6472250920343673,0x3b31647225202c32,0x7261702e646c090a\n"
".quad 0x09203233752e6d61,0x5f5f5b202c317225,0x6d72617061647563,0x4966315a5f5f3266\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x6f6d090a3b5d695f\n"
".quad 0x2509203233732e76,0x3b317225202c3272,0x3409636f6c2e090a,0x6c090a3009313909\n"
".quad 0x2509203436662e64,0x72255b202c316466,0x090a3b5d302b3264,0x203436662e766f6d\n"
".quad 0x30202c3264662509,0x3030303066666264,0x3030303030303030,0x312d202f2f093b30\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x31646625202c3364,0x0a3b32646625202c\n"
".quad 0x203436662e646c09,0x5b202c3464662509,0x3b5d382b32647225,0x36662e766f6d090a\n"
".quad 0x2c35646625092034,0x3030666662643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e646461090a312d,0x09203436662e7072,0x6625202c36646625,0x35646625202c3464\n"
".quad 0x09636f6c2e090a3b,0x0a30093233330933,0x3436662e766f6d09,0x202c376466250920\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x672e70746573090a\n"
".quad 0x2509203436662e65,0x33646625202c3170,0x0a3b37646625202c,0x6220317025214009\n"
".quad 0x5f744c2409206172,0x0a3b343937315f35,0x093309636f6c2e09,0x6d090a3009333333\n"
".quad 0x36662e6d722e6c75,0x2c38646625092034,0x25202c3364662520,0x756d090a3b336466\n"
".quad 0x3436662e70722e6c,0x202c396466250920,0x6625202c36646625,0x617262090a3b3664\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x657261757173365a,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x315f3238315f5f32,0x5f355f744c240a3b\n"
".quad 0x2e090a3a34393731,0x3333093309636f6c,0x766f6d090a300934,0x662509203436662e\n"
".quad 0x306430202c303164,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x662e656c2e707465,0x2c32702509203436,0x25202c3664662520,0x40090a3b30316466\n"
".quad 0x6172622032702521,0x5f355f744c240920,0x2e090a3b30353032,0x3333093309636f6c\n"
".quad 0x6c756d090a300935,0x203436662e6d722e,0x25202c3864662509,0x646625202c366466\n"
".quad 0x2e6c756d090a3b36,0x09203436662e7072,0x6625202c39646625,0x33646625202c3364\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x365a5f5f69646e65,0x6449657261757173\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x0a3b315f3238315f\n"
".quad 0x30325f355f744c24,0x6f6c2e090a3a3035,0x0937333309330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e70,0x6625202c31316466,0x33646625202c3364,0x722e6c756d090a3b\n"
".quad 0x2509203436662e70,0x6625202c32316466,0x36646625202c3664,0x662e78616d090a3b\n"
".quad 0x3964662509203436,0x2c3131646625202c,0x0a3b323164662520,0x3436662e766f6d09\n"
".quad 0x202c386466250920,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x646e6557444c240a,0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x38315f5f32534b52,0x6c2e090a3a315f32,0x093139093409636f\n"
".quad 0x722e747663090a30,0x33732e3436662e6e,0x3331646625092032,0x090a3b327225202c\n"
".quad 0x203436662e67656e,0x202c343164662509,0x090a3b3331646625,0x203436662e766f6d\n"
".quad 0x202c353164662509,0x3030306665336430,0x3030303030303030,0x31202f2f093b3030\n"
".quad 0x2d6538383532352e,0x2e6c756d090a3530,0x6466250920343666,0x31646625202c3631\n"
".quad 0x3531646625202c34,0x722e6c756d090a3b,0x2509203436662e6d,0x6625202c37316466\n"
".quad 0x646625202c363164,0x2e6c756d090a3b31,0x09203436662e6d72,0x25202c3831646625\n"
".quad 0x6625202c36316466,0x6c756d090a3b3464,0x203436662e70722e,0x202c393164662509\n"
".quad 0x25202c3631646625,0x756d090a3b316466,0x3436662e70722e6c,0x2c30326466250920\n"
".quad 0x202c363164662520,0x6d090a3b34646625,0x09203436662e7861,0x25202c3132646625\n"
".quad 0x6625202c30326466,0x6461090a3b393164,0x3436662e70722e64,0x2c32326466250920\n"
".quad 0x25202c3964662520,0x6d090a3b31326466,0x09203436662e6e69,0x25202c3332646625\n"
".quad 0x6625202c38316466,0x6461090a3b373164,0x3436662e6d722e64,0x2c34326466250920\n"
".quad 0x25202c3864662520,0x73090a3b33326466,0x2e6d617261702e74,0x5f5f5b0920343666\n"
".quad 0x6674657261647563,0x45644966315a5f5f,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x695f32534b52455f,0x646625202c5d302b,0x766f6d090a3b3432,0x662509203436662e\n"
".quad 0x646625202c353264,0x2e7473090a3b3232,0x36662e6d61726170,0x75635f5f5b092034\n"
".quad 0x5f5f667465726164,0x323145644966315a,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x382b695f32534b52,0x3532646625202c5d,0x0a3b746572090a3b,0x5f646e6557444c24\n"
".quad 0x3145644966315a5f,0x61767265746e6932,0x5f54497570675f6c,0x3a695f32534b5245\n"
".quad 0x5f202f2f207d090a,0x323145644966315a,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x0a0a695f32534b52,0x6c62697369762e09,0x20636e75662e2065,0x206d617261702e28\n"
".quad 0x38206e67696c612e,0x635f5f2038622e20,0x5f66746572616475,0x7261757173365a5f\n"
".quad 0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570,0x295d36315b5f3253\n"
".quad 0x61757173365a5f20,0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x702e28205f32534b,0x36752e206d617261,0x616475635f5f2034,0x5f5f31666d726170\n"
".quad 0x657261757173365a,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x090a7b090a295f32,0x36752e206765722e,0x3e343c6472252034,0x206765722e090a3b\n"
".quad 0x646625203436662e,0x2e090a3b3e34313c,0x6572702e20676572,0x3b3e343c70252064\n"
".quad 0x3309636f6c2e090a,0x240a300936323309,0x6e6967656257444c,0x61757173365a5f5f\n"
".quad 0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067,0x6c090a3a5f32534b\n"
".quad 0x2e6d617261702e64,0x6472250920343675,0x75635f5f5b202c31,0x31666d7261706164\n"
".quad 0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x090a3b5d5f32534b,0x203436732e766f6d,0x25202c3264722509,0x6c2e090a3b316472\n"
".quad 0x323333093309636f,0x662e646c090a3009,0x3164662509203436,0x2b326472255b202c\n"
".quad 0x2e646c090a3b5d30,0x6466250920343666,0x326472255b202c32,0x6f6d090a3b5d382b\n"
".quad 0x2509203436662e76,0x306430202c336466,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x662e65672e707465,0x2c31702509203436,0x25202c3164662520\n"
".quad 0x2140090a3b336466,0x2061726220317025,0x315f365f744c2409,0x6c2e090a3b323832\n"
".quad 0x333333093309636f,0x2e6c756d090a3009,0x09203436662e7072,0x6625202c34646625\n"
".quad 0x32646625202c3264,0x722e6c756d090a3b,0x2509203436662e6d,0x646625202c356466\n"
".quad 0x3b31646625202c31,0x36662e766f6d090a,0x2c36646625092034,0x090a3b3464662520\n"
".quad 0x20696e752e617262,0x5f5f3642424c2409,0x657261757173365a,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f744c240a3b5f32,0x0a3a323832315f36\n"
".quad 0x093309636f6c2e09,0x6d090a3009343333,0x09203436662e766f,0x6430202c37646625\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x2e656c2e70746573\n"
".quad 0x3270250920343666,0x202c32646625202c,0x40090a3b37646625,0x6172622032702521\n"
".quad 0x5f365f744c240920,0x2e090a3b38333531,0x3333093309636f6c,0x6c756d090a300935\n"
".quad 0x203436662e70722e,0x25202c3864662509,0x646625202c316466,0x2e6c756d090a3b31\n"
".quad 0x09203436662e6d72,0x6625202c35646625,0x32646625202c3264,0x662e766f6d090a3b\n"
".quad 0x3664662509203436,0x0a3b38646625202c,0x696e752e61726209,0x5f3642424c240920\n"
".quad 0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x744c240a3b5f3253,0x3a383335315f365f,0x3309636f6c2e090a,0x090a300937333309\n"
".quad 0x662e70722e6c756d,0x3964662509203436,0x202c31646625202c,0x6d090a3b31646625\n"
".quad 0x36662e70722e6c75,0x3031646625092034,0x202c32646625202c,0x6d090a3b32646625\n"
".quad 0x09203436662e766f,0x6430202c35646625,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x203436662e78616d,0x25202c3664662509,0x646625202c396466\n"
".quad 0x42424c240a3b3031,0x757173365a5f5f36,0x3231456449657261,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x090a3a5f32534b52,0x203436662e766f6d,0x202c313164662509\n"
".quad 0x73090a3b35646625,0x2e6d617261702e74,0x5f5f5b0920343666,0x6674657261647563\n"
".quad 0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x2c5d302b5f32534b,0x0a3b313164662520,0x3436662e766f6d09,0x2c32316466250920\n"
".quad 0x090a3b3664662520,0x6d617261702e7473,0x5f5b09203436662e,0x746572616475635f\n"
".quad 0x757173365a5f5f66,0x3231456449657261,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x5d382b5f32534b52,0x3b3231646625202c,0x240a3b746572090a,0x5f5f646e6557444c\n"
".quad 0x657261757173365a,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x2f207d090a3a5f32,0x757173365a5f202f,0x3231456449657261,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x090a0a5f32534b52,0x656c62697369762e,0x2820636e75662e20\n"
".quad 0x2e206d617261702e,0x2038206e67696c61,0x75635f5f2038622e,0x5f5f667465726164\n"
".quad 0x314564496466325a,0x61767265746e6932,0x5f54497570675f6c,0x5b695f32534b5245\n"
".quad 0x325a5f20295d3631,0x6932314564496466,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x2e2820695f32534b,0x752e206d61726170,0x6475635f5f203436,0x5f31666d72617061\n"
".quad 0x4564496466325a5f,0x767265746e693231,0x54497570675f6c61,0x695f32534b52455f\n"
".quad 0x6d617261702e202c,0x5f5f203233732e20,0x6d72617061647563,0x6466325a5f5f3266\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x0a7b090a29695f32\n"
".quad 0x752e206765722e09,0x3e343c7225203233,0x206765722e090a3b,0x647225203436752e\n"
".quad 0x722e090a3b3e343c,0x203436662e206765,0x3b3e32323c646625,0x3409636f6c2e090a\n"
".quad 0x4c240a3009363909,0x5f6e696765625744,0x4564496466325a5f,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x695f32534b52455f,0x61702e646c090a3a,0x203436752e6d6172\n"
".quad 0x5b202c3164722509,0x6170616475635f5f,0x325a5f5f31666d72,0x6932314564496466\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x0a3b5d695f32534b,0x3436732e766f6d09\n"
".quad 0x202c326472250920,0x6c090a3b31647225,0x2e6d617261702e64,0x3172250920323375\n"
".quad 0x6475635f5f5b202c,0x5f32666d72617061,0x4564496466325a5f,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x695f32534b52455f,0x2e766f6d090a3b5d,0x3272250920323373\n"
".quad 0x090a3b317225202c,0x39093409636f6c2e,0x2e646c090a300939,0x6466250920343666\n"
".quad 0x326472255b202c31,0x6f6d090a3b5d302b,0x2509203436662e76,0x346430202c326466\n"
".quad 0x3030303030303030,0x3b30303030303030,0x6d090a32202f2f09,0x36662e6d722e6c75\n"
".quad 0x2c33646625092034,0x25202c3264662520,0x646c090a3b316466,0x662509203436662e\n"
".quad 0x6472255b202c3464,0x6d090a3b5d382b32,0x09203436662e766f,0x6430202c35646625\n"
".quad 0x3030303030303034,0x3030303030303030,0x090a32202f2f093b,0x662e6d722e6c756d\n"
".quad 0x3664662509203436,0x202c35646625202c,0x6d090a3b34646625,0x09203436662e766f\n"
".quad 0x6430202c37646625,0x3030303030303034,0x3030303030303030,0x090a32202f2f093b\n"
".quad 0x662e70722e6c756d,0x3864662509203436,0x202c37646625202c,0x6d090a3b31646625\n"
".quad 0x09203436662e766f,0x6430202c39646625,0x3030303030303034,0x3030303030303030\n"
".quad 0x090a32202f2f093b,0x662e70722e6c756d,0x3164662509203436,0x2c39646625202c30\n"
".quad 0x090a3b3464662520,0x203436662e766f6d,0x202c313164662509,0x3030303030636430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x722e747663090a32,0x33732e3436662e6e\n"
".quad 0x3231646625092032,0x090a3b327225202c,0x203436662e67656e,0x202c333164662509\n"
".quad 0x090a3b3231646625,0x203436662e766f6d,0x202c343164662509,0x3030306665336430\n"
".quad 0x3030303030303030,0x31202f2f093b3030,0x2d6538383532352e,0x2e64616d090a3530\n"
".quad 0x09203436662e6e72,0x25202c3531646625,0x6625202c33316466,0x646625202c343164\n"
".quad 0x78616d090a3b3131,0x662509203436662e,0x646625202c363164,0x38646625202c3031\n"
".quad 0x722e646461090a3b,0x2509203436662e70,0x6625202c37316466,0x646625202c363164\n"
".quad 0x6e696d090a3b3531,0x662509203436662e,0x646625202c383164,0x3b33646625202c36\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x646625202c393164,0x31646625202c3831\n"
".quad 0x702e7473090a3b35,0x3436662e6d617261,0x6475635f5f5b0920,0x5a5f5f6674657261\n"
".quad 0x3231456449646632,0x6c61767265746e69,0x455f54497570675f,0x302b695f32534b52\n"
".quad 0x3931646625202c5d,0x662e766f6d090a3b,0x3264662509203436,0x3731646625202c30\n"
".quad 0x61702e7473090a3b,0x203436662e6d6172,0x616475635f5f5b09,0x325a5f5f66746572\n"
".quad 0x6932314564496466,0x5f6c61767265746e,0x52455f5449757067,0x5d382b695f32534b\n"
".quad 0x3b3032646625202c,0x240a3b746572090a,0x5f5f646e6557444c,0x314564496466325a\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x3a695f32534b5245,0x5f202f2f207d090a\n"
".quad 0x314564496466325a,0x61767265746e6932,0x5f54497570675f6c,0x0a695f32534b5245\n"
".quad 0x62697369762e090a,0x636e75662e20656c,0x6d617261702e2820,0x206e67696c612e20\n"
".quad 0x5f5f2038622e2038,0x6674657261647563,0x76696434315a5f5f,0x61705f6e6f697369\n"
".quad 0x3231456449317472,0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52\n"
".quad 0x20295d36315b6252,0x6976696434315a5f,0x7261705f6e6f6973,0x6932314564493174\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x525f34535f32534b,0x617261702e282062\n"
".quad 0x5f203436752e206d,0x726170616475635f,0x34315a5f5f31666d,0x6e6f697369766964\n"
".quad 0x644931747261705f,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x2e202c62525f3453,0x752e206d61726170,0x6475635f5f203436,0x5f32666d72617061\n"
".quad 0x6976696434315a5f,0x7261705f6e6f6973,0x6932314564493174,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x525f34535f32534b,0x617261702e202c62,0x5f203436752e206d\n"
".quad 0x726170616475635f,0x34315a5f5f33666d,0x6e6f697369766964,0x644931747261705f\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x090a2962525f3453\n"
".quad 0x206765722e090a7b,0x3c7225203233752e,0x65722e090a3b3e39,0x25203436752e2067\n"
".quad 0x090a3b3e383c6472,0x36662e206765722e,0x38343c6466252034,0x6765722e090a3b3e\n"
".quad 0x2520646572702e20,0x090a3b3e31323c70,0x32093309636f6c2e,0x444c240a30093939\n"
".quad 0x5f5f6e6967656257,0x736976696434315a,0x747261705f6e6f69,0x6e69323145644931\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253,0x61702e646c090a3a\n"
".quad 0x203436752e6d6172,0x5b202c3164722509,0x6170616475635f5f,0x315a5f5f31666d72\n"
".quad 0x6f69736976696434,0x4931747261705f6e,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x3b5d62525f34535f,0x36732e766f6d090a,0x2c32647225092034\n"
".quad 0x090a3b3164722520,0x6d617261702e646c,0x722509203436752e,0x635f5f5b202c3364\n"
".quad 0x666d726170616475,0x696434315a5f5f32,0x705f6e6f69736976,0x3145644931747261\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x34535f32534b5245,0x6d090a3b5d62525f\n"
".quad 0x09203436732e766f,0x7225202c34647225,0x2e646c090a3b3364,0x36752e6d61726170\n"
".quad 0x2c35647225092034,0x616475635f5f5b20,0x5f5f33666d726170,0x736976696434315a\n"
".quad 0x747261705f6e6f69,0x6e69323145644931,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x62525f34535f3253,0x2e766f6d090a3b5d,0x6472250920343673,0x3b35647225202c36\n"
".quad 0x3309636f6c2e090a,0x090a300930303309,0x203233732e766f6d,0x3b30202c31722509\n"
".quad 0x2038732e7473090a,0x302b366472255b09,0x0a3b317225202c5d,0x093309636f6c2e09\n"
".quad 0x6c090a3009313033,0x2509203436662e64,0x72255b202c316466,0x090a3b5d302b3464\n"
".quad 0x09203436662e646c,0x255b202c32646625,0x0a3b5d382b346472,0x3436662e766f6d09\n"
".quad 0x202c336466250920,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x31646625202c3170,0x0a3b33646625202c\n"
".quad 0x6220317025214009,0x5f744c2409206172,0x3b38333139355f38,0x36662e766f6d090a\n"
".quad 0x2c34646625092034,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e70746573090a30,0x09203436662e6567,0x646625202c327025,0x3b34646625202c32\n"
".quad 0x203270252140090a,0x744c240920617262,0x38333139355f385f,0x732e766f6d090a3b\n"
".quad 0x2c32722509203233,0x617262090a3b3120,0x4c240920696e752e,0x30393630355f385f\n"
".quad 0x5f385f744c240a3b,0x240a3a3833313935,0x343930355f385f4c,0x2e766f6d090a3a36\n"
".quad 0x3272250920323373,0x5f4c240a3b30202c,0x3a30393630355f38,0x33752e766f6d090a\n"
".quad 0x202c337225092032,0x70746573090a3b30,0x203233732e71652e,0x7225202c33702509\n"
".quad 0x0a3b337225202c32,0x7262203370254009,0x385f744c24092061,0x0a3b32303032335f\n"
".quad 0x093309636f6c2e09,0x6d090a3009323033,0x09203436662e766f,0x6430202c35646625\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x2e656e2e70746573\n"
".quad 0x3470250920343666,0x202c32646625202c,0x6d090a3b35646625,0x09203436662e766f\n"
".quad 0x6430202c36646625,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x75656e2e70746573,0x702509203436662e,0x2c31646625202c35,0x090a3b3664662520\n"
".quad 0x7262203570252140,0x385f744c24092061,0x0a3b38353232335f,0x093309636f6c2e09\n"
".quad 0x6c090a3009333033,0x2509203436662e64,0x72255b202c376466,0x090a3b5d302b3264\n"
".quad 0x203436662e766f6d,0x30202c3864662509,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x71652e7074657309,0x702509203436662e,0x2c37646625202c36\n"
".quad 0x090a3b3864662520,0x7262203470252140,0x385f744c24092061,0x0a3b34313532335f\n"
".quad 0x093309636f6c2e09,0x6c090a3009303632,0x2509203436662e64,0x72255b202c396466\n"
".quad 0x090a3b5d382b3264,0x7262203670252140,0x385f744c24092061,0x0a3b30353639355f\n"
".quad 0x3436662e766f6d09,0x2c30316466250920,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e70746573090a30,0x09203436662e7165,0x646625202c377025\n"
".quad 0x3031646625202c39,0x3770252140090a3b,0x4c24092061726220,0x353639355f385f74\n"
".quad 0x636f6c2e090a3b30,0x3009313632093309,0x33732e766f6d090a,0x202c347225092032\n"
".quad 0x732e7473090a3b30,0x366472255b092038,0x347225202c5d302b,0x09636f6c2e090a3b\n"
".quad 0x0a30093236320933,0x203436662e646c09,0x202c313164662509,0x5d302b326472255b\n"
".quad 0x36662e646c090a3b,0x3231646625092034,0x2b326472255b202c,0x617262090a3b5d38\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x7a5f76696434315a,0x747261705f6f7265\n"
".quad 0x6e69323145644931,0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253\n"
".quad 0x0a3b355f3438315f,0x39355f385f744c24,0x5f4c240a3a303536,0x3a38353431355f38\n"
".quad 0x3309636f6c2e090a,0x090a300930373209,0x203436662e766f6d,0x202c333164662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a\n"
".quad 0x2509203436662e74,0x39646625202c3870,0x3b3331646625202c,0x203870252140090a\n"
".quad 0x744c240920617262,0x36323033335f385f,0x09636f6c2e090a3b,0x0a30093137320933\n"
".quad 0x3233732e766f6d09,0x31202c3572250920,0x38732e7473090a3b,0x2b366472255b0920\n"
".quad 0x3b357225202c5d30,0x3309636f6c2e090a,0x090a300932373209,0x09203436662e646c\n"
".quad 0x5b202c3431646625,0x3b5d382b32647225,0x3436662e646c090a,0x2c35316466250920\n"
".quad 0x382b346472255b20,0x2e766964090a3b5d,0x09203436662e7072,0x25202c3231646625\n"
".quad 0x6625202c34316466,0x6f6d090a3b353164,0x2509203436662e76,0x6430202c31316466\n"
".quad 0x3030303030666666,0x3030303030303030,0x6e692d202f2f093b,0x752e617262090a66\n"
".quad 0x57444c240920696e,0x315a5f5f69646e65,0x72657a5f76696434,0x4931747261705f6f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x315f62525f34535f\n"
".quad 0x4c240a3b355f3438,0x323033335f385f74,0x636f6c2e090a3a36,0x3009333732093309\n"
".quad 0x36662e766f6d090a,0x3631646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e,0x6625202c39702509\n"
".quad 0x31646625202c3764,0x70252140090a3b36,0x2409206172622039,0x3233335f385f744c\n"
".quad 0x6f6c2e090a3b3238,0x0934373209330963,0x732e766f6d090a30,0x2c36722509203233\n"
".quad 0x2e7473090a3b3020,0x6472255b09203873,0x7225202c5d302b36,0x2e766f6d090a3b36\n"
".quad 0x6466250920343666,0x66376430202c3231,0x3030303030303066,0x093b303030303030\n"
".quad 0x090a666e69202f2f,0x203436662e766f6d,0x202c313164662509,0x3030306666666430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x617262090a666e69,0x4c240920696e752e\n"
".quad 0x5f5f69646e655744,0x7a5f76696434315a,0x747261705f6f7265,0x6e69323145644931\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253,0x0a3b355f3438315f\n"
".quad 0x33335f385f744c24,0x6c2e090a3a323832,0x373732093309636f,0x2e766f6d090a3009\n"
".quad 0x3772250920323373,0x7473090a3b31202c,0x72255b092038732e,0x25202c5d302b3664\n"
".quad 0x6f6c2e090a3b3772,0x0938373209330963,0x36662e646c090a30,0x3731646625092034\n"
".quad 0x2b326472255b202c,0x2e646c090a3b5d30,0x6466250920343666,0x6472255b202c3831\n"
".quad 0x64090a3b5d302b34,0x36662e70722e7669,0x3231646625092034,0x2c3731646625202c\n"
".quad 0x0a3b383164662520,0x3436662e766f6d09,0x2c31316466250920,0x3030666666643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x444c240a666e692d,0x5a5f5f69646e6557\n"
".quad 0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x5f62525f34535f32,0x090a3a355f343831,0x33093309636f6c2e\n"
".quad 0x6f6d090a30093430,0x2509203436662e76,0x6625202c39316466,0x6f6d090a3b313164\n"
".quad 0x2509203436662e76,0x6625202c30326466,0x7262090a3b323164,0x240920696e752e61\n"
".quad 0x5a5f5f393442424c,0x6973697669643431,0x31747261705f6e6f,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x3b62525f34535f32,0x335f385f744c240a\n"
".quad 0x2e090a3a34313532,0x3432093309636f6c,0x2e646c090a300933,0x6466250920343666\n"
".quad 0x6472255b202c3132,0x40090a3b5d382b32,0x6172622036702521,0x5f385f744c240920\n"
".quad 0x090a3b3236313036,0x203436662e766f6d,0x202c323264662509,0x3030303030306430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x652e70746573090a,0x2509203436662e71\n"
".quad 0x646625202c303170,0x32646625202c3132,0x70252140090a3b32,0x0920617262203031\n"
".quad 0x30365f385f744c24,0x6c2e090a3b323631,0x343432093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x37646625202c3332,0x662e766f6d090a3b,0x3264662509203436\n"
".quad 0x3132646625202c34,0x752e617262090a3b,0x57444c240920696e,0x315a5f5f69646e65\n"
".quad 0x67656e5f76696432,0x4564496576697461,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x525f32534b52455f,0x3438315f5f31534b,0x5f744c240a3b335f,0x3a32363130365f38\n"
".quad 0x31355f385f4c240a,0x6c2e090a3a303739,0x393432093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x30306430202c3532,0x3030303030303030,0x093b303030303030\n"
".quad 0x6573090a30202f2f,0x36662e746c2e7074,0x2c31317025092034,0x202c313264662520\n"
".quad 0x090a3b3532646625,0x6220313170252140,0x5f744c2409206172,0x3b34393733335f38\n"
".quad 0x3309636f6c2e090a,0x090a300930353209,0x662e6d722e766964,0x3264662509203436\n"
".quad 0x3132646625202c33,0x0a3b31646625202c,0x3436662e766f6d09,0x2c34326466250920\n"
".quad 0x3030666637643020,0x3030303030303030,0x202f2f093b303030,0x617262090a666e69\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x6e5f76696432315a,0x4965766974616765\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f\n"
".quad 0x4c240a3b335f3438,0x393733335f385f74,0x636f6c2e090a3a34,0x3009313532093309\n"
".quad 0x36662e766f6d090a,0x3632646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e,0x25202c3231702509\n"
".quad 0x646625202c376466,0x252140090a3b3632,0x2061726220323170,0x335f385f744c2409\n"
".quad 0x6d090a3b30353034,0x09203436662e766f,0x30202c3432646625,0x3030303066663764\n"
".quad 0x3030303030303030,0x6e69202f2f093b30,0x662e766f6d090a66,0x3264662509203436\n"
".quad 0x6666666430202c33,0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x696432315a5f5f69,0x69746167656e5f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x3b335f3438315f5f,0x335f385f744c240a,0x2e090a3a30353034,0x3532093309636f6c\n"
".quad 0x766964090a300934,0x203436662e70722e,0x202c343264662509,0x6625202c37646625\n"
".quad 0x766f6d090a3b3164,0x662509203436662e,0x666430202c333264,0x3030303030306666\n"
".quad 0x3b30303030303030,0x666e692d202f2f09,0x646e6557444c240a,0x696432315a5f5f69\n"
".quad 0x69746167656e5f76,0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x31534b525f32534b,0x3a335f3438315f5f,0x3309636f6c2e090a,0x090a300936303309\n"
".quad 0x203436662e766f6d,0x202c393164662509,0x090a3b3332646625,0x203436662e766f6d\n"
".quad 0x202c303264662509,0x090a3b3432646625,0x20696e752e617262,0x5f393442424c2409\n"
".quad 0x6976696434315a5f,0x7261705f6e6f6973,0x6932314564493174,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x525f34535f32534b,0x385f744c240a3b62,0x0a3a38353232335f\n"
".quad 0x093309636f6c2e09,0x40090a3009383033,0x6172622034702521,0x5f385f744c240920\n"
".quad 0x090a3b3630333433,0x32093309636f6c2e,0x646c090a30093532,0x662509203436662e\n"
".quad 0x72255b202c373264,0x090a3b5d302b3264,0x09203436662e646c,0x5b202c3832646625\n"
".quad 0x3b5d382b32647225,0x36662e766f6d090a,0x3932646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x70746573090a3020,0x203436662e71652e\n"
".quad 0x25202c3331702509,0x6625202c37326466,0x2140090a3b393264,0x6172622033317025\n"
".quad 0x5f385f744c240920,0x090a3b3437363036,0x203436662e766f6d,0x202c303364662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x646625202c343170,0x33646625202c3832,0x70252140090a3b30\n"
".quad 0x0920617262203431,0x30365f385f744c24,0x6c2e090a3b343736,0x363232093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x32646625202c3133,0x2e766f6d090a3b37\n"
".quad 0x6466250920343666,0x32646625202c3233,0x2e617262090a3b38,0x444c240920696e75\n"
".quad 0x5a5f5f69646e6557,0x6f705f7669643231,0x6449657669746973,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x38315f5f31534b52,0x744c240a3b315f34\n"
".quad 0x34373630365f385f,0x355f385f4c240a3a,0x2e090a3a32383432,0x3332093309636f6c\n"
".quad 0x766f6d090a300931,0x662509203436662e,0x306430202c333364,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x3531702509203436\n"
".quad 0x2c3832646625202c,0x0a3b333364662520,0x2035317025214009,0x744c240920617262\n"
".quad 0x38313834335f385f,0x09636f6c2e090a3b,0x0a30093233320933,0x2e70722e76696409\n"
".quad 0x6466250920343666,0x32646625202c3233,0x3b32646625202c38,0x36662e766f6d090a\n"
".quad 0x3133646625092034,0x306666666430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x62090a666e692d20,0x0920696e752e6172,0x69646e6557444c24,0x76696432315a5f5f\n"
".quad 0x76697469736f705f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f31534b525f3253,0x0a3b315f3438315f,0x34335f385f744c24,0x6c2e090a3a383138\n"
".quad 0x333332093309636f,0x2e766f6d090a3009,0x6466250920343666,0x30306430202c3433\n"
".quad 0x3030303030303030,0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074\n"
".quad 0x2c36317025092034,0x202c373264662520,0x090a3b3433646625,0x6220363170252140\n"
".quad 0x5f744c2409206172,0x3b34373035335f38,0x36662e766f6d090a,0x3233646625092034\n"
".quad 0x306666376430202c,0x3030303030303030,0x2f2f093b30303030,0x6f6d090a666e6920\n"
".quad 0x2509203436662e76,0x6430202c31336466,0x3030303030666666,0x3030303030303030\n"
".quad 0x6e692d202f2f093b,0x752e617262090a66,0x57444c240920696e,0x315a5f5f69646e65\n"
".quad 0x736f705f76696432,0x4564496576697469,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x525f32534b52455f,0x3438315f5f31534b,0x5f744c240a3b315f,0x3a34373035335f38\n"
".quad 0x3309636f6c2e090a,0x090a300936333209,0x662e6d722e766964,0x3364662509203436\n"
".quad 0x3732646625202c31,0x0a3b32646625202c,0x3436662e766f6d09,0x2c32336466250920\n"
".quad 0x3030666637643020,0x3030303030303030,0x202f2f093b303030,0x57444c240a666e69\n"
".quad 0x315a5f5f69646e65,0x736f705f76696432,0x4564496576697469,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x525f32534b52455f,0x3438315f5f31534b,0x6f6c2e090a3a315f\n"
".quad 0x0939303309330963,0x662e766f6d090a30,0x3164662509203436,0x3133646625202c39\n"
".quad 0x662e766f6d090a3b,0x3264662509203436,0x3233646625202c30,0x752e617262090a3b\n"
".quad 0x42424c240920696e,0x6434315a5f5f3934,0x5f6e6f6973697669,0x4564493174726170\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x535f32534b52455f,0x4c240a3b62525f34\n"
".quad 0x303334335f385f74,0x636f6c2e090a3a36,0x3009313133093309,0x36662e766f6d090a\n"
".quad 0x3931646625092034,0x386666376430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x6f6d090a6e616e20,0x2509203436662e76,0x6430202c30326466,0x3030303038666637\n"
".quad 0x3030303030303030,0x6e616e202f2f093b,0x6e752e617262090a,0x3442424c24092069\n"
".quad 0x696434315a5f5f39,0x705f6e6f69736976,0x3145644931747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x744c240a3b62525f,0x32303032335f385f\n"
".quad 0x09636f6c2e090a3a,0x0a30093331330933,0x203436662e646c09,0x202c353364662509\n"
".quad 0x5d302b326472255b,0x36662e646c090a3b,0x3633646625092034,0x2b326472255b202c\n"
".quad 0x766f6d090a3b5d38,0x662509203436662e,0x306430202c373364,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x3731702509203436\n"
".quad 0x202c32646625202c,0x090a3b3733646625,0x6220373170252140,0x5f744c2409206172\n"
".quad 0x3b36343337355f38,0x3309636f6c2e090a,0x090a300932393109,0x203436662e766f6d\n"
".quad 0x202c383364662509,0x090a3b3633646625,0x31093309636f6c2e,0x6f6d090a30093339\n"
".quad 0x2509203436662e76,0x6625202c39336466,0x7262090a3b353364,0x240920696e752e61\n"
".quad 0x3037355f385f744c,0x5f744c240a3b3039,0x3a36343337355f38,0x3309636f6c2e090a\n"
".quad 0x090a300936393109,0x203436662e766f6d,0x202c383364662509,0x090a3b3533646625\n"
".quad 0x31093309636f6c2e,0x6f6d090a30093739,0x2509203436662e76,0x6625202c39336466\n"
".quad 0x744c240a3b363364,0x30393037355f385f,0x662e766f6d090a3a,0x3464662509203436\n"
".quad 0x3030306430202c30,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e746c2e70,0x202c383170250920,0x25202c3633646625,0x40090a3b30346466\n"
".quad 0x7262203831702521,0x385f744c24092061,0x0a3b38353837355f,0x093309636f6c2e09\n"
".quad 0x6d090a3009313032,0x09203436662e766f,0x25202c3134646625,0x6c2e090a3b316466\n"
".quad 0x323032093309636f,0x2e766f6d090a3009,0x6466250920343666,0x32646625202c3234\n"
".quad 0x752e617262090a3b,0x5f744c240920696e,0x3b34313138355f38,0x355f385f744c240a\n"
".quad 0x6d090a3a38353837,0x09203436662e766f,0x30202c3334646625,0x3030303030303064\n"
".quad 0x3030303030303030,0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e\n"
".quad 0x33646625202c3931,0x3334646625202c35,0x3170252140090a3b,0x2409206172622039\n"
".quad 0x3338355f385f744c,0x252140090a3b3037,0x2061726220373170,0x355f385f744c2409\n"
".quad 0x2e090a3b32383838,0x3032093309636f6c,0x766f6d090a300936,0x662509203436662e\n"
".quad 0x646625202c313464,0x636f6c2e090a3b32,0x3009373032093309,0x36662e766f6d090a\n"
".quad 0x3234646625092034,0x0a3b32646625202c,0x696e752e61726209,0x5f385f744c240920\n"
".quad 0x240a3b3431313835,0x3838355f385f744c,0x6f6c2e090a3a3238,0x0930313209330963\n"
".quad 0x662e766f6d090a30,0x3464662509203436,0x3b31646625202c31,0x3309636f6c2e090a\n"
".quad 0x090a300931313209,0x203436662e766f6d,0x202c323464662509,0x62090a3b31646625\n"
".quad 0x0920696e752e6172,0x38355f385f744c24,0x744c240a3b343131,0x30373338355f385f\n"
".quad 0x09636f6c2e090a3a,0x0a30093531320933,0x3436662e766f6d09,0x2c31346466250920\n"
".quad 0x090a3b3264662520,0x32093309636f6c2e,0x6f6d090a30093631,0x2509203436662e76\n"
".quad 0x6625202c32346466,0x5f744c240a3b3164,0x3a34313138355f38,0x355f385f744c240a\n"
".quad 0x2e090a3a32303637,0x3132093309636f6c,0x766964090a300938,0x203436662e70722e\n"
".quad 0x202c343464662509,0x25202c3933646625,0x2e090a3b32346466,0x3133093309636f6c\n"
".quad 0x766964090a300933,0x203436662e6d722e,0x202c393164662509,0x25202c3833646625\n"
".quad 0x6d090a3b31346466,0x09203436662e766f,0x25202c3032646625,0x4c240a3b34346466\n"
".quad 0x315a5f5f39344242,0x6f69736976696434,0x4931747261705f6e,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x0a3a62525f34535f,0x3436662e766f6d09\n"
".quad 0x2c35346466250920,0x0a3b393164662520,0x617261702e747309,0x5b09203436662e6d\n"
".quad 0x6572616475635f5f,0x6434315a5f5f6674,0x5f6e6f6973697669,0x4564493174726170\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x535f32534b52455f,0x2c5d302b62525f34\n"
".quad 0x0a3b353464662520,0x3436662e766f6d09,0x2c36346466250920,0x0a3b303264662520\n"
".quad 0x617261702e747309,0x5b09203436662e6d,0x6572616475635f5f,0x6434315a5f5f6674\n"
".quad 0x5f6e6f6973697669,0x4564493174726170,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x535f32534b52455f,0x2c5d382b62525f34,0x0a3b363464662520,0x4c240a3b74657209\n"
".quad 0x5a5f5f646e655744,0x6973697669643431,0x31747261705f6e6f,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x3a62525f34535f32,0x5f202f2f207d090a\n"
".quad 0x736976696434315a,0x747261705f6e6f69,0x6e69323145644931,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x62525f34535f3253,0x697369762e090a0a,0x6e75662e20656c62\n"
".quad 0x617261702e282063,0x6e67696c612e206d,0x5f2038622e203820,0x746572616475635f\n"
".quad 0x696434315a5f5f66,0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x295d36315b62525f,0x76696434315a5f20\n"
".quad 0x61705f6f72657a5f,0x3231456449317472,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x5f34535f32534b52,0x7261702e28206252,0x203436752e206d61,0x6170616475635f5f\n"
".quad 0x315a5f5f31666d72,0x72657a5f76696434,0x4931747261705f6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x202c62525f34535f,0x2e206d617261702e\n"
".quad 0x75635f5f20343675,0x32666d7261706164,0x76696434315a5f5f,0x61705f6f72657a5f\n"
".quad 0x3231456449317472,0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52\n"
".quad 0x7261702e202c6252,0x203436752e206d61,0x6170616475635f5f,0x315a5f5f33666d72\n"
".quad 0x72657a5f76696434,0x4931747261705f6f,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x0a2962525f34535f,0x6765722e090a7b09,0x7225203233752e20\n"
".quad 0x722e090a3b3e363c,0x203436752e206765,0x0a3b3e383c647225,0x662e206765722e09\n"
".quad 0x313c646625203436,0x65722e090a3b3e38,0x20646572702e2067,0x090a3b3e363c7025\n"
".quad 0x32093309636f6c2e,0x444c240a30093935,0x5f5f6e6967656257,0x7a5f76696434315a\n"
".quad 0x747261705f6f7265,0x6e69323145644931,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x62525f34535f3253,0x61702e646c090a3a,0x203436752e6d6172,0x5b202c3164722509\n"
".quad 0x6170616475635f5f,0x315a5f5f31666d72,0x72657a5f76696434,0x4931747261705f6f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x3b5d62525f34535f\n"
".quad 0x36732e766f6d090a,0x2c32647225092034,0x090a3b3164722520,0x6d617261702e646c\n"
".quad 0x722509203436752e,0x635f5f5b202c3364,0x666d726170616475,0x696434315a5f5f32\n"
".quad 0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x34535f32534b5245,0x6d090a3b5d62525f,0x09203436732e766f,0x7225202c34647225\n"
".quad 0x2e646c090a3b3364,0x36752e6d61726170,0x2c35647225092034,0x616475635f5f5b20\n"
".quad 0x5f5f33666d726170,0x7a5f76696434315a,0x747261705f6f7265,0x6e69323145644931\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253,0x2e766f6d090a3b5d\n"
".quad 0x6472250920343673,0x3b35647225202c36,0x3436662e646c090a,0x202c316466250920\n"
".quad 0x5d302b326472255b,0x36662e646c090a3b,0x2c32646625092034,0x382b326472255b20\n"
".quad 0x2e766f6d090a3b5d,0x6466250920343666,0x3030306430202c33,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x746573090a30202f,0x3436662e71652e70,0x25202c3170250920\n"
".quad 0x646625202c316466,0x70252140090a3b33,0x2409206172622031,0x3438335f395f744c\n"
".quad 0x2e766f6d090a3b32,0x6466250920343666,0x3030306430202c34,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x746573090a30202f,0x3436662e71652e70,0x25202c3270250920\n"
".quad 0x646625202c326466,0x70252140090a3b34,0x2409206172622032,0x303333335f395f4c\n"
".quad 0x09636f6c2e090a3b,0x0a30093136320933,0x3233732e766f6d09,0x30202c3172250920\n"
".quad 0x38732e7473090a3b,0x2b366472255b0920,0x3b317225202c5d30,0x3309636f6c2e090a\n"
".quad 0x090a300932363209,0x09203436662e646c,0x255b202c35646625,0x0a3b5d302b326472\n"
".quad 0x203436662e646c09,0x5b202c3664662509,0x3b5d382b32647225,0x6e752e617262090a\n"
".quad 0x3942424c24092069,0x76696434315a5f5f,0x61705f6f72657a5f,0x3231456449317472\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52,0x5f744c240a3b6252\n"
".quad 0x0a3a323438335f39,0x3333335f395f4c24,0x636f6c2e090a3a30,0x3009303732093309\n"
".quad 0x36662e766f6d090a,0x2c37646625092034,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e70746573090a30,0x09203436662e746c,0x646625202c337025\n"
".quad 0x3b37646625202c32,0x203370252140090a,0x744c240920617262,0x3b363033325f395f\n"
".quad 0x3309636f6c2e090a,0x090a300931373209,0x203233732e766f6d,0x3b31202c32722509\n"
".quad 0x2038732e7473090a,0x302b366472255b09,0x0a3b327225202c5d,0x093309636f6c2e09\n"
".quad 0x6c090a3009323732,0x2509203436662e64,0x72255b202c386466,0x090a3b5d382b3264\n"
".quad 0x09203436662e646c,0x255b202c39646625,0x0a3b5d382b346472,0x2e70722e76696409\n"
".quad 0x6466250920343666,0x38646625202c3031,0x0a3b39646625202c,0x3436662e766f6d09\n"
".quad 0x202c356466250920,0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x766f6d090a666e69,0x662509203436662e,0x31646625202c3664,0x2e617262090a3b30\n"
".quad 0x424c240920696e75,0x6434315a5f5f3942,0x5f6f72657a5f7669,0x4564493174726170\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x535f32534b52455f,0x4c240a3b62525f34\n"
".quad 0x363033325f395f74,0x09636f6c2e090a3a,0x0a30093337320933,0x3436662e766f6d09\n"
".quad 0x2c31316466250920,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e70746573090a30,0x09203436662e746c,0x646625202c347025,0x3131646625202c31\n"
".quad 0x3470252140090a3b,0x4c24092061726220,0x323635325f395f74,0x09636f6c2e090a3b\n"
".quad 0x0a30093437320933,0x3233732e766f6d09,0x30202c3372250920,0x38732e7473090a3b\n"
".quad 0x2b366472255b0920,0x3b337225202c5d30,0x3309636f6c2e090a,0x090a300935373209\n"
".quad 0x203436662e766f6d,0x30202c3564662509,0x3030303066666664,0x3030303030303030\n"
".quad 0x692d202f2f093b30,0x2e766f6d090a666e,0x6466250920343666,0x6666376430202c36\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x62090a666e69202f,0x0920696e752e6172\n"
".quad 0x5a5f5f3942424c24,0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x3b62525f34535f32,0x325f395f744c240a\n"
".quad 0x6c2e090a3a323635,0x373732093309636f,0x2e766f6d090a3009,0x3472250920323373\n"
".quad 0x7473090a3b31202c,0x72255b092038732e,0x25202c5d302b3664,0x6f6c2e090a3b3472\n"
".quad 0x0938373209330963,0x36662e646c090a30,0x3231646625092034,0x2b326472255b202c\n"
".quad 0x2e646c090a3b5d30,0x6466250920343666,0x6472255b202c3331,0x64090a3b5d302b34\n"
".quad 0x36662e70722e7669,0x3431646625092034,0x2c3231646625202c,0x0a3b333164662520\n"
".quad 0x3436662e766f6d09,0x202c356466250920,0x3030306666666430,0x3030303030303030\n"
".quad 0x2d202f2f093b3030,0x766f6d090a666e69,0x662509203436662e,0x31646625202c3664\n"
".quad 0x3942424c240a3b34,0x76696434315a5f5f,0x61705f6f72657a5f,0x3231456449317472\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52,0x766f6d090a3a6252\n"
".quad 0x662509203436662e,0x646625202c353164,0x702e7473090a3b35,0x3436662e6d617261\n"
".quad 0x6475635f5f5b0920,0x5a5f5f6674657261,0x657a5f7669643431,0x31747261705f6f72\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x2b62525f34535f32\n"
".quad 0x31646625202c5d30,0x2e766f6d090a3b35,0x6466250920343666,0x36646625202c3631\n"
".quad 0x61702e7473090a3b,0x203436662e6d6172,0x616475635f5f5b09,0x315a5f5f66746572\n"
".quad 0x72657a5f76696434,0x4931747261705f6f,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x382b62525f34535f,0x3631646625202c5d,0x0a3b746572090a3b\n"
".quad 0x5f646e6557444c24,0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493174\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x525f34535f32534b,0x2f2f207d090a3a62\n"
".quad 0x76696434315a5f20,0x61705f6f72657a5f,0x3231456449317472,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x5f34535f32534b52,0x69762e090a0a6252,0x662e20656c626973\n"
".quad 0x61702e2820636e75,0x696c612e206d6172,0x38622e2038206e67,0x72616475635f5f20\n"
".quad 0x32315a5f5f667465,0x6167656e5f766964,0x3145644965766974,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x4b525f32534b5245,0x295d36315b5f3153,0x76696432315a5f20\n"
".quad 0x7669746167656e5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f31534b525f3253,0x6d617261702e2820,0x5f5f203436752e20,0x6d72617061647563\n"
".quad 0x6432315a5f5f3166,0x746167656e5f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x7261702e202c5f31,0x203436752e206d61\n"
".quad 0x6170616475635f5f,0x315a5f5f32666d72,0x67656e5f76696432,0x4564496576697461\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x525f32534b52455f,0x7b090a295f31534b\n"
".quad 0x2e206765722e090a,0x3c64722520343675,0x65722e090a3b3e36,0x25203436662e2067\n"
".quad 0x0a3b3e35313c6466,0x702e206765722e09,0x363c702520646572,0x636f6c2e090a3b3e\n"
".quad 0x3009313432093309,0x67656257444c240a,0x6432315a5f5f6e69,0x746167656e5f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x2e646c090a3a5f31,0x36752e6d61726170,0x2c31647225092034,0x616475635f5f5b20\n"
".quad 0x5f5f31666d726170,0x6e5f76696432315a,0x4965766974616765,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x3b5d5f31534b525f,0x36732e766f6d090a\n"
".quad 0x2c32647225092034,0x090a3b3164722520,0x6d617261702e646c,0x722509203436752e\n"
".quad 0x635f5f5b202c3364,0x666d726170616475,0x696432315a5f5f32,0x69746167656e5f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x766f6d090a3b5d5f,0x722509203436732e,0x33647225202c3464,0x36662e646c090a3b\n"
".quad 0x2c31646625092034,0x302b326472255b20,0x662e646c090a3b5d,0x3264662509203436\n"
".quad 0x2b326472255b202c,0x766f6d090a3b5d38,0x662509203436662e,0x30306430202c3364\n"
".quad 0x3030303030303030,0x093b303030303030,0x6573090a30202f2f,0x36662e71652e7074\n"
".quad 0x202c317025092034,0x6625202c31646625,0x252140090a3b3364,0x0920617262203170\n"
".quad 0x335f30315f744c24,0x6f6d090a3b323438,0x2509203436662e76,0x306430202c346466\n"
".quad 0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09,0x662e71652e707465\n"
".quad 0x2c32702509203436,0x25202c3264662520,0x2140090a3b346466,0x2061726220327025\n"
".quad 0x335f30315f4c2409,0x6c2e090a3b303333,0x343432093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x3b31646625202c35,0x36662e766f6d090a,0x2c36646625092034\n"
".quad 0x090a3b3264662520,0x20696e752e617262,0x5f5f3942424c2409,0x6e5f76696432315a\n"
".quad 0x4965766974616765,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x0a3b5f31534b525f,0x335f30315f744c24,0x5f4c240a3a323438,0x3a303333335f3031\n"
".quad 0x3309636f6c2e090a,0x090a300939343209,0x203436662e766f6d,0x30202c3764662509\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x746c2e7074657309\n"
".quad 0x702509203436662e,0x2c32646625202c33,0x090a3b3764662520,0x7262203370252140\n"
".quad 0x315f744c24092061,0x0a3b363033325f30,0x093309636f6c2e09,0x6c090a3009303532\n"
".quad 0x2509203436662e64,0x72255b202c386466,0x090a3b5d302b3464,0x662e6d722e766964\n"
".quad 0x3564662509203436,0x202c32646625202c,0x6d090a3b38646625,0x09203436662e766f\n"
".quad 0x6430202c36646625,0x3030303030666637,0x3030303030303030,0x666e69202f2f093b\n"
".quad 0x6e752e617262090a,0x3942424c24092069,0x76696432315a5f5f,0x7669746167656e5f\n"
".quad 0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570,0x5f31534b525f3253\n"
".quad 0x30315f744c240a3b,0x090a3a363033325f,0x32093309636f6c2e,0x6f6d090a30093135\n"
".quad 0x2509203436662e76,0x306430202c396466,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x662e746c2e707465,0x2c34702509203436,0x25202c3164662520\n"
".quad 0x2140090a3b396466,0x2061726220347025,0x5f30315f744c2409,0x2e090a3b32363532\n"
".quad 0x3532093309636f6c,0x766f6d090a300932,0x662509203436662e,0x66666430202c3564\n"
".quad 0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f,0x3436662e766f6d09\n"
".quad 0x202c366466250920,0x3030306666376430,0x3030303030303030,0x69202f2f093b3030\n"
".quad 0x2e617262090a666e,0x424c240920696e75,0x6432315a5f5f3942,0x746167656e5f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x5f744c240a3b5f31,0x3a323635325f3031,0x3309636f6c2e090a,0x090a300934353209\n"
".quad 0x09203436662e646c,0x5b202c3031646625,0x3b5d302b34647225,0x70722e766964090a\n"
".quad 0x662509203436662e,0x646625202c313164,0x3031646625202c31,0x662e766f6d090a3b\n"
".quad 0x3564662509203436,0x306666666430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x6d090a666e692d20,0x09203436662e766f,0x6625202c36646625,0x424c240a3b313164\n"
".quad 0x6432315a5f5f3942,0x746167656e5f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x766f6d090a3a5f31,0x662509203436662e\n"
".quad 0x646625202c323164,0x702e7473090a3b35,0x3436662e6d617261,0x6475635f5f5b0920\n"
".quad 0x5a5f5f6674657261,0x656e5f7669643231,0x6449657669746167,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x5d302b5f31534b52,0x3b3231646625202c\n"
".quad 0x36662e766f6d090a,0x3331646625092034,0x0a3b36646625202c,0x617261702e747309\n"
".quad 0x5b09203436662e6d,0x6572616475635f5f,0x6432315a5f5f6674,0x746167656e5f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x25202c5d382b5f31,0x72090a3b33316466,0x57444c240a3b7465,0x32315a5f5f646e65\n"
".quad 0x6167656e5f766964,0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x4b525f32534b5245,0x207d090a3a5f3153,0x6432315a5f202f2f,0x746167656e5f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x69762e090a0a5f31,0x662e20656c626973,0x61702e2820636e75,0x696c612e206d6172\n"
".quad 0x38622e2038206e67,0x72616475635f5f20,0x32315a5f5f667465,0x69736f705f766964\n"
".quad 0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c,0x4b525f32534b5245\n"
".quad 0x295d36315b5f3153,0x76696432315a5f20,0x76697469736f705f,0x6e69323145644965\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x5f31534b525f3253,0x6d617261702e2820\n"
".quad 0x5f5f203436752e20,0x6d72617061647563,0x6432315a5f5f3166,0x7469736f705f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x7261702e202c5f31,0x203436752e206d61,0x6170616475635f5f,0x315a5f5f32666d72\n"
".quad 0x736f705f76696432,0x4564496576697469,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x525f32534b52455f,0x7b090a295f31534b,0x2e206765722e090a,0x3c64722520343675\n"
".quad 0x65722e090a3b3e36,0x25203436662e2067,0x0a3b3e35313c6466,0x702e206765722e09\n"
".quad 0x363c702520646572,0x636f6c2e090a3b3e,0x3009333232093309,0x67656257444c240a\n"
".quad 0x6432315a5f5f6e69,0x7469736f705f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x2e646c090a3a5f31,0x36752e6d61726170\n"
".quad 0x2c31647225092034,0x616475635f5f5b20,0x5f5f31666d726170,0x705f76696432315a\n"
".quad 0x496576697469736f,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x3b5d5f31534b525f,0x36732e766f6d090a,0x2c32647225092034,0x090a3b3164722520\n"
".quad 0x6d617261702e646c,0x722509203436752e,0x635f5f5b202c3364,0x666d726170616475\n"
".quad 0x696432315a5f5f32,0x697469736f705f76,0x6932314564496576,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x31534b525f32534b,0x766f6d090a3b5d5f,0x722509203436732e\n"
".quad 0x33647225202c3464,0x36662e646c090a3b,0x2c31646625092034,0x302b326472255b20\n"
".quad 0x662e646c090a3b5d,0x3264662509203436,0x2b326472255b202c,0x766f6d090a3b5d38\n"
".quad 0x662509203436662e,0x30306430202c3364,0x3030303030303030,0x093b303030303030\n"
".quad 0x6573090a30202f2f,0x36662e71652e7074,0x202c317025092034,0x6625202c31646625\n"
".quad 0x252140090a3b3364,0x0920617262203170,0x335f31315f744c24,0x6f6d090a3b323438\n"
".quad 0x2509203436662e76,0x306430202c346466,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x662e71652e707465,0x2c32702509203436,0x25202c3264662520\n"
".quad 0x2140090a3b346466,0x2061726220327025,0x335f31315f4c2409,0x6c2e090a3b303333\n"
".quad 0x363232093309636f,0x2e766f6d090a3009,0x6466250920343666,0x3b31646625202c35\n"
".quad 0x36662e766f6d090a,0x2c36646625092034,0x090a3b3264662520,0x20696e752e617262\n"
".quad 0x5f5f3942424c2409,0x705f76696432315a,0x496576697469736f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x0a3b5f31534b525f,0x335f31315f744c24\n"
".quad 0x5f4c240a3a323438,0x3a303333335f3131,0x3309636f6c2e090a,0x090a300931333209\n"
".quad 0x203436662e766f6d,0x30202c3764662509,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e,0x2c32646625202c33\n"
".quad 0x090a3b3764662520,0x7262203370252140,0x315f744c24092061,0x0a3b363033325f31\n"
".quad 0x093309636f6c2e09,0x6c090a3009323332,0x2509203436662e64,0x72255b202c386466\n"
".quad 0x090a3b5d302b3464,0x662e70722e766964,0x3964662509203436,0x202c32646625202c\n"
".quad 0x6d090a3b38646625,0x09203436662e766f,0x6430202c35646625,0x3030303030666666\n"
".quad 0x3030303030303030,0x6e692d202f2f093b,0x662e766f6d090a66,0x3664662509203436\n"
".quad 0x0a3b39646625202c,0x696e752e61726209,0x5f3942424c240920,0x5f76696432315a5f\n"
".quad 0x6576697469736f70,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x3b5f31534b525f32,0x5f31315f744c240a,0x2e090a3a36303332,0x3332093309636f6c\n"
".quad 0x766f6d090a300933,0x662509203436662e,0x306430202c303164,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e746c2e707465,0x2c34702509203436\n"
".quad 0x25202c3164662520,0x40090a3b30316466,0x6172622034702521,0x31315f744c240920\n"
".quad 0x090a3b323635325f,0x32093309636f6c2e,0x6f6d090a30093433,0x2509203436662e76\n"
".quad 0x666430202c356466,0x3030303030306666,0x3b30303030303030,0x666e692d202f2f09\n"
".quad 0x36662e766f6d090a,0x2c36646625092034,0x3030666637643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x617262090a666e69,0x4c240920696e752e,0x32315a5f5f394242\n"
".quad 0x69736f705f766964,0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x4b525f32534b5245,0x744c240a3b5f3153,0x323635325f31315f,0x09636f6c2e090a3a\n"
".quad 0x0a30093633320933,0x203436662e646c09,0x202c313164662509,0x5d302b346472255b\n"
".quad 0x722e766964090a3b,0x2509203436662e6d,0x646625202c356466,0x3131646625202c31\n"
".quad 0x662e766f6d090a3b,0x3664662509203436,0x306666376430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x424c240a666e6920,0x6432315a5f5f3942,0x7469736f705f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x766f6d090a3a5f31,0x662509203436662e,0x646625202c323164,0x702e7473090a3b35\n"
".quad 0x3436662e6d617261,0x6475635f5f5b0920,0x5a5f5f6674657261,0x6f705f7669643231\n"
".quad 0x6449657669746973,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x5d302b5f31534b52,0x3b3231646625202c,0x36662e766f6d090a,0x3331646625092034\n"
".quad 0x0a3b36646625202c,0x617261702e747309,0x5b09203436662e6d,0x6572616475635f5f\n"
".quad 0x6432315a5f5f6674,0x7469736f705f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x25202c5d382b5f31,0x72090a3b33316466\n"
".quad 0x57444c240a3b7465,0x32315a5f5f646e65,0x69736f705f766964,0x3145644965766974\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x4b525f32534b5245,0x207d090a3a5f3153\n"
".quad 0x6432315a5f202f2f,0x7469736f705f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x69762e090a0a5f31,0x662e20656c626973\n"
".quad 0x61702e2820636e75,0x696c612e206d6172,0x38622e2038206e67,0x72616475635f5f20\n"
".quad 0x32315a5f5f667465,0x5f6e6f6e5f766964,0x314564496f72657a,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x5f20295d36315b5f,0x6e5f76696432315a\n"
".quad 0x496f72657a5f6e6f,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x702e28205f34535f,0x36752e206d617261,0x616475635f5f2034,0x5f5f31666d726170\n"
".quad 0x6e5f76696432315a,0x496f72657a5f6e6f,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x702e202c5f34535f,0x36752e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f32666d726170,0x6e5f76696432315a,0x496f72657a5f6e6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x7b090a295f34535f,0x2e206765722e090a\n"
".quad 0x3c64722520343675,0x65722e090a3b3e36,0x25203436662e2067,0x0a3b3e36313c6466\n"
".quad 0x702e206765722e09,0x353c702520646572,0x636f6c2e090a3b3e,0x3009363831093309\n"
".quad 0x67656257444c240a,0x6432315a5f5f6e69,0x7a5f6e6f6e5f7669,0x32314564496f7265\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52,0x61702e646c090a3a\n"
".quad 0x203436752e6d6172,0x5b202c3164722509,0x6170616475635f5f,0x315a5f5f31666d72\n"
".quad 0x6e6f6e5f76696432,0x4564496f72657a5f,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x535f32534b52455f,0x6f6d090a3b5d5f34,0x2509203436732e76,0x647225202c326472\n"
".quad 0x702e646c090a3b31,0x3436752e6d617261,0x202c336472250920,0x70616475635f5f5b\n"
".quad 0x5a5f5f32666d7261,0x6f6e5f7669643231,0x64496f72657a5f6e,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x6d090a3b5d5f3453,0x09203436732e766f\n"
".quad 0x7225202c34647225,0x2e646c090a3b3364,0x6466250920343666,0x346472255b202c31\n"
".quad 0x646c090a3b5d382b,0x662509203436662e,0x6472255b202c3264,0x6c090a3b5d302b32\n"
".quad 0x2509203436662e64,0x72255b202c336466,0x090a3b5d382b3264,0x203436662e766f6d\n"
".quad 0x30202c3464662509,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x746c2e7074657309,0x702509203436662e,0x2c31646625202c31,0x090a3b3464662520\n"
".quad 0x7262203170252140,0x315f744c24092061,0x0a3b363835335f32,0x093309636f6c2e09\n"
".quad 0x6d090a3009323931,0x09203436662e766f,0x6625202c35646625,0x6f6c2e090a3b3364\n"
".quad 0x0933393109330963,0x662e766f6d090a30,0x3664662509203436,0x0a3b32646625202c\n"
".quad 0x696e752e61726209,0x32315f744c240920,0x240a3b303333335f,0x35335f32315f744c\n"
".quad 0x6f6c2e090a3a3638,0x0936393109330963,0x662e766f6d090a30,0x3564662509203436\n"
".quad 0x0a3b32646625202c,0x093309636f6c2e09,0x6d090a3009373931,0x09203436662e766f\n"
".quad 0x6625202c36646625,0x5f744c240a3b3364,0x3a303333335f3231,0x36662e766f6d090a\n"
".quad 0x2c37646625092034,0x3030303030643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e70746573090a30,0x09203436662e746c,0x646625202c327025,0x3b37646625202c33\n"
".quad 0x203270252140090a,0x744c240920617262,0x383930345f32315f,0x09636f6c2e090a3b\n"
".quad 0x0a30093130320933,0x203436662e646c09,0x5b202c3864662509,0x3b5d302b34647225\n"
".quad 0x3309636f6c2e090a,0x090a300932303209,0x203436662e766f6d,0x25202c3964662509\n"
".quad 0x7262090a3b316466,0x240920696e752e61,0x33345f32315f744c,0x5f744c240a3b3435\n"
".quad 0x3a383930345f3231,0x36662e766f6d090a,0x3031646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e\n"
".quad 0x6625202c33702509,0x31646625202c3264,0x70252140090a3b30,0x2409206172622033\n"
".quad 0x36345f32315f744c,0x252140090a3b3031,0x0920617262203170,0x355f32315f744c24\n"
".quad 0x6c2e090a3b323231,0x363032093309636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x3b31646625202c38,0x3309636f6c2e090a,0x090a300937303209,0x203436662e766f6d\n"
".quad 0x25202c3964662509,0x7262090a3b316466,0x240920696e752e61,0x33345f32315f744c\n"
".quad 0x5f744c240a3b3435,0x3a323231355f3231,0x3309636f6c2e090a,0x090a300930313209\n"
".quad 0x09203436662e646c,0x5b202c3131646625,0x3b5d302b34647225,0x36662e766f6d090a\n"
".quad 0x2c38646625092034,0x0a3b313164662520,0x093309636f6c2e09,0x6d090a3009313132\n"
".quad 0x09203436662e766f,0x6625202c39646625,0x7262090a3b313164,0x240920696e752e61\n"
".quad 0x33345f32315f744c,0x5f744c240a3b3435,0x3a303136345f3231,0x3309636f6c2e090a\n"
".quad 0x090a300935313209,0x203436662e766f6d,0x25202c3864662509,0x6c2e090a3b316466\n"
".quad 0x363132093309636f,0x662e646c090a3009,0x3964662509203436,0x2b346472255b202c\n"
".quad 0x5f744c240a3b5d30,0x3a343533345f3231,0x5f32315f744c240a,0x2e090a3a32343833\n"
".quad 0x3132093309636f6c,0x766964090a300938,0x203436662e70722e,0x202c323164662509\n"
".quad 0x6625202c36646625,0x766964090a3b3964,0x203436662e6d722e,0x202c333164662509\n"
".quad 0x6625202c35646625,0x2e7473090a3b3864,0x36662e6d61726170,0x75635f5f5b092034\n"
".quad 0x5f5f667465726164,0x6e5f76696432315a,0x496f72657a5f6e6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x2c5d302b5f34535f,0x0a3b333164662520\n"
".quad 0x3436662e766f6d09,0x2c34316466250920,0x0a3b323164662520,0x617261702e747309\n"
".quad 0x5b09203436662e6d,0x6572616475635f5f,0x6432315a5f5f6674,0x7a5f6e6f6e5f7669\n"
".quad 0x32314564496f7265,0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52\n"
".quad 0x646625202c5d382b,0x746572090a3b3431,0x6e6557444c240a3b,0x696432315a5f5f64\n"
".quad 0x657a5f6e6f6e5f76,0x6932314564496f72,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x3a5f34535f32534b,0x5f202f2f207d090a,0x6e5f76696432315a,0x496f72657a5f6e6f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x2e090a0a5f34535f\n"
".quad 0x20656c6269736976,0x2e2820636e75662e,0x612e206d61726170,0x2e2038206e67696c\n"
".quad 0x6475635f5f203862,0x5a5f5f6674657261,0x65737265746e6939,0x6932314564497463\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x5b5f34535f32534b,0x395a5f20295d3631\n"
".quad 0x6365737265746e69,0x6e69323145644974,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x28205f34535f3253,0x2e206d617261702e,0x75635f5f20343675,0x31666d7261706164\n"
".quad 0x65746e69395a5f5f,0x4564497463657372,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x535f32534b52455f,0x7261702e202c5f34,0x203436752e206d61,0x6170616475635f5f\n"
".quad 0x395a5f5f32666d72,0x6365737265746e69,0x6e69323145644974,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x0a295f34535f3253,0x6765722e090a7b09,0x7225203436752e20\n"
".quad 0x2e090a3b3e363c64,0x3436662e20676572,0x3e32313c64662520,0x206765722e090a3b\n"
".quad 0x702520646572702e,0x6c2e090a3b3e333c,0x323731093309636f,0x6257444c240a3009\n"
".quad 0x395a5f5f6e696765,0x6365737265746e69,0x6e69323145644974,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x0a3a5f34535f3253,0x617261702e646c09,0x2509203436752e6d\n"
".quad 0x5f5f5b202c316472,0x6d72617061647563,0x6e69395a5f5f3166,0x4974636573726574\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x090a3b5d5f34535f\n"
".quad 0x203436732e766f6d,0x25202c3264722509,0x646c090a3b316472,0x752e6d617261702e\n"
".quad 0x3364722509203436,0x6475635f5f5b202c,0x5f32666d72617061,0x7265746e69395a5f\n"
".quad 0x3145644974636573,0x61767265746e6932,0x5f54497570675f6c,0x34535f32534b5245\n"
".quad 0x766f6d090a3b5d5f,0x722509203436732e,0x33647225202c3464,0x09636f6c2e090a3b\n"
".quad 0x0a30093437310933,0x203436662e646c09,0x5b202c3164662509,0x3b5d302b32647225\n"
".quad 0x3436662e646c090a,0x202c326466250920,0x5d302b346472255b,0x662e78616d090a3b\n"
".quad 0x3364662509203436,0x202c31646625202c,0x2e090a3b32646625,0x3731093309636f6c\n"
".quad 0x2e646c090a300935,0x6466250920343666,0x326472255b202c34,0x646c090a3b5d382b\n"
".quad 0x662509203436662e,0x6472255b202c3564,0x6d090a3b5d382b34,0x09203436662e6e69\n"
".quad 0x6625202c36646625,0x35646625202c3464,0x09636f6c2e090a3b,0x0a30093637310933\n"
".quad 0x656c2e7074657309,0x702509203436662e,0x2c33646625202c31,0x090a3b3664662520\n"
".quad 0x7262203170252140,0x315f744c24092061,0x3b30353231325f33,0x3309636f6c2e090a\n"
".quad 0x090a300937373109,0x203436662e766f6d,0x25202c3764662509,0x6f6d090a3b336466\n"
".quad 0x2509203436662e76,0x646625202c386466,0x2e617262090a3b36,0x424c240920696e75\n"
".quad 0x6e69395a5f5f3442,0x4974636573726574,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x4c240a3b5f34535f,0x3231325f33315f74,0x6f6c2e090a3a3035\n"
".quad 0x0939373109330963,0x662e766f6d090a30,0x3764662509203436,0x386666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x6f6d090a6e616e20,0x2509203436662e76\n"
".quad 0x376430202c386466,0x3030303030386666,0x3b30303030303030,0x0a6e616e202f2f09\n"
".quad 0x5a5f5f3442424c24,0x65737265746e6939,0x6932314564497463,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x3a5f34535f32534b,0x36662e766f6d090a,0x2c39646625092034\n"
".quad 0x090a3b3764662520,0x6d617261702e7473,0x5f5b09203436662e,0x746572616475635f\n"
".quad 0x746e69395a5f5f66,0x6449746365737265,0x7265746e69323145,0x497570675f6c6176\n"
".quad 0x5f32534b52455f54,0x202c5d302b5f3453,0x6d090a3b39646625,0x09203436662e766f\n"
".quad 0x25202c3031646625,0x7473090a3b386466,0x662e6d617261702e,0x635f5f5b09203436\n"
".quad 0x5f66746572616475,0x7265746e69395a5f,0x3145644974636573,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x6625202c5d382b5f,0x6572090a3b303164\n"
".quad 0x6557444c240a3b74,0x6e69395a5f5f646e,0x4974636573726574,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x7d090a3a5f34535f,0x69395a5f202f2f20\n"
".quad 0x746365737265746e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x090a0a5f34535f32,0x656c62697369762e,0x2820636e75662e20,0x2e206d617261702e\n"
".quad 0x2038206e67696c61,0x75635f5f2038622e,0x5f5f667465726164,0x7a5f76696434315a\n"
".quad 0x747261705f6f7265,0x6e69323145644932,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x315b5f34535f3253,0x34315a5f20295d36,0x6f72657a5f766964,0x644932747261705f\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x61702e28205f3453\n"
".quad 0x3436752e206d6172,0x70616475635f5f20,0x5a5f5f31666d7261,0x657a5f7669643431\n"
".quad 0x32747261705f6f72,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x2e202c5f34535f32,0x752e206d61726170,0x6475635f5f203436,0x5f32666d72617061\n"
".quad 0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493274,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x295f34535f32534b,0x65722e090a7b090a,0x25203436752e2067\n"
".quad 0x090a3b3e363c6472,0x36662e206765722e,0x31313c6466252034,0x6765722e090a3b3e\n"
".quad 0x2520646572702e20,0x2e090a3b3e333c70,0x3832093309636f6c,0x57444c240a300933\n"
".quad 0x5a5f5f6e69676562,0x657a5f7669643431,0x32747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x090a3a5f34535f32,0x6d617261702e646c\n"
".quad 0x722509203436752e,0x635f5f5b202c3164,0x666d726170616475,0x696434315a5f5f31\n"
".quad 0x705f6f72657a5f76,0x3145644932747261,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x34535f32534b5245,0x766f6d090a3b5d5f,0x722509203436732e,0x31647225202c3264\n"
".quad 0x61702e646c090a3b,0x203436752e6d6172,0x5b202c3364722509,0x6170616475635f5f\n"
".quad 0x315a5f5f32666d72,0x72657a5f76696434,0x4932747261705f6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x090a3b5d5f34535f,0x203436732e766f6d\n"
".quad 0x25202c3464722509,0x6c2e090a3b336472,0x313932093309636f,0x662e646c090a3009\n"
".quad 0x3164662509203436,0x2b326472255b202c,0x766f6d090a3b5d38,0x662509203436662e\n"
".quad 0x30306430202c3264,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x36662e746c2e7074,0x202c317025092034,0x6625202c31646625,0x252140090a3b3264\n"
".quad 0x0920617262203170,0x375f34315f744c24,0x6f6c2e090a3b3037,0x0932393209330963\n"
".quad 0x36662e646c090a30,0x2c33646625092034,0x302b346472255b20,0x2e766964090a3b5d\n"
".quad 0x09203436662e6d72,0x6625202c34646625,0x33646625202c3164,0x662e766f6d090a3b\n"
".quad 0x3564662509203436,0x306666376430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x7262090a666e6920,0x240920696e752e61,0x315a5f5f3442424c,0x72657a5f76696434\n"
".quad 0x4932747261705f6f,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x4c240a3b5f34535f,0x3037375f34315f74,0x09636f6c2e090a3a,0x0a30093439320933\n"
".quad 0x203436662e646c09,0x5b202c3664662509,0x3b5d302b32647225,0x3436662e646c090a\n"
".quad 0x202c376466250920,0x5d382b346472255b,0x722e766964090a3b,0x2509203436662e6d\n"
".quad 0x646625202c346466,0x3b37646625202c36,0x36662e766f6d090a,0x2c35646625092034\n"
".quad 0x3030666637643020,0x3030303030303030,0x202f2f093b303030,0x42424c240a666e69\n"
".quad 0x696434315a5f5f34,0x705f6f72657a5f76,0x3145644932747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x2e766f6d090a3a5f,0x6466250920343666\n"
".quad 0x3b34646625202c38,0x7261702e7473090a,0x09203436662e6d61,0x72616475635f5f5b\n"
".quad 0x34315a5f5f667465,0x6f72657a5f766964,0x644932747261705f,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x202c5d302b5f3453,0x6d090a3b38646625\n"
".quad 0x09203436662e766f,0x6625202c39646625,0x2e7473090a3b3564,0x36662e6d61726170\n"
".quad 0x75635f5f5b092034,0x5f5f667465726164,0x7a5f76696434315a,0x747261705f6f7265\n"
".quad 0x6e69323145644932,0x675f6c6176726574,0x4b52455f54497570,0x382b5f34535f3253\n"
".quad 0x3b39646625202c5d,0x240a3b746572090a,0x5f5f646e6557444c,0x7a5f76696434315a\n"
".quad 0x747261705f6f7265,0x6e69323145644932,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x0a3a5f34535f3253,0x5a5f202f2f207d09,0x657a5f7669643431,0x32747261705f6f72\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x090a0a5f34535f32\n"
".quad 0x656c62697369762e,0x2820636e75662e20,0x2e206d617261702e,0x75635f5f20323373\n"
".quad 0x5f5f667465726164,0x6c756f687333315a,0x7463657369625f64,0x32314b5262456449\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x31535f34535f3453,0x7333315a5f20295f\n"
".quad 0x69625f646c756f68,0x6245644974636573,0x65746e6932314b52,0x7570675f6c617672\n"
".quad 0x535f3453455f5449,0x2e28205f31535f34,0x752e206d61726170,0x6475635f5f203436\n"
".quad 0x5f31666d72617061,0x756f687333315a5f,0x63657369625f646c,0x314b526245644974\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x535f34535f345345,0x7261702e202c5f31\n"
".quad 0x203436752e206d61,0x6170616475635f5f,0x315a5f5f32666d72,0x5f646c756f687333\n"
".quad 0x6449746365736962,0x6e6932314b526245,0x675f6c6176726574,0x3453455f54497570\n"
".quad 0x2c5f31535f34535f,0x206d617261702e20,0x635f5f203436752e,0x666d726170616475\n"
".quad 0x687333315a5f5f33,0x7369625f646c756f,0x5262456449746365,0x7265746e6932314b\n"
".quad 0x497570675f6c6176,0x34535f3453455f54,0x702e202c5f31535f,0x36662e206d617261\n"
".quad 0x616475635f5f2034,0x5f5f34666d726170,0x6c756f687333315a,0x7463657369625f64\n"
".quad 0x32314b5262456449,0x6c61767265746e69,0x455f54497570675f,0x31535f34535f3453\n"
".quad 0x2e090a7b090a295f,0x3233752e20676572,0x0a3b3e343c722520,0x752e206765722e09\n"
".quad 0x383c647225203436,0x6765722e090a3b3e,0x6625203436662e20,0x090a3b3e31323c64\n"
".quad 0x72702e206765722e,0x3e393c7025206465,0x09636f6c2e090a3b,0x0a30093831310934\n"
".quad 0x6967656257444c24,0x687333315a5f5f6e,0x7369625f646c756f,0x5262456449746365\n"
".quad 0x7265746e6932314b,0x497570675f6c6176,0x34535f3453455f54,0x6c090a3a5f31535f\n"
".quad 0x2e6d617261702e64,0x6472250920343675,0x75635f5f5b202c31,0x31666d7261706164\n"
".quad 0x6f687333315a5f5f,0x657369625f646c75,0x4b52624564497463,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x5f34535f3453455f,0x6d090a3b5d5f3153,0x09203436732e766f\n"
".quad 0x7225202c32647225,0x2e646c090a3b3164,0x36752e6d61726170,0x2c33647225092034\n"
".quad 0x616475635f5f5b20,0x5f5f32666d726170,0x6c756f687333315a,0x7463657369625f64\n"
".quad 0x32314b5262456449,0x6c61767265746e69,0x455f54497570675f,0x31535f34535f3453\n"
".quad 0x766f6d090a3b5d5f,0x722509203436732e,0x33647225202c3464,0x61702e646c090a3b\n"
".quad 0x203436752e6d6172,0x5b202c3564722509,0x6170616475635f5f,0x315a5f5f33666d72\n"
".quad 0x5f646c756f687333,0x6449746365736962,0x6e6932314b526245,0x675f6c6176726574\n"
".quad 0x3453455f54497570,0x5d5f31535f34535f,0x732e766f6d090a3b,0x3664722509203436\n"
".quad 0x0a3b35647225202c,0x617261702e646c09,0x2509203436662e6d,0x5f5f5b202c316466\n"
".quad 0x6d72617061647563,0x7333315a5f5f3466,0x69625f646c756f68,0x6245644974636573\n"
".quad 0x65746e6932314b52,0x7570675f6c617672,0x535f3453455f5449,0x0a3b5d5f31535f34\n"
".quad 0x3436662e766f6d09,0x202c326466250920,0x2e090a3b31646625,0x3131093409636f6c\n"
".quad 0x2e646c090a300939,0x6466250920343666,0x326472255b202c33,0x646c090a3b5d302b\n"
".quad 0x662509203436662e,0x6472255b202c3464,0x61090a3b5d382b32,0x09203436662e6464\n"
".quad 0x6625202c35646625,0x34646625202c3364,0x2e70746573090a3b,0x203436662e75656e\n"
".quad 0x6625202c31702509,0x35646625202c3564,0x3170252140090a3b,0x4c24092061726220\n"
".quad 0x3336355f35315f74,0x636f6c2e090a3b34,0x0a30093838093309,0x3436662e766f6d09\n"
".quad 0x202c366466250920,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x6e752e617262090a,0x6557444c24092069,0x77355a5f5f69646e,0x5445644968746469\n"
".quad 0x7265746e6932315f,0x497570675f6c6176,0x3738315f455f3053,0x5f744c240a3b355f\n"
".quad 0x3a343336355f3531,0x3309636f6c2e090a,0x6e090a3009303909,0x09203436662e6765\n"
".quad 0x6625202c37646625,0x646461090a3b3364,0x203436662e70722e,0x25202c3664662509\n"
".quad 0x646625202c346466,0x6557444c240a3b37,0x77355a5f5f69646e,0x5445644968746469\n"
".quad 0x7265746e6932315f,0x497570675f6c6176,0x3738315f455f3053,0x6f6c2e090a3a355f\n"
".quad 0x0930323109340963,0x36662e646c090a30,0x2c38646625092034,0x302b346472255b20\n"
".quad 0x662e646c090a3b5d,0x3964662509203436,0x2b346472255b202c,0x646461090a3b5d38\n"
".quad 0x662509203436662e,0x646625202c303164,0x3b38646625202c39,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x31646625202c3270,0x3031646625202c30,0x3270252140090a3b\n"
".quad 0x4c24092061726220,0x3731375f35315f74,0x70746573090a3b30,0x3436662e75656e2e\n"
".quad 0x25202c3370250920,0x6625202c30316466,0x2140090a3b303164,0x2061726220337025\n"
".quad 0x5f35315f744c2409,0x2e090a3b36343136,0x3838093309636f6c,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x30306430202c3131,0x3030303030303030,0x093b303030303030\n"
".quad 0x7262090a30202f2f,0x240920696e752e61,0x5f69646e6557444c,0x6874646977355a5f\n"
".quad 0x6932315f54456449,0x5f6c61767265746e,0x455f305349757067,0x0a3b335f3738315f\n"
".quad 0x365f35315f744c24,0x6c2e090a3a363431,0x093039093309636f,0x662e67656e090a30\n"
".quad 0x3164662509203436,0x3b38646625202c32,0x70722e646461090a,0x662509203436662e\n"
".quad 0x646625202c313164,0x3231646625202c39,0x6e6557444c240a3b,0x6977355a5f5f6964\n"
".quad 0x5f54456449687464,0x767265746e693231,0x53497570675f6c61,0x5f3738315f455f30\n"
".quad 0x636f6c2e090a3a33,0x3009303231093409,0x36662e6c756d090a,0x3331646625092034\n"
".quad 0x202c36646625202c,0x73090a3b32646625,0x662e74672e707465,0x2c34702509203436\n"
".quad 0x202c313164662520,0x090a3b3331646625,0x7262203470252140,0x315f744c24092061\n"
".quad 0x0a3b303731375f35,0x696e752e61726209,0x35315f744c240920,0x240a3b363033325f\n"
".quad 0x31375f35315f744c,0x5f744c240a3a3037,0x3a383138325f3531,0x3436662e646c090a\n"
".quad 0x2c34316466250920,0x302b366472255b20,0x662e646c090a3b5d,0x3164662509203436\n"
".quad 0x366472255b202c35,0x6461090a3b5d382b,0x2509203436662e64,0x6625202c36316466\n"
".quad 0x646625202c353164,0x746573090a3b3431,0x3436662e71652e70,0x25202c3570250920\n"
".quad 0x6625202c36316466,0x2140090a3b363164,0x2061726220357025,0x5f35315f744c2409\n"
".quad 0x73090a3b32383637,0x2e75656e2e707465,0x3670250920343666,0x2c3631646625202c\n"
".quad 0x0a3b363164662520,0x6220367025214009,0x5f744c2409206172,0x3b383536365f3531\n"
".quad 0x3309636f6c2e090a,0x6d090a3009383809,0x09203436662e766f,0x30202c3731646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x696e752e61726209\n"
".quad 0x6e6557444c240920,0x6977355a5f5f6964,0x5f54456449687464,0x767265746e693231\n"
".quad 0x53497570675f6c61,0x5f3738315f455f30,0x315f744c240a3b31,0x0a3a383536365f35\n"
".quad 0x093309636f6c2e09,0x656e090a30093039,0x2509203436662e67,0x6625202c38316466\n"
".quad 0x6461090a3b343164,0x3436662e70722e64,0x2c37316466250920,0x202c353164662520\n"
".quad 0x240a3b3831646625,0x5f69646e6557444c,0x6874646977355a5f,0x6932315f54456449\n"
".quad 0x5f6c61767265746e,0x455f305349757067,0x0a3a315f3738315f,0x093409636f6c2e09\n"
".quad 0x6d090a3009303231,0x09203436662e6c75,0x25202c3931646625,0x646625202c366466\n"
".quad 0x70746573090a3b32,0x203436662e74672e,0x6625202c37702509,0x646625202c373164\n"
".quad 0x252140090a3b3931,0x0920617262203770,0x375f35315f744c24,0x744c240a3b323836\n"
".quad 0x363033325f35315f,0x732e766f6d090a3a,0x2c31722509203233,0x617262090a3b3120\n"
".quad 0x4c240920696e752e,0x3136345f35315f74,0x315f744c240a3b30,0x0a3a323836375f35\n"
".quad 0x325f35315f744c24,0x6f6d090a3a323635,0x2509203233732e76,0x240a3b30202c3172\n"
".quad 0x36345f35315f744c,0x766f6d090a3a3031,0x722509203233732e,0x0a3b317225202c32\n"
".quad 0x617261702e747309,0x5b09203233732e6d,0x6572616475635f5f,0x7333315a5f5f6674\n"
".quad 0x69625f646c756f68,0x6245644974636573,0x65746e6932314b52,0x7570675f6c617672\n"
".quad 0x535f3453455f5449,0x202c5d5f31535f34,0x6572090a3b327225,0x6557444c240a3b74\n"
".quad 0x7333315a5f5f646e,0x69625f646c756f68,0x6245644974636573,0x65746e6932314b52\n"
".quad 0x7570675f6c617672,0x535f3453455f5449,0x090a3a5f31535f34,0x315a5f202f2f207d\n"
".quad 0x5f646c756f687333,0x6449746365736962,0x6e6932314b526245,0x675f6c6176726574\n"
".quad 0x3453455f54497570,0x0a5f31535f34535f,0x6c61626f6c672e09,0x206e67696c612e20\n"
".quad 0x5f5f2038622e2031,0x746e6174736e6f63,0x3d205d315b393438,0x0a3b7d3078307b20\n"
".quad 0x62697369762e090a,0x636e75662e20656c,0x77656e35315a5f20,0x65746e695f6e6f74\n"
".quad 0x694c64496c617672,0x694c453633353536,0x3152764545383231,0x5f6c61626f6c6732\n"
".quad 0x3231496b63617473,0x6c61767265746e69,0x455f54497570675f,0x305458455f315458\n"
".quad 0x5f33534b5245455f,0x617261702e282069,0x5f203436752e206d,0x726170616475635f\n"
".quad 0x35315a5f5f31666d,0x695f6e6f7477656e,0x496c61767265746e,0x3633353536694c64\n"
".quad 0x4545383231694c45,0x626f6c6732315276,0x6b636174735f6c61,0x7265746e69323149\n"
".quad 0x497570675f6c6176,0x455f315458455f54,0x4b5245455f305458,0x702e202c695f3353\n"
".quad 0x36752e206d617261,0x616475635f5f2034,0x5f5f32666d726170,0x6f7477656e35315a\n"
".quad 0x767265746e695f6e,0x3536694c64496c61,0x3231694c45363335,0x6732315276454538\n"
".quad 0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574,0x5458455f54497570\n"
".quad 0x455f305458455f31,0x2c695f33534b5245,0x206d617261702e20,0x635f5f203233732e\n"
".quad 0x666d726170616475,0x656e35315a5f5f33,0x746e695f6e6f7477,0x4c64496c61767265\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x090a7b090a29695f,0x33752e206765722e,0x3e30393c72252032,0x206765722e090a3b\n"
".quad 0x647225203436752e,0x2e090a3b3e32353c,0x3436662e20676572,0x3237313c64662520\n"
".quad 0x6765722e090a3b3e,0x2520646572702e20,0x090a3b3e36353c70,0x2e206c61636f6c2e\n"
".quad 0x2038206e67696c61,0x75635f5f2038622e,0x6475635f5f5f6164,0x5f6c61636f6c5f61\n"
".quad 0x383637365f726176,0x6e6f6e5f32335f30,0x775f74736e6f635f,0x303236315f6b726f\n"
".quad 0x5d363530325b3635,0x09636f6c2e090a3b,0x0a30093233310934,0x6967656257444c24\n"
".quad 0x656e35315a5f5f6e,0x746e695f6e6f7477,0x4c64496c61767265,0x4c45363335353669\n"
".quad 0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30,0x2e646c090a3a695f\n"
".quad 0x36752e6d61726170,0x2c31647225092034,0x616475635f5f5b20,0x5f5f31666d726170\n"
".quad 0x6f7477656e35315a,0x767265746e695f6e,0x3536694c64496c61,0x3231694c45363335\n"
".quad 0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574\n"
".quad 0x5458455f54497570,0x455f305458455f31,0x5d695f33534b5245,0x732e766f6d090a3b\n"
".quad 0x3264722509203436,0x0a3b31647225202c,0x617261702e646c09,0x2509203436752e6d\n"
".quad 0x5f5f5b202c336472,0x6d72617061647563,0x6e35315a5f5f3266,0x6e695f6e6f747765\n"
".quad 0x64496c6176726574,0x453633353536694c,0x764545383231694c,0x61626f6c67323152\n"
".quad 0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61,0x58455f315458455f\n"
".quad 0x534b5245455f3054,0x6d090a3b5d695f33,0x09203436732e766f,0x7225202c34647225\n"
".quad 0x2e646c090a3b3364,0x33752e6d61726170,0x202c317225092032,0x70616475635f5f5b\n"
".quad 0x5a5f5f33666d7261,0x6e6f7477656e3531,0x61767265746e695f,0x353536694c64496c\n"
".quad 0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f,0x746e693231496b63\n"
".quad 0x70675f6c61767265,0x315458455f544975,0x45455f305458455f,0x3b5d695f33534b52\n"
".quad 0x33732e766f6d090a,0x202c327225092032,0x6c2e090a3b317225,0x393331093409636f\n"
".quad 0x2e766f6d090a3009,0x3372250920323373,0x73090a3b312d202c,0x2e6c61636f6c2e74\n"
".quad 0x5f5f5b0920323373,0x635f5f5f61647563,0x61636f6c5f616475,0x37365f7261765f6c\n"
".quad 0x6e5f32335f303836,0x74736e6f635f6e6f,0x36315f6b726f775f,0x3430322b36353032\n"
".quad 0x3b337225202c5d38,0x3409636f6c2e090a,0x090a300932343109,0x09203436662e646c\n"
".quad 0x255b202c31646625,0x0a3b5d302b346472,0x203436662e646c09,0x5b202c3264662509\n"
".quad 0x3b5d382b34647225,0x6e722e747663090a,0x3233732e3436662e,0x202c336466250920\n"
".quad 0x656e090a3b327225,0x2509203436662e67,0x646625202c346466,0x2e766f6d090a3b33\n"
".quad 0x6466250920343666,0x6665336430202c35,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x383532352e31202f,0x6d090a35302d6538,0x09203436662e6c75,0x6625202c36646625\n"
".quad 0x35646625202c3464,0x662e766f6d090a3b,0x3764662509203436,0x303030636430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x646461090a322d20,0x662509203436662e\n"
".quad 0x36646625202c3864,0x0a3b37646625202c,0x6f6c2e6174766309,0x203436752e6c6163\n"
".quad 0x5f202c3564722509,0x5f5f5f616475635f,0x636f6c5f61647563,0x365f7261765f6c61\n"
".quad 0x5f32335f30383637,0x736e6f635f6e6f6e,0x315f6b726f775f74,0x240a3b3635303236\n"
".quad 0x36315f36315f744c,0x2f200a3a36323031,0x203e706f6f6c3c2f,0x646f6220706f6f4c\n"
".quad 0x3320656e696c2079,0x636f6c2e090a3233,0x3009323333093309,0x36662e766f6d090a\n"
".quad 0x2c39646625092034,0x090a3b3164662520,0x203436662e646461,0x202c303164662509\n"
".quad 0x6625202c39646625,0x766f6d090a3b3264,0x662509203436662e,0x336430202c313164\n"
".quad 0x3030303030306566,0x3b30303030303030,0x0a352e30202f2f09,0x3436662e6c756d09\n"
".quad 0x2c32316466250920,0x202c303164662520,0x090a3b3131646625,0x203436662e766f6d\n"
".quad 0x202c333164662509,0x3030306666626430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x722e646461090a31,0x2509203436662e6d,0x6625202c34316466,0x646625202c323164\n"
".quad 0x766f6d090a3b3331,0x662509203436662e,0x306430202c353164,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e65672e707465,0x2c31702509203436\n"
".quad 0x202c343164662520,0x090a3b3531646625,0x7262203170252140,0x315f744c24092061\n"
".quad 0x3833353136315f36,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x303136315f36315f,0x636f6c2e090a3632,0x3009333333093309,0x6d722e6c756d090a\n"
".quad 0x662509203436662e,0x646625202c363164,0x31646625202c3431,0x2e766f6d090a3b34\n"
".quad 0x6466250920343666,0x66626430202c3731,0x3030303030303066,0x093b303030303030\n"
".quad 0x61090a312d202f2f,0x36662e70722e6464,0x3831646625092034,0x2c3231646625202c\n"
".quad 0x0a3b373164662520,0x2e70722e6c756d09,0x6466250920343666,0x31646625202c3931\n"
".quad 0x3831646625202c38,0x752e617262090a3b,0x57444c240920696e,0x365a5f5f69646e65\n"
".quad 0x6449657261757173,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x3b35335f3439315f,0x5f36315f744c240a,0x0a3a383335313631,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a\n"
".quad 0x090a300934333309,0x203436662e766f6d,0x202c303264662509,0x3030306666626430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x722e646461090a31,0x2509203436662e70\n"
".quad 0x6625202c38316466,0x646625202c323164,0x766f6d090a3b3032,0x662509203436662e\n"
".quad 0x306430202c313264,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x662e656c2e707465,0x2c32702509203436,0x202c383164662520,0x090a3b3132646625\n"
".quad 0x7262203270252140,0x315f744c24092061,0x3439373136315f36,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x303136315f36315f,0x636f6c2e090a3632\n"
".quad 0x3009353333093309,0x6d722e6c756d090a,0x662509203436662e,0x646625202c363164\n"
".quad 0x31646625202c3831,0x2e6c756d090a3b38,0x09203436662e7072,0x25202c3931646625\n"
".quad 0x6625202c34316466,0x7262090a3b343164,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f3439315f5f3253,0x5f744c240a3b3533,0x39373136315f3631,0x6c3c2f2f200a3a34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230\n"
".quad 0x0937333309330963,0x722e6c756d090a30,0x2509203436662e70,0x6625202c32326466\n"
".quad 0x646625202c343164,0x6c756d090a3b3431,0x203436662e70722e,0x202c333264662509\n"
".quad 0x25202c3831646625,0x6d090a3b38316466,0x09203436662e7861,0x25202c3931646625\n"
".quad 0x6625202c32326466,0x6f6d090a3b333264,0x2509203436662e76,0x6430202c36316466\n"
".quad 0x3030303030303030,0x3030303030303030,0x240a30202f2f093b,0x5f69646e6557444c\n"
".quad 0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f3439315f5f3253,0x3c2f2f200a3a3533,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x36315f36315f744c,0x6c2e090a36323031,0x313033093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x30346430202c3432,0x3030303030303030,0x093b303030303030\n"
".quad 0x756d090a32202f2f,0x3436662e70722e6c,0x2c35326466250920,0x202c343264662520\n"
".quad 0x6d090a3b39646625,0x09203436662e766f,0x30202c3632646625,0x3030303030303464\n"
".quad 0x3030303030303030,0x0a32202f2f093b30,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x32646625202c3732,0x3b32646625202c36,0x36662e766f6d090a,0x3832646625092034\n"
".quad 0x303030346430202c,0x3030303030303030,0x2f2f093b30303030,0x2e6c756d090a3220\n"
".quad 0x09203436662e6d72,0x25202c3932646625,0x6625202c38326466,0x766f6d090a3b3964\n"
".quad 0x662509203436662e,0x346430202c303364,0x3030303030303030,0x3b30303030303030\n"
".quad 0x6d090a32202f2f09,0x36662e6d722e6c75,0x3133646625092034,0x2c3033646625202c\n"
".quad 0x090a3b3264662520,0x203436662e78616d,0x202c323364662509,0x25202c3532646625\n"
".quad 0x61090a3b37326466,0x36662e70722e6464,0x3333646625092034,0x2c3233646625202c\n"
".quad 0x090a3b3864662520,0x203436662e6e696d,0x202c343364662509,0x25202c3932646625\n"
".quad 0x61090a3b31336466,0x36662e6d722e6464,0x3533646625092034,0x2c3433646625202c\n"
".quad 0x090a3b3864662520,0x203436662e766f6d,0x202c363364662509,0x3030303030306430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x65672e746573090a,0x3436662e3233752e\n"
".quad 0x25202c3472250920,0x6625202c33336466,0x656e090a3b363364,0x2509203233732e67\n"
".quad 0x3b347225202c3572,0x36662e766f6d090a,0x3733646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x2e746573090a3020,0x662e3233752e656c\n"
".quad 0x2c36722509203436,0x202c353364662520,0x090a3b3733646625,0x203233732e67656e\n"
".quad 0x7225202c37722509,0x2e646e61090a3b36,0x3872250920323362,0x25202c357225202c\n"
".quad 0x766f6d090a3b3772,0x722509203233752e,0x73090a3b30202c39,0x732e71652e707465\n"
".quad 0x2c33702509203233,0x7225202c38722520,0x33702540090a3b39,0x4c24092061726220\n"
".quad 0x3337315f36315f74,0x2f2f200a3b363238,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x2e090a3632303136,0x3033093309636f6c,0x766f6d090a300932\n"
".quad 0x662509203436662e,0x306430202c383364,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x662e656e2e707465,0x2c34702509203436,0x202c333364662520\n"
".quad 0x090a3b3833646625,0x203436662e766f6d,0x202c393364662509,0x3030303030306430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x6e2e70746573090a,0x09203436662e7565\n"
".quad 0x646625202c357025,0x33646625202c3533,0x70252140090a3b39,0x2409206172622035\n"
".quad 0x37315f36315f744c,0x2f200a3b32383034,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x33093309636f6c2e,0x2140090a30093330\n"
".quad 0x2061726220347025,0x5f36315f744c2409,0x0a3b383333343731,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a\n"
".quad 0x090a300934303309,0x662e6d722e6c756d,0x3464662509203436,0x2c36646625202c30\n"
".quad 0x0a3b323164662520,0x2e70722e6c756d09,0x6466250920343666,0x36646625202c3134\n"
".quad 0x3b3231646625202c,0x6d722e646461090a,0x662509203436662e,0x646625202c323464\n"
".quad 0x34646625202c3631,0x2e646461090a3b30,0x09203436662e7072,0x25202c3334646625\n"
".quad 0x6625202c39316466,0x6f6d090a3b313464,0x2509203436662e76,0x6430202c34346466\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573\n"
".quad 0x09203436662e3233,0x6625202c30317225,0x646625202c333464,0x67656e090a3b3434\n"
".quad 0x722509203233732e,0x30317225202c3131,0x662e766f6d090a3b,0x3464662509203436\n"
".quad 0x3030306430202c35,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x2e3233752e71652e,0x3172250920343666,0x3234646625202c32,0x3b3534646625202c\n"
".quad 0x33732e67656e090a,0x2c33317225092032,0x090a3b3231722520,0x203233622e646e61\n"
".quad 0x25202c3431722509,0x317225202c313172,0x2e766f6d090a3b33,0x3172250920323375\n"
".quad 0x73090a3b30202c35,0x732e71652e707465,0x2c36702509203233,0x25202c3431722520\n"
".quad 0x2540090a3b353172,0x0920617262203670,0x325f36315f744c24,0x200a3b3238383035\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x36315f744c242064,0x0a3632303136315f\n"
".quad 0x093309636f6c2e09,0x6d090a3009323632,0x09203436662e766f,0x25202c3634646625\n"
".quad 0x6d090a3b32346466,0x09203436662e766f,0x25202c3734646625,0x6d090a3b33346466\n"
".quad 0x09203233732e766f,0x3b30202c36317225,0x6e752e617262090a,0x6557444c24092069\n"
".quad 0x34315a5f5f69646e,0x6f72657a5f766964,0x644931747261705f,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x39315f62525f3453,0x4c240a3b32335f34\n"
".quad 0x3035325f36315f74,0x2f2f200a3a323838,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x2e090a3632303136,0x3732093309636f6c,0x766f6d090a300930\n"
".quad 0x662509203436662e,0x306430202c383464,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x662e746c2e707465,0x2c37702509203436,0x202c333464662520\n"
".quad 0x090a3b3834646625,0x7262203770252140,0x315f744c24092061,0x3035383437315f36\n"
".quad 0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x303136315f36315f\n"
".quad 0x636f6c2e090a3632,0x3009323732093309,0x70722e766964090a,0x662509203436662e\n"
".quad 0x646625202c373464,0x33646625202c3334,0x2e766f6d090a3b33,0x6466250920343666\n"
".quad 0x66666430202c3634,0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f\n"
".quad 0x3233732e766f6d09,0x202c363172250920,0x2e617262090a3b31,0x444c240920696e75\n"
".quad 0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32,0x0a3b32335f343931\n"
".quad 0x315f36315f744c24,0x200a3a3035383437,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x36315f744c242064,0x0a3632303136315f,0x093309636f6c2e09,0x6d090a3009333732\n"
".quad 0x09203436662e766f,0x30202c3934646625,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e,0x3234646625202c38\n"
".quad 0x3b3934646625202c,0x203870252140090a,0x744c240920617262,0x313537315f36315f\n"
".quad 0x3c2f2f200a3b3630,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c\n"
".quad 0x6f6d090a36323031,0x2509203436662e76,0x6430202c37346466,0x3030303030666637\n"
".quad 0x3030303030303030,0x666e69202f2f093b,0x36662e766f6d090a,0x3634646625092034\n"
".quad 0x306666666430202c,0x3030303030303030,0x2f2f093b30303030,0x6d090a666e692d20\n"
".quad 0x09203233732e766f,0x3b30202c36317225,0x6e752e617262090a,0x6557444c24092069\n"
".quad 0x34315a5f5f69646e,0x6f72657a5f766964,0x644931747261705f,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x39315f62525f3453,0x4c240a3b32335f34\n"
".quad 0x3537315f36315f74,0x2f2f200a3a363031,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x2e090a3632303136,0x3732093309636f6c,0x766964090a300938\n"
".quad 0x203436662e70722e,0x202c373464662509,0x25202c3234646625,0x6d090a3b35336466\n"
".quad 0x09203436662e766f,0x30202c3634646625,0x3030303066666664,0x3030303030303030\n"
".quad 0x692d202f2f093b30,0x2e766f6d090a666e,0x3172250920323373,0x4c240a3b31202c36\n"
".quad 0x5f5f69646e655744,0x7a5f76696434315a,0x747261705f6f7265,0x6e69323145644931\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253,0x3a32335f3439315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631\n"
".quad 0x09636f6c2e090a36,0x0a30093430330933,0x3436662e766f6d09,0x2c30356466250920\n"
".quad 0x0a3b363464662520,0x3436662e766f6d09,0x2c31356466250920,0x0a3b373464662520\n"
".quad 0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964,0x616e5f6c616e7265\n"
".quad 0x6c656e72656b5f6e,0x3b37325f3439315f,0x5f36315f744c240a,0x0a3a383333343731\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36\n"
".quad 0x3309636f6c2e090a,0x090a300936303309,0x662e6d722e6c756d,0x3464662509203436\n"
".quad 0x2c36646625202c30,0x0a3b323164662520,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x36646625202c3134,0x3b3231646625202c,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x646625202c323464,0x34646625202c3631,0x2e646461090a3b30,0x09203436662e7072\n"
".quad 0x25202c3334646625,0x6625202c39316466,0x6f6d090a3b313464,0x2509203436662e76\n"
".quad 0x6430202c32356466,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x752e71652e746573,0x09203436662e3233,0x6625202c37317225,0x646625202c333464\n"
".quad 0x67656e090a3b3235,0x722509203233732e,0x37317225202c3831,0x662e766f6d090a3b\n"
".quad 0x3564662509203436,0x3030306430202c33,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x746573090a30202f,0x2e3233752e71652e,0x3172250920343666,0x3234646625202c39\n"
".quad 0x3b3335646625202c,0x33732e67656e090a,0x2c30327225092032,0x090a3b3931722520\n"
".quad 0x203233622e646e61,0x25202c3132722509,0x327225202c383172,0x2e766f6d090a3b30\n"
".quad 0x3272250920323375,0x73090a3b30202c32,0x732e71652e707465,0x2c39702509203233\n"
".quad 0x25202c3132722520,0x2540090a3b323272,0x0920617262203970,0x325f36315f744c24\n"
".quad 0x200a3b3439333135,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x36315f744c242064\n"
".quad 0x0a3632303136315f,0x093309636f6c2e09,0x6d090a3009343432,0x09203436662e766f\n"
".quad 0x25202c3435646625,0x6d090a3b32346466,0x09203436662e766f,0x25202c3535646625\n"
".quad 0x62090a3b33346466,0x0920696e752e6172,0x69646e6557444c24,0x76696432315a5f5f\n"
".quad 0x7669746167656e5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f31534b525f3253,0x3b30335f3439315f,0x5f36315f744c240a,0x0a3a343933313532\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36\n"
".quad 0x3309636f6c2e090a,0x090a300939343209,0x203436662e766f6d,0x202c363564662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a\n"
".quad 0x2509203436662e74,0x646625202c303170,0x35646625202c3334,0x70252140090a3b36\n"
".quad 0x0920617262203031,0x315f36315f744c24,0x200a3b3831363537,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x36315f744c242064,0x0a3632303136315f,0x093309636f6c2e09\n"
".quad 0x64090a3009303532,0x36662e6d722e7669,0x3435646625092034,0x2c3334646625202c\n"
".quad 0x0a3b353364662520,0x3436662e766f6d09,0x2c35356466250920,0x3030666637643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x617262090a666e69,0x4c240920696e752e\n"
".quad 0x5f5f69646e655744,0x6e5f76696432315a,0x4965766974616765,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f,0x240a3b30335f3439\n"
".quad 0x37315f36315f744c,0x2f200a3a38313635,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x32093309636f6c2e,0x6f6d090a30093135\n"
".quad 0x2509203436662e76,0x6430202c37356466,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x2e746c2e70746573,0x3170250920343666,0x3234646625202c31\n"
".quad 0x3b3735646625202c,0x313170252140090a,0x4c24092061726220,0x3537315f36315f74\n"
".quad 0x2f2f200a3b343738,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c,0x315f36315f744c24\n"
".quad 0x6d090a3632303136,0x09203436662e766f,0x30202c3535646625,0x3030303066663764\n"
".quad 0x3030303030303030,0x6e69202f2f093b30,0x662e766f6d090a66,0x3564662509203436\n"
".quad 0x6666666430202c34,0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x696432315a5f5f69,0x69746167656e5f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x30335f3439315f5f,0x36315f744c240a3b,0x3a3437383537315f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36\n"
".quad 0x0a30093435320933,0x2e70722e76696409,0x6466250920343666,0x34646625202c3535\n"
".quad 0x3533646625202c32,0x662e766f6d090a3b,0x3564662509203436,0x6666666430202c34\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x240a666e692d202f,0x5f69646e6557444c\n"
".quad 0x5f76696432315a5f,0x657669746167656e,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x5f5f31534b525f32,0x0a3a30335f343931,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a\n"
".quad 0x090a300936303309,0x203436662e766f6d,0x202c303564662509,0x090a3b3435646625\n"
".quad 0x203436662e766f6d,0x202c313564662509,0x090a3b3535646625,0x203233732e766f6d\n"
".quad 0x30202c3631722509,0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65\n"
".quad 0x5f6c616e7265746e,0x6e72656b5f6e616e,0x325f3439315f6c65,0x315f744c240a3b37\n"
".quad 0x3238303437315f36,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x303136315f36315f,0x636f6c2e090a3632,0x3009383033093309,0x203470252140090a\n"
".quad 0x744c240920617262,0x313637315f36315f,0x3c2f2f200a3b3033,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031,0x393033093309636f\n"
".quad 0x2e6c756d090a3009,0x09203436662e6d72,0x25202c3034646625,0x646625202c366466\n"
".quad 0x6c756d090a3b3231,0x203436662e70722e,0x202c313464662509,0x6625202c36646625\n"
".quad 0x6461090a3b323164,0x3436662e6d722e64,0x2c32346466250920,0x202c363164662520\n"
".quad 0x090a3b3034646625,0x662e70722e646461,0x3464662509203436,0x3931646625202c33\n"
".quad 0x3b3134646625202c,0x36662e766f6d090a,0x3835646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x2e746573090a3020,0x662e3233752e7165\n"
".quad 0x3332722509203436,0x2c3334646625202c,0x0a3b383564662520,0x3233732e67656e09\n"
".quad 0x202c343272250920,0x6d090a3b33327225,0x09203436662e766f,0x30202c3935646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x2e71652e74657309\n"
".quad 0x203436662e323375,0x25202c3532722509,0x6625202c32346466,0x656e090a3b393564\n"
".quad 0x2509203233732e67,0x327225202c363272,0x2e646e61090a3b35,0x3272250920323362\n"
".quad 0x2c34327225202c37,0x090a3b3632722520,0x203233752e766f6d,0x30202c3832722509\n"
".quad 0x2e70746573090a3b,0x09203233732e7165,0x7225202c32317025,0x38327225202c3732\n"
".quad 0x3231702540090a3b,0x4c24092061726220,0x3135325f36315f74,0x2f2f200a3b363039\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x315f36315f744c24,0x2e090a3632303136\n"
".quad 0x3232093309636f6c,0x766f6d090a300936,0x662509203436662e,0x646625202c303664\n"
".quad 0x766f6d090a3b3234,0x662509203436662e,0x646625202c313664,0x617262090a3b3334\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x705f76696432315a,0x496576697469736f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f\n"
".quad 0x240a3b38325f3439,0x35325f36315f744c,0x2f200a3a36303931,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631,0x32093309636f6c2e\n"
".quad 0x6f6d090a30093133,0x2509203436662e76,0x6430202c32366466,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x2e746c2e70746573,0x3170250920343666\n"
".quad 0x3334646625202c33,0x3b3236646625202c,0x333170252140090a,0x4c24092061726220\n"
".quad 0x3637315f36315f74,0x2f2f200a3b323436,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x2e090a3632303136,0x3332093309636f6c,0x766964090a300932\n"
".quad 0x203436662e70722e,0x202c313664662509,0x25202c3334646625,0x6d090a3b33336466\n"
".quad 0x09203436662e766f,0x30202c3036646625,0x3030303066666664,0x3030303030303030\n"
".quad 0x692d202f2f093b30,0x2e617262090a666e,0x444c240920696e75,0x5a5f5f69646e6557\n"
".quad 0x6f705f7669643231,0x6449657669746973,0x7265746e69323145,0x497570675f6c6176\n"
".quad 0x5f32534b52455f54,0x39315f5f31534b52,0x4c240a3b38325f34,0x3637315f36315f74\n"
".quad 0x2f2f200a3a323436,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c,0x315f36315f744c24\n"
".quad 0x2e090a3632303136,0x3332093309636f6c,0x766f6d090a300933,0x662509203436662e\n"
".quad 0x306430202c333664,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x662e746c2e707465,0x3431702509203436,0x2c3234646625202c,0x0a3b333664662520\n"
".quad 0x2034317025214009,0x744c240920617262,0x383637315f36315f,0x3c2f2f200a3b3839\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c,0x6f6d090a36323031\n"
".quad 0x2509203436662e76,0x6430202c31366466,0x3030303030666637,0x3030303030303030\n"
".quad 0x666e69202f2f093b,0x36662e766f6d090a,0x3036646625092034,0x306666666430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x62090a666e692d20,0x0920696e752e6172\n"
".quad 0x69646e6557444c24,0x76696432315a5f5f,0x76697469736f705f,0x6e69323145644965\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x5f31534b525f3253,0x3b38325f3439315f\n"
".quad 0x5f36315f744c240a,0x0a3a383938363731,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a,0x090a300936333209\n"
".quad 0x662e6d722e766964,0x3664662509203436,0x3234646625202c30,0x3b3333646625202c\n"
".quad 0x36662e766f6d090a,0x3136646625092034,0x306666376430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x444c240a666e6920,0x5a5f5f69646e6557,0x6f705f7669643231\n"
".quad 0x6449657669746973,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x39315f5f31534b52,0x2f200a3a38325f34,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x33093309636f6c2e,0x6f6d090a30093930\n"
".quad 0x2509203436662e76,0x6625202c30356466,0x6f6d090a3b303664,0x2509203436662e76\n"
".quad 0x6625202c31356466,0x6f6d090a3b313664,0x2509203233732e76,0x0a3b30202c363172\n"
".quad 0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964,0x616e5f6c616e7265\n"
".quad 0x6c656e72656b5f6e,0x3b37325f3439315f,0x5f36315f744c240a,0x0a3a303331363731\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36\n"
".quad 0x3309636f6c2e090a,0x090a300931313309,0x203436662e766f6d,0x202c313564662509\n"
".quad 0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030,0x2e766f6d090a6e61\n"
".quad 0x6466250920343666,0x66376430202c3035,0x3030303030303866,0x093b303030303030\n"
".quad 0x090a6e616e202f2f,0x203233732e766f6d,0x30202c3631722509,0x752e617262090a3b\n"
".quad 0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e,0x6e72656b5f6e616e\n"
".quad 0x325f3439315f6c65,0x315f744c240a3b37,0x3632383337315f36,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x303136315f36315f,0x636f6c2e090a3632\n"
".quad 0x3009333133093309,0x36662e766f6d090a,0x3436646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e\n"
".quad 0x25202c3531702509,0x6625202c33336466,0x2140090a3b343664,0x6172622035317025\n"
".quad 0x36315f744c240920,0x3b3037373635325f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36,0x0a30093239310933\n"
".quad 0x2e70722e6c756d09,0x6466250920343666,0x36646625202c3134,0x3b3231646625202c\n"
".quad 0x70722e646461090a,0x662509203436662e,0x646625202c333464,0x34646625202c3931\n"
".quad 0x2e766f6d090a3b31,0x6466250920343666,0x34646625202c3536,0x636f6c2e090a3b33\n"
".quad 0x3009333931093309,0x6d722e6c756d090a,0x662509203436662e,0x646625202c303464\n"
".quad 0x3231646625202c36,0x722e646461090a3b,0x2509203436662e6d,0x6625202c32346466\n"
".quad 0x646625202c363164,0x766f6d090a3b3034,0x662509203436662e,0x646625202c363664\n"
".quad 0x617262090a3b3234,0x4c240920696e752e,0x3635325f36315f74,0x744c240a3b343135\n"
".quad 0x373635325f36315f,0x3c2f2f200a3a3037,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x36315f36315f744c,0x6c2e090a36323031,0x363931093309636f,0x2e6c756d090a3009\n"
".quad 0x09203436662e6d72,0x25202c3034646625,0x646625202c366466,0x646461090a3b3231\n"
".quad 0x203436662e6d722e,0x202c323464662509,0x25202c3631646625,0x6d090a3b30346466\n"
".quad 0x09203436662e766f,0x25202c3536646625,0x2e090a3b32346466,0x3931093309636f6c\n"
".quad 0x6c756d090a300937,0x203436662e70722e,0x202c313464662509,0x6625202c36646625\n"
".quad 0x6461090a3b323164,0x3436662e70722e64,0x2c33346466250920,0x202c393164662520\n"
".quad 0x090a3b3134646625,0x203436662e766f6d,0x202c363664662509,0x240a3b3334646625\n"
".quad 0x35325f36315f744c,0x2f200a3a34313536,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x203436662e766f6d,0x202c373664662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a\n"
".quad 0x2509203436662e74,0x646625202c363170,0x36646625202c3334,0x70252140090a3b37\n"
".quad 0x0920617262203631,0x325f36315f744c24,0x200a3b3238323735,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x36315f744c242064,0x0a3632303136315f,0x093309636f6c2e09\n"
".quad 0x6d090a3009313032,0x09203436662e766f,0x25202c3836646625,0x2e090a3b35336466\n"
".quad 0x3032093309636f6c,0x766f6d090a300932,0x662509203436662e,0x646625202c393664\n"
".quad 0x617262090a3b3333,0x4c240920696e752e,0x3735325f36315f74,0x744c240a3b383335\n"
".quad 0x323735325f36315f,0x3c2f2f200a3a3238,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x36315f36315f744c,0x6f6d090a36323031,0x2509203436662e76,0x6430202c30376466\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x2e746c2e70746573\n"
".quad 0x3170250920343666,0x3234646625202c37,0x3b3037646625202c,0x373170252140090a\n"
".quad 0x4c24092061726220,0x3735325f36315f74,0x2f2f200a3b343937,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x315f36315f744c24,0x40090a3632303136,0x7262203531702521\n"
".quad 0x315f744c24092061,0x3630333835325f36,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x636f6c2e090a3632,0x3009363032093309\n"
".quad 0x36662e766f6d090a,0x3836646625092034,0x3b3333646625202c,0x3309636f6c2e090a\n"
".quad 0x090a300937303209,0x203436662e766f6d,0x202c393664662509,0x090a3b3333646625\n"
".quad 0x20696e752e617262,0x5f36315f744c2409,0x0a3b383335373532,0x325f36315f744c24\n"
".quad 0x200a3a3630333835,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x36315f744c242064\n"
".quad 0x0a3632303136315f,0x093309636f6c2e09,0x6d090a3009303132,0x09203436662e766f\n"
".quad 0x25202c3836646625,0x2e090a3b35336466,0x3132093309636f6c,0x766f6d090a300931\n"
".quad 0x662509203436662e,0x646625202c393664,0x617262090a3b3533,0x4c240920696e752e\n"
".quad 0x3735325f36315f74,0x744c240a3b383335,0x373735325f36315f,0x3c2f2f200a3a3439\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031\n"
".quad 0x353132093309636f,0x2e766f6d090a3009,0x6466250920343666,0x33646625202c3836\n"
".quad 0x636f6c2e090a3b33,0x3009363132093309,0x36662e766f6d090a,0x3936646625092034\n"
".quad 0x3b3533646625202c,0x5f36315f744c240a,0x0a3a383335373532,0x325f36315f744c24\n"
".quad 0x200a3a3632303735,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x36315f744c242064\n"
".quad 0x0a3632303136315f,0x093309636f6c2e09,0x64090a3009333133,0x36662e6d722e7669\n"
".quad 0x3035646625092034,0x2c3536646625202c,0x0a3b383664662520,0x2e70722e76696409\n"
".quad 0x6466250920343666,0x36646625202c3135,0x3936646625202c36,0x732e766f6d090a3b\n"
".quad 0x3631722509203233,0x444c240a3b30202c,0x5f5f5f69646e6557,0x6c616e7265746e69\n"
".quad 0x72656b5f6e616e5f,0x5f3439315f6c656e,0x3c2f2f200a3a3732,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031,0x363731093309636f\n"
".quad 0x2e67656e090a3009,0x6466250920343666,0x35646625202c3137,0x2e646461090a3b31\n"
".quad 0x09203436662e6d72,0x25202c3237646625,0x6625202c32316466,0x656e090a3b313764\n"
".quad 0x2509203436662e67,0x6625202c33376466,0x6461090a3b303564,0x3436662e70722e64\n"
".quad 0x2c34376466250920,0x202c323164662520,0x090a3b3337646625,0x203436662e78616d\n"
".quad 0x202c353764662509,0x25202c3237646625,0x696d090a3b396466,0x2509203436662e6e\n"
".quad 0x6625202c36376466,0x646625202c343764,0x70746573090a3b32,0x203436662e656c2e\n"
".quad 0x25202c3831702509,0x6625202c35376466,0x2140090a3b363764,0x6172622038317025\n"
".quad 0x36315f744c240920,0x3b3435393938315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36,0x0a30093737310933\n"
".quad 0x3436662e766f6d09,0x2c37376466250920,0x0a3b353764662520,0x3436662e766f6d09\n"
".quad 0x2c38376466250920,0x0a3b363764662520,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x746e695f5f5f6964,0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b35325f3439315f\n"
".quad 0x5f36315f744c240a,0x0a3a343539393831,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a,0x090a300939373109\n"
".quad 0x203436662e766f6d,0x202c383764662509,0x3030386666376430,0x3030303030303030\n"
".quad 0x6e202f2f093b3030,0x2e766f6d090a6e61,0x6466250920343666,0x66376430202c3737\n"
".quad 0x3030303030303866,0x093b303030303030,0x240a6e616e202f2f,0x5f69646e6557444c\n"
".quad 0x6e7265746e695f5f,0x6b5f6e616e5f6c61,0x39315f6c656e7265,0x2f200a3a35325f34\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x31093409636f6c2e,0x6f6d090a30093435,0x2509203436662e76,0x6625202c39376466\n"
".quad 0x6f6d090a3b373764,0x2509203436662e76,0x6625202c30386466,0x6f6d090a3b393764\n"
".quad 0x2509203436662e76,0x6625202c31386466,0x6f6d090a3b383764,0x2509203436662e76\n"
".quad 0x6625202c32386466,0x6f6d090a3b313864,0x2509203233732e76,0x0a3b30202c393272\n"
".quad 0x656e2e7074657309,0x702509203233732e,0x36317225202c3931,0x0a3b39327225202c\n"
".quad 0x2039317025214009,0x744c240920617262,0x393236325f36315f,0x3c2f2f200a3b3431\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031\n"
".quad 0x313932093309636f,0x2e6c756d090a3009,0x09203436662e7072,0x25202c3134646625\n"
".quad 0x646625202c366466,0x646461090a3b3231,0x203436662e70722e,0x202c333464662509\n"
".quad 0x25202c3931646625,0x6d090a3b31346466,0x09203436662e766f,0x30202c3338646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x746c2e7074657309\n"
".quad 0x702509203436662e,0x34646625202c3032,0x3338646625202c33,0x3270252140090a3b\n"
".quad 0x2409206172622030,0x30325f36315f744c,0x2f200a3b32343232,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631,0x32093309636f6c2e\n"
".quad 0x6964090a30093239,0x3436662e6d722e76,0x2c34386466250920,0x202c333464662520\n"
".quad 0x090a3b3533646625,0x20696e752e617262,0x646e6557444c2409,0x696434315a5f5f69\n"
".quad 0x705f6f72657a5f76,0x3145644932747261,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x34535f32534b5245,0x33325f3439315f5f,0x36315f744c240a3b,0x3a3234323230325f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631\n"
".quad 0x09636f6c2e090a36,0x0a30093439320933,0x2e6d722e6c756d09,0x6466250920343666\n"
".quad 0x36646625202c3538,0x3b3231646625202c,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x646625202c363864,0x38646625202c3631,0x2e766964090a3b35,0x09203436662e6d72\n"
".quad 0x25202c3438646625,0x6625202c36386466,0x444c240a3b333364,0x5a5f5f69646e6557\n"
".quad 0x657a5f7669643431,0x32747261705f6f72,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x39315f5f34535f32,0x2f200a3a33325f34,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631,0x31093309636f6c2e\n"
".quad 0x6f6d090a30093637,0x2509203436662e76,0x6430202c37386466,0x3030303030666666\n"
".quad 0x3030303030303030,0x6e692d202f2f093b,0x722e646461090a66,0x2509203436662e6d\n"
".quad 0x6625202c38386466,0x646625202c323164,0x67656e090a3b3738,0x662509203436662e\n"
".quad 0x646625202c393864,0x646461090a3b3438,0x203436662e70722e,0x202c303964662509\n"
".quad 0x25202c3231646625,0x6d090a3b39386466,0x09203436662e7861,0x25202c3139646625\n"
".quad 0x6625202c38386466,0x6e696d090a3b3964,0x662509203436662e,0x646625202c323964\n"
".quad 0x32646625202c3039,0x2e70746573090a3b,0x09203436662e656c,0x6625202c31327025\n"
".quad 0x646625202c313964,0x252140090a3b3239,0x2061726220313270,0x5f36315f744c2409\n"
".quad 0x0a3b383934323032,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3632303136315f36,0x3309636f6c2e090a,0x090a300937373109,0x203436662e766f6d\n"
".quad 0x202c333964662509,0x090a3b3139646625,0x203436662e766f6d,0x202c343964662509\n"
".quad 0x090a3b3239646625,0x20696e752e617262,0x646e6557444c2409,0x65746e695f5f5f69\n"
".quad 0x6e616e5f6c616e72,0x5f6c656e72656b5f,0x0a3b31325f343931,0x325f36315f744c24\n"
".quad 0x200a3a3839343230,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x36315f744c242064\n"
".quad 0x0a3632303136315f,0x093309636f6c2e09,0x6d090a3009393731,0x09203436662e766f\n"
".quad 0x30202c3439646625,0x3030303866663764,0x3030303030303030,0x616e202f2f093b30\n"
".quad 0x662e766f6d090a6e,0x3964662509203436,0x6666376430202c33,0x3030303030303038\n"
".quad 0x2f093b3030303030,0x4c240a6e616e202f,0x5f5f69646e655744,0x616e7265746e695f\n"
".quad 0x656b5f6e616e5f6c,0x3439315f6c656e72,0x2f2f200a3a31325f,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x315f36315f744c24,0x2e090a3632303136,0x3531093409636f6c\n"
".quad 0x766f6d090a300937,0x662509203436662e,0x646625202c353964,0x766f6d090a3b3339\n"
".quad 0x662509203436662e,0x646625202c363964,0x617262090a3b3439,0x4c240920696e752e\n"
".quad 0x3236325f36315f74,0x744c240a3b383536,0x393236325f36315f,0x3c2f2f200a3a3431\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c,0x6f6d090a36323031\n"
".quad 0x2509203436662e76,0x6430202c36396466,0x3030303038666637,0x3030303030303030\n"
".quad 0x6e616e202f2f093b,0x36662e766f6d090a,0x3539646625092034,0x386666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x744c240a6e616e20,0x363236325f36315f\n"
".quad 0x3c2f2f200a3a3835,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c\n"
".quad 0x6c2e090a36323031,0x323631093409636f,0x2e646461090a3009,0x6466250920343666\n"
".quad 0x38646625202c3739,0x3937646625202c31,0x2e70746573090a3b,0x09203436662e7165\n"
".quad 0x6625202c32327025,0x646625202c373964,0x252140090a3b3739,0x2061726220323270\n"
".quad 0x5f36315f744c2409,0x0a3b303930313832,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x3409636f6c2e090a,0x090a300938303109\n"
".quad 0x75656e2e70746573,0x702509203436662e,0x39646625202c3332,0x3739646625202c37\n"
".quad 0x3270252140090a3b,0x2409206172622033,0x36325f36315f744c,0x2f200a3b36363237\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x38093309636f6c2e,0x766f6d090a300938,0x662509203436662e,0x306430202c383964\n"
".quad 0x3030303030303030,0x3b30303030303030,0x62090a30202f2f09,0x0920696e752e6172\n"
".quad 0x69646e6557444c24,0x74646977355a5f5f,0x32315f5445644968,0x6c61767265746e69\n"
".quad 0x5f3053497570675f,0x39315f3439315f45,0x36315f744c240a3b,0x3a3636323736325f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631\n"
".quad 0x09636f6c2e090a36,0x090a300930390933,0x203436662e67656e,0x202c393964662509\n"
".quad 0x090a3b3937646625,0x662e70722e646461,0x3964662509203436,0x3138646625202c38\n"
".quad 0x3b3939646625202c,0x646e6557444c240a,0x646977355a5f5f69,0x315f544564496874\n"
".quad 0x61767265746e6932,0x3053497570675f6c,0x315f3439315f455f,0x6c3c2f2f200a3a39\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230\n"
".quad 0x0938303109340963,0x662e766f6d090a30,0x3164662509203436,0x66336430202c3030\n"
".quad 0x3030303030303065,0x093b303030303030,0x090a352e30202f2f,0x203436662e6c756d\n"
".quad 0x2c31303164662509,0x202c373964662520,0x0a3b303031646625,0x3436662e73626109\n"
".quad 0x3230316466250920,0x313031646625202c,0x662e766f6d090a3b,0x3164662509203436\n"
".quad 0x65336430202c3330,0x3061376636633062,0x093b303030303030,0x36302d6531202f2f\n"
".quad 0x36662e6c756d090a,0x3031646625092034,0x3031646625202c34,0x3031646625202c32\n"
".quad 0x70746573090a3b33,0x203436662e656c2e,0x25202c3432702509,0x6625202c38396466\n"
".quad 0x40090a3b34303164,0x6172622034327025,0x36315f744c240920,0x3b3839363532315f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631\n"
".quad 0x09636f6c2e090a36,0x0a30093233330933,0x3436662e766f6d09,0x3530316466250920\n"
".quad 0x306666626430202c,0x3030303030303030,0x2f2f093b30303030,0x646461090a312d20\n"
".quad 0x203436662e6d722e,0x2c36303164662509,0x202c393764662520,0x0a3b353031646625\n"
".quad 0x3436662e766f6d09,0x3730316466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e65672e,0x25202c3532702509\n"
".quad 0x25202c3630316466,0x090a3b3730316466,0x6220353270252140,0x5f744c2409206172\n"
".quad 0x38373431325f3631,0x6c3c2f2f200a3b36,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3136315f36315f74,0x6f6c2e090a363230,0x0933333309330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e6d,0x25202c3830316466,0x25202c3630316466,0x090a3b3630316466\n"
".quad 0x203436662e766f6d,0x2c39303164662509,0x3030666662643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e646461090a312d,0x09203436662e7072,0x202c303131646625\n"
".quad 0x25202c3138646625,0x090a3b3930316466,0x662e70722e6c756d,0x3164662509203436\n"
".quad 0x31646625202c3131,0x31646625202c3031,0x617262090a3b3031,0x4c240920696e752e\n"
".quad 0x5f5f69646e655744,0x657261757173365a,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x315f3439315f5f32,0x315f744c240a3b35,0x3638373431325f36\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x303136315f36315f\n"
".quad 0x636f6c2e090a3632,0x3009343333093309,0x36662e766f6d090a,0x3131646625092034\n"
".quad 0x6666626430202c32,0x3030303030303030,0x2f093b3030303030,0x6461090a312d202f\n"
".quad 0x3436662e70722e64,0x3031316466250920,0x2c3138646625202c,0x3b32313164662520\n"
".quad 0x36662e766f6d090a,0x3131646625092034,0x3030306430202c33,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x746573090a30202f,0x3436662e656c2e70,0x202c363270250920\n"
".quad 0x202c303131646625,0x0a3b333131646625,0x2036327025214009,0x744c240920617262\n"
".quad 0x303531325f36315f,0x3c2f2f200a3b3234,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x36315f36315f744c,0x6c2e090a36323031,0x353333093309636f,0x2e6c756d090a3009\n"
".quad 0x09203436662e6d72,0x202c383031646625,0x202c303131646625,0x0a3b303131646625\n"
".quad 0x2e70722e6c756d09,0x6466250920343666,0x646625202c313131,0x646625202c363031\n"
".quad 0x7262090a3b363031,0x240920696e752e61,0x5f69646e6557444c,0x7261757173365a5f\n"
".quad 0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570,0x5f3439315f5f3253\n"
".quad 0x5f744c240a3b3531,0x34303531325f3631,0x6c3c2f2f200a3a32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230,0x0937333309330963\n"
".quad 0x722e6c756d090a30,0x2509203436662e70,0x25202c3431316466,0x25202c3630316466\n"
".quad 0x090a3b3630316466,0x662e70722e6c756d,0x3164662509203436,0x31646625202c3531\n"
".quad 0x31646625202c3031,0x78616d090a3b3031,0x662509203436662e,0x6625202c31313164\n"
".quad 0x6625202c34313164,0x6d090a3b35313164,0x09203436662e766f,0x202c383031646625\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x646e6557444c240a\n"
".quad 0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x39315f5f32534b52,0x2f200a3a35315f34,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x31093409636f6c2e,0x756d090a30093830\n"
".quad 0x3436662e6d722e6c,0x3631316466250920,0x202c36646625202c,0x090a3b3937646625\n"
".quad 0x662e6d722e6c756d,0x3164662509203436,0x36646625202c3731,0x3b3138646625202c\n"
".quad 0x70722e6c756d090a,0x662509203436662e,0x6625202c38313164,0x37646625202c3664\n"
".quad 0x2e6c756d090a3b39,0x09203436662e7072,0x202c393131646625,0x6625202c36646625\n"
".quad 0x696d090a3b313864,0x2509203436662e6e,0x25202c3032316466,0x25202c3631316466\n"
".quad 0x090a3b3731316466,0x662e6d722e646461,0x3164662509203436,0x31646625202c3132\n"
".quad 0x31646625202c3830,0x78616d090a3b3032,0x662509203436662e,0x6625202c32323164\n"
".quad 0x6625202c38313164,0x61090a3b39313164,0x36662e70722e6464,0x3231646625092034\n"
".quad 0x3131646625202c33,0x3231646625202c31,0x2e646461090a3b32,0x6466250920343666\n"
".quad 0x646625202c343231,0x646625202c313231,0x6573090a3b333231,0x662e75656e2e7074\n"
".quad 0x3732702509203436,0x343231646625202c,0x343231646625202c,0x3270252140090a3b\n"
".quad 0x2409206172622037,0x36325f36315f744c,0x2f200a3b38373737,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631,0x38093309636f6c2e\n"
".quad 0x766f6d090a300938,0x662509203436662e,0x6430202c35323164,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x646977355a5f5f69,0x315f544564496874,0x61767265746e6932,0x3053497570675f6c\n"
".quad 0x315f3439315f455f,0x315f744c240a3b37,0x3837373736325f36,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x303136315f36315f,0x636f6c2e090a3632\n"
".quad 0x0a30093039093309,0x3436662e67656e09,0x3632316466250920,0x313231646625202c\n"
".quad 0x722e646461090a3b,0x2509203436662e70,0x25202c3532316466,0x25202c3332316466\n"
".quad 0x240a3b3632316466,0x5f69646e6557444c,0x6874646977355a5f,0x6932315f54456449\n"
".quad 0x5f6c61767265746e,0x455f305349757067,0x3a37315f3439315f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36\n"
".quad 0x0a30093830310934,0x3436662e766f6d09,0x3732316466250920,0x306265336430202c\n"
".quad 0x3030306137663663,0x2f2f093b30303030,0x090a36302d653120,0x2e656c2e70746573\n"
".quad 0x3270250920343666,0x3231646625202c38,0x3231646625202c35,0x70252140090a3b37\n"
".quad 0x0920617262203832,0x325f36315f744c24,0x240a3b3039303138,0x32315f36315f744c\n"
".quad 0x2f200a3a38393635,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420\n"
".quad 0x090a363230313631,0x203233732e766f6d,0x31202c3033722509,0x752e617262090a3b\n"
".quad 0x5f744c240920696e,0x37373832315f3631,0x315f744c240a3b30,0x3039303138325f36\n"
".quad 0x36315f744c240a3a,0x3a3435393532315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x32303136315f3631,0x732e766f6d090a36,0x3033722509203233\n"
".quad 0x744c240a3b30202c,0x373832315f36315f,0x3c2f2f200a3a3037,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031,0x323631093409636f\n"
".quad 0x2e766f6d090a3009,0x3372250920323375,0x73090a3b30202c31,0x732e71652e707465\n"
".quad 0x3932702509203233,0x202c30337225202c,0x40090a3b31337225,0x6172622039327025\n"
".quad 0x36315f744c240920,0x3b3039323836325f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36,0x0a30093336310934\n"
".quad 0x203436752e646c09,0x5b202c3664722509,0x3b5d302b32647225,0x3233732e646c090a\n"
".quad 0x202c323372250920,0x5d382b326472255b,0x732e747663090a3b,0x09203233732e3436\n"
".quad 0x7225202c37647225,0x6c756d090a3b3233,0x33732e656469772e,0x2c38647225092032\n"
".quad 0x31202c3233722520,0x2e646461090a3b36,0x6472250920343675,0x2c36647225202c39\n"
".quad 0x090a3b3864722520,0x09203436662e7473,0x5d302b396472255b,0x3b3937646625202c\n"
".quad 0x3436752e646c090a,0x2c30316472250920,0x302b326472255b20,0x732e646c090a3b5d\n"
".quad 0x3333722509203233,0x2b326472255b202c,0x747663090a3b5d38,0x3233732e3436732e\n"
".quad 0x2c31316472250920,0x090a3b3333722520,0x656469772e6c756d,0x722509203233732e\n"
".quad 0x337225202c323164,0x090a3b3631202c33,0x203436752e646461,0x202c333164722509\n"
".quad 0x25202c3031647225,0x73090a3b32316472,0x5b09203436662e74,0x5d382b3331647225\n"
".quad 0x3b3138646625202c,0x3233732e646c090a,0x202c343372250920,0x5d382b326472255b\n"
".quad 0x732e646461090a3b,0x3533722509203233,0x202c34337225202c,0x090a3b3633353536\n"
".quad 0x09203233732e7473,0x5d382b326472255b,0x0a3b35337225202c,0x093409636f6c2e09\n"
".quad 0x6d090a3009343631,0x09203436662e766f,0x30202c3238646625,0x3030303866663764\n"
".quad 0x3030303030303030,0x616e202f2f093b30,0x662e766f6d090a6e,0x3864662509203436\n"
".quad 0x6666376430202c30,0x3030303030303038,0x2f093b3030303030,0x4c240a6e616e202f\n"
".quad 0x3836325f36315f74,0x2f2f200a3a303932,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x2e090a3632303136,0x3631093409636f6c,0x252140090a300937\n"
".quad 0x2061726220393170,0x5f36315f744c2409,0x0a3b383538313832,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36,0x36662e646461090a\n"
".quad 0x3231646625092034,0x3639646625202c38,0x3b3539646625202c,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x646625202c303370,0x646625202c383231,0x2140090a3b383231\n"
".quad 0x6172622030337025,0x36315f744c240920,0x3b3431313238325f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x32303136315f3631,0x09636f6c2e090a36\n"
".quad 0x0a30093830310934,0x3436662e67656e09,0x3932316466250920,0x3b3539646625202c\n"
".quad 0x70722e646461090a,0x662509203436662e,0x6625202c30333164,0x646625202c363964\n"
".quad 0x6f6d090a3b393231,0x2509203436662e76,0x30202c3133316466,0x3030303065663364\n"
".quad 0x3030303030303030,0x2e30202f2f093b30,0x662e6c756d090a35,0x3164662509203436\n"
".quad 0x31646625202c3233,0x31646625202c3832,0x736261090a3b3133,0x662509203436662e\n"
".quad 0x6625202c33333164,0x6d090a3b32333164,0x09203436662e766f,0x202c343331646625\n"
".quad 0x3663306265336430,0x3030303030613766,0x31202f2f093b3030,0x756d090a36302d65\n"
".quad 0x2509203436662e6c,0x25202c3533316466,0x25202c3333316466,0x090a3b3433316466\n"
".quad 0x2e656c2e70746573,0x3370250920343666,0x3331646625202c31,0x3331646625202c30\n"
".quad 0x33702540090a3b35,0x2409206172622031,0x35315f36315f744c,0x2f200a3b34373230\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093233,0x2509203436662e76,0x30202c3633316466\n"
".quad 0x3030303066666264,0x3030303030303030,0x312d202f2f093b30,0x6d722e646461090a\n"
".quad 0x662509203436662e,0x6625202c37333164,0x646625202c353964,0x6f6d090a3b363331\n"
".quad 0x2509203436662e76,0x30202c3833316466,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x65672e7074657309,0x702509203436662e,0x31646625202c3233\n"
".quad 0x31646625202c3733,0x252140090a3b3833,0x2061726220323370,0x5f36315f744c2409\n"
".quad 0x0a3b323438373232,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3632303136315f36,0x3309636f6c2e090a,0x090a300933333309,0x662e6d722e6c756d\n"
".quad 0x3164662509203436,0x31646625202c3830,0x31646625202c3733,0x766f6d090a3b3733\n"
".quad 0x662509203436662e,0x6430202c39333164,0x3030303030666662,0x3030303030303030\n"
".quad 0x0a312d202f2f093b,0x2e70722e64646109,0x6466250920343666,0x646625202c303431\n"
".quad 0x31646625202c3639,0x6c756d090a3b3933,0x203436662e70722e,0x2c31313164662509\n"
".quad 0x2c30343164662520,0x3b30343164662520,0x6e752e617262090a,0x6557444c24092069\n"
".quad 0x73365a5f5f69646e,0x4564496572617571,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x5f5f32534b52455f,0x240a3b395f343931,0x32325f36315f744c,0x2f200a3a32343837\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093433,0x2509203436662e76,0x30202c3134316466\n"
".quad 0x3030303066666264,0x3030303030303030,0x312d202f2f093b30,0x70722e646461090a\n"
".quad 0x662509203436662e,0x6625202c30343164,0x646625202c363964,0x6f6d090a3b313431\n"
".quad 0x2509203436662e76,0x30202c3234316466,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x656c2e7074657309,0x702509203436662e,0x31646625202c3333\n"
".quad 0x31646625202c3034,0x252140090a3b3234,0x2061726220333370,0x5f36315f744c2409\n"
".quad 0x0a3b383930383232,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3632303136315f36,0x3309636f6c2e090a,0x090a300935333309,0x662e6d722e6c756d\n"
".quad 0x3164662509203436,0x31646625202c3830,0x31646625202c3034,0x6c756d090a3b3034\n"
".quad 0x203436662e70722e,0x2c31313164662509,0x2c37333164662520,0x3b37333164662520\n"
".quad 0x6e752e617262090a,0x6557444c24092069,0x73365a5f5f69646e,0x4564496572617571\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x5f5f32534b52455f,0x240a3b395f343931\n"
".quad 0x32325f36315f744c,0x2f200a3a38393038,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x33093309636f6c2e,0x756d090a30093733\n"
".quad 0x3436662e70722e6c,0x3334316466250920,0x373331646625202c,0x373331646625202c\n"
".quad 0x722e6c756d090a3b,0x2509203436662e70,0x25202c3434316466,0x25202c3034316466\n"
".quad 0x090a3b3034316466,0x203436662e78616d,0x2c31313164662509,0x2c33343164662520\n"
".quad 0x3b34343164662520,0x36662e766f6d090a,0x3031646625092034,0x3030306430202c38\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x57444c240a30202f,0x365a5f5f69646e65\n"
".quad 0x6449657261757173,0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54\n"
".quad 0x0a3a395f3439315f,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3632303136315f36,0x3409636f6c2e090a,0x090a300938303109,0x662e6d722e6c756d\n"
".quad 0x3164662509203436,0x36646625202c3534,0x3b3539646625202c,0x6d722e6c756d090a\n"
".quad 0x662509203436662e,0x6625202c36343164,0x39646625202c3664,0x2e6c756d090a3b36\n"
".quad 0x09203436662e7072,0x202c373431646625,0x6625202c36646625,0x756d090a3b353964\n"
".quad 0x3436662e70722e6c,0x3834316466250920,0x202c36646625202c,0x090a3b3639646625\n"
".quad 0x203436662e6e696d,0x2c39343164662509,0x2c35343164662520,0x3b36343164662520\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x6625202c30353164,0x6625202c38303164\n"
".quad 0x6d090a3b39343164,0x09203436662e7861,0x202c313531646625,0x202c373431646625\n"
".quad 0x0a3b383431646625,0x2e70722e64646109,0x6466250920343666,0x646625202c323531\n"
".quad 0x646625202c313131,0x6461090a3b313531,0x2509203436662e64,0x25202c3335316466\n"
".quad 0x25202c3035316466,0x090a3b3235316466,0x75656e2e70746573,0x702509203436662e\n"
".quad 0x31646625202c3433,0x31646625202c3335,0x252140090a3b3335,0x2061726220343370\n"
".quad 0x5f36315f744c2409,0x0a3b303134333732,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x3309636f6c2e090a,0x6d090a3009383809\n"
".quad 0x09203436662e766f,0x202c353231646625,0x3030303030306430,0x3030303030303030\n"
".quad 0x30202f2f093b3030,0x6e752e617262090a,0x6557444c24092069,0x77355a5f5f69646e\n"
".quad 0x5445644968746469,0x7265746e6932315f,0x497570675f6c6176,0x3439315f455f3053\n"
".quad 0x744c240a3b31315f,0x343337325f36315f,0x3c2f2f200a3a3031,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x36315f36315f744c,0x6c2e090a36323031,0x093039093309636f\n"
".quad 0x662e67656e090a30,0x3164662509203436,0x31646625202c3435,0x646461090a3b3035\n"
".quad 0x203436662e70722e,0x2c35323164662509,0x2c32353164662520,0x3b34353164662520\n"
".quad 0x646e6557444c240a,0x646977355a5f5f69,0x315f544564496874,0x61767265746e6932\n"
".quad 0x3053497570675f6c,0x315f3439315f455f,0x6c3c2f2f200a3a31,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230,0x0938303109340963\n"
".quad 0x662e766f6d090a30,0x3164662509203436,0x65336430202c3535,0x3061376636633062\n"
".quad 0x093b303030303030,0x36302d6531202f2f,0x6c2e70746573090a,0x2509203436662e65\n"
".quad 0x646625202c353370,0x646625202c353231,0x2140090a3b353531,0x6172622035337025\n"
".quad 0x36315f744c240920,0x3b3431313238325f,0x5f36315f744c240a,0x0a3a343732303531\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36\n"
".quad 0x33732e766f6d090a,0x2c36337225092032,0x617262090a3b3120,0x4c240920696e752e\n"
".quad 0x3335315f36315f74,0x744c240a3b363433,0x313238325f36315f,0x5f744c240a3a3431\n"
".quad 0x33353035315f3631,0x6c3c2f2f200a3a30,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3136315f36315f74,0x766f6d090a363230,0x722509203233732e,0x240a3b30202c3633\n"
".quad 0x35315f36315f744c,0x2f200a3a36343333,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x31093409636f6c2e,0x6f6d090a30093736\n"
".quad 0x2509203233752e76,0x0a3b30202c373372,0x71652e7074657309,0x702509203233732e\n"
".quad 0x36337225202c3633,0x0a3b37337225202c,0x6220363370254009,0x5f744c2409206172\n"
".quad 0x35383138325f3631,0x6c3c2f2f200a3b38,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3136315f36315f74,0x6f6c2e090a363230,0x0938363109340963,0x36752e646c090a30\n"
".quad 0x3431647225092034,0x2b326472255b202c,0x2e646c090a3b5d30,0x3372250920323373\n"
".quad 0x326472255b202c38,0x7663090a3b5d382b,0x33732e3436732e74,0x3531647225092032\n"
".quad 0x0a3b38337225202c,0x6469772e6c756d09,0x2509203233732e65,0x7225202c36316472\n"
".quad 0x0a3b3631202c3833,0x3436752e64646109,0x2c37316472250920,0x202c343164722520\n"
".quad 0x090a3b3631647225,0x09203436662e7473,0x302b37316472255b,0x3539646625202c5d\n"
".quad 0x36752e646c090a3b,0x3831647225092034,0x2b326472255b202c,0x2e646c090a3b5d30\n"
".quad 0x3372250920323373,0x326472255b202c39,0x7663090a3b5d382b,0x33732e3436732e74\n"
".quad 0x3931647225092032,0x0a3b39337225202c,0x6469772e6c756d09,0x2509203233732e65\n"
".quad 0x7225202c30326472,0x0a3b3631202c3933,0x3436752e64646109,0x2c31326472250920\n"
".quad 0x202c383164722520,0x090a3b3032647225,0x09203436662e7473,0x382b31326472255b\n"
".quad 0x3639646625202c5d,0x33732e646c090a3b,0x2c30347225092032,0x382b326472255b20\n"
".quad 0x2e646461090a3b5d,0x3472250920323373,0x2c30347225202c31,0x0a3b363335353620\n"
".quad 0x203233732e747309,0x382b326472255b09,0x3b31347225202c5d,0x3309636f6c2e090a\n"
".quad 0x3009363032320931,0x6f6c672e646c090a,0x092038732e6c6162,0x5f5b202c32347225\n"
".quad 0x6e6174736e6f635f,0x3b5d302b39343874,0x33732e766f6d090a,0x2c33347225092032\n"
".quad 0x746573090a3b3020,0x3233732e656e2e70,0x202c373370250920,0x7225202c32347225\n"
".quad 0x252140090a3b3334,0x2061726220373370,0x5f36315f744c2409,0x0a3b383331333832\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36\n"
".quad 0x33732e766f6d090a,0x2c34347225092032,0x766f6d090a3b3020,0x722509203233732e\n"
".quad 0x090a3b30202c3534,0x203233732e766f6d,0x30202c3634722509,0x752e766f6d090a3b\n"
".quad 0x3264722509203436,0x63090a3b30202c32,0x626f6c672e617476,0x09203436752e6c61\n"
".quad 0x5f202c3332647225,0x6e6174736e6f635f,0x4c240a3b39343874,0x3437325f36315f74\n"
".quad 0x2f2f200a3a343334,0x4c203e706f6f6c3c,0x79646f6220706f6f,0x313120656e696c20\n"
".quad 0x636f6c2e090a3134,0x3134313109313209,0x2e766f6d090a3009,0x3472250920323373\n"
".quad 0x3b34347225202c37,0x33732e766f6d090a,0x2c38347225092032,0x766f6d090a3b3120\n"
".quad 0x722509203436752e,0x343831202c343264,0x3337303434373634,0x3136313535393037\n"
".quad 0x672e746573090a3b,0x36752e3233752e74,0x2c39347225092034,0x202c323264722520\n"
".quad 0x090a3b3432647225,0x203233732e67656e,0x25202c3035722509,0x6f6d090a3b393472\n"
".quad 0x2509203233732e76,0x3b3335202c313572,0x74672e746573090a,0x3233732e3233752e\n"
".quad 0x202c323572250920,0x7225202c37347225,0x67656e090a3b3135,0x722509203233732e\n"
".quad 0x32357225202c3335,0x752e766f6d090a3b,0x3264722509203436,0x3634343831202c35\n"
".quad 0x3037333730343437,0x0a3b313631353539,0x2e71652e74657309,0x203436752e323375\n"
".quad 0x25202c3435722509,0x7225202c32326472,0x656e090a3b353264,0x2509203233732e67\n"
".quad 0x357225202c353572,0x2e646e61090a3b34,0x3572250920323362,0x2c33357225202c36\n"
".quad 0x090a3b3535722520,0x09203233622e726f,0x7225202c37357225,0x36357225202c3035\n"
".quad 0x732e67656e090a3b,0x3835722509203233,0x0a3b37357225202c,0x33732e74636c7309\n"
".quad 0x2509203233732e32,0x347225202c363472,0x2c38347225202c36,0x090a3b3835722520\n"
".quad 0x203233752e627573,0x25202c3935722509,0x3b3834202c373472,0x33752e766f6d090a\n"
".quad 0x2c30367225092032,0x746573090a3b3920,0x3233752e74672e70,0x202c383370250920\n"
".quad 0x7225202c39357225,0x702540090a3b3036,0x0920617262203833,0x325f36315f744c24\n"
".quad 0x200a3b3634393437,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x6568202c31343131,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3433343437325f36,0x3209636f6c2e090a,0x3009383431310931,0x36732e747663090a\n"
".quad 0x2509203233732e34,0x7225202c36326472,0x6c756d090a3b3935,0x203436752e6f6c2e\n"
".quad 0x202c373264722509,0x31202c3232647225,0x2e646461090a3b30,0x6472250920343675\n"
".quad 0x32647225202c3232,0x3732647225202c36,0x752e617262090a3b,0x5f744c240920696e\n"
".quad 0x39363437325f3631,0x315f744c240a3b30,0x3634393437325f36,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x2c3134313120656e\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3437325f36315f74,0x6f6c2e090a343334\n"
".quad 0x3531310931320963,0x766f6d090a300930,0x722509203233732e,0x240a3b31202c3534\n"
".quad 0x37325f36315f744c,0x2f200a3a30393634,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3120656e696c2079,0x616568202c313431,0x656c6562616c2064\n"
".quad 0x36315f744c242064,0x0a3433343437325f,0x313209636f6c2e09,0x0a30093235313109\n"
".quad 0x3436752e64646109,0x2c33326472250920,0x202c333264722520,0x672e646c090a3b31\n"
".quad 0x38732e6c61626f6c,0x202c343472250920,0x302b33326472255b,0x2e766f6d090a3b5d\n"
".quad 0x3672250920323375,0x73090a3b30202c31,0x732e656e2e707465,0x3933702509203233\n"
".quad 0x202c34347225202c,0x40090a3b31367225,0x6172622039337025,0x36315f744c240920\n"
".quad 0x3b3433343437325f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x32303136315f3631,0x752e617262090a36,0x5f744c240920696e,0x32393337325f3631\n"
".quad 0x315f744c240a3b32,0x3833313338325f36,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x2e766f6d090a3632,0x3472250920323373\n"
".quad 0x6d090a3b30202c35,0x09203233732e766f,0x3b30202c36347225,0x36752e766f6d090a\n"
".quad 0x3232647225092034,0x744c240a3b30202c,0x393337325f36315f,0x3c2f2f200a3a3232\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c,0x6f6d090a36323031\n"
".quad 0x2509203233752e76,0x0a3b30202c323672,0x71652e7074657309,0x702509203233732e\n"
".quad 0x36347225202c3034,0x0a3b32367225202c,0x6220303470254009,0x5f744c2409206172\n"
".quad 0x35343537325f3631,0x6c3c2f2f200a3b38,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3136315f36315f74,0x766f6d090a363230,0x722509203436732e,0x3b312d202c323264\n"
".quad 0x5f36315f744c240a,0x0a3a383534353732,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x3209636f6c2e090a,0x3009383531310931\n"
".quad 0x36752e766f6d090a,0x3832647225092034,0x6f6d090a3b30202c,0x2509203233732e76\n"
".quad 0x0a3b30202c333672,0x656e2e7074657309,0x702509203233732e,0x35347225202c3134\n"
".quad 0x0a3b33367225202c,0x36752e706c657309,0x3232647225092034,0x2c3832647225202c\n"
".quad 0x202c323264722520,0x2e090a3b31347025,0x3631093409636f6c,0x646e61090a300939\n"
".quad 0x722509203436622e,0x647225202c393264,0x33303534202c3232,0x3733373236393935\n"
".quad 0x6f090a3b35393430,0x2509203436622e72,0x7225202c30336472,0x323239202c393264\n"
".quad 0x3037333230323131,0x3036353039303134,0x622e646e61090a3b,0x3364722509203436\n"
".quad 0x3033647225202c31,0x393533303534202c,0x3430373337323639,0x2e726f090a3b3539\n"
".quad 0x6472250920343662,0x33647225202c3233,0x3131323239202c31,0x3134303733323032\n"
".quad 0x0a3b303635303930,0x3436622e766f6d09,0x3635316466250920,0x3b3233647225202c\n"
".quad 0x3309636f6c2e090a,0x3009363032320931,0x373370252140090a,0x4c24092061726220\n"
".quad 0x3338325f36315f74,0x2f2f200a3b343933,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x315f36315f744c24,0x6d090a3632303136,0x09203233732e766f,0x3b30202c34347225\n"
".quad 0x33732e766f6d090a,0x2c35347225092032,0x766f6d090a3b3020,0x722509203233732e\n"
".quad 0x090a3b30202c3634,0x203436752e766f6d,0x202c323264722509,0x61747663090a3b30\n"
".quad 0x2e6c61626f6c672e,0x6472250920343675,0x6f635f5f202c3332,0x3438746e6174736e\n"
".quad 0x315f744c240a3b39,0x3238343637325f36,0x6f6c3c2f2f200a3a,0x706f6f4c203e706f\n"
".quad 0x696c2079646f6220,0x0a3134313120656e,0x313209636f6c2e09,0x0a30093134313109\n"
".quad 0x3233732e766f6d09,0x202c343672250920,0x6d090a3b34347225,0x09203233732e766f\n"
".quad 0x3b31202c35367225,0x36752e766f6d090a,0x3333647225092034,0x373634343831202c\n"
".quad 0x3930373337303434,0x090a3b3136313535,0x752e74672e746573,0x09203436752e3233\n"
".quad 0x7225202c36367225,0x647225202c323264,0x67656e090a3b3333,0x722509203233732e\n"
".quad 0x36367225202c3736,0x732e766f6d090a3b,0x3836722509203233,0x73090a3b3335202c\n"
".quad 0x33752e74672e7465,0x2509203233732e32,0x367225202c393672,0x3b38367225202c34\n"
".quad 0x33732e67656e090a,0x2c30377225092032,0x090a3b3936722520,0x203436752e766f6d\n"
".quad 0x202c343364722509,0x3434373634343831,0x3535393037333730,0x6573090a3b313631\n"
".quad 0x3233752e71652e74,0x722509203436752e,0x32647225202c3137,0x3433647225202c32\n"
".quad 0x732e67656e090a3b,0x3237722509203233,0x0a3b31377225202c,0x3233622e646e6109\n"
".quad 0x202c333772250920,0x7225202c30377225,0x2e726f090a3b3237,0x3772250920323362\n"
".quad 0x2c37367225202c34,0x090a3b3337722520,0x203233732e67656e,0x25202c3537722509\n"
".quad 0x6c73090a3b343772,0x732e3233732e7463,0x3634722509203233,0x202c36347225202c\n"
".quad 0x7225202c35367225,0x627573090a3b3537,0x722509203233752e,0x34367225202c3637\n"
".quad 0x6d090a3b3834202c,0x09203233752e766f,0x3b39202c37377225,0x672e70746573090a\n"
".quad 0x2509203233752e74,0x377225202c323470,0x3b37377225202c36,0x203234702540090a\n"
".quad 0x744c240920617262,0x393637325f36315f,0x3c2f2f200a3b3439,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x34313120656e696c,0x2064616568202c31\n"
".quad 0x2064656c6562616c,0x325f36315f744c24,0x2e090a3238343637,0x3109313209636f6c\n"
".quad 0x63090a3009383431,0x732e3436732e7476,0x3364722509203233,0x3b36377225202c35\n"
".quad 0x6f6c2e6c756d090a,0x722509203436752e,0x647225202c363364,0x0a3b3031202c3232\n"
".quad 0x3436752e64646109,0x2c32326472250920,0x202c353364722520,0x090a3b3633647225\n"
".quad 0x20696e752e617262,0x5f36315f744c2409,0x0a3b383337363732,0x325f36315f744c24\n"
".quad 0x200a3a3439393637,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x6568202c31343131,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3238343637325f36,0x3209636f6c2e090a,0x3009303531310931,0x33732e766f6d090a\n"
".quad 0x2c35347225092032,0x5f744c240a3b3120,0x33373637325f3631,0x6c3c2f2f200a3a38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x3134313120656e69\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x37325f36315f744c,0x6c2e090a32383436\n"
".quad 0x313109313209636f,0x6461090a30093235,0x2509203436752e64,0x7225202c33326472\n"
".quad 0x0a3b31202c333264,0x626f6c672e646c09,0x25092038732e6c61,0x72255b202c343472\n"
".quad 0x0a3b5d302b333264,0x3233752e766f6d09,0x202c383772250920,0x70746573090a3b30\n"
".quad 0x203233732e656e2e,0x25202c3334702509,0x377225202c343472,0x34702540090a3b38\n"
".quad 0x2409206172622033,0x37325f36315f744c,0x2f200a3b32383436,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631,0x20696e752e617262\n"
".quad 0x5f36315f744c2409,0x0a3b303739353732,0x325f36315f744c24,0x200a3a3439333338\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x36315f744c242064,0x0a3632303136315f\n"
".quad 0x3233732e766f6d09,0x202c353472250920,0x2e766f6d090a3b30,0x3472250920323373\n"
".quad 0x6d090a3b30202c36,0x09203436752e766f,0x30202c3232647225,0x36315f744c240a3b\n"
".quad 0x3a3037393537325f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x32303136315f3631,0x752e766f6d090a36,0x3937722509203233,0x6573090a3b30202c\n"
".quad 0x33732e71652e7074,0x2c34347025092032,0x25202c3634722520,0x2540090a3b393772\n"
".quad 0x2061726220343470,0x5f36315f744c2409,0x0a3b363035373732,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3632303136315f36,0x36732e766f6d090a\n"
".quad 0x3232647225092034,0x4c240a3b312d202c,0x3737325f36315f74,0x2f2f200a3a363035\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x315f36315f744c24,0x2e090a3632303136\n"
".quad 0x3109313209636f6c,0x6d090a3009383531,0x09203436752e766f,0x30202c3733647225\n"
".quad 0x732e766f6d090a3b,0x3038722509203233,0x6573090a3b30202c,0x33732e656e2e7074\n"
".quad 0x2c35347025092032,0x25202c3534722520,0x6573090a3b303872,0x09203436752e706c\n"
".quad 0x25202c3232647225,0x7225202c37336472,0x347025202c323264,0x636f6c2e090a3b35\n"
".quad 0x3009393631093409,0x36662e766f6d090a,0x3539646625092034,0x363531646625202c\n"
".quad 0x622e646e61090a3b,0x3364722509203436,0x3232647225202c38,0x393533303534202c\n"
".quad 0x3430373337323639,0x2e726f090a3b3539,0x6472250920343662,0x33647225202c3933\n"
".quad 0x3131323239202c38,0x3134303733323032,0x0a3b303635303930,0x3436622e646e6109\n"
".quad 0x2c30346472250920,0x202c393364722520,0x3639393533303534,0x3539343037333732\n"
".quad 0x36622e726f090a3b,0x3134647225092034,0x2c3034647225202c,0x3032313132323920\n"
".quad 0x3930313430373332,0x6d090a3b30363530,0x09203436622e766f,0x25202c3639646625\n"
".quad 0x4c240a3b31346472,0x3138325f36315f74,0x744c240a3a383538,0x373934315f36315f\n"
".quad 0x3c2f2f200a3a3236,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x36315f36315f744c\n"
".quad 0x6c2e090a36323031,0x393131093409636f,0x70746573090a3009,0x3436662e75656e2e\n"
".quad 0x202c363470250920,0x25202c3031646625,0x40090a3b30316466,0x7262203634702521\n"
".quad 0x315f744c24092061,0x3831303837325f36,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x636f6c2e090a3632,0x0a30093838093309\n"
".quad 0x3436662e766f6d09,0x3735316466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x2e617262090a3020,0x444c240920696e75,0x5a5f5f69646e6557\n"
".quad 0x6449687464697735,0x746e6932315f5445,0x70675f6c61767265,0x315f455f30534975\n"
".quad 0x4c240a3b375f3439,0x3837325f36315f74,0x2f2f200a3a383130,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x315f36315f744c24,0x2e090a3632303136,0x3039093309636f6c\n"
".quad 0x2e67656e090a3009,0x6466250920343666,0x646625202c383531,0x2e646461090a3b39\n"
".quad 0x09203436662e7072,0x202c373531646625,0x6625202c32646625,0x4c240a3b38353164\n"
".quad 0x5f5f69646e655744,0x496874646977355a,0x6e6932315f544564,0x675f6c6176726574\n"
".quad 0x5f455f3053497570,0x200a3a375f343931,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x36315f744c242064,0x0a3632303136315f,0x093409636f6c2e09,0x61090a3009393131\n"
".quad 0x09203436662e6464,0x202c393531646625,0x25202c3238646625,0x73090a3b30386466\n"
".quad 0x662e71652e707465,0x3734702509203436,0x393531646625202c,0x393531646625202c\n"
".quad 0x3470252140090a3b,0x2409206172622037,0x38325f36315f744c,0x2f200a3b30353633\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x31093409636f6c2e,0x656e090a30093032,0x2509203436662e67,0x25202c3036316466\n"
".quad 0x61090a3b30386466,0x36662e70722e6464,0x3631646625092034,0x3238646625202c31\n"
".quad 0x303631646625202c,0x662e766f6d090a3b,0x3164662509203436,0x66336430202c3236\n"
".quad 0x3038343165616665,0x093b303030303030,0x0a39392e30202f2f,0x3436662e6c756d09\n"
".quad 0x3336316466250920,0x373531646625202c,0x323631646625202c,0x2e70746573090a3b\n"
".quad 0x09203436662e7467,0x6625202c38347025,0x6625202c31363164,0x40090a3b33363164\n"
".quad 0x7262203834702521,0x315f744c24092061,0x3035363338325f36,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x303136315f36315f,0x2e617262090a3632\n"
".quad 0x744c240920696e75,0x363435315f36315f,0x5f744c240a3b3632,0x35363338325f3631\n"
".quad 0x315f744c240a3a30,0x3833313535315f36,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x2e646461090a3632,0x6466250920343666\n"
".quad 0x646625202c383231,0x39646625202c3639,0x70746573090a3b35,0x203436662e71652e\n"
".quad 0x25202c3934702509,0x25202c3832316466,0x090a3b3832316466,0x6220393470252140\n"
".quad 0x5f744c2409206172,0x36313438325f3631,0x6c3c2f2f200a3b32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3136315f36315f74,0x67656e090a363230,0x662509203436662e\n"
".quad 0x6625202c34363164,0x6461090a3b353964,0x3436662e70722e64,0x3536316466250920\n"
".quad 0x2c3639646625202c,0x3b34363164662520,0x36662e766f6d090a,0x3631646625092034\n"
".quad 0x6566336430202c36,0x3030383431656166,0x2f093b3030303030,0x090a39392e30202f\n"
".quad 0x203436662e6c756d,0x2c37363164662509,0x2c37353164662520,0x3b36363164662520\n"
".quad 0x672e70746573090a,0x2509203436662e74,0x646625202c303570,0x646625202c353631\n"
".quad 0x2140090a3b373631,0x6172622030357025,0x36315f744c240920,0x3b3236313438325f\n"
".quad 0x5f36315f744c240a,0x0a3a363236343531,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3632303136315f36,0x33732e766f6d090a,0x2c31387225092032\n"
".quad 0x617262090a3b3120,0x4c240920696e752e,0x3635315f36315f74,0x744c240a3b303339\n"
".quad 0x313438325f36315f,0x5f744c240a3a3236,0x38383435315f3631,0x6c3c2f2f200a3a32\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3136315f36315f74,0x766f6d090a363230\n"
".quad 0x722509203233732e,0x240a3b30202c3138,0x35315f36315f744c,0x2f200a3a30333936\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x31093409636f6c2e,0x6f6d090a30093137,0x2509203233752e76,0x0a3b30202c323872\n"
".quad 0x71652e7074657309,0x702509203233732e,0x31387225202c3135,0x0a3b32387225202c\n"
".quad 0x6220313570254009,0x5f744c2409206172,0x35353937325f3631,0x6c3c2f2f200a3b34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230\n"
".quad 0x0934373109340963,0x662e766f6d090a30,0x3864662509203436,0x3b39646625202c30\n"
".quad 0x36662e766f6d090a,0x3238646625092034,0x3b3231646625202c,0x3409636f6c2e090a\n"
".quad 0x090a300935373109,0x203436662e766f6d,0x202c353964662509,0x090a3b3231646625\n"
".quad 0x203436662e766f6d,0x202c363964662509,0x6d090a3b32646625,0x09203233732e766f\n"
".quad 0x3b30202c33387225,0x33732e766f6d090a,0x2c34387225092032,0x746573090a3b3120\n"
".quad 0x3233732e656e2e70,0x202c393170250920,0x7225202c34387225,0x646461090a3b3338\n"
".quad 0x662509203436662e,0x6625202c38363164,0x646625202c323164,0x70746573090a3b39\n"
".quad 0x203436662e71652e,0x25202c3734702509,0x25202c3836316466,0x240a3b3836316466\n"
".quad 0x37325f36315f744c,0x2f200a3a34353539,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f36315f744c2420,0x090a363230313631,0x6220373470252140,0x5f744c2409206172\n"
".quad 0x32333038325f3631,0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3136315f36315f74,0x6f6c2e090a363230,0x0933383109340963,0x662e766f6d090a30\n"
".quad 0x3164662509203436,0x3b3038646625202c,0x36662e766f6d090a,0x2c32646625092034\n"
".quad 0x0a3b323864662520,0x093409636f6c2e09,0x40090a3009353831,0x7262203931702521\n"
".quad 0x315f744c24092061,0x3632303136315f36,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x2e646461090a3632,0x6466250920343666\n"
".quad 0x646625202c393631,0x39646625202c3639,0x70746573090a3b35,0x203436662e71652e\n"
".quad 0x25202c3235702509,0x25202c3936316466,0x090a3b3936316466,0x6220323570252140\n"
".quad 0x5f744c2409206172,0x32303136315f3631,0x6c3c2f2f200a3b36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230,0x0939383109340963\n"
".quad 0x6f6c2e646c090a30,0x203233732e6c6163,0x5b202c3538722509,0x5f5f616475635f5f\n"
".quad 0x6f6c5f616475635f,0x5f7261765f6c6163,0x32335f3038363736,0x6e6f635f6e6f6e5f\n"
".quad 0x5f6b726f775f7473,0x322b363530323631,0x61090a3b5d383430,0x09203233732e6464\n"
".quad 0x7225202c36387225,0x090a3b31202c3538,0x6c61636f6c2e7473,0x5f5b09203233732e\n"
".quad 0x5f5f5f616475635f,0x636f6c5f61647563,0x365f7261765f6c61,0x5f32335f30383637\n"
".quad 0x736e6f635f6e6f6e,0x315f6b726f775f74,0x30322b3635303236,0x387225202c5d3834\n"
".quad 0x2e747663090a3b36,0x203233732e343673,0x202c323464722509,0x6d090a3b36387225\n"
".quad 0x2e656469772e6c75,0x6472250920323373,0x36387225202c3334,0x61090a3b3631202c\n"
".quad 0x09203436752e6464,0x25202c3434647225,0x647225202c356472,0x2e7473090a3b3334\n"
".quad 0x72255b0920343666,0x202c5d302b343464,0x090a3b3539646625,0x6c61636f6c2e646c\n"
".quad 0x722509203233732e,0x635f5f5b202c3738,0x75635f5f5f616475,0x6c61636f6c5f6164\n"
".quad 0x3637365f7261765f,0x6f6e5f32335f3038,0x5f74736e6f635f6e,0x3236315f6b726f77\n"
".quad 0x383430322b363530,0x2e747663090a3b5d,0x203233732e343673,0x202c353464722509\n"
".quad 0x6d090a3b37387225,0x2e656469772e6c75,0x6472250920323373,0x37387225202c3634\n"
".quad 0x61090a3b3631202c,0x09203436752e6464,0x25202c3734647225,0x647225202c356472\n"
".quad 0x2e7473090a3b3634,0x72255b0920343666,0x202c5d382b373464,0x090a3b3639646625\n"
".quad 0x20696e752e617262,0x5f36315f744c2409,0x0a3b363230313631,0x325f36315f744c24\n"
".quad 0x200a3a3232333038,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x36315f744c242064\n"
".quad 0x0a3632303136315f,0x093409636f6c2e09,0x40090a3009323931,0x7262203931702521\n"
".quad 0x315f744c24092061,0x3638313538325f36,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x303136315f36315f,0x2e646461090a3632,0x6466250920343666\n"
".quad 0x646625202c303731,0x39646625202c3639,0x70746573090a3b35,0x203436662e71652e\n"
".quad 0x25202c3335702509,0x25202c3037316466,0x090a3b3037316466,0x6220333570252140\n"
".quad 0x5f744c2409206172,0x38313538325f3631,0x6c3c2f2f200a3b36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3136315f36315f74,0x6f6c2e090a363230,0x0936393109340963\n"
".quad 0x662e766f6d090a30,0x3164662509203436,0x3b3539646625202c,0x36662e766f6d090a\n"
".quad 0x2c32646625092034,0x0a3b363964662520,0x093409636f6c2e09,0x62090a3009323931\n"
".quad 0x0920696e752e6172,0x315f36315f744c24,0x240a3b3632303136,0x38325f36315f744c\n"
".quad 0x4c240a3a36383135,0x3835315f36315f74,0x2f2f200a3a323237,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x315f36315f744c24,0x6c090a3632303136,0x2e6c61636f6c2e64\n"
".quad 0x3872250920323373,0x75635f5f5b202c36,0x6475635f5f5f6164,0x5f6c61636f6c5f61\n"
".quad 0x383637365f726176,0x6e6f6e5f32335f30,0x775f74736e6f635f,0x303236315f6b726f\n"
".quad 0x5d383430322b3635,0x752e766f6d090a3b,0x3838722509203233,0x73090a3b312d202c\n"
".quad 0x732e656e2e707465,0x3435702509203233,0x202c36387225202c,0x40090a3b38387225\n"
".quad 0x6172622034357025,0x36315f744c240920,0x3b3433383038325f,0x6e752e617262090a\n"
".quad 0x315f744c24092069,0x240a3b3431355f36,0x38325f36315f744c,0x2f200a3a34333830\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f36315f744c2420,0x090a363230313631\n"
".quad 0x32093409636f6c2e,0x7573090a30093530,0x2509203233732e62,0x387225202c363872\n"
".quad 0x73090a3b31202c36,0x2e6c61636f6c2e74,0x5f5f5b0920323373,0x635f5f5f61647563\n"
".quad 0x61636f6c5f616475,0x37365f7261765f6c,0x6e5f32335f303836,0x74736e6f635f6e6f\n"
".quad 0x36315f6b726f775f,0x3430322b36353032,0x36387225202c5d38,0x732e747663090a3b\n"
".quad 0x09203233732e3436,0x25202c3834647225,0x756d090a3b363872,0x732e656469772e6c\n"
".quad 0x3464722509203233,0x2c36387225202c39,0x6461090a3b363120,0x2509203436752e64\n"
".quad 0x7225202c30356472,0x34647225202c3564,0x662e646c090a3b39,0x3164662509203436\n"
".quad 0x30356472255b202c,0x6c090a3b5d36312b,0x2509203436662e64,0x72255b202c326466\n"
".quad 0x3b5d34322b303564,0x6e752e617262090a,0x315f744c24092069,0x3632303136315f36\n"
".quad 0x36315f744c240a3b,0x2e090a3a3431355f,0x3032093409636f6c,0x746572090a300938\n"
".quad 0x6e6557444c240a3b,0x656e35315a5f5f64,0x746e695f6e6f7477,0x4c64496c61767265\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x2f207d090a3a695f,0x656e35315a5f202f,0x746e695f6e6f7477,0x4c64496c61767265\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x69762e090a0a695f,0x662e20656c626973,0x39315a5f20636e75,0x695f6e6f7477656e\n"
".quad 0x5f6c61767265746e,0x36694c6449636572,0x31694c4536333535,0x3231527645453832\n"
".quad 0x735f6c61626f6c67,0x693231496b636174,0x5f6c61767265746e,0x58455f5449757067\n"
".quad 0x5f305458455f3154,0x695f33534b524545,0x6d617261702e2820,0x5f5f203436752e20\n"
".quad 0x6d72617061647563,0x6e39315a5f5f3166,0x6e695f6e6f747765,0x725f6c6176726574\n"
".quad 0x3536694c64496365,0x3231694c45363335,0x6732315276454538,0x74735f6c61626f6c\n"
".quad 0x6e693231496b6361,0x675f6c6176726574,0x5458455f54497570,0x455f305458455f31\n"
".quad 0x2c695f33534b5245,0x206d617261702e20,0x635f5f203436752e,0x666d726170616475\n"
".quad 0x656e39315a5f5f32,0x746e695f6e6f7477,0x65725f6c61767265,0x353536694c644963\n"
".quad 0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f,0x746e693231496b63\n"
".quad 0x70675f6c61767265,0x315458455f544975,0x45455f305458455f,0x202c695f33534b52\n"
".quad 0x2e206d617261702e,0x75635f5f20323373,0x33666d7261706164,0x77656e39315a5f5f\n"
".quad 0x65746e695f6e6f74,0x6365725f6c617672,0x33353536694c6449,0x45383231694c4536\n"
".quad 0x6f6c673231527645,0x636174735f6c6162,0x65746e693231496b,0x7570675f6c617672\n"
".quad 0x5f315458455f5449,0x5245455f30545845,0x090a29695f33534b,0x206765722e090a7b\n"
".quad 0x3c7225203233752e,0x722e090a3b3e3234,0x203436752e206765,0x3b3e38313c647225\n"
".quad 0x2e206765722e090a,0x3c64662520343666,0x2e090a3b3e363431,0x6572702e20676572\n"
".quad 0x3e30343c70252064,0x61636f6c2e090a3b,0x6e67696c612e206c,0x5f2038622e203820\n"
".quad 0x5f5f5f616475635f,0x636f6c5f61647563,0x365f7261765f6c61,0x5f34315f32373737\n"
".quad 0x736e6f635f6e6f6e,0x5f32747261705f74,0x315b323131343631,0x6f6c2e090a3b5d36\n"
".quad 0x696c612e206c6163,0x38622e2038206e67,0x5f616475635f5f20,0x6c5f616475635f5f\n"
".quad 0x7261765f6c61636f,0x375f32373737365f,0x6e6f635f6e6f6e5f,0x31747261705f7473\n"
".quad 0x5b3832313432335f,0x702e090a3b5d3631,0x36752e206d617261,0x616475635f5f2034\n"
".quad 0x5f5f31616d726170,0x6f7477656e39315a,0x767265746e695f6e,0x64496365725f6c61\n"
".quad 0x453633353536694c,0x764545383231694c,0x61626f6c67323152,0x496b636174735f6c\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x58455f315458455f,0x534b5245455f3054\n"
".quad 0x702e090a3b695f33,0x36752e206d617261,0x616475635f5f2034,0x5f5f32616d726170\n"
".quad 0x6f7477656e39315a,0x767265746e695f6e,0x64496365725f6c61,0x453633353536694c\n"
".quad 0x764545383231694c,0x61626f6c67323152,0x496b636174735f6c,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x58455f315458455f,0x534b5245455f3054,0x702e090a3b695f33\n"
".quad 0x33732e206d617261,0x616475635f5f2032,0x5f5f33616d726170,0x6f7477656e39315a\n"
".quad 0x767265746e695f6e,0x64496365725f6c61,0x453633353536694c,0x764545383231694c\n"
".quad 0x61626f6c67323152,0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x58455f315458455f,0x534b5245455f3054,0x6c2e090a3b695f33,0x353132093409636f\n"
".quad 0x6257444c240a3009,0x315a5f5f6e696765,0x5f6e6f7477656e39,0x6c61767265746e69\n"
".quad 0x694c64496365725f,0x694c453633353536,0x3152764545383231,0x5f6c61626f6c6732\n"
".quad 0x3231496b63617473,0x6c61767265746e69,0x455f54497570675f,0x305458455f315458\n"
".quad 0x5f33534b5245455f,0x702e646c090a3a69,0x3436752e6d617261,0x202c316472250920\n"
".quad 0x70616475635f5f5b,0x5a5f5f31666d7261,0x6e6f7477656e3931,0x61767265746e695f\n"
".quad 0x4c64496365725f6c,0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231\n"
".quad 0x31496b636174735f,0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845\n"
".quad 0x33534b5245455f30,0x6f6d090a3b5d695f,0x2509203436732e76,0x647225202c326472\n"
".quad 0x702e646c090a3b31,0x3436752e6d617261,0x202c336472250920,0x70616475635f5f5b\n"
".quad 0x5a5f5f32666d7261,0x6e6f7477656e3931,0x61767265746e695f,0x4c64496365725f6c\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x6f6d090a3b5d695f,0x2509203436732e76,0x647225202c346472,0x702e646c090a3b33\n"
".quad 0x3233752e6d617261,0x5b202c3172250920,0x6170616475635f5f,0x315a5f5f33666d72\n"
".quad 0x5f6e6f7477656e39,0x6c61767265746e69,0x694c64496365725f,0x694c453633353536\n"
".quad 0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f,0x766f6d090a3b5d69\n"
".quad 0x722509203233732e,0x0a3b317225202c32,0x093409636f6c2e09,0x6c090a3009383031\n"
".quad 0x2509203436662e64,0x72255b202c316466,0x090a3b5d302b3464,0x09203436662e646c\n"
".quad 0x255b202c32646625,0x0a3b5d382b346472,0x3436662e64646109,0x202c336466250920\n"
".quad 0x6625202c32646625,0x746573090a3b3164,0x3436662e71652e70,0x25202c3170250920\n"
".quad 0x646625202c336466,0x70252140090a3b33,0x2409206172622031,0x39315f37315f744c\n"
".quad 0x73090a3b30333335,0x2e75656e2e707465,0x3270250920343666,0x202c33646625202c\n"
".quad 0x40090a3b33646625,0x6172622032702521,0x37315f744c240920,0x3b3435373037315f\n"
".quad 0x3309636f6c2e090a,0x6d090a3009383809,0x09203436662e766f,0x6430202c34646625\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x20696e752e617262\n"
".quad 0x646e6557444c2409,0x646977355a5f5f69,0x315f544564496874,0x61767265746e6932\n"
".quad 0x3053497570675f6c,0x325f3539315f455f,0x315f744c240a3b37,0x3435373037315f37\n"
".quad 0x09636f6c2e090a3a,0x090a300930390933,0x203436662e67656e,0x25202c3564662509\n"
".quad 0x6461090a3b316466,0x3436662e70722e64,0x202c346466250920,0x6625202c32646625\n"
".quad 0x57444c240a3b3564,0x355a5f5f69646e65,0x4564496874646977,0x65746e6932315f54\n"
".quad 0x7570675f6c617672,0x39315f455f305349,0x2e090a3a37325f35,0x3031093409636f6c\n"
".quad 0x766f6d090a300938,0x662509203436662e,0x66336430202c3664,0x3030303030303065\n"
".quad 0x093b303030303030,0x090a352e30202f2f,0x203436662e6c756d,0x25202c3764662509\n"
".quad 0x646625202c336466,0x2e736261090a3b36,0x6466250920343666,0x3b37646625202c38\n"
".quad 0x36662e766f6d090a,0x2c39646625092034,0x6330626533643020,0x3030303061376636\n"
".quad 0x202f2f093b303030,0x6d090a36302d6531,0x09203436662e6c75,0x25202c3031646625\n"
".quad 0x646625202c386466,0x70746573090a3b39,0x203436662e656c2e,0x6625202c33702509\n"
".quad 0x31646625202c3464,0x33702540090a3b30,0x4c24092061726220,0x3339375f37315f74\n"
".quad 0x636f6c2e090a3b38,0x0a30093139093409,0x3436662e766f6d09,0x2c31316466250920\n"
".quad 0x3030666662643020,0x3030303030303030,0x202f2f093b303030,0x2e646461090a312d\n"
".quad 0x09203436662e6d72,0x25202c3231646625,0x646625202c316466,0x766f6d090a3b3131\n"
".quad 0x662509203436662e,0x626430202c333164,0x3030303030306666,0x3b30303030303030\n"
".quad 0x090a312d202f2f09,0x662e70722e646461,0x3164662509203436,0x2c32646625202c34\n"
".quad 0x0a3b333164662520,0x093309636f6c2e09,0x6d090a3009323333,0x09203436662e766f\n"
".quad 0x30202c3531646625,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x65672e7074657309,0x702509203436662e,0x3231646625202c34,0x3b3531646625202c\n"
".quad 0x203470252140090a,0x744c240920617262,0x313131315f37315f,0x6f6c2e090a3b3630\n"
".quad 0x0933333309330963,0x722e6c756d090a30,0x2509203436662e6d,0x6625202c36316466\n"
".quad 0x646625202c323164,0x6c756d090a3b3231,0x203436662e70722e,0x202c373164662509\n"
".quad 0x25202c3431646625,0x62090a3b34316466,0x0920696e752e6172,0x69646e6557444c24\n"
".quad 0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x3539315f5f32534b,0x744c240a3b33325f,0x313131315f37315f,0x6f6c2e090a3a3630\n"
".quad 0x0934333309330963,0x662e766f6d090a30,0x3164662509203436,0x3030306430202c38\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x746573090a30202f,0x3436662e656c2e70\n"
".quad 0x25202c3570250920,0x6625202c34316466,0x2140090a3b383164,0x2061726220357025\n"
".quad 0x5f37315f744c2409,0x0a3b323633313131,0x093309636f6c2e09,0x6d090a3009353333\n"
".quad 0x36662e6d722e6c75,0x3631646625092034,0x2c3431646625202c,0x0a3b343164662520\n"
".quad 0x2e70722e6c756d09,0x6466250920343666,0x31646625202c3731,0x3231646625202c32\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x365a5f5f69646e65,0x6449657261757173\n"
".quad 0x7265746e69323145,0x497570675f6c6176,0x5f32534b52455f54,0x3b33325f3539315f\n"
".quad 0x5f37315f744c240a,0x0a3a323633313131,0x093309636f6c2e09,0x6d090a3009373333\n"
".quad 0x36662e70722e6c75,0x3931646625092034,0x2c3231646625202c,0x0a3b323164662520\n"
".quad 0x2e70722e6c756d09,0x6466250920343666,0x31646625202c3032,0x3431646625202c34\n"
".quad 0x662e78616d090a3b,0x3164662509203436,0x3931646625202c37,0x3b3032646625202c\n"
".quad 0x36662e766f6d090a,0x3631646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x6557444c240a3020,0x73365a5f5f69646e,0x4564496572617571\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x5f5f32534b52455f,0x0a3a33325f353931\n"
".quad 0x093409636f6c2e09,0x7663090a30093139,0x3436662e6e722e74,0x662509203233732e\n"
".quad 0x327225202c313264,0x662e67656e090a3b,0x3264662509203436,0x3132646625202c32\n"
".quad 0x662e766f6d090a3b,0x3264662509203436,0x6665336430202c33,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x383532352e31202f,0x6d090a35302d6538,0x09203436662e6c75\n"
".quad 0x25202c3432646625,0x6625202c32326466,0x756d090a3b333264,0x3436662e6d722e6c\n"
".quad 0x2c35326466250920,0x202c343264662520,0x6d090a3b31646625,0x36662e6d722e6c75\n"
".quad 0x3632646625092034,0x2c3432646625202c,0x090a3b3264662520,0x662e70722e6c756d\n"
".quad 0x3264662509203436,0x3432646625202c37,0x0a3b31646625202c,0x2e70722e6c756d09\n"
".quad 0x6466250920343666,0x32646625202c3832,0x3b32646625202c34,0x3409636f6c2e090a\n"
".quad 0x090a300938303109,0x203436662e6e696d,0x202c393264662509,0x25202c3632646625\n"
".quad 0x6d090a3b35326466,0x09203436662e7861,0x25202c3033646625,0x6625202c38326466\n"
".quad 0x6461090a3b373264,0x3436662e6d722e64,0x2c31336466250920,0x202c363164662520\n"
".quad 0x090a3b3932646625,0x662e70722e646461,0x3364662509203436,0x3731646625202c32\n"
".quad 0x3b3033646625202c,0x36662e646461090a,0x3333646625092034,0x2c3133646625202c\n"
".quad 0x0a3b323364662520,0x656e2e7074657309,0x2509203436662e75,0x33646625202c3670\n"
".quad 0x3333646625202c33,0x3670252140090a3b,0x4c24092061726220,0x3137315f37315f74\n"
".quad 0x6c2e090a3b363632,0x093838093309636f,0x662e766f6d090a30,0x3364662509203436\n"
".quad 0x3030306430202c34,0x3030303030303030,0x2f093b3030303030,0x617262090a30202f\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x496874646977355a,0x6e6932315f544564\n"
".quad 0x675f6c6176726574,0x5f455f3053497570,0x0a3b35325f353931,0x315f37315f744c24\n"
".quad 0x090a3a3636323137,0x39093309636f6c2e,0x67656e090a300930,0x662509203436662e\n"
".quad 0x646625202c353364,0x646461090a3b3133,0x203436662e70722e,0x202c343364662509\n"
".quad 0x25202c3233646625,0x4c240a3b35336466,0x5f5f69646e655744,0x496874646977355a\n"
".quad 0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570,0x0a3a35325f353931\n"
".quad 0x093409636f6c2e09,0x6d090a3009383031,0x09203436662e766f,0x30202c3633646625\n"
".quad 0x6636633062653364,0x3030303030306137,0x6531202f2f093b30,0x746573090a36302d\n"
".quad 0x3436662e656c2e70,0x25202c3770250920,0x6625202c34336466,0x2140090a3b363364\n"
".quad 0x2061726220377025,0x5f37315f744c2409,0x0a3b303333353931,0x375f37315f744c24\n"
".quad 0x6f6d090a3a383339,0x2509203233732e76,0x090a3b31202c3372,0x20696e752e617262\n"
".quad 0x5f37315f744c2409,0x240a3b3031303131,0x39315f37315f744c,0x4c240a3a30333335\n"
".quad 0x3931385f37315f74,0x2e766f6d090a3a34,0x3372250920323373,0x744c240a3b30202c\n"
".quad 0x313031315f37315f,0x636f6c2e090a3a30,0x3009393132093409,0x33752e766f6d090a\n"
".quad 0x202c347225092032,0x70746573090a3b30,0x203233732e71652e,0x7225202c38702509\n"
".quad 0x0a3b347225202c33,0x7262203870254009,0x315f744c24092061,0x3837373137315f37\n"
".quad 0x09636f6c2e090a3b,0x0a30093032320934,0x203436752e646c09,0x5b202c3564722509\n"
".quad 0x3b5d302b32647225,0x3233732e646c090a,0x5b202c3572250920,0x3b5d382b32647225\n"
".quad 0x36732e747663090a,0x2509203233732e34,0x357225202c366472,0x772e6c756d090a3b\n"
".quad 0x203233732e656469,0x25202c3764722509,0x0a3b3631202c3572,0x3436752e64646109\n"
".quad 0x202c386472250920,0x7225202c35647225,0x2e7473090a3b3764,0x72255b0920343666\n"
".quad 0x25202c5d302b3864,0x646c090a3b316466,0x662509203436662e,0x72255b202c373364\n"
".quad 0x090a3b5d382b3464,0x09203436752e646c,0x255b202c39647225,0x0a3b5d302b326472\n"
".quad 0x203233732e646c09,0x255b202c36722509,0x0a3b5d382b326472,0x3436732e74766309\n"
".quad 0x722509203233732e,0x367225202c303164,0x772e6c756d090a3b,0x203233732e656469\n"
".quad 0x202c313164722509,0x3b3631202c367225,0x36752e646461090a,0x3231647225092034\n"
".quad 0x202c39647225202c,0x090a3b3131647225,0x09203436662e7473,0x382b32316472255b\n"
".quad 0x3733646625202c5d,0x33732e646c090a3b,0x202c377225092032,0x5d382b326472255b\n"
".quad 0x732e646461090a3b,0x2c38722509203233,0x3536202c37722520,0x7473090a3b363335\n"
".quad 0x255b09203233732e,0x202c5d382b326472,0x7262090a3b387225,0x240920696e752e61\n"
".quad 0x5a5f5f383942424c,0x6e6f7477656e3931,0x61767265746e695f,0x4c64496365725f6c\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x5f744c240a3b695f,0x37373137315f3731,0x636f6c2e090a3a38,0x3009363232093409\n"
".quad 0x36662e766f6d090a,0x3833646625092034,0x306566336430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x756d090a352e3020,0x2509203436662e6c,0x6625202c39336466\n"
".quad 0x33646625202c3364,0x636f6c2e090a3b38,0x3009323333093309,0x36662e766f6d090a\n"
".quad 0x3034646625092034,0x306666626430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x646461090a312d20,0x203436662e6d722e,0x202c313464662509,0x25202c3933646625\n"
".quad 0x6d090a3b30346466,0x09203436662e766f,0x30202c3234646625,0x3030303030303064\n"
".quad 0x3030303030303030,0x0a30202f2f093b30,0x65672e7074657309,0x702509203436662e\n"
".quad 0x3134646625202c39,0x3b3234646625202c,0x203970252140090a,0x744c240920617262\n"
".quad 0x313231315f37315f,0x6f6c2e090a3b3033,0x0933333309330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e6d,0x6625202c33346466,0x646625202c313464,0x766f6d090a3b3134\n"
".quad 0x662509203436662e,0x626430202c343464,0x3030303030306666,0x3b30303030303030\n"
".quad 0x090a312d202f2f09,0x662e70722e646461,0x3464662509203436,0x3933646625202c35\n"
".quad 0x3b3434646625202c,0x70722e6c756d090a,0x662509203436662e,0x646625202c363464\n"
".quad 0x34646625202c3534,0x2e617262090a3b35,0x444c240920696e75,0x5a5f5f69646e6557\n"
".quad 0x4965726175717336,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x31325f3539315f5f,0x37315f744c240a3b,0x3a3033313231315f,0x3309636f6c2e090a\n"
".quad 0x090a300934333309,0x203436662e766f6d,0x202c373464662509,0x3030306666626430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x722e646461090a31,0x2509203436662e70\n"
".quad 0x6625202c38346466,0x646625202c393364,0x766f6d090a3b3734,0x662509203436662e\n"
".quad 0x306430202c393464,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x662e656c2e707465,0x3031702509203436,0x2c3834646625202c,0x0a3b393464662520\n"
".quad 0x2030317025214009,0x744c240920617262,0x333231315f37315f,0x6f6c2e090a3b3638\n"
".quad 0x0935333309330963,0x722e6c756d090a30,0x2509203436662e6d,0x6625202c33346466\n"
".quad 0x646625202c383464,0x6c756d090a3b3834,0x203436662e70722e,0x202c363464662509\n"
".quad 0x25202c3134646625,0x62090a3b31346466,0x0920696e752e6172,0x69646e6557444c24\n"
".quad 0x61757173365a5f5f,0x6932314564496572,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x3539315f5f32534b,0x744c240a3b31325f,0x333231315f37315f,0x6f6c2e090a3a3638\n"
".quad 0x0937333309330963,0x722e6c756d090a30,0x2509203436662e70,0x6625202c30356466\n"
".quad 0x646625202c313464,0x6c756d090a3b3134,0x203436662e70722e,0x202c313564662509\n"
".quad 0x25202c3834646625,0x6d090a3b38346466,0x09203436662e7861,0x25202c3634646625\n"
".quad 0x6625202c30356466,0x6f6d090a3b313564,0x2509203436662e76,0x6430202c33346466\n"
".quad 0x3030303030303030,0x3030303030303030,0x240a30202f2f093b,0x5f69646e6557444c\n"
".quad 0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f3539315f5f3253,0x6f6c2e090a3a3132,0x3009393909340963,0x36662e766f6d090a\n"
".quad 0x3235646625092034,0x303030346430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x2e6c756d090a3220,0x09203436662e6d72,0x25202c3335646625,0x6625202c32356466\n"
".quad 0x766f6d090a3b3164,0x662509203436662e,0x346430202c343564,0x3030303030303030\n"
".quad 0x3b30303030303030,0x6d090a32202f2f09,0x36662e6d722e6c75,0x3535646625092034\n"
".quad 0x2c3435646625202c,0x090a3b3264662520,0x203436662e766f6d,0x202c363564662509\n"
".quad 0x3030303030346430,0x3030303030303030,0x32202f2f093b3030,0x70722e6c756d090a\n"
".quad 0x662509203436662e,0x646625202c373564,0x31646625202c3635,0x662e766f6d090a3b\n"
".quad 0x3564662509203436,0x3030346430202c38,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x6c756d090a32202f,0x203436662e70722e,0x202c393564662509,0x25202c3835646625\n"
".quad 0x6c2e090a3b326466,0x313332093409636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x66376430202c3036,0x3030303030303866,0x093b303030303030,0x090a6e616e202f2f\n"
".quad 0x6c61636f6c2e7473,0x5f5b09203436662e,0x5f5f5f616475635f,0x636f6c5f61647563\n"
".quad 0x365f7261765f6c61,0x5f34315f32373737,0x736e6f635f6e6f6e,0x5f32747261705f74\n"
".quad 0x302b323131343631,0x3036646625202c5d,0x662e766f6d090a3b,0x3664662509203436\n"
".quad 0x6666376430202c31,0x3030303030303038,0x2f093b3030303030,0x73090a6e616e202f\n"
".quad 0x2e6c61636f6c2e74,0x5f5f5b0920343666,0x635f5f5f61647563,0x61636f6c5f616475\n"
".quad 0x37365f7261765f6c,0x6e5f34315f323737,0x74736e6f635f6e6f,0x315f32747261705f\n"
".quad 0x5d382b3231313436,0x3b3136646625202c,0x3309636f6c2e090a,0x090a300931303309\n"
".quad 0x203436662e78616d,0x202c323664662509,0x25202c3935646625,0x63090a3b37356466\n"
".quad 0x36662e6e722e7476,0x2509203233732e34,0x7225202c33366466,0x2e6e696d090a3b32\n"
".quad 0x6466250920343666,0x35646625202c3436,0x3335646625202c35,0x662e67656e090a3b\n"
".quad 0x3664662509203436,0x3336646625202c35,0x662e766f6d090a3b,0x3664662509203436\n"
".quad 0x6665336430202c36,0x3030303030303030,0x2f093b3030303030,0x383532352e31202f\n"
".quad 0x6d090a35302d6538,0x09203436662e6c75,0x25202c3432646625,0x6625202c35366466\n"
".quad 0x6f6d090a3b363664,0x2509203436662e76,0x6430202c37366466,0x3030303030303063\n"
".quad 0x3030303030303030,0x0a322d202f2f093b,0x3436662e64646109,0x2c38366466250920\n"
".quad 0x202c343264662520,0x090a3b3736646625,0x662e70722e646461,0x3664662509203436\n"
".quad 0x3236646625202c39,0x3b3836646625202c,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x646625202c303764,0x36646625202c3436,0x2e766f6d090a3b38,0x6466250920343666\n"
".quad 0x30306430202c3137,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x3233752e65672e74,0x722509203436662e,0x3936646625202c39,0x3b3137646625202c\n"
".quad 0x33732e67656e090a,0x2c30317225092032,0x6d090a3b39722520,0x09203436662e766f\n"
".quad 0x30202c3237646625,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x2e656c2e74657309,0x203436662e323375,0x25202c3131722509,0x6625202c30376466\n"
".quad 0x656e090a3b323764,0x2509203233732e67,0x317225202c323172,0x2e646e61090a3b31\n"
".quad 0x3172250920323362,0x2c30317225202c33,0x090a3b3231722520,0x203233752e766f6d\n"
".quad 0x30202c3431722509,0x2e70746573090a3b,0x09203233732e7165,0x7225202c31317025\n"
".quad 0x34317225202c3331,0x3131702540090a3b,0x4c24092061726220,0x3432315f37315f74\n"
".quad 0x6c2e090a3b383134,0x323033093309636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x30306430202c3337,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x36662e656e2e7074,0x2c32317025092034,0x202c393664662520,0x090a3b3337646625\n"
".quad 0x203436662e766f6d,0x202c343764662509,0x3030303030306430,0x3030303030303030\n"
".quad 0x30202f2f093b3030,0x6e2e70746573090a,0x09203436662e7565,0x6625202c33317025\n"
".quad 0x646625202c303764,0x252140090a3b3437,0x2061726220333170,0x5f37315f744c2409\n"
".quad 0x0a3b343736343231,0x093309636f6c2e09,0x40090a3009333033,0x7262203231702521\n"
".quad 0x315f744c24092061,0x3033393432315f37,0x09636f6c2e090a3b,0x0a30093430330933\n"
".quad 0x2e6d722e6c756d09,0x6466250920343666,0x32646625202c3537,0x3933646625202c34\n"
".quad 0x722e6c756d090a3b,0x2509203436662e70,0x6625202c36376466,0x646625202c343264\n"
".quad 0x646461090a3b3933,0x203436662e6d722e,0x202c373764662509,0x25202c3334646625\n"
".quad 0x61090a3b35376466,0x36662e70722e6464,0x3837646625092034,0x2c3634646625202c\n"
".quad 0x0a3b363764662520,0x3436662e766f6d09,0x2c39376466250920,0x3030303030643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x652e746573090a30,0x36662e3233752e71\n"
".quad 0x2c35317225092034,0x202c383764662520,0x090a3b3937646625,0x203233732e67656e\n"
".quad 0x25202c3631722509,0x6f6d090a3b353172,0x2509203436662e76,0x6430202c30386466\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573\n"
".quad 0x09203436662e3233,0x6625202c37317225,0x646625202c373764,0x67656e090a3b3038\n"
".quad 0x722509203233732e,0x37317225202c3831,0x622e646e61090a3b,0x3931722509203233\n"
".quad 0x202c36317225202c,0x6d090a3b38317225,0x09203233752e766f,0x3b30202c30327225\n"
".quad 0x652e70746573090a,0x2509203233732e71,0x317225202c343170,0x3b30327225202c39\n"
".quad 0x203431702540090a,0x744c240920617262,0x333637315f37315f,0x6f6c2e090a3b3638\n"
".quad 0x0932363209330963,0x662e766f6d090a30,0x3864662509203436,0x3737646625202c31\n"
".quad 0x662e766f6d090a3b,0x3864662509203436,0x3837646625202c32,0x732e766f6d090a3b\n"
".quad 0x3132722509203233,0x7262090a3b30202c,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493174,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x525f34535f32534b,0x38315f3539315f62,0x37315f744c240a3b\n"
".quad 0x3a3638333637315f,0x3309636f6c2e090a,0x090a300930373209,0x203436662e766f6d\n"
".quad 0x202c333864662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x6c2e70746573090a,0x2509203436662e74,0x646625202c353170,0x38646625202c3837\n"
".quad 0x70252140090a3b33,0x0920617262203531,0x315f37315f744c24,0x090a3b3234343532\n"
".quad 0x32093309636f6c2e,0x6964090a30093237,0x3436662e70722e76,0x2c32386466250920\n"
".quad 0x202c383764662520,0x090a3b3936646625,0x203436662e766f6d,0x202c313864662509\n"
".quad 0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030,0x766f6d090a666e69\n"
".quad 0x722509203233732e,0x090a3b31202c3132,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x5f3539315f62525f,0x5f744c240a3b3831\n"
".quad 0x34343532315f3731,0x636f6c2e090a3a32,0x3009333732093309,0x36662e766f6d090a\n"
".quad 0x3438646625092034,0x303030306430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x70746573090a3020,0x203436662e746c2e,0x25202c3631702509,0x6625202c37376466\n"
".quad 0x2140090a3b343864,0x6172622036317025,0x37315f744c240920,0x3b3839363532315f\n"
".quad 0x36662e766f6d090a,0x3238646625092034,0x306666376430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x6f6d090a666e6920,0x2509203436662e76,0x6430202c31386466\n"
".quad 0x3030303030666666,0x3030303030303030,0x6e692d202f2f093b,0x732e766f6d090a66\n"
".quad 0x3132722509203233,0x7262090a3b30202c,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493174,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x525f34535f32534b,0x38315f3539315f62,0x37315f744c240a3b\n"
".quad 0x3a3839363532315f,0x3309636f6c2e090a,0x090a300938373209,0x662e70722e766964\n"
".quad 0x3864662509203436,0x3737646625202c32,0x3b3037646625202c,0x36662e766f6d090a\n"
".quad 0x3138646625092034,0x306666666430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x6d090a666e692d20,0x09203233732e766f,0x3b31202c31327225,0x646e6557444c240a\n"
".quad 0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x5f3539315f62525f,0x6f6c2e090a3a3831\n"
".quad 0x0934303309330963,0x662e766f6d090a30,0x3864662509203436,0x3138646625202c35\n"
".quad 0x662e766f6d090a3b,0x3864662509203436,0x3238646625202c36,0x752e617262090a3b\n"
".quad 0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e,0x6e72656b5f6e616e\n"
".quad 0x315f3539315f6c65,0x315f744c240a3b33,0x3033393432315f37,0x09636f6c2e090a3a\n"
".quad 0x0a30093630330933,0x2e6d722e6c756d09,0x6466250920343666,0x32646625202c3537\n"
".quad 0x3933646625202c34,0x722e6c756d090a3b,0x2509203436662e70,0x6625202c36376466\n"
".quad 0x646625202c343264,0x646461090a3b3933,0x203436662e6d722e,0x202c373764662509\n"
".quad 0x25202c3334646625,0x61090a3b35376466,0x36662e70722e6464,0x3837646625092034\n"
".quad 0x2c3634646625202c,0x0a3b363764662520,0x3436662e766f6d09,0x2c37386466250920\n"
".quad 0x3030303030643020,0x3030303030303030,0x202f2f093b303030,0x652e746573090a30\n"
".quad 0x36662e3233752e71,0x2c32327225092034,0x202c383764662520,0x090a3b3738646625\n"
".quad 0x203233732e67656e,0x25202c3332722509,0x6f6d090a3b323272,0x2509203436662e76\n"
".quad 0x6430202c38386466,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x752e71652e746573,0x09203436662e3233,0x6625202c34327225,0x646625202c373764\n"
".quad 0x67656e090a3b3838,0x722509203233732e,0x34327225202c3532,0x622e646e61090a3b\n"
".quad 0x3632722509203233,0x202c33327225202c,0x6d090a3b35327225,0x09203233752e766f\n"
".quad 0x3b30202c37327225,0x652e70746573090a,0x2509203233732e71,0x327225202c373170\n"
".quad 0x3b37327225202c36,0x203731702540090a,0x744c240920617262,0x383637315f37315f\n"
".quad 0x6f6c2e090a3b3839,0x0934343209330963,0x662e766f6d090a30,0x3864662509203436\n"
".quad 0x3737646625202c39,0x662e766f6d090a3b,0x3964662509203436,0x3837646625202c30\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x315a5f5f69646e65,0x67656e5f76696432\n"
".quad 0x4564496576697461,0x767265746e693231,0x54497570675f6c61,0x525f32534b52455f\n"
".quad 0x3539315f5f31534b,0x744c240a3b36315f,0x383637315f37315f,0x6f6c2e090a3a3839\n"
".quad 0x0939343209330963,0x662e766f6d090a30,0x3964662509203436,0x3030306430202c31\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x746573090a30202f,0x3436662e746c2e70\n"
".quad 0x202c383170250920,0x25202c3837646625,0x40090a3b31396466,0x7262203831702521\n"
".quad 0x315f744c24092061,0x3031323632315f37,0x09636f6c2e090a3b,0x0a30093035320933\n"
".quad 0x2e6d722e76696409,0x6466250920343666,0x37646625202c3938,0x3037646625202c38\n"
".quad 0x662e766f6d090a3b,0x3964662509203436,0x6666376430202c30,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x62090a666e69202f,0x0920696e752e6172,0x69646e6557444c24\n"
".quad 0x76696432315a5f5f,0x7669746167656e5f,0x6e69323145644965,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x5f31534b525f3253,0x3b36315f3539315f,0x5f37315f744c240a\n"
".quad 0x0a3a303132363231,0x093309636f6c2e09,0x6d090a3009313532,0x09203436662e766f\n"
".quad 0x30202c3239646625,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x746c2e7074657309,0x702509203436662e,0x37646625202c3931,0x3239646625202c37\n"
".quad 0x3170252140090a3b,0x2409206172622039,0x32315f37315f744c,0x6d090a3b36363436\n"
".quad 0x09203436662e766f,0x30202c3039646625,0x3030303066663764,0x3030303030303030\n"
".quad 0x6e69202f2f093b30,0x662e766f6d090a66,0x3864662509203436,0x6666666430202c39\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f,0x20696e752e617262\n"
".quad 0x646e6557444c2409,0x696432315a5f5f69,0x69746167656e5f76,0x6932314564496576\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b,0x36315f3539315f5f\n"
".quad 0x37315f744c240a3b,0x3a3636343632315f,0x3309636f6c2e090a,0x090a300934353209\n"
".quad 0x662e70722e766964,0x3964662509203436,0x3737646625202c30,0x3b3037646625202c\n"
".quad 0x36662e766f6d090a,0x3938646625092034,0x306666666430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x4c240a666e692d20,0x5f5f69646e655744,0x6e5f76696432315a\n"
".quad 0x4965766974616765,0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449\n"
".quad 0x315f5f31534b525f,0x090a3a36315f3539,0x33093309636f6c2e,0x6f6d090a30093630\n"
".quad 0x2509203436662e76,0x6625202c35386466,0x6f6d090a3b393864,0x2509203436662e76\n"
".quad 0x6625202c36386466,0x6f6d090a3b303964,0x2509203233732e76,0x0a3b30202c313272\n"
".quad 0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964,0x616e5f6c616e7265\n"
".quad 0x6c656e72656b5f6e,0x3b33315f3539315f,0x5f37315f744c240a,0x0a3a343736343231\n"
".quad 0x093309636f6c2e09,0x40090a3009383033,0x7262203231702521,0x315f744c24092061\n"
".quad 0x3232373632315f37,0x09636f6c2e090a3b,0x0a30093930330933,0x2e6d722e6c756d09\n"
".quad 0x6466250920343666,0x32646625202c3537,0x3933646625202c34,0x722e6c756d090a3b\n"
".quad 0x2509203436662e70,0x6625202c36376466,0x646625202c343264,0x646461090a3b3933\n"
".quad 0x203436662e6d722e,0x202c373764662509,0x25202c3334646625,0x61090a3b35376466\n"
".quad 0x36662e70722e6464,0x3837646625092034,0x2c3634646625202c,0x0a3b363764662520\n"
".quad 0x3436662e766f6d09,0x2c33396466250920,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x652e746573090a30,0x36662e3233752e71,0x2c38327225092034\n"
".quad 0x202c383764662520,0x090a3b3339646625,0x203233732e67656e,0x25202c3932722509\n"
".quad 0x6f6d090a3b383272,0x2509203436662e76,0x6430202c34396466,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573,0x09203436662e3233\n"
".quad 0x6625202c30337225,0x646625202c373764,0x67656e090a3b3439,0x722509203233732e\n"
".quad 0x30337225202c3133,0x622e646e61090a3b,0x3233722509203233,0x202c39327225202c\n"
".quad 0x6d090a3b31337225,0x09203233752e766f,0x3b30202c33337225,0x652e70746573090a\n"
".quad 0x2509203233732e71,0x337225202c303270,0x3b33337225202c32,0x203032702540090a\n"
".quad 0x744c240920617262,0x343737315f37315f,0x6f6c2e090a3b3031,0x0936323209330963\n"
".quad 0x662e766f6d090a30,0x3964662509203436,0x3737646625202c35,0x662e766f6d090a3b\n"
".quad 0x3964662509203436,0x3837646625202c36,0x752e617262090a3b,0x57444c240920696e\n"
".quad 0x315a5f5f69646e65,0x736f705f76696432,0x4564496576697469,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x525f32534b52455f,0x3539315f5f31534b,0x744c240a3b34315f\n"
".quad 0x343737315f37315f,0x6f6c2e090a3a3031,0x0931333209330963,0x662e766f6d090a30\n"
".quad 0x3964662509203436,0x3030306430202c37,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x746573090a30202f,0x3436662e746c2e70,0x202c313270250920,0x25202c3837646625\n"
".quad 0x40090a3b37396466,0x7262203132702521,0x315f744c24092061,0x3433323732315f37\n"
".quad 0x09636f6c2e090a3b,0x0a30093233320933,0x2e70722e76696409,0x6466250920343666\n"
".quad 0x37646625202c3639,0x3936646625202c38,0x662e766f6d090a3b,0x3964662509203436\n"
".quad 0x6666666430202c35,0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x696432315a5f5f69,0x697469736f705f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x34315f3539315f5f,0x37315f744c240a3b,0x3a3433323732315f,0x3309636f6c2e090a\n"
".quad 0x090a300933333209,0x203436662e766f6d,0x202c383964662509,0x3030303030306430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a,0x2509203436662e74\n"
".quad 0x646625202c323270,0x39646625202c3737,0x70252140090a3b38,0x0920617262203232\n"
".quad 0x315f37315f744c24,0x090a3b3039343732,0x203436662e766f6d,0x202c363964662509\n"
".quad 0x3030306666376430,0x3030303030303030,0x69202f2f093b3030,0x2e766f6d090a666e\n"
".quad 0x6466250920343666,0x66666430202c3539,0x3030303030303066,0x093b303030303030\n"
".quad 0x0a666e692d202f2f,0x696e752e61726209,0x6e6557444c240920,0x6432315a5f5f6964\n"
".quad 0x7469736f705f7669,0x3231456449657669,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x534b525f32534b52,0x315f3539315f5f31,0x315f744c240a3b34,0x3039343732315f37\n"
".quad 0x09636f6c2e090a3a,0x0a30093633320933,0x2e6d722e76696409,0x6466250920343666\n"
".quad 0x37646625202c3539,0x3936646625202c37,0x662e766f6d090a3b,0x3964662509203436\n"
".quad 0x6666376430202c36,0x3030303030303030,0x2f093b3030303030,0x4c240a666e69202f\n"
".quad 0x5f5f69646e655744,0x705f76696432315a,0x496576697469736f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f,0x090a3a34315f3539\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093930,0x2509203436662e76,0x6625202c35386466\n"
".quad 0x6f6d090a3b353964,0x2509203436662e76,0x6625202c36386466,0x6f6d090a3b363964\n"
".quad 0x2509203233732e76,0x0a3b30202c313272,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x746e695f5f5f6964,0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b33315f3539315f\n"
".quad 0x5f37315f744c240a,0x0a3a323237363231,0x093309636f6c2e09,0x6d090a3009313133\n"
".quad 0x09203436662e766f,0x30202c3638646625,0x3030303866663764,0x3030303030303030\n"
".quad 0x616e202f2f093b30,0x662e766f6d090a6e,0x3864662509203436,0x6666376430202c35\n"
".quad 0x3030303030303038,0x2f093b3030303030,0x6d090a6e616e202f,0x09203233732e766f\n"
".quad 0x3b30202c31327225,0x6e752e617262090a,0x6557444c24092069,0x6e695f5f5f69646e\n"
".quad 0x6e5f6c616e726574,0x656e72656b5f6e61,0x33315f3539315f6c,0x37315f744c240a3b\n"
".quad 0x3a3831343432315f,0x3309636f6c2e090a,0x090a300933313309,0x203436662e766f6d\n"
".quad 0x202c393964662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x6c2e70746573090a,0x2509203436662e74,0x646625202c333270,0x39646625202c3936\n"
".quad 0x70252140090a3b39,0x0920617262203332,0x315f37315f744c24,0x090a3b3437323238\n"
".quad 0x31093309636f6c2e,0x756d090a30093239,0x3436662e70722e6c,0x2c36376466250920\n"
".quad 0x202c343264662520,0x090a3b3933646625,0x662e70722e646461,0x3764662509203436\n"
".quad 0x3634646625202c38,0x3b3637646625202c,0x36662e766f6d090a,0x3031646625092034\n"
".quad 0x3837646625202c30,0x09636f6c2e090a3b,0x0a30093339310933,0x2e6d722e6c756d09\n"
".quad 0x6466250920343666,0x32646625202c3537,0x3933646625202c34,0x722e646461090a3b\n"
".quad 0x2509203436662e6d,0x6625202c37376466,0x646625202c333464,0x766f6d090a3b3537\n"
".quad 0x662509203436662e,0x6625202c31303164,0x7262090a3b373764,0x240920696e752e61\n"
".quad 0x38315f37315f744c,0x4c240a3b38313032,0x3238315f37315f74,0x6c2e090a3a343732\n"
".quad 0x363931093309636f,0x2e6c756d090a3009,0x09203436662e6d72,0x25202c3537646625\n"
".quad 0x6625202c34326466,0x6461090a3b393364,0x3436662e6d722e64,0x2c37376466250920\n"
".quad 0x202c333464662520,0x090a3b3537646625,0x203436662e766f6d,0x2c30303164662509\n"
".quad 0x0a3b373764662520,0x093309636f6c2e09,0x6d090a3009373931,0x36662e70722e6c75\n"
".quad 0x3637646625092034,0x2c3432646625202c,0x0a3b393364662520,0x2e70722e64646109\n"
".quad 0x6466250920343666,0x34646625202c3837,0x3637646625202c36,0x662e766f6d090a3b\n"
".quad 0x3164662509203436,0x37646625202c3130,0x315f744c240a3b38,0x3831303238315f37\n"
".quad 0x662e766f6d090a3a,0x3164662509203436,0x30306430202c3230,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074,0x2c34327025092034\n"
".quad 0x202c383764662520,0x0a3b323031646625,0x2034327025214009,0x744c240920617262\n"
".quad 0x373238315f37315f,0x6f6c2e090a3b3638,0x0931303209330963,0x662e766f6d090a30\n"
".quad 0x3164662509203436,0x37646625202c3330,0x636f6c2e090a3b30,0x3009323032093309\n"
".quad 0x36662e766f6d090a,0x3031646625092034,0x3936646625202c34,0x752e617262090a3b\n"
".quad 0x5f744c240920696e,0x34303338315f3731,0x315f744c240a3b32,0x3638373238315f37\n"
".quad 0x662e766f6d090a3a,0x3164662509203436,0x30306430202c3530,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074,0x2c35327025092034\n"
".quad 0x202c373764662520,0x0a3b353031646625,0x2035327025214009,0x744c240920617262\n"
".quad 0x323338315f37315f,0x252140090a3b3839,0x2061726220333270,0x5f37315f744c2409\n"
".quad 0x0a3b303138333831,0x093309636f6c2e09,0x6d090a3009363032,0x09203436662e766f\n"
".quad 0x202c333031646625,0x090a3b3936646625,0x32093309636f6c2e,0x6f6d090a30093730\n"
".quad 0x2509203436662e76,0x25202c3430316466,0x62090a3b39366466,0x0920696e752e6172\n"
".quad 0x315f37315f744c24,0x240a3b3234303338,0x38315f37315f744c,0x2e090a3a30313833\n"
".quad 0x3132093309636f6c,0x766f6d090a300930,0x662509203436662e,0x6625202c33303164\n"
".quad 0x6c2e090a3b303764,0x313132093309636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x646625202c343031,0x617262090a3b3037,0x4c240920696e752e,0x3338315f37315f74\n"
".quad 0x744c240a3b323430,0x323338315f37315f,0x6f6c2e090a3a3839,0x0935313209330963\n"
".quad 0x662e766f6d090a30,0x3164662509203436,0x36646625202c3330,0x636f6c2e090a3b39\n"
".quad 0x3009363132093309,0x36662e766f6d090a,0x3031646625092034,0x3037646625202c34\n"
".quad 0x37315f744c240a3b,0x3a3234303338315f,0x5f37315f744c240a,0x0a3a303335323831\n"
".quad 0x093309636f6c2e09,0x64090a3009333133,0x36662e6d722e7669,0x3538646625092034\n"
".quad 0x303031646625202c,0x333031646625202c,0x722e766964090a3b,0x2509203436662e70\n"
".quad 0x6625202c36386466,0x6625202c31303164,0x6d090a3b34303164,0x09203233732e766f\n"
".quad 0x3b30202c31327225,0x646e6557444c240a,0x65746e695f5f5f69,0x6e616e5f6c616e72\n"
".quad 0x5f6c656e72656b5f,0x0a3a33315f353931,0x093409636f6c2e09,0x73090a3009323332\n"
".quad 0x2e6c61636f6c2e74,0x5f5f5b0920343666,0x635f5f5f61647563,0x61636f6c5f616475\n"
".quad 0x37365f7261765f6c,0x6f6e5f375f323737,0x5f74736e6f635f6e,0x32335f3174726170\n"
".quad 0x2c5d302b38323134,0x0a3b353864662520,0x61636f6c2e747309,0x5b09203436662e6c\n"
".quad 0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163,0x5f375f3237373736\n"
".quad 0x736e6f635f6e6f6e,0x5f31747261705f74,0x382b383231343233,0x3638646625202c5d\n"
".quad 0x09636f6c2e090a3b,0x0a30093437310933,0x3436662e67656e09,0x3630316466250920\n"
".quad 0x3b3638646625202c,0x6d722e646461090a,0x662509203436662e,0x6625202c37303164\n"
".quad 0x646625202c393364,0x616d090a3b363031,0x2509203436662e78,0x25202c3830316466\n"
".quad 0x646625202c316466,0x6c2e090a3b373031,0x353731093309636f,0x2e67656e090a3009\n"
".quad 0x6466250920343666,0x646625202c393031,0x646461090a3b3538,0x203436662e70722e\n"
".quad 0x2c30313164662509,0x202c393364662520,0x0a3b393031646625,0x3436662e6e696d09\n"
".quad 0x3131316466250920,0x202c32646625202c,0x0a3b303131646625,0x093309636f6c2e09\n"
".quad 0x73090a3009363731,0x662e656c2e707465,0x3632702509203436,0x383031646625202c\n"
".quad 0x313131646625202c,0x3270252140090a3b,0x2409206172622036,0x34315f37315f744c\n"
".quad 0x2e090a3b36343530,0x3731093309636f6c,0x766f6d090a300937,0x662509203436662e\n"
".quad 0x6625202c32313164,0x6d090a3b38303164,0x09203436662e766f,0x202c333131646625\n"
".quad 0x0a3b313131646625,0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964\n"
".quad 0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b31315f3539315f,0x5f37315f744c240a\n"
".quad 0x0a3a363435303431,0x093309636f6c2e09,0x6d090a3009393731,0x09203436662e766f\n"
".quad 0x202c333131646625,0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030\n"
".quad 0x2e766f6d090a6e61,0x6466250920343666,0x376430202c323131,0x3030303030386666\n"
".quad 0x3b30303030303030,0x0a6e616e202f2f09,0x69646e6557444c24,0x7265746e695f5f5f\n"
".quad 0x5f6e616e5f6c616e,0x315f6c656e72656b,0x090a3a31315f3539,0x32093409636f6c2e\n"
".quad 0x6f6d090a30093333,0x2509203436662e76,0x25202c3431316466,0x090a3b3231316466\n"
".quad 0x203436662e766f6d,0x2c35313164662509,0x3b34313164662520,0x636f6c2e7473090a\n"
".quad 0x09203436662e6c61,0x5f616475635f5f5b,0x6c5f616475635f5f,0x7261765f6c61636f\n"
".quad 0x375f32373737365f,0x6e6f635f6e6f6e5f,0x31747261705f7473,0x2b3832313432335f\n"
".quad 0x31646625202c5d30,0x766f6d090a3b3531,0x662509203436662e,0x6625202c36313164\n"
".quad 0x6d090a3b33313164,0x09203436662e766f,0x202c373131646625,0x0a3b363131646625\n"
".quad 0x61636f6c2e747309,0x5b09203436662e6c,0x5f5f616475635f5f,0x6f6c5f616475635f\n"
".quad 0x5f7261765f6c6163,0x5f375f3237373736,0x736e6f635f6e6f6e,0x5f31747261705f74\n"
".quad 0x382b383231343233,0x3131646625202c5d,0x2e766f6d090a3b37,0x3372250920323373\n"
".quad 0x73090a3b30202c34,0x732e656e2e707465,0x3732702509203233,0x202c31327225202c\n"
".quad 0x40090a3b34337225,0x7262203732702521,0x315f744c24092061,0x3236313838315f37\n"
".quad 0x09636f6c2e090a3b,0x0a30093139320933,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x32646625202c3637,0x3933646625202c34,0x722e646461090a3b,0x2509203436662e70\n"
".quad 0x6625202c38376466,0x646625202c363464,0x766f6d090a3b3637,0x662509203436662e\n"
".quad 0x6430202c38313164,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x2e746c2e70746573,0x3270250920343666,0x3837646625202c38,0x383131646625202c\n"
".quad 0x3270252140090a3b,0x2409206172622038,0x35315f37315f744c,0x2e090a3b34333832\n"
".quad 0x3932093309636f6c,0x766964090a300932,0x203436662e6d722e,0x2c39313164662509\n"
".quad 0x202c383764662520,0x090a3b3037646625,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644932747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x3b395f3539315f5f,0x5f37315f744c240a\n"
".quad 0x0a3a343338323531,0x093309636f6c2e09,0x6d090a3009343932,0x36662e6d722e6c75\n"
".quad 0x3231646625092034,0x3432646625202c30,0x3b3933646625202c,0x6d722e646461090a\n"
".quad 0x662509203436662e,0x6625202c31323164,0x646625202c333464,0x6964090a3b303231\n"
".quad 0x3436662e6d722e76,0x3931316466250920,0x313231646625202c,0x3b3936646625202c\n"
".quad 0x646e6557444c240a,0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644932747261\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x34535f32534b5245,0x3a395f3539315f5f\n"
".quad 0x3409636f6c2e090a,0x090a300936333209,0x6c61636f6c2e7473,0x5f5b09203436662e\n"
".quad 0x5f5f5f616475635f,0x636f6c5f61647563,0x365f7261765f6c61,0x5f34315f32373737\n"
".quad 0x736e6f635f6e6f6e,0x5f32747261705f74,0x302b323131343631,0x3131646625202c5d\n"
".quad 0x2e766f6d090a3b39,0x6466250920343666,0x376430202c323231,0x3030303030306666\n"
".quad 0x3b30303030303030,0x0a666e69202f2f09,0x61636f6c2e747309,0x5b09203436662e6c\n"
".quad 0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163,0x34315f3237373736\n"
".quad 0x6e6f635f6e6f6e5f,0x32747261705f7473,0x2b3231313436315f,0x31646625202c5d38\n"
".quad 0x6f6c2e090a3b3232,0x0934373109330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x66666430202c3332,0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f\n"
".quad 0x2e6d722e64646109,0x6466250920343666,0x646625202c343231,0x31646625202c3933\n"
".quad 0x78616d090a3b3332,0x662509203436662e,0x6625202c35323164,0x31646625202c3164\n"
".quad 0x6f6c2e090a3b3432,0x0935373109330963,0x662e67656e090a30,0x3164662509203436\n"
".quad 0x31646625202c3632,0x646461090a3b3931,0x203436662e70722e,0x2c37323164662509\n"
".quad 0x202c393364662520,0x0a3b363231646625,0x3436662e6e696d09,0x3832316466250920\n"
".quad 0x202c32646625202c,0x0a3b373231646625,0x093309636f6c2e09,0x73090a3009363731\n"
".quad 0x662e656c2e707465,0x3932702509203436,0x353231646625202c,0x383231646625202c\n"
".quad 0x3270252140090a3b,0x2409206172622039,0x35315f37315f744c,0x2e090a3b30393033\n"
".quad 0x3731093309636f6c,0x766f6d090a300937,0x662509203436662e,0x6625202c39323164\n"
".quad 0x6d090a3b35323164,0x09203436662e766f,0x202c303331646625,0x0a3b383231646625\n"
".quad 0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964,0x616e5f6c616e7265\n"
".quad 0x6c656e72656b5f6e,0x0a3b375f3539315f,0x315f37315f744c24,0x090a3a3039303335\n"
".quad 0x31093309636f6c2e,0x6f6d090a30093937,0x2509203436662e76,0x30202c3033316466\n"
".quad 0x3030303866663764,0x3030303030303030,0x616e202f2f093b30,0x662e766f6d090a6e\n"
".quad 0x3164662509203436,0x66376430202c3932,0x3030303030303866,0x093b303030303030\n"
".quad 0x240a6e616e202f2f,0x5f69646e6557444c,0x6e7265746e695f5f,0x6b5f6e616e5f6c61\n"
".quad 0x39315f6c656e7265,0x6c2e090a3a375f35,0x373332093409636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x31646625202c3036,0x2e7473090a3b3932,0x36662e6c61636f6c\n"
".quad 0x75635f5f5b092034,0x6475635f5f5f6164,0x5f6c61636f6c5f61,0x373737365f726176\n"
".quad 0x6e6f6e5f34315f32,0x705f74736e6f635f,0x3436315f32747261,0x202c5d302b323131\n"
".quad 0x090a3b3036646625,0x203436662e766f6d,0x202c313664662509,0x0a3b303331646625\n"
".quad 0x61636f6c2e747309,0x5b09203436662e6c,0x5f5f616475635f5f,0x6f6c5f616475635f\n"
".quad 0x5f7261765f6c6163,0x34315f3237373736,0x6e6f635f6e6f6e5f,0x32747261705f7473\n"
".quad 0x2b3231313436315f,0x36646625202c5d38,0x315f744c240a3b31,0x3236313838315f37\n"
".quad 0x09636f6c2e090a3a,0x0a30093931310934,0x656e2e7074657309,0x2509203436662e75\n"
".quad 0x646625202c303370,0x3b33646625202c33,0x303370252140090a,0x4c24092061726220\n"
".quad 0x3239315f37315f74,0x6c2e090a3b303737,0x093838093309636f,0x662e766f6d090a30\n"
".quad 0x3164662509203436,0x30306430202c3133,0x3030303030303030,0x093b303030303030\n"
".quad 0x7262090a30202f2f,0x240920696e752e61,0x5f69646e6557444c,0x6874646977355a5f\n"
".quad 0x6932315f54456449,0x5f6c61767265746e,0x455f305349757067,0x0a3b355f3539315f\n"
".quad 0x315f37315f744c24,0x090a3a3037373239,0x39093309636f6c2e,0x67656e090a300930\n"
".quad 0x662509203436662e,0x6625202c32333164,0x646461090a3b3164,0x203436662e70722e\n"
".quad 0x2c31333164662509,0x25202c3264662520,0x240a3b3233316466,0x5f69646e6557444c\n"
".quad 0x6874646977355a5f,0x6932315f54456449,0x5f6c61767265746e,0x455f305349757067\n"
".quad 0x0a3a355f3539315f,0x093409636f6c2e09,0x61090a3009393131,0x09203436662e6464\n"
".quad 0x202c333331646625,0x202c363131646625,0x0a3b343131646625,0x71652e7074657309\n"
".quad 0x702509203436662e,0x31646625202c3133,0x31646625202c3333,0x252140090a3b3333\n"
".quad 0x2061726220313370,0x5f37315f744c2409,0x0a3b383930363931,0x093409636f6c2e09\n"
".quad 0x73090a3009303231,0x2e75656e2e707465,0x3370250920343666,0x3331646625202c32\n"
".quad 0x3331646625202c33,0x70252140090a3b33,0x0920617262203233,0x315f37315f744c24\n"
".quad 0x090a3b3238323339,0x38093309636f6c2e,0x766f6d090a300938,0x662509203436662e\n"
".quad 0x6430202c34333164,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x646977355a5f5f69,0x315f544564496874\n"
".quad 0x61767265746e6932,0x3053497570675f6c,0x335f3539315f455f,0x37315f744c240a3b\n"
".quad 0x3a3238323339315f,0x3309636f6c2e090a,0x6e090a3009303909,0x09203436662e6765\n"
".quad 0x202c353331646625,0x0a3b343131646625,0x2e70722e64646109,0x6466250920343666\n"
".quad 0x646625202c343331,0x646625202c363131,0x444c240a3b353331,0x5a5f5f69646e6557\n"
".quad 0x6449687464697735,0x746e6932315f5445,0x70675f6c61767265,0x315f455f30534975\n"
".quad 0x2e090a3a335f3539,0x3231093409636f6c,0x766f6d090a300930,0x662509203436662e\n"
".quad 0x6430202c36333164,0x3431656166656633,0x3030303030303038,0x392e30202f2f093b\n"
".quad 0x662e6c756d090a39,0x3164662509203436,0x31646625202c3733,0x31646625202c3133\n"
".quad 0x746573090a3b3633,0x3436662e74672e70,0x202c333370250920,0x202c343331646625\n"
".quad 0x0a3b373331646625,0x2033337025214009,0x744c240920617262,0x303639315f37315f\n"
".quad 0x617262090a3b3839,0x4c240920696e752e,0x3730315f37315f74,0x744c240a3b303130\n"
".quad 0x303639315f37315f,0x5f744c240a3a3839,0x32353730315f3731,0x2e646461090a3a32\n"
".quad 0x6466250920343666,0x646625202c383331,0x36646625202c3136,0x70746573090a3b30\n"
".quad 0x203436662e71652e,0x25202c3433702509,0x25202c3833316466,0x090a3b3833316466\n"
".quad 0x6220343370252140,0x5f744c2409206172,0x31363639315f3731,0x2e67656e090a3b30\n"
".quad 0x6466250920343666,0x646625202c393331,0x646461090a3b3036,0x203436662e70722e\n"
".quad 0x2c30343164662509,0x202c313664662520,0x0a3b393331646625,0x3436662e766f6d09\n"
".quad 0x3134316466250920,0x666566336430202c,0x3030303834316561,0x2f2f093b30303030\n"
".quad 0x6d090a39392e3020,0x09203436662e6c75,0x202c323431646625,0x202c313331646625\n"
".quad 0x0a3b313431646625,0x74672e7074657309,0x702509203436662e,0x31646625202c3533\n"
".quad 0x31646625202c3034,0x252140090a3b3234,0x2061726220353370,0x5f37315f744c2409\n"
".quad 0x0a3b303136363931,0x315f37315f744c24,0x090a3a3031303730,0x203233732e766f6d\n"
".quad 0x31202c3533722509,0x752e617262090a3b,0x5f744c240920696e,0x31333930315f3731\n"
".quad 0x315f744c240a3b34,0x3031363639315f37,0x37315f744c240a3a,0x3a3636323730315f\n"
".quad 0x33732e766f6d090a,0x2c35337225092032,0x5f744c240a3b3020,0x31333930315f3731\n"
".quad 0x636f6c2e090a3a34,0x3009313432093409,0x33752e766f6d090a,0x2c36337225092032\n"
".quad 0x746573090a3b3020,0x3233732e71652e70,0x202c363370250920,0x7225202c35337225\n"
".quad 0x702540090a3b3633,0x0920617262203633,0x315f37315f744c24,0x090a3b3630333439\n"
".quad 0x32093409636f6c2e,0x6f6d090a30093434,0x2509203436662e76,0x25202c3531316466\n"
".quad 0x7473090a3b316466,0x662e6c61636f6c2e,0x635f5f5b09203436,0x75635f5f5f616475\n"
".quad 0x6c61636f6c5f6164,0x3737365f7261765f,0x6e6f6e5f375f3237,0x705f74736e6f635f\n"
".quad 0x3432335f31747261,0x202c5d302b383231,0x0a3b353131646625,0x3436662e766f6d09\n"
".quad 0x3731316466250920,0x3b3933646625202c,0x636f6c2e7473090a,0x09203436662e6c61\n"
".quad 0x5f616475635f5f5b,0x6c5f616475635f5f,0x7261765f6c61636f,0x375f32373737365f\n"
".quad 0x6e6f635f6e6f6e5f,0x31747261705f7473,0x2b3832313432335f,0x31646625202c5d38\n"
".quad 0x6f6c2e090a3b3731,0x0935343209340963,0x662e766f6d090a30,0x3664662509203436\n"
".quad 0x3933646625202c30,0x6f6c2e7473090a3b,0x203436662e6c6163,0x616475635f5f5b09\n"
".quad 0x5f616475635f5f5f,0x61765f6c61636f6c,0x5f32373737365f72,0x635f6e6f6e5f3431\n"
".quad 0x7261705f74736e6f,0x31313436315f3274,0x6625202c5d302b32,0x6f6d090a3b303664\n"
".quad 0x2509203436662e76,0x6625202c31366466,0x2e7473090a3b3264,0x36662e6c61636f6c\n"
".quad 0x75635f5f5b092034,0x6475635f5f5f6164,0x5f6c61636f6c5f61,0x373737365f726176\n"
".quad 0x6e6f6e5f34315f32,0x705f74736e6f635f,0x3436315f32747261,0x202c5d382b323131\n"
".quad 0x090a3b3136646625,0x203233732e766f6d,0x30202c3733722509,0x732e766f6d090a3b\n"
".quad 0x3833722509203233,0x6573090a3b31202c,0x33732e656e2e7074,0x2c37327025092032\n"
".quad 0x25202c3833722520,0x744c240a3b373372,0x333439315f37315f,0x6f6c2e090a3a3630\n"
".quad 0x0939343209340963,0x3270252140090a30,0x2409206172622037,0x39315f37315f744c\n"
".quad 0x61090a3b32323137,0x09203436662e6464,0x202c333431646625,0x25202c3136646625\n"
".quad 0x73090a3b30366466,0x662e71652e707465,0x3733702509203436,0x333431646625202c\n"
".quad 0x333431646625202c,0x3370252140090a3b,0x2409206172622037,0x39315f37315f744c\n"
".quad 0x2e090a3b32323137,0x3532093409636f6c,0x766f6d090a300930,0x722509203436732e\n"
".quad 0x647225202c333164,0x702e7473090a3b32,0x3436752e6d617261,0x6475635f5f5b0920\n"
".quad 0x5f31616d72617061,0x7477656e39315a5f,0x7265746e695f6e6f,0x496365725f6c6176\n"
".quad 0x3633353536694c64,0x4545383231694c45,0x626f6c6732315276,0x6b636174735f6c61\n"
".quad 0x7265746e69323149,0x497570675f6c6176,0x455f315458455f54,0x4b5245455f305458\n"
".quad 0x25202c5d695f3353,0x63090a3b33316472,0x61636f6c2e617476,0x2509203436752e6c\n"
".quad 0x5f5f202c34316472,0x635f5f5f61647563,0x61636f6c5f616475,0x37365f7261765f6c\n"
".quad 0x6e5f34315f323737,0x74736e6f635f6e6f,0x315f32747261705f,0x090a3b3231313436\n"
".quad 0x6d617261702e7473,0x5f5b09203436752e,0x726170616475635f,0x39315a5f5f32616d\n"
".quad 0x695f6e6f7477656e,0x5f6c61767265746e,0x36694c6449636572,0x31694c4536333535\n"
".quad 0x3231527645453832,0x735f6c61626f6c67,0x693231496b636174,0x5f6c61767265746e\n"
".quad 0x58455f5449757067,0x5f305458455f3154,0x695f33534b524545,0x3431647225202c5d\n"
".quad 0x732e766f6d090a3b,0x3933722509203233,0x090a3b327225202c,0x6d617261702e7473\n"
".quad 0x5f5b09203233752e,0x726170616475635f,0x39315a5f5f33616d,0x695f6e6f7477656e\n"
".quad 0x5f6c61767265746e,0x36694c6449636572,0x31694c4536333535,0x3231527645453832\n"
".quad 0x735f6c61626f6c67,0x693231496b636174,0x5f6c61767265746e,0x58455f5449757067\n"
".quad 0x5f305458455f3154,0x695f33534b524545,0x3b39337225202c5d,0x752e6c6c6163090a\n"
".quad 0x6e39315a5f20696e,0x6e695f6e6f747765,0x725f6c6176726574,0x3536694c64496365\n"
".quad 0x3231694c45363335,0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361\n"
".quad 0x675f6c6176726574,0x5458455f54497570,0x455f305458455f31,0x2c695f33534b5245\n"
".quad 0x616475635f5f2820,0x5f5f31616d726170,0x6f7477656e39315a,0x767265746e695f6e\n"
".quad 0x64496365725f6c61,0x453633353536694c,0x764545383231694c,0x61626f6c67323152\n"
".quad 0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61,0x58455f315458455f\n"
".quad 0x534b5245455f3054,0x635f5f202c695f33,0x616d726170616475,0x656e39315a5f5f32\n"
".quad 0x746e695f6e6f7477,0x65725f6c61767265,0x353536694c644963,0x383231694c453633\n"
".quad 0x6c67323152764545,0x6174735f6c61626f,0x746e693231496b63,0x70675f6c61767265\n"
".quad 0x315458455f544975,0x45455f305458455f,0x202c695f33534b52,0x6170616475635f5f\n"
".quad 0x315a5f5f33616d72,0x5f6e6f7477656e39,0x6c61767265746e69,0x694c64496365725f\n"
".quad 0x694c453633353536,0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f\n"
".quad 0x2e646c090a3b2969,0x36662e6c61636f6c,0x3131646625092034,0x75635f5f5b202c37\n"
".quad 0x6475635f5f5f6164,0x5f6c61636f6c5f61,0x373737365f726176,0x5f6e6f6e5f375f32\n"
".quad 0x61705f74736e6f63,0x313432335f317472,0x090a3b5d382b3832,0x6c61636f6c2e646c\n"
".quad 0x662509203436662e,0x5f5b202c35313164,0x5f5f5f616475635f,0x636f6c5f61647563\n"
".quad 0x365f7261765f6c61,0x6e5f375f32373737,0x74736e6f635f6e6f,0x335f31747261705f\n"
".quad 0x5d302b3832313432,0x37315f744c240a3b,0x3a3232313739315f,0x5f37315f744c240a\n"
".quad 0x0a3a363238393031,0x093409636f6c2e09,0x61090a3009393432,0x09203436662e6464\n"
".quad 0x202c343431646625,0x202c373131646625,0x0a3b353131646625,0x71652e7074657309\n"
".quad 0x702509203436662e,0x31646625202c3833,0x31646625202c3434,0x252140090a3b3434\n"
".quad 0x2061726220383370,0x5f383942424c2409,0x7477656e39315a5f,0x7265746e695f6e6f\n"
".quad 0x496365725f6c6176,0x3633353536694c64,0x4545383231694c45,0x626f6c6732315276\n"
".quad 0x6b636174735f6c61,0x7265746e69323149,0x497570675f6c6176,0x455f315458455f54\n"
".quad 0x4b5245455f305458,0x2e090a3b695f3353,0x3532093409636f6c,0x766f6d090a300933\n"
".quad 0x722509203436732e,0x647225202c353164,0x702e7473090a3b32,0x3436752e6d617261\n"
".quad 0x6475635f5f5b0920,0x5f31616d72617061,0x7477656e39315a5f,0x7265746e695f6e6f\n"
".quad 0x496365725f6c6176,0x3633353536694c64,0x4545383231694c45,0x626f6c6732315276\n"
".quad 0x6b636174735f6c61,0x7265746e69323149,0x497570675f6c6176,0x455f315458455f54\n"
".quad 0x4b5245455f305458,0x25202c5d695f3353,0x63090a3b35316472,0x61636f6c2e617476\n"
".quad 0x2509203436752e6c,0x5f5f202c36316472,0x635f5f5f61647563,0x61636f6c5f616475\n"
".quad 0x37365f7261765f6c,0x6f6e5f375f323737,0x5f74736e6f635f6e,0x32335f3174726170\n"
".quad 0x73090a3b38323134,0x2e6d617261702e74,0x5f5f5b0920343675,0x6d72617061647563\n"
".quad 0x6e39315a5f5f3261,0x6e695f6e6f747765,0x725f6c6176726574,0x3536694c64496365\n"
".quad 0x3231694c45363335,0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361\n"
".quad 0x675f6c6176726574,0x5458455f54497570,0x455f305458455f31,0x5d695f33534b5245\n"
".quad 0x3b3631647225202c,0x33732e766f6d090a,0x2c30347225092032,0x73090a3b32722520\n"
".quad 0x2e6d617261702e74,0x5f5f5b0920323375,0x6d72617061647563,0x6e39315a5f5f3361\n"
".quad 0x6e695f6e6f747765,0x725f6c6176726574,0x3536694c64496365,0x3231694c45363335\n"
".quad 0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574\n"
".quad 0x5458455f54497570,0x455f305458455f31,0x5d695f33534b5245,0x0a3b30347225202c\n"
".quad 0x6e752e6c6c616309,0x656e39315a5f2069,0x746e695f6e6f7477,0x65725f6c61767265\n"
".quad 0x353536694c644963,0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f\n"
".quad 0x746e693231496b63,0x70675f6c61767265,0x315458455f544975,0x45455f305458455f\n"
".quad 0x202c695f33534b52,0x70616475635f5f28,0x5a5f5f31616d7261,0x6e6f7477656e3931\n"
".quad 0x61767265746e695f,0x4c64496365725f6c,0x4c45363335353669,0x5276454538323169\n"
".quad 0x6c61626f6c673231,0x31496b636174735f,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x5458455f31545845,0x33534b5245455f30,0x75635f5f202c695f,0x32616d7261706164\n"
".quad 0x77656e39315a5f5f,0x65746e695f6e6f74,0x6365725f6c617672,0x33353536694c6449\n"
".quad 0x45383231694c4536,0x6f6c673231527645,0x636174735f6c6162,0x65746e693231496b\n"
".quad 0x7570675f6c617672,0x5f315458455f5449,0x5245455f30545845,0x5f202c695f33534b\n"
".quad 0x726170616475635f,0x39315a5f5f33616d,0x695f6e6f7477656e,0x5f6c61767265746e\n"
".quad 0x36694c6449636572,0x31694c4536333535,0x3231527645453832,0x735f6c61626f6c67\n"
".quad 0x693231496b636174,0x5f6c61767265746e,0x58455f5449757067,0x5f305458455f3154\n"
".quad 0x695f33534b524545,0x315f744c240a3b29,0x3831383439315f37,0x383942424c240a3a\n"
".quad 0x77656e39315a5f5f,0x65746e695f6e6f74,0x6365725f6c617672,0x33353536694c6449\n"
".quad 0x45383231694c4536,0x6f6c673231527645,0x636174735f6c6162,0x65746e693231496b\n"
".quad 0x7570675f6c617672,0x5f315458455f5449,0x5245455f30545845,0x090a3a695f33534b\n"
".quad 0x32093409636f6c2e,0x6572090a30093635,0x6557444c240a3b74,0x6e39315a5f5f646e\n"
".quad 0x6e695f6e6f747765,0x725f6c6176726574,0x3536694c64496365,0x3231694c45363335\n"
".quad 0x6732315276454538,0x74735f6c61626f6c,0x6e693231496b6361,0x675f6c6176726574\n"
".quad 0x5458455f54497570,0x455f305458455f31,0x3a695f33534b5245,0x5f202f2f207d090a\n"
".quad 0x6f7477656e39315a,0x767265746e695f6e,0x64496365725f6c61,0x453633353536694c\n"
".quad 0x764545383231694c,0x61626f6c67323152,0x496b636174735f6c,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x58455f315458455f,0x534b5245455f3054,0x652e090a0a695f33\n"
".quad 0x325a5f207972746e,0x6e695f7473657430,0x6e5f6c6176726574,0x4564496e6f747765\n"
".quad 0x65746e6932315076,0x7570675f6c617672,0x32536950455f5449,0x2e09090a2820695f\n"
".quad 0x752e206d61726170,0x6475635f5f203436,0x5a5f5f6d72617061,0x695f747365743032\n"
".quad 0x5f6c61767265746e,0x64496e6f7477656e,0x746e693231507645,0x70675f6c61767265\n"
".quad 0x536950455f544975,0x666675625f695f32,0x702e09090a2c7265,0x36752e206d617261\n"
".quad 0x616475635f5f2034,0x325a5f5f6d726170,0x6e695f7473657430,0x6e5f6c6176726574\n"
".quad 0x4564496e6f747765,0x65746e6932315076,0x7570675f6c617672,0x32536950455f5449\n"
".quad 0x757365726e5f695f,0x2e09090a2c73746c,0x612e206d61726170,0x2e2038206e67696c\n"
".quad 0x6475635f5f203862,0x5a5f5f6d72617061,0x695f747365743032,0x5f6c61767265746e\n"
".quad 0x64496e6f7477656e,0x746e693231507645,0x70675f6c61767265,0x536950455f544975\n"
".quad 0x61765f5f5f695f32,0x696d617261705f6c,0x09090a2c5d36315b,0x2e206d617261702e\n"
".quad 0x75635f5f20323373,0x5f5f6d7261706164,0x5f7473657430325a,0x6c61767265746e69\n"
".quad 0x496e6f7477656e5f,0x6e69323150764564,0x675f6c6176726574,0x6950455f54497570\n"
".quad 0x706d695f695f3253,0x7461746e656d656c,0x696f68635f6e6f69,0x090a7b090a296563\n"
".quad 0x33752e206765722e,0x3936313c72252032,0x6765722e090a3b3e,0x7225203436752e20\n"
".quad 0x090a3b3e31383c64,0x36662e206765722e,0x32343c6466252034,0x65722e090a3b3e38\n"
".quad 0x20646572702e2067,0x3b3e3433313c7025,0x6c61636f6c2e090a,0x206e67696c612e20\n"
".quad 0x5f5f2038622e2038,0x635f5f5f61647563,0x36315f695f616475,0x5d36315b34383134\n"
".quad 0x61636f6c2e090a3b,0x6e67696c612e206c,0x5f2038622e203820,0x5f5f5f616475635f\n"
".quad 0x636f6c5f61647563,0x365f7261765f6c61,0x5f34345f34373837,0x736e6f635f6e6f6e\n"
".quad 0x746c757365725f74,0x5b3030323432335f,0x6c2e090a3b5d3631,0x6c612e206c61636f\n"
".quad 0x622e2038206e6769,0x616475635f5f2038,0x5f616475635f5f5f,0x61765f6c61636f6c\n"
".quad 0x5f30313837365f72,0x635f6e6f6e5f3233,0x726f775f74736e6f,0x3631323438345f6b\n"
".quad 0x0a3b5d363530325b,0x206c61636f6c2e09,0x38206e67696c612e,0x635f5f2038622e20\n"
".quad 0x75635f5f5f616475,0x6c61636f6c5f6164,0x3637365f7261765f,0x6f6e5f32335f3038\n"
".quad 0x5f74736e6f635f6e,0x3031325f6b726f77,0x30325b3237323634,0x702e090a3b5d3635\n"
".quad 0x36752e206d617261,0x616475635f5f2034,0x5f5f31616d726170,0x6f7477656e39315a\n"
".quad 0x767265746e695f6e,0x64496365725f6c61,0x453633353536694c,0x764545383231694c\n"
".quad 0x61626f6c67323152,0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x58455f315458455f,0x534b5245455f3054,0x702e090a3b695f33,0x36752e206d617261\n"
".quad 0x616475635f5f2034,0x5f5f32616d726170,0x6f7477656e39315a,0x767265746e695f6e\n"
".quad 0x64496365725f6c61,0x453633353536694c,0x764545383231694c,0x61626f6c67323152\n"
".quad 0x496b636174735f6c,0x767265746e693231,0x54497570675f6c61,0x58455f315458455f\n"
".quad 0x534b5245455f3054,0x702e090a3b695f33,0x33732e206d617261,0x616475635f5f2032\n"
".quad 0x5f5f33616d726170,0x6f7477656e39315a,0x767265746e695f6e,0x64496365725f6c61\n"
".quad 0x453633353536694c,0x764545383231694c,0x61626f6c67323152,0x496b636174735f6c\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x58455f315458455f,0x534b5245455f3054\n"
".quad 0x6c2e090a3b695f33,0x373233093409636f,0x6257444c240a3009,0x325a5f5f6e696765\n"
".quad 0x6e695f7473657430,0x6e5f6c6176726574,0x4564496e6f747765,0x65746e6932315076\n"
".quad 0x7570675f6c617672,0x32536950455f5449,0x2e646c090a3a695f,0x36662e6d61726170\n"
".quad 0x2c31646625092034,0x616475635f5f5b20,0x325a5f5f6d726170,0x6e695f7473657430\n"
".quad 0x6e5f6c6176726574,0x4564496e6f747765,0x65746e6932315076,0x7570675f6c617672\n"
".quad 0x32536950455f5449,0x6c61765f5f5f695f,0x2b696d617261705f,0x2e7473090a3b5d30\n"
".quad 0x36662e6c61636f6c,0x75635f5f5b092034,0x6475635f5f5f6164,0x313436315f695f61\n"
".quad 0x25202c5d302b3438,0x646c090a3b316466,0x662e6d617261702e,0x3264662509203436\n"
".quad 0x6475635f5f5b202c,0x5a5f5f6d72617061,0x695f747365743032,0x5f6c61767265746e\n"
".quad 0x64496e6f7477656e,0x746e693231507645,0x70675f6c61767265,0x536950455f544975\n"
".quad 0x61765f5f5f695f32,0x696d617261705f6c,0x7473090a3b5d382b,0x662e6c61636f6c2e\n"
".quad 0x635f5f5b09203436,0x75635f5f5f616475,0x3436315f695f6164,0x202c5d382b343831\n"
".quad 0x2e090a3b32646625,0x3333093409636f6c,0x2e646c090a300933,0x36752e6d61726170\n"
".quad 0x2c31647225092034,0x616475635f5f5b20,0x325a5f5f6d726170,0x6e695f7473657430\n"
".quad 0x6e5f6c6176726574,0x4564496e6f747765,0x65746e6932315076,0x7570675f6c617672\n"
".quad 0x32536950455f5449,0x65666675625f695f,0x2e7473090a3b5d72,0x36752e6c61636f6c\n"
".quad 0x75635f5f5b092034,0x6475635f5f5f6164,0x5f6c61636f6c5f61,0x373837365f726176\n"
".quad 0x6e6f6e5f34345f34,0x725f74736e6f635f,0x32335f746c757365,0x2c5d302b30303234\n"
".quad 0x090a3b3164722520,0x203233752e766f6d,0x6325202c31722509,0x0a3b782e64696174\n"
".quad 0x2e6f6c2e6c756d09,0x3272250920323375,0x36202c317225202c,0x2e766f6d090a3b34\n"
".quad 0x3372250920323375,0x782e64697425202c,0x752e646461090a3b,0x2c34722509203233\n"
".quad 0x7225202c33722520,0x2e766f6d090a3b32,0x3572250920323373,0x090a3b347225202c\n"
".quad 0x6c61636f6c2e7473,0x5f5b09203233732e,0x5f5f5f616475635f,0x636f6c5f61647563\n"
".quad 0x365f7261765f6c61,0x5f34345f34373837,0x736e6f635f6e6f6e,0x746c757365725f74\n"
".quad 0x2b3030323432335f,0x3b357225202c5d38,0x3409636f6c2e090a,0x090a300935333309\n"
".quad 0x6d617261702e646c,0x722509203233732e,0x75635f5f5b202c36,0x5f5f6d7261706164\n"
".quad 0x5f7473657430325a,0x6c61767265746e69,0x496e6f7477656e5f,0x6e69323150764564\n"
".quad 0x675f6c6176726574,0x6950455f54497570,0x706d695f695f3253,0x7461746e656d656c\n"
".quad 0x696f68635f6e6f69,0x6f6d090a3b5d6563,0x2509203233752e76,0x090a3b30202c3772\n"
".quad 0x2e71652e70746573,0x3170250920323373,0x25202c367225202c,0x702540090a3b3772\n"
".quad 0x2409206172622031,0x35325f38315f744c,0x2e766f6d090a3b38,0x3872250920323375\n"
".quad 0x6573090a3b31202c,0x33732e71652e7074,0x202c327025092032,0x387225202c367225\n"
".quad 0x2032702540090a3b,0x744c240920617262,0x3b3037375f38315f,0x33752e766f6d090a\n"
".quad 0x202c397225092032,0x70746573090a3b32,0x203233732e71652e,0x7225202c33702509\n"
".quad 0x0a3b397225202c36,0x7262203370254009,0x315f744c24092061,0x0a3b363230315f38\n"
".quad 0x696e752e61726209,0x38315f744c240920,0x240a3b303530325f,0x35325f38315f744c\n"
".quad 0x636f6c2e090a3a38,0x3009323732093409,0x33732e766f6d090a,0x2c30317225092032\n"
".quad 0x2e7473090a3b3020,0x33732e6c61636f6c,0x75635f5f5b092032,0x6475635f5f5f6164\n"
".quad 0x5f6c61636f6c5f61,0x313837365f726176,0x6e6f6e5f32335f30,0x775f74736e6f635f\n"
".quad 0x323438345f6b726f,0x5d383430322b3631,0x0a3b30317225202c,0x61636f6c2e747309\n"
".quad 0x5b09203436662e6c,0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163\n"
".quad 0x32335f3031383736,0x6e6f635f6e6f6e5f,0x5f6b726f775f7473,0x302b363132343834\n"
".quad 0x3b31646625202c5d,0x636f6c2e7473090a,0x09203436662e6c61,0x5f616475635f5f5b\n"
".quad 0x6c5f616475635f5f,0x7261765f6c61636f,0x335f30313837365f,0x6f635f6e6f6e5f32\n"
".quad 0x6b726f775f74736e,0x2b3631323438345f,0x32646625202c5d38,0x2e61747663090a3b\n"
".quad 0x36752e6c61636f6c,0x2c32647225092034,0x5f616475635f5f20,0x6c5f616475635f5f\n"
".quad 0x7261765f6c61636f,0x335f30313837365f,0x6f635f6e6f6e5f32,0x6b726f775f74736e\n"
".quad 0x3b3631323438345f,0x5f38315f744c240a,0x0a3a303936343935,0x706f6f6c3c2f2f20\n"
".quad 0x6220706f6f4c203e,0x656e696c2079646f,0x656e202c32373220,0x656420676e697473\n"
".quad 0x202c31203a687470,0x6574616d69747365,0x7461726574692064,0x6e75203a736e6f69\n"
".quad 0x2e090a6e776f6e6b,0x3732093409636f6c,0x766f6d090a300936,0x722509203233732e\n"
".quad 0x30317225202c3131,0x732e627573090a3b,0x3031722509203233,0x202c31317225202c\n"
".quad 0x6c2e7473090a3b31,0x3233732e6c61636f,0x6475635f5f5b0920,0x616475635f5f5f61\n"
".quad 0x765f6c61636f6c5f,0x30313837365f7261,0x5f6e6f6e5f32335f,0x6f775f74736e6f63\n"
".quad 0x31323438345f6b72,0x2c5d383430322b36,0x090a3b3031722520,0x2e3436732e747663\n"
".quad 0x6472250920323373,0x3b30317225202c33,0x69772e6c756d090a,0x09203233732e6564\n"
".quad 0x7225202c34647225,0x0a3b3631202c3031,0x3436752e64646109,0x202c356472250920\n"
".quad 0x7225202c34647225,0x2e646c090a3b3264,0x6466250920343666,0x356472255b202c33\n"
".quad 0x6c090a3b5d36312b,0x2509203436662e64,0x72255b202c346466,0x0a3b5d34322b3564\n"
".quad 0x093409636f6c2e09,0x61090a3009383732,0x09203436662e6464,0x6625202c35646625\n"
".quad 0x34646625202c3364,0x2e70746573090a3b,0x09203436662e7165,0x646625202c347025\n"
".quad 0x3b35646625202c35,0x203470252140090a,0x744c240920617262,0x363937365f38315f\n"
".quad 0x3c2f2f200a3b3238,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32373220656e696c,0x6c2064616568202c,0x242064656c656261,0x39355f38315f744c\n"
".quad 0x6c2e090a30393634,0x383031093409636f,0x2e67656e090a3009,0x6466250920343666\n"
".quad 0x3b33646625202c36,0x70722e646461090a,0x662509203436662e,0x34646625202c3764\n"
".quad 0x0a3b36646625202c,0x3436662e766f6d09,0x202c386466250920,0x3030306566336430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x2e6c756d090a352e,0x6466250920343666\n"
".quad 0x2c35646625202c39,0x090a3b3864662520,0x203436662e736261,0x202c303164662509\n"
".quad 0x6d090a3b39646625,0x09203436662e766f,0x30202c3131646625,0x6636633062653364\n"
".quad 0x3030303030306137,0x6531202f2f093b30,0x6c756d090a36302d,0x662509203436662e\n"
".quad 0x646625202c323164,0x31646625202c3031,0x70746573090a3b31,0x203436662e656c2e\n"
".quad 0x6625202c35702509,0x31646625202c3764,0x35702540090a3b32,0x4c24092061726220\n"
".quad 0x3632315f38315f74,0x2f2f200a3b323237,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x355f38315f744c24,0x2e090a3039363439,0x3333093309636f6c,0x766f6d090a300932\n"
".quad 0x662509203436662e,0x626430202c333164,0x3030303030306666,0x3b30303030303030\n"
".quad 0x090a312d202f2f09,0x662e6d722e646461,0x3164662509203436,0x2c33646625202c34\n"
".quad 0x0a3b333164662520,0x3436662e766f6d09,0x2c35316466250920,0x3030303030643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x2e70746573090a30,0x09203436662e6567\n"
".quad 0x646625202c367025,0x31646625202c3431,0x70252140090a3b35,0x2409206172622036\n"
".quad 0x38335f38315f744c,0x2f200a3b30333337,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x33093309636f6c2e,0x756d090a30093333\n"
".quad 0x3436662e6d722e6c,0x2c36316466250920,0x202c343164662520,0x090a3b3431646625\n"
".quad 0x203436662e766f6d,0x202c373164662509,0x3030306666626430,0x3030303030303030\n"
".quad 0x2d202f2f093b3030,0x722e646461090a31,0x2509203436662e70,0x6625202c38316466\n"
".quad 0x31646625202c3464,0x2e6c756d090a3b37,0x09203436662e7072,0x25202c3931646625\n"
".quad 0x6625202c38316466,0x7262090a3b383164,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574,0x4b52455f54497570\n"
".quad 0x5f3639315f5f3253,0x5f744c240a3b3639,0x33333738335f3831,0x6c3c2f2f200a3a30\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74,0x6f6c2e090a303936\n"
".quad 0x0934333309330963,0x662e766f6d090a30,0x3264662509203436,0x6666626430202c30\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x6461090a312d202f,0x3436662e70722e64\n"
".quad 0x2c38316466250920,0x25202c3464662520,0x6d090a3b30326466,0x09203436662e766f\n"
".quad 0x30202c3132646625,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x656c2e7074657309,0x702509203436662e,0x3831646625202c37,0x3b3132646625202c\n"
".quad 0x203770252140090a,0x744c240920617262,0x353738335f38315f,0x3c2f2f200a3b3638\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x39355f38315f744c,0x6c2e090a30393634\n"
".quad 0x353333093309636f,0x2e6c756d090a3009,0x09203436662e6d72,0x25202c3631646625\n"
".quad 0x6625202c38316466,0x756d090a3b383164,0x3436662e70722e6c,0x2c39316466250920\n"
".quad 0x202c343164662520,0x090a3b3431646625,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x39315f5f32534b52,0x4c240a3b36395f36,0x3738335f38315f74,0x2f2f200a3a363835\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439\n"
".quad 0x3333093309636f6c,0x6c756d090a300937,0x203436662e70722e,0x202c323264662509\n"
".quad 0x25202c3431646625,0x6d090a3b34316466,0x36662e70722e6c75,0x3332646625092034\n"
".quad 0x2c3831646625202c,0x0a3b383164662520,0x3436662e78616d09,0x2c39316466250920\n"
".quad 0x202c323264662520,0x090a3b3332646625,0x203436662e766f6d,0x202c363164662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x646e6557444c240a\n"
".quad 0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x39315f5f32534b52,0x2f200a3a36395f36,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x31093409636f6c2e,0x7663090a30093830\n"
".quad 0x3436662e6e722e74,0x662509203233732e,0x347225202c343264,0x662e67656e090a3b\n"
".quad 0x3264662509203436,0x3432646625202c35,0x662e766f6d090a3b,0x3264662509203436\n"
".quad 0x6665336430202c36,0x3030303030303030,0x2f093b3030303030,0x383532352e31202f\n"
".quad 0x6d090a35302d6538,0x09203436662e6c75,0x25202c3732646625,0x6625202c35326466\n"
".quad 0x756d090a3b363264,0x3436662e6d722e6c,0x2c38326466250920,0x202c373264662520\n"
".quad 0x6d090a3b33646625,0x36662e6d722e6c75,0x3932646625092034,0x2c3732646625202c\n"
".quad 0x090a3b3464662520,0x662e70722e6c756d,0x3364662509203436,0x3732646625202c30\n"
".quad 0x0a3b33646625202c,0x2e70722e6c756d09,0x6466250920343666,0x32646625202c3133\n"
".quad 0x3b34646625202c37,0x36662e6e696d090a,0x3233646625092034,0x2c3832646625202c\n"
".quad 0x0a3b393264662520,0x2e6d722e64646109,0x6466250920343666,0x31646625202c3333\n"
".quad 0x3233646625202c36,0x662e78616d090a3b,0x3364662509203436,0x3033646625202c34\n"
".quad 0x3b3133646625202c,0x70722e646461090a,0x662509203436662e,0x646625202c353364\n"
".quad 0x33646625202c3931,0x2e646461090a3b34,0x6466250920343666,0x33646625202c3633\n"
".quad 0x3533646625202c33,0x2e70746573090a3b,0x203436662e75656e,0x6625202c38702509\n"
".quad 0x646625202c363364,0x252140090a3b3633,0x0920617262203870,0x355f38315f744c24\n"
".quad 0x200a3b3835343539,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323732,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3039363439355f,0x093309636f6c2e09,0x6f6d090a30093838,0x2509203436662e76\n"
".quad 0x6430202c37336466,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x646977355a5f5f69,0x315f544564496874\n"
".quad 0x61767265746e6932,0x3053497570675f6c,0x395f3639315f455f,0x315f744c240a3b38\n"
".quad 0x3835343539355f38,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x363439355f38315f,0x636f6c2e090a3039,0x0a30093039093309,0x3436662e67656e09\n"
".quad 0x2c38336466250920,0x0a3b333364662520,0x2e70722e64646109,0x6466250920343666\n"
".quad 0x33646625202c3733,0x3833646625202c35,0x6e6557444c240a3b,0x6977355a5f5f6964\n"
".quad 0x5f54456449687464,0x767265746e693231,0x53497570675f6c61,0x5f3639315f455f30\n"
".quad 0x3c2f2f200a3a3839,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32373220656e696c,0x6c2064616568202c,0x242064656c656261,0x39355f38315f744c\n"
".quad 0x6c2e090a30393634,0x383031093409636f,0x2e766f6d090a3009,0x6466250920343666\n"
".quad 0x65336430202c3933,0x3061376636633062,0x093b303030303030,0x36302d6531202f2f\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x33646625202c3970,0x3933646625202c37\n"
".quad 0x3970252140090a3b,0x4c24092061726220,0x3937365f38315f74,0x744c240a3b323836\n"
".quad 0x373632315f38315f,0x3c2f2f200a3a3232,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x39355f38315f744c,0x6f6d090a30393634,0x2509203233732e76,0x0a3b31202c323172\n"
".quad 0x696e752e61726209,0x38315f744c240920,0x3b3439373932315f,0x5f38315f744c240a\n"
".quad 0x0a3a323836393736,0x315f38315f744c24,0x200a3a3837393632,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f,0x3233732e766f6d09\n"
".quad 0x202c323172250920,0x315f744c240a3b30,0x3439373932315f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039\n"
".quad 0x3009383732093409,0x33752e766f6d090a,0x2c33317225092032,0x746573090a3b3020\n"
".quad 0x3233732e71652e70,0x202c303170250920,0x7225202c32317225,0x702540090a3b3331\n"
".quad 0x0920617262203031,0x355f38315f744c24,0x200a3b3632323639,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f,0x093409636f6c2e09\n"
".quad 0x63090a3009303832,0x732e3436732e7476,0x3664722509203233,0x090a3b357225202c\n"
".quad 0x656469772e6c756d,0x722509203233732e,0x2c357225202c3764,0x6461090a3b363120\n"
".quad 0x2509203436752e64,0x647225202c386472,0x3b37647225202c31,0x6f6c672e7473090a\n"
".quad 0x203436662e6c6162,0x302b386472255b09,0x3b33646625202c5d,0x6f6c672e7473090a\n"
".quad 0x203436662e6c6162,0x382b386472255b09,0x3b34646625202c5d,0x33732e646461090a\n"
".quad 0x202c357225092032,0x353536202c357225,0x2e7473090a3b3633,0x33732e6c61636f6c\n"
".quad 0x75635f5f5b092032,0x6475635f5f5f6164,0x5f6c61636f6c5f61,0x373837365f726176\n"
".quad 0x6e6f6e5f34345f34,0x725f74736e6f635f,0x32335f746c757365,0x2c5d382b30303234\n"
".quad 0x62090a3b35722520,0x0920696e752e6172,0x355f38315f744c24,0x240a3b3037393539\n"
".quad 0x39355f38315f744c,0x2f200a3a36323236,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x33093309636f6c2e,0x6f6d090a30093233\n"
".quad 0x2509203436662e76,0x6430202c30346466,0x3030303030656633,0x3030303030303030\n"
".quad 0x352e30202f2f093b,0x36662e6c756d090a,0x3134646625092034,0x202c35646625202c\n"
".quad 0x090a3b3034646625,0x203436662e766f6d,0x202c323464662509,0x3030306666626430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x722e646461090a31,0x2509203436662e6d\n"
".quad 0x6625202c33346466,0x646625202c313464,0x766f6d090a3b3234,0x662509203436662e\n"
".quad 0x306430202c343464,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x662e65672e707465,0x3131702509203436,0x2c3334646625202c,0x0a3b343464662520\n"
".quad 0x2031317025214009,0x744c240920617262,0x333838335f38315f,0x3c2f2f200a3b3435\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x39355f38315f744c,0x6c2e090a30393634\n"
".quad 0x333333093309636f,0x2e6c756d090a3009,0x09203436662e6d72,0x25202c3534646625\n"
".quad 0x6625202c33346466,0x6f6d090a3b333464,0x2509203436662e76,0x6430202c36346466\n"
".quad 0x3030303030666662,0x3030303030303030,0x0a312d202f2f093b,0x2e70722e64646109\n"
".quad 0x6466250920343666,0x34646625202c3734,0x3634646625202c31,0x722e6c756d090a3b\n"
".quad 0x2509203436662e70,0x6625202c38346466,0x646625202c373464,0x617262090a3b3734\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x657261757173365a,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x395f3639315f5f32,0x315f744c240a3b34\n"
".quad 0x3435333838335f38,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x363439355f38315f,0x636f6c2e090a3039,0x3009343333093309,0x36662e766f6d090a\n"
".quad 0x3934646625092034,0x306666626430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x646461090a312d20,0x203436662e70722e,0x202c373464662509,0x25202c3134646625\n"
".quad 0x6d090a3b39346466,0x09203436662e766f,0x30202c3035646625,0x3030303030303064\n"
".quad 0x3030303030303030,0x0a30202f2f093b30,0x656c2e7074657309,0x702509203436662e\n"
".quad 0x34646625202c3231,0x3035646625202c37,0x3170252140090a3b,0x2409206172622032\n"
".quad 0x38335f38315f744c,0x2f200a3b30313638,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x33093309636f6c2e,0x756d090a30093533\n"
".quad 0x3436662e6d722e6c,0x2c35346466250920,0x202c373464662520,0x090a3b3734646625\n"
".quad 0x662e70722e6c756d,0x3464662509203436,0x3334646625202c38,0x3b3334646625202c\n"
".quad 0x6e752e617262090a,0x6557444c24092069,0x73365a5f5f69646e,0x4564496572617571\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x5f5f32534b52455f,0x0a3b34395f363931\n"
".quad 0x335f38315f744c24,0x200a3a3031363838,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09,0x6d090a3009373333\n"
".quad 0x36662e70722e6c75,0x3135646625092034,0x2c3334646625202c,0x0a3b333464662520\n"
".quad 0x2e70722e6c756d09,0x6466250920343666,0x34646625202c3235,0x3734646625202c37\n"
".quad 0x662e78616d090a3b,0x3464662509203436,0x3135646625202c38,0x3b3235646625202c\n"
".quad 0x36662e766f6d090a,0x3534646625092034,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x6557444c240a3020,0x73365a5f5f69646e,0x4564496572617571\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x5f5f32534b52455f,0x0a3a34395f363931\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465,0x3039363439355f38\n"
".quad 0x3309636f6c2e090a,0x090a300931303309,0x203436662e766f6d,0x202c333564662509\n"
".quad 0x3030303030346430,0x3030303030303030,0x32202f2f093b3030,0x70722e6c756d090a\n"
".quad 0x662509203436662e,0x646625202c343564,0x33646625202c3335,0x662e766f6d090a3b\n"
".quad 0x3564662509203436,0x3030346430202c35,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x6c756d090a32202f,0x203436662e70722e,0x202c363564662509,0x25202c3535646625\n"
".quad 0x6f6d090a3b346466,0x2509203436662e76,0x6430202c37356466,0x3030303030303034\n"
".quad 0x3030303030303030,0x090a32202f2f093b,0x662e6d722e6c756d,0x3564662509203436\n"
".quad 0x3735646625202c38,0x0a3b33646625202c,0x3436662e766f6d09,0x2c39356466250920\n"
".quad 0x3030303034643020,0x3030303030303030,0x202f2f093b303030,0x722e6c756d090a32\n"
".quad 0x2509203436662e6d,0x6625202c30366466,0x646625202c393564,0x2e747663090a3b34\n"
".quad 0x732e3436662e6e72,0x3664662509203233,0x0a3b347225202c31,0x3436662e67656e09\n"
".quad 0x2c32366466250920,0x0a3b313664662520,0x3436662e766f6d09,0x2c33366466250920\n"
".quad 0x3030666533643020,0x3030303030303030,0x202f2f093b303030,0x6538383532352e31\n"
".quad 0x6c756d090a35302d,0x662509203436662e,0x646625202c373264,0x36646625202c3236\n"
".quad 0x2e766f6d090a3b33,0x6466250920343666,0x30636430202c3436,0x3030303030303030\n"
".quad 0x093b303030303030,0x61090a322d202f2f,0x09203436662e6464,0x25202c3536646625\n"
".quad 0x6625202c37326466,0x616d090a3b343664,0x2509203436662e78,0x6625202c36366466\n"
".quad 0x646625202c343564,0x646461090a3b3635,0x203436662e70722e,0x202c373664662509\n"
".quad 0x25202c3636646625,0x6d090a3b35366466,0x09203436662e6e69,0x25202c3836646625\n"
".quad 0x6625202c38356466,0x6461090a3b303664,0x3436662e6d722e64,0x2c39366466250920\n"
".quad 0x202c383664662520,0x090a3b3536646625,0x203436662e766f6d,0x202c303764662509\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x65672e746573090a\n"
".quad 0x3436662e3233752e,0x202c343172250920,0x25202c3736646625,0x6e090a3b30376466\n"
".quad 0x09203233732e6765,0x7225202c35317225,0x766f6d090a3b3431,0x662509203436662e\n"
".quad 0x306430202c313764,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x33752e656c2e7465,0x2509203436662e32,0x646625202c363172,0x37646625202c3936\n"
".quad 0x2e67656e090a3b31,0x3172250920323373,0x3b36317225202c37,0x33622e646e61090a\n"
".quad 0x2c38317225092032,0x25202c3531722520,0x6f6d090a3b373172,0x2509203233752e76\n"
".quad 0x0a3b30202c393172,0x71652e7074657309,0x702509203233732e,0x38317225202c3331\n"
".quad 0x0a3b39317225202c,0x6220333170254009,0x5f744c2409206172,0x34363030345f3831\n"
".quad 0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74\n"
".quad 0x6f6c2e090a303936,0x0932303309330963,0x662e766f6d090a30,0x3764662509203436\n"
".quad 0x3030306430202c32,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e656e2e70,0x202c343170250920,0x25202c3736646625,0x6d090a3b32376466\n"
".quad 0x09203436662e766f,0x30202c3337646625,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x656e2e7074657309,0x2509203436662e75,0x646625202c353170\n"
".quad 0x37646625202c3936,0x70252140090a3b33,0x0920617262203531,0x345f38315f744c24\n"
".quad 0x200a3b3839383030,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323732,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3039363439355f,0x093309636f6c2e09,0x40090a3009333033,0x7262203431702521\n"
".quad 0x315f744c24092061,0x3435313130345f38,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039,0x3009343033093309\n"
".quad 0x6d722e6c756d090a,0x662509203436662e,0x646625202c343764,0x34646625202c3732\n"
".quad 0x2e6c756d090a3b31,0x09203436662e7072,0x25202c3537646625,0x6625202c37326466\n"
".quad 0x6461090a3b313464,0x3436662e6d722e64,0x2c36376466250920,0x202c353464662520\n"
".quad 0x090a3b3437646625,0x662e70722e646461,0x3764662509203436,0x3834646625202c37\n"
".quad 0x3b3537646625202c,0x36662e766f6d090a,0x3837646625092034,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x2e746573090a3020,0x662e3233752e7165\n"
".quad 0x3032722509203436,0x2c3737646625202c,0x0a3b383764662520,0x3233732e67656e09\n"
".quad 0x202c313272250920,0x6d090a3b30327225,0x09203436662e766f,0x30202c3937646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x2e71652e74657309\n"
".quad 0x203436662e323375,0x25202c3232722509,0x6625202c36376466,0x656e090a3b393764\n"
".quad 0x2509203233732e67,0x327225202c333272,0x2e646e61090a3b32,0x3272250920323362\n"
".quad 0x2c31327225202c34,0x090a3b3332722520,0x203233752e766f6d,0x30202c3532722509\n"
".quad 0x2e70746573090a3b,0x09203233732e7165,0x7225202c36317025,0x35327225202c3432\n"
".quad 0x3631702540090a3b,0x4c24092061726220,0x3030365f38315f74,0x2f2f200a3b383735\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439\n"
".quad 0x3632093309636f6c,0x766f6d090a300932,0x662509203436662e,0x646625202c303864\n"
".quad 0x766f6d090a3b3637,0x662509203436662e,0x646625202c313864,0x766f6d090a3b3737\n"
".quad 0x722509203233732e,0x090a3b30202c3632,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x5f3639315f62525f,0x5f744c240a3b3139\n"
".quad 0x37353030365f3831,0x6c3c2f2f200a3a38,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3439355f38315f74,0x6f6c2e090a303936,0x0930373209330963,0x662e766f6d090a30\n"
".quad 0x3864662509203436,0x3030306430202c32,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x746573090a30202f,0x3436662e746c2e70,0x202c373170250920,0x25202c3737646625\n"
".quad 0x40090a3b32386466,0x7262203731702521,0x315f744c24092061,0x3636363130345f38\n"
".quad 0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x363439355f38315f\n"
".quad 0x636f6c2e090a3039,0x3009323732093309,0x70722e766964090a,0x662509203436662e\n"
".quad 0x646625202c313864,0x36646625202c3737,0x2e766f6d090a3b37,0x6466250920343666\n"
".quad 0x66666430202c3038,0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f\n"
".quad 0x3233732e766f6d09,0x202c363272250920,0x2e617262090a3b31,0x444c240920696e75\n"
".quad 0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32,0x0a3b31395f363931\n"
".quad 0x345f38315f744c24,0x200a3a3636363130,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09,0x6d090a3009333732\n"
".quad 0x09203436662e766f,0x30202c3338646625,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e,0x37646625202c3831\n"
".quad 0x3338646625202c36,0x3170252140090a3b,0x2409206172622038,0x30345f38315f744c\n"
".quad 0x2f200a3b32323931,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a303936343935,0x203436662e766f6d,0x202c313864662509,0x3030306666376430\n"
".quad 0x3030303030303030,0x69202f2f093b3030,0x2e766f6d090a666e,0x6466250920343666\n"
".quad 0x66666430202c3038,0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f\n"
".quad 0x3233732e766f6d09,0x202c363272250920,0x2e617262090a3b30,0x444c240920696e75\n"
".quad 0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32,0x0a3b31395f363931\n"
".quad 0x345f38315f744c24,0x200a3a3232393130,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09,0x64090a3009383732\n"
".quad 0x36662e70722e7669,0x3138646625092034,0x2c3637646625202c,0x0a3b393664662520\n"
".quad 0x3436662e766f6d09,0x2c30386466250920,0x3030666666643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x6f6d090a666e692d,0x2509203233732e76,0x0a3b31202c363272\n"
".quad 0x69646e6557444c24,0x76696434315a5f5f,0x61705f6f72657a5f,0x3231456449317472\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x5f34535f32534b52,0x395f3639315f6252\n"
".quad 0x6c3c2f2f200a3a31,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74\n"
".quad 0x6f6c2e090a303936,0x0934303309330963,0x662e766f6d090a30,0x3864662509203436\n"
".quad 0x3038646625202c34,0x662e766f6d090a3b,0x3864662509203436,0x3138646625202c35\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x385f3639315f6c65,0x315f744c240a3b36,0x3435313130345f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x363439355f38315f\n"
".quad 0x636f6c2e090a3039,0x3009363033093309,0x6d722e6c756d090a,0x662509203436662e\n"
".quad 0x646625202c343764,0x34646625202c3732,0x2e6c756d090a3b31,0x09203436662e7072\n"
".quad 0x25202c3537646625,0x6625202c37326466,0x6461090a3b313464,0x3436662e6d722e64\n"
".quad 0x2c36376466250920,0x202c353464662520,0x090a3b3437646625,0x662e70722e646461\n"
".quad 0x3764662509203436,0x3834646625202c37,0x3b3537646625202c,0x36662e766f6d090a\n"
".quad 0x3638646625092034,0x303030306430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x2e746573090a3020,0x662e3233752e7165,0x3732722509203436,0x2c3737646625202c\n"
".quad 0x0a3b363864662520,0x3233732e67656e09,0x202c383272250920,0x6d090a3b37327225\n"
".quad 0x09203436662e766f,0x30202c3738646625,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x2e71652e74657309,0x203436662e323375,0x25202c3932722509\n"
".quad 0x6625202c36376466,0x656e090a3b373864,0x2509203233732e67,0x327225202c303372\n"
".quad 0x2e646e61090a3b39,0x3372250920323362,0x2c38327225202c31,0x090a3b3033722520\n"
".quad 0x203233752e766f6d,0x30202c3233722509,0x2e70746573090a3b,0x09203233732e7165\n"
".quad 0x7225202c39317025,0x32337225202c3133,0x3931702540090a3b,0x4c24092061726220\n"
".quad 0x3130365f38315f74,0x2f2f200a3b303930,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x355f38315f744c24,0x2e090a3039363439,0x3432093309636f6c,0x766f6d090a300934\n"
".quad 0x662509203436662e,0x646625202c383864,0x766f6d090a3b3637,0x662509203436662e\n"
".quad 0x646625202c393864,0x617262090a3b3737,0x4c240920696e752e,0x5f5f69646e655744\n"
".quad 0x6e5f76696432315a,0x4965766974616765,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x315f5f31534b525f,0x240a3b39385f3639,0x30365f38315f744c\n"
".quad 0x2f200a3a30393031,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a303936343935,0x32093309636f6c2e,0x6f6d090a30093934,0x2509203436662e76\n"
".quad 0x6430202c30396466,0x3030303030303030,0x3030303030303030,0x090a30202f2f093b\n"
".quad 0x2e746c2e70746573,0x3270250920343666,0x3737646625202c30,0x3b3039646625202c\n"
".quad 0x303270252140090a,0x4c24092061726220,0x3230345f38315f74,0x2f2f200a3b343334\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439\n"
".quad 0x3532093309636f6c,0x766964090a300930,0x203436662e6d722e,0x202c383864662509\n"
".quad 0x25202c3737646625,0x6d090a3b39366466,0x09203436662e766f,0x30202c3938646625\n"
".quad 0x3030303066663764,0x3030303030303030,0x6e69202f2f093b30,0x752e617262090a66\n"
".quad 0x57444c240920696e,0x315a5f5f69646e65,0x67656e5f76696432,0x4564496576697461\n"
".quad 0x767265746e693231,0x54497570675f6c61,0x525f32534b52455f,0x3639315f5f31534b\n"
".quad 0x744c240a3b39385f,0x343230345f38315f,0x3c2f2f200a3a3433,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x39355f38315f744c,0x6c2e090a30393634,0x313532093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x30306430202c3139,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074,0x2c31327025092034\n"
".quad 0x202c363764662520,0x090a3b3139646625,0x6220313270252140,0x5f744c2409206172\n"
".quad 0x39363230345f3831,0x6c3c2f2f200a3b30,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3439355f38315f74,0x766f6d090a303936,0x662509203436662e,0x376430202c393864\n"
".quad 0x3030303030306666,0x3b30303030303030,0x0a666e69202f2f09,0x3436662e766f6d09\n"
".quad 0x2c38386466250920,0x3030666666643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x7262090a666e692d,0x240920696e752e61,0x5f69646e6557444c,0x5f76696432315a5f\n"
".quad 0x657669746167656e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x5f5f31534b525f32,0x0a3b39385f363931,0x345f38315f744c24,0x200a3a3039363230\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f\n"
".quad 0x093309636f6c2e09,0x64090a3009343532,0x36662e70722e7669,0x3938646625092034\n"
".quad 0x2c3637646625202c,0x0a3b393664662520,0x3436662e766f6d09,0x2c38386466250920\n"
".quad 0x3030666666643020,0x3030303030303030,0x202f2f093b303030,0x444c240a666e692d\n"
".quad 0x5a5f5f69646e6557,0x656e5f7669643231,0x6449657669746167,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x39315f5f31534b52,0x2f200a3a39385f36\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a303936343935\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093630,0x2509203436662e76,0x6625202c34386466\n"
".quad 0x6f6d090a3b383864,0x2509203436662e76,0x6625202c35386466,0x6f6d090a3b393864\n"
".quad 0x2509203233732e76,0x0a3b30202c363272,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x746e695f5f5f6964,0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b36385f3639315f\n"
".quad 0x5f38315f744c240a,0x0a3a383938303034,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3039363439355f38,0x3309636f6c2e090a,0x090a300938303309\n"
".quad 0x6220343170252140,0x5f744c2409206172,0x34393230345f3831,0x6c3c2f2f200a3b36\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74,0x6f6c2e090a303936\n"
".quad 0x0939303309330963,0x722e6c756d090a30,0x2509203436662e6d,0x6625202c34376466\n"
".quad 0x646625202c373264,0x6c756d090a3b3134,0x203436662e70722e,0x202c353764662509\n"
".quad 0x25202c3732646625,0x61090a3b31346466,0x36662e6d722e6464,0x3637646625092034\n"
".quad 0x2c3534646625202c,0x0a3b343764662520,0x2e70722e64646109,0x6466250920343666\n"
".quad 0x34646625202c3737,0x3537646625202c38,0x662e766f6d090a3b,0x3964662509203436\n"
".quad 0x3030306430202c32,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x2e3233752e71652e,0x3372250920343666,0x3737646625202c33,0x3b3239646625202c\n"
".quad 0x33732e67656e090a,0x2c34337225092032,0x090a3b3333722520,0x203436662e766f6d\n"
".quad 0x202c333964662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x71652e746573090a,0x3436662e3233752e,0x202c353372250920,0x25202c3637646625\n"
".quad 0x6e090a3b33396466,0x09203233732e6765,0x7225202c36337225,0x646e61090a3b3533\n"
".quad 0x722509203233622e,0x34337225202c3733,0x0a3b36337225202c,0x3233752e766f6d09\n"
".quad 0x202c383372250920,0x70746573090a3b30,0x203233732e71652e,0x25202c3232702509\n"
".quad 0x337225202c373372,0x32702540090a3b38,0x2409206172622032,0x30365f38315f744c\n"
".quad 0x2f200a3b32303631,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a303936343935,0x32093309636f6c2e,0x6f6d090a30093632,0x2509203436662e76\n"
".quad 0x6625202c34396466,0x6f6d090a3b363764,0x2509203436662e76,0x6625202c35396466\n"
".quad 0x7262090a3b373764,0x240920696e752e61,0x5f69646e6557444c,0x5f76696432315a5f\n"
".quad 0x6576697469736f70,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x5f5f31534b525f32,0x0a3b37385f363931,0x365f38315f744c24,0x200a3a3230363130\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f\n"
".quad 0x093309636f6c2e09,0x6d090a3009313332,0x09203436662e766f,0x30202c3639646625\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x746c2e7074657309\n"
".quad 0x702509203436662e,0x37646625202c3332,0x3639646625202c37,0x3270252140090a3b\n"
".quad 0x2409206172622033,0x30345f38315f744c,0x2f200a3b38353433,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a303936343935,0x32093309636f6c2e\n"
".quad 0x6964090a30093233,0x3436662e70722e76,0x2c35396466250920,0x202c373764662520\n"
".quad 0x090a3b3736646625,0x203436662e766f6d,0x202c343964662509,0x3030306666666430\n"
".quad 0x3030303030303030,0x2d202f2f093b3030,0x617262090a666e69,0x4c240920696e752e\n"
".quad 0x5f5f69646e655744,0x705f76696432315a,0x496576697469736f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f,0x240a3b37385f3639\n"
".quad 0x30345f38315f744c,0x2f200a3a38353433,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x32093309636f6c2e,0x6f6d090a30093333\n"
".quad 0x2509203436662e76,0x6430202c37396466,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x2e746c2e70746573,0x3270250920343666,0x3637646625202c34\n"
".quad 0x3b3739646625202c,0x343270252140090a,0x4c24092061726220,0x3330345f38315f74\n"
".quad 0x2f2f200a3b343137,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24\n"
".quad 0x6d090a3039363439,0x09203436662e766f,0x30202c3539646625,0x3030303066663764\n"
".quad 0x3030303030303030,0x6e69202f2f093b30,0x662e766f6d090a66,0x3964662509203436\n"
".quad 0x6666666430202c34,0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x696432315a5f5f69,0x697469736f705f76\n"
".quad 0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b\n"
".quad 0x37385f3639315f5f,0x38315f744c240a3b,0x3a3431373330345f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x39363439355f3831,0x09636f6c2e090a30\n"
".quad 0x0a30093633320933,0x2e6d722e76696409,0x6466250920343666,0x37646625202c3439\n"
".quad 0x3736646625202c36,0x662e766f6d090a3b,0x3964662509203436,0x6666376430202c35\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x4c240a666e69202f,0x5f5f69646e655744\n"
".quad 0x705f76696432315a,0x496576697469736f,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x315f5f31534b525f,0x200a3a37385f3639,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09\n"
".quad 0x6d090a3009393033,0x09203436662e766f,0x25202c3438646625,0x6d090a3b34396466\n"
".quad 0x09203436662e766f,0x25202c3538646625,0x6d090a3b35396466,0x09203233732e766f\n"
".quad 0x3b30202c36327225,0x6e752e617262090a,0x6557444c24092069,0x6e695f5f5f69646e\n"
".quad 0x6e5f6c616e726574,0x656e72656b5f6e61,0x36385f3639315f6c,0x38315f744c240a3b\n"
".quad 0x3a3634393230345f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x39363439355f3831,0x09636f6c2e090a30,0x0a30093131330933,0x3436662e766f6d09\n"
".quad 0x2c35386466250920,0x3038666637643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x766f6d090a6e616e,0x662509203436662e,0x376430202c343864,0x3030303030386666\n"
".quad 0x3b30303030303030,0x0a6e616e202f2f09,0x3233732e766f6d09,0x202c363272250920\n"
".quad 0x2e617262090a3b30,0x444c240920696e75,0x5f5f5f69646e6557,0x6c616e7265746e69\n"
".quad 0x72656b5f6e616e5f,0x5f3639315f6c656e,0x5f744c240a3b3638,0x34363030345f3831\n"
".quad 0x6c3c2f2f200a3a32,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74\n"
".quad 0x6f6c2e090a303936,0x0933313309330963,0x662e766f6d090a30,0x3964662509203436\n"
".quad 0x3030306430202c38,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e746c2e70,0x202c353270250920,0x25202c3736646625,0x40090a3b38396466\n"
".quad 0x7262203532702521,0x315f744c24092061,0x3636343630365f38,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039\n"
".quad 0x3009323931093309,0x70722e6c756d090a,0x662509203436662e,0x646625202c353764\n"
".quad 0x34646625202c3732,0x2e646461090a3b31,0x09203436662e7072,0x25202c3737646625\n"
".quad 0x6625202c38346466,0x6f6d090a3b353764,0x2509203436662e76,0x6625202c39396466\n"
".quad 0x6c2e090a3b373764,0x333931093309636f,0x2e6c756d090a3009,0x09203436662e6d72\n"
".quad 0x25202c3437646625,0x6625202c37326466,0x6461090a3b313464,0x3436662e6d722e64\n"
".quad 0x2c36376466250920,0x202c353464662520,0x090a3b3437646625,0x203436662e766f6d\n"
".quad 0x2c30303164662509,0x0a3b363764662520,0x696e752e61726209,0x38315f744c240920\n"
".quad 0x3b3031323630365f,0x5f38315f744c240a,0x0a3a363634363036,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3039363439355f38,0x3309636f6c2e090a\n"
".quad 0x090a300936393109,0x662e6d722e6c756d,0x3764662509203436,0x3732646625202c34\n"
".quad 0x3b3134646625202c,0x6d722e646461090a,0x662509203436662e,0x646625202c363764\n"
".quad 0x37646625202c3534,0x2e766f6d090a3b34,0x6466250920343666,0x37646625202c3939\n"
".quad 0x636f6c2e090a3b36,0x3009373931093309,0x70722e6c756d090a,0x662509203436662e\n"
".quad 0x646625202c353764,0x34646625202c3732,0x2e646461090a3b31,0x09203436662e7072\n"
".quad 0x25202c3737646625,0x6625202c38346466,0x6f6d090a3b353764,0x2509203436662e76\n"
".quad 0x25202c3030316466,0x4c240a3b37376466,0x3630365f38315f74,0x2f2f200a3a303132\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24,0x6d090a3039363439\n"
".quad 0x09203436662e766f,0x202c313031646625,0x3030303030306430,0x3030303030303030\n"
".quad 0x30202f2f093b3030,0x6c2e70746573090a,0x2509203436662e74,0x646625202c363270\n"
".quad 0x31646625202c3737,0x252140090a3b3130,0x2061726220363270,0x5f38315f744c2409\n"
".quad 0x0a3b383739363036,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3039363439355f38,0x3309636f6c2e090a,0x090a300931303209,0x203436662e766f6d\n"
".quad 0x2c32303164662509,0x0a3b393664662520,0x093309636f6c2e09,0x6d090a3009323032\n"
".quad 0x09203436662e766f,0x202c333031646625,0x090a3b3736646625,0x20696e752e617262\n"
".quad 0x5f38315f744c2409,0x0a3b343332373036,0x365f38315f744c24,0x200a3a3837393630\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f\n"
".quad 0x3436662e766f6d09,0x3430316466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e,0x25202c3732702509\n"
".quad 0x6625202c36376466,0x40090a3b34303164,0x7262203732702521,0x315f744c24092061\n"
".quad 0x3039343730365f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x363439355f38315f,0x70252140090a3039,0x0920617262203532,0x365f38315f744c24\n"
".quad 0x200a3b3230303830,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323732,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3039363439355f,0x093309636f6c2e09,0x6d090a3009363032,0x09203436662e766f\n"
".quad 0x202c323031646625,0x090a3b3736646625,0x32093309636f6c2e,0x6f6d090a30093730\n"
".quad 0x2509203436662e76,0x25202c3330316466,0x62090a3b37366466,0x0920696e752e6172\n"
".quad 0x365f38315f744c24,0x240a3b3433323730,0x30365f38315f744c,0x2f200a3a32303038\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a303936343935\n"
".quad 0x32093309636f6c2e,0x6f6d090a30093031,0x2509203436662e76,0x25202c3230316466\n"
".quad 0x2e090a3b39366466,0x3132093309636f6c,0x766f6d090a300931,0x662509203436662e\n"
".quad 0x6625202c33303164,0x7262090a3b393664,0x240920696e752e61,0x30365f38315f744c\n"
".quad 0x4c240a3b34333237,0x3730365f38315f74,0x2f2f200a3a303934,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439,0x3132093309636f6c\n"
".quad 0x766f6d090a300935,0x662509203436662e,0x6625202c32303164,0x6c2e090a3b373664\n"
".quad 0x363132093309636f,0x2e766f6d090a3009,0x6466250920343666,0x646625202c333031\n"
".quad 0x5f744c240a3b3936,0x33323730365f3831,0x315f744c240a3a34,0x3232373630365f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x363439355f38315f\n"
".quad 0x636f6c2e090a3039,0x3009333133093309,0x6d722e766964090a,0x662509203436662e\n"
".quad 0x646625202c343864,0x31646625202c3939,0x766964090a3b3230,0x203436662e70722e\n"
".quad 0x202c353864662509,0x202c303031646625,0x0a3b333031646625,0x3233732e766f6d09\n"
".quad 0x202c363272250920,0x6557444c240a3b30,0x6e695f5f5f69646e,0x6e5f6c616e726574\n"
".quad 0x656e72656b5f6e61,0x36385f3639315f6c,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039,0x3009363731093309\n"
".quad 0x36662e67656e090a,0x3031646625092034,0x3538646625202c35,0x722e646461090a3b\n"
".quad 0x2509203436662e6d,0x25202c3630316466,0x6625202c31346466,0x6e090a3b35303164\n"
".quad 0x09203436662e6765,0x202c373031646625,0x090a3b3438646625,0x662e70722e646461\n"
".quad 0x3164662509203436,0x34646625202c3830,0x3031646625202c31,0x2e78616d090a3b37\n"
".quad 0x6466250920343666,0x646625202c393031,0x646625202c363031,0x2e6e696d090a3b33\n"
".quad 0x6466250920343666,0x646625202c303131,0x646625202c383031,0x70746573090a3b34\n"
".quad 0x203436662e656c2e,0x25202c3832702509,0x25202c3930316466,0x090a3b3031316466\n"
".quad 0x6220383270252140,0x5f744c2409206172,0x37373631345f3831,0x6c3c2f2f200a3b30\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74,0x6f6c2e090a303936\n"
".quad 0x0937373109330963,0x662e766f6d090a30,0x3164662509203436,0x31646625202c3131\n"
".quad 0x766f6d090a3b3930,0x662509203436662e,0x6625202c32313164,0x62090a3b30313164\n"
".quad 0x0920696e752e6172,0x69646e6557444c24,0x7265746e695f5f5f,0x5f6e616e5f6c616e\n"
".quad 0x315f6c656e72656b,0x240a3b34385f3639,0x31345f38315f744c,0x2f200a3a30373736\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a303936343935\n"
".quad 0x31093309636f6c2e,0x6f6d090a30093937,0x2509203436662e76,0x30202c3231316466\n"
".quad 0x3030303866663764,0x3030303030303030,0x616e202f2f093b30,0x662e766f6d090a6e\n"
".quad 0x3164662509203436,0x66376430202c3131,0x3030303030303866,0x093b303030303030\n"
".quad 0x240a6e616e202f2f,0x5f69646e6557444c,0x6e7265746e695f5f,0x6b5f6e616e5f6c61\n"
".quad 0x39315f6c656e7265,0x2f200a3a34385f36,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x32093409636f6c2e,0x6f6d090a30093339\n"
".quad 0x2509203436662e76,0x25202c3331316466,0x090a3b3131316466,0x203436662e766f6d\n"
".quad 0x2c34313164662509,0x3b33313164662520,0x36662e766f6d090a,0x3131646625092034\n"
".quad 0x3131646625202c35,0x2e766f6d090a3b32,0x6466250920343666,0x646625202c363131\n"
".quad 0x6f6d090a3b353131,0x2509203233732e76,0x0a3b30202c393372,0x656e2e7074657309\n"
".quad 0x702509203233732e,0x36327225202c3932,0x0a3b39337225202c,0x2039327025214009\n"
".quad 0x744c240920617262,0x363231365f38315f,0x3c2f2f200a3b3031,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x39355f38315f744c,0x6c2e090a30393634,0x313932093309636f\n"
".quad 0x2e6c756d090a3009,0x09203436662e7072,0x25202c3537646625,0x6625202c37326466\n"
".quad 0x6461090a3b313464,0x3436662e70722e64,0x2c37376466250920,0x202c383464662520\n"
".quad 0x090a3b3537646625,0x203436662e766f6d,0x2c37313164662509,0x3030303030643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x2e70746573090a30,0x09203436662e746c\n"
".quad 0x6625202c30337025,0x646625202c373764,0x2140090a3b373131,0x6172622030337025\n"
".quad 0x38315f744c240920,0x3b3835303932345f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x39363439355f3831,0x09636f6c2e090a30,0x0a30093239320933\n"
".quad 0x2e6d722e76696409,0x6466250920343666,0x646625202c383131,0x36646625202c3737\n"
".quad 0x2e617262090a3b39,0x444c240920696e75,0x5a5f5f69646e6557,0x657a5f7669643431\n"
".quad 0x32747261705f6f72,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x39315f5f34535f32,0x4c240a3b32385f36,0x3932345f38315f74,0x2f2f200a3a383530\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439\n"
".quad 0x3932093309636f6c,0x6c756d090a300934,0x203436662e6d722e,0x2c39313164662509\n"
".quad 0x202c373264662520,0x090a3b3134646625,0x662e6d722e646461,0x3164662509203436\n"
".quad 0x34646625202c3032,0x3131646625202c35,0x2e766964090a3b39,0x09203436662e6d72\n"
".quad 0x202c383131646625,0x202c303231646625,0x240a3b3736646625,0x5f69646e6557444c\n"
".quad 0x5f76696434315a5f,0x7261705f6f72657a,0x6932314564493274,0x5f6c61767265746e\n"
".quad 0x52455f5449757067,0x5f5f34535f32534b,0x0a3a32385f363931,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3039363439355f38,0x3309636f6c2e090a\n"
".quad 0x090a300936373109,0x203436662e766f6d,0x2c31323164662509,0x3030666666643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x6461090a666e692d,0x3436662e6d722e64\n"
".quad 0x3232316466250920,0x2c3134646625202c,0x3b31323164662520,0x36662e67656e090a\n"
".quad 0x3231646625092034,0x3131646625202c33,0x2e646461090a3b38,0x09203436662e7072\n"
".quad 0x202c343231646625,0x25202c3134646625,0x090a3b3332316466,0x203436662e78616d\n"
".quad 0x2c35323164662509,0x2c32323164662520,0x090a3b3364662520,0x203436662e6e696d\n"
".quad 0x2c36323164662509,0x2c34323164662520,0x090a3b3464662520,0x2e656c2e70746573\n"
".quad 0x3370250920343666,0x3231646625202c31,0x3231646625202c35,0x70252140090a3b36\n"
".quad 0x0920617262203133,0x345f38315f744c24,0x200a3b3431333932,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09\n"
".quad 0x6d090a3009373731,0x09203436662e766f,0x202c373231646625,0x0a3b353231646625\n"
".quad 0x3436662e766f6d09,0x3832316466250920,0x363231646625202c,0x752e617262090a3b\n"
".quad 0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e,0x6e72656b5f6e616e\n"
".quad 0x385f3639315f6c65,0x315f744c240a3b30,0x3431333932345f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039\n"
".quad 0x3009393731093309,0x36662e766f6d090a,0x3231646625092034,0x6666376430202c38\n"
".quad 0x3030303030303038,0x2f093b3030303030,0x6d090a6e616e202f,0x09203436662e766f\n"
".quad 0x202c373231646625,0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030\n"
".quad 0x6557444c240a6e61,0x6e695f5f5f69646e,0x6e5f6c616e726574,0x656e72656b5f6e61\n"
".quad 0x30385f3639315f6c,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x363439355f38315f,0x636f6c2e090a3039,0x3009383932093409,0x36662e766f6d090a\n"
".quad 0x3231646625092034,0x3231646625202c39,0x2e766f6d090a3b37,0x6466250920343666\n"
".quad 0x646625202c303331,0x7262090a3b383231,0x240920696e752e61,0x31365f38315f744c\n"
".quad 0x4c240a3b34353332,0x3231365f38315f74,0x2f2f200a3a303136,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x355f38315f744c24,0x6d090a3039363439,0x09203436662e766f\n"
".quad 0x202c303331646625,0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030\n"
".quad 0x2e766f6d090a6e61,0x6466250920343666,0x376430202c393231,0x3030303030386666\n"
".quad 0x3b30303030303030,0x0a6e616e202f2f09,0x365f38315f744c24,0x200a3a3435333231\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f\n"
".quad 0x093409636f6c2e09,0x73090a3009393131,0x2e75656e2e707465,0x3370250920343666\n"
".quad 0x2c35646625202c32,0x090a3b3564662520,0x6220323370252140,0x5f744c2409206172\n"
".quad 0x36393631365f3831,0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3439355f38315f74,0x6f6c2e090a303936,0x3009383809330963,0x36662e766f6d090a\n"
".quad 0x3331646625092034,0x3030306430202c31,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x617262090a30202f,0x4c240920696e752e,0x5f5f69646e655744,0x496874646977355a\n"
".quad 0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570,0x0a3b38375f363931\n"
".quad 0x365f38315f744c24,0x200a3a3236393631,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09,0x656e090a30093039\n"
".quad 0x2509203436662e67,0x25202c3233316466,0x6461090a3b336466,0x3436662e70722e64\n"
".quad 0x3133316466250920,0x202c34646625202c,0x0a3b323331646625,0x69646e6557444c24\n"
".quad 0x74646977355a5f5f,0x32315f5445644968,0x6c61767265746e69,0x5f3053497570675f\n"
".quad 0x38375f3639315f45,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x363439355f38315f,0x636f6c2e090a3039,0x3009393131093409,0x36662e646461090a\n"
".quad 0x3331646625092034,0x3131646625202c33,0x3131646625202c35,0x70746573090a3b33\n"
".quad 0x203436662e71652e,0x25202c3333702509,0x25202c3333316466,0x090a3b3333316466\n"
".quad 0x6220333370252140,0x5f744c2409206172,0x35343038365f3831,0x6c3c2f2f200a3b30\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74,0x6f6c2e090a303936\n"
".quad 0x0930323109340963,0x2e70746573090a30,0x203436662e75656e,0x25202c3433702509\n"
".quad 0x25202c3333316466,0x090a3b3333316466,0x6220343370252140,0x5f744c2409206172\n"
".quad 0x37343731365f3831,0x6c3c2f2f200a3b34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3439355f38315f74,0x6f6c2e090a303936,0x3009383809330963,0x36662e766f6d090a\n"
".quad 0x3331646625092034,0x3030306430202c34,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x617262090a30202f,0x4c240920696e752e,0x5f5f69646e655744,0x496874646977355a\n"
".quad 0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570,0x0a3b36375f363931\n"
".quad 0x365f38315f744c24,0x200a3a3437343731,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3039363439355f,0x093309636f6c2e09,0x656e090a30093039\n"
".quad 0x2509203436662e67,0x25202c3533316466,0x090a3b3331316466,0x662e70722e646461\n"
".quad 0x3164662509203436,0x31646625202c3433,0x31646625202c3531,0x57444c240a3b3533\n"
".quad 0x355a5f5f69646e65,0x4564496874646977,0x65746e6932315f54,0x7570675f6c617672\n"
".quad 0x39315f455f305349,0x2f200a3a36375f36,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a303936343935,0x31093409636f6c2e,0x6f6d090a30093032\n"
".quad 0x2509203436662e76,0x30202c3633316466,0x3165616665663364,0x3030303030303834\n"
".quad 0x2e30202f2f093b30,0x2e6c756d090a3939,0x6466250920343666,0x646625202c373331\n"
".quad 0x646625202c313331,0x6573090a3b363331,0x36662e74672e7074,0x2c35337025092034\n"
".quad 0x2c34333164662520,0x3b37333164662520,0x353370252140090a,0x4c24092061726220\n"
".quad 0x3038365f38315f74,0x2f2f200a3b303534,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x355f38315f744c24,0x62090a3039363439,0x0920696e752e6172,0x315f38315f744c24\n"
".quad 0x240a3b3037333232,0x38365f38315f744c,0x4c240a3a30353430,0x3232315f38315f74\n"
".quad 0x2f2f200a3a323838,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24\n"
".quad 0x61090a3039363439,0x09203436662e6464,0x202c383331646625,0x202c303331646625\n"
".quad 0x0a3b393231646625,0x71652e7074657309,0x702509203436662e,0x31646625202c3633\n"
".quad 0x31646625202c3833,0x252140090a3b3833,0x2061726220363370,0x5f38315f744c2409\n"
".quad 0x0a3b323639303836,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3039363439355f38,0x36662e67656e090a,0x3331646625092034,0x3231646625202c39\n"
".quad 0x2e646461090a3b39,0x09203436662e7072,0x202c303431646625,0x202c303331646625\n"
".quad 0x0a3b393331646625,0x3436662e766f6d09,0x3134316466250920,0x666566336430202c\n"
".quad 0x3030303834316561,0x2f2f093b30303030,0x6d090a39392e3020,0x09203436662e6c75\n"
".quad 0x202c323431646625,0x202c313331646625,0x0a3b313431646625,0x74672e7074657309\n"
".quad 0x702509203436662e,0x31646625202c3733,0x31646625202c3034,0x252140090a3b3234\n"
".quad 0x2061726220373370,0x5f38315f744c2409,0x0a3b323639303836,0x315f38315f744c24\n"
".quad 0x200a3a3037333232,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323732,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3039363439355f,0x3233732e766f6d09,0x202c303472250920,0x2e617262090a3b31\n"
".quad 0x744c240920696e75,0x363432315f38315f,0x5f744c240a3b3437,0x36393038365f3831\n"
".quad 0x315f744c240a3a32,0x3632363232315f38,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x363439355f38315f,0x2e766f6d090a3039,0x3472250920323373\n"
".quad 0x4c240a3b30202c30,0x3432315f38315f74,0x2f2f200a3a343736,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x355f38315f744c24,0x2e090a3039363439,0x3033093409636f6c\n"
".quad 0x766f6d090a300932,0x722509203233752e,0x090a3b30202c3134,0x2e71652e70746573\n"
".quad 0x3370250920323373,0x2c30347225202c38,0x090a3b3134722520,0x7262203833702540\n"
".quad 0x315f744c24092061,0x3839343831365f38,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x363439355f38315f,0x636f6c2e090a3039,0x3009363033093409\n"
".quad 0x36662e766f6d090a,0x3131646625092034,0x3b33646625202c34,0x36662e766f6d090a\n"
".quad 0x3131646625092034,0x3134646625202c36,0x09636f6c2e090a3b,0x0a30093730330934\n"
".quad 0x3436662e766f6d09,0x3932316466250920,0x3b3134646625202c,0x36662e766f6d090a\n"
".quad 0x3331646625092034,0x3b34646625202c30,0x33732e766f6d090a,0x2c32347225092032\n"
".quad 0x766f6d090a3b3020,0x722509203233732e,0x090a3b31202c3334,0x2e656e2e70746573\n"
".quad 0x3270250920323373,0x2c33347225202c39,0x240a3b3234722520,0x31365f38315f744c\n"
".quad 0x2f200a3a38393438,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a303936343935,0x203436662e646461,0x2c33343164662509,0x2c34313164662520\n"
".quad 0x3b36313164662520,0x652e70746573090a,0x2509203436662e71,0x646625202c393370\n"
".quad 0x646625202c333431,0x2140090a3b333431,0x6172622039337025,0x38315f744c240920\n"
".quad 0x3b3031303931365f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x39363439355f3831,0x09636f6c2e090a30,0x0a30093331330934,0x61636f6c2e747309\n"
".quad 0x5b09203233732e6c,0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163\n"
".quad 0x32335f3031383736,0x6e6f635f6e6f6e5f,0x5f6b726f775f7473,0x322b363132343834\n"
".quad 0x7225202c5d383430,0x646461090a3b3131,0x722509203436752e,0x34647225202c3964\n"
".quad 0x0a3b32647225202c,0x3436752e64646109,0x2c30316472250920,0x31202c3964722520\n"
".quad 0x662e7473090a3b36,0x6472255b09203436,0x25202c5d302b3031,0x090a3b3431316466\n"
".quad 0x6c61636f6c2e646c,0x722509203233732e,0x635f5f5b202c3434,0x75635f5f5f616475\n"
".quad 0x6c61636f6c5f6164,0x3837365f7261765f,0x6f6e5f32335f3031,0x5f74736e6f635f6e\n"
".quad 0x3438345f6b726f77,0x383430322b363132,0x2e747663090a3b5d,0x203233732e343673\n"
".quad 0x202c313164722509,0x6d090a3b34347225,0x2e656469772e6c75,0x6472250920323373\n"
".quad 0x34347225202c3231,0x61090a3b3631202c,0x09203436752e6464,0x25202c3331647225\n"
".quad 0x647225202c326472,0x2e7473090a3b3231,0x72255b0920343666,0x202c5d382b333164\n"
".quad 0x0a3b363131646625,0x365f38315f744c24,0x200a3a3031303931,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3039363439355f,0x093409636f6c2e09\n"
".quad 0x40090a3009363133,0x7262203932702521,0x315f744c24092061,0x3437343138365f38\n"
".quad 0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x363439355f38315f\n"
".quad 0x2e646461090a3039,0x6466250920343666,0x646625202c343431,0x646625202c303331\n"
".quad 0x6573090a3b393231,0x36662e71652e7074,0x2c30347025092034,0x2c34343164662520\n"
".quad 0x3b34343164662520,0x303470252140090a,0x4c24092061726220,0x3138365f38315f74\n"
".quad 0x2f2f200a3b343734,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c,0x355f38315f744c24\n"
".quad 0x2e090a3039363439,0x3133093409636f6c,0x2e646c090a300938,0x33732e6c61636f6c\n"
".quad 0x2c35347225092032,0x616475635f5f5b20,0x5f616475635f5f5f,0x61765f6c61636f6c\n"
".quad 0x5f30313837365f72,0x635f6e6f6e5f3233,0x726f775f74736e6f,0x3631323438345f6b\n"
".quad 0x0a3b5d383430322b,0x3233732e64646109,0x202c303172250920,0x3b31202c35347225\n"
".quad 0x636f6c2e7473090a,0x09203233732e6c61,0x5f616475635f5f5b,0x6c5f616475635f5f\n"
".quad 0x7261765f6c61636f,0x335f30313837365f,0x6f635f6e6f6e5f32,0x6b726f775f74736e\n"
".quad 0x2b3631323438345f,0x25202c5d38343032,0x7663090a3b303172,0x33732e3436732e74\n"
".quad 0x3431647225092032,0x0a3b30317225202c,0x6469772e6c756d09,0x2509203233732e65\n"
".quad 0x7225202c35316472,0x0a3b3631202c3031,0x3436752e64646109,0x2c36316472250920\n"
".quad 0x25202c3264722520,0x73090a3b35316472,0x5b09203436662e74,0x5d302b3631647225\n"
".quad 0x393231646625202c,0x6f6c2e646c090a3b,0x203233732e6c6163,0x5b202c3634722509\n"
".quad 0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163,0x32335f3031383736\n"
".quad 0x6e6f635f6e6f6e5f,0x5f6b726f775f7473,0x322b363132343834,0x63090a3b5d383430\n"
".quad 0x732e3436732e7476,0x3164722509203233,0x3b36347225202c37,0x69772e6c756d090a\n"
".quad 0x09203233732e6564,0x25202c3831647225,0x3b3631202c363472,0x36752e646461090a\n"
".quad 0x3931647225092034,0x202c32647225202c,0x090a3b3831647225,0x09203436662e7473\n"
".quad 0x382b39316472255b,0x3331646625202c5d,0x315f744c240a3b30,0x3437343138365f38\n"
".quad 0x38315f744c240a3a,0x3a3839363532315f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x39363439355f3831,0x09636f6c2e090a30,0x0a30093631330934\n"
".quad 0x61636f6c2e646c09,0x2509203233732e6c,0x5f5f5b202c303172,0x635f5f5f61647563\n"
".quad 0x61636f6c5f616475,0x37365f7261765f6c,0x6e5f32335f303138,0x74736e6f635f6e6f\n"
".quad 0x38345f6b726f775f,0x3430322b36313234,0x5f744c240a3b5d38,0x37393539355f3831\n"
".quad 0x6c3c2f2f200a3a30,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3439355f38315f74\n"
".quad 0x766f6d090a303936,0x722509203233752e,0x0a3b312d202c3734,0x656e2e7074657309\n"
".quad 0x702509203233732e,0x30317225202c3134,0x0a3b37347225202c,0x6220313470254009\n"
".quad 0x5f744c2409206172,0x39363439355f3831,0x2e617262090a3b30,0x744c240920696e75\n"
".quad 0x3b3431355f38315f,0x5f38315f744c240a,0x6c2e090a3a303737,0x393331093409636f\n"
".quad 0x2e766f6d090a3009,0x3472250920323373,0x090a3b312d202c38,0x6c61636f6c2e7473\n"
".quad 0x5f5b09203233732e,0x5f5f5f616475635f,0x636f6c5f61647563,0x365f7261765f6c61\n"
".quad 0x5f32335f30383637,0x736e6f635f6e6f6e,0x325f6b726f775f74,0x2b32373236343031\n"
".quad 0x25202c5d38343032,0x6c2e090a3b383472,0x323431093409636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x646625202c353431,0x2e766f6d090a3b31,0x6466250920343666\n"
".quad 0x646625202c363431,0x2e747663090a3b32,0x732e3436662e6e72,0x3164662509203233\n"
".quad 0x3b347225202c3734,0x36662e67656e090a,0x3431646625092034,0x3431646625202c38\n"
".quad 0x2e766f6d090a3b37,0x6466250920343666,0x336430202c393431,0x3030303030306665\n"
".quad 0x3b30303030303030,0x32352e31202f2f09,0x0a35302d65383835,0x3436662e6c756d09\n"
".quad 0x2c37326466250920,0x2c38343164662520,0x3b39343164662520,0x36662e766f6d090a\n"
".quad 0x3531646625092034,0x3030636430202c30,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x6461090a322d202f,0x2509203436662e64,0x25202c3135316466,0x6625202c37326466\n"
".quad 0x63090a3b30353164,0x61636f6c2e617476,0x2509203436752e6c,0x5f5f202c30326472\n"
".quad 0x635f5f5f61647563,0x61636f6c5f616475,0x37365f7261765f6c,0x6e5f32335f303836\n"
".quad 0x74736e6f635f6e6f,0x31325f6b726f775f,0x0a3b323732363430,0x345f38315f744c24\n"
".quad 0x200a3a3833313334,0x3e706f6f6c3c2f2f,0x6f6220706f6f4c20,0x20656e696c207964\n"
".quad 0x6f6c2e090a323333,0x0932333309330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x31646625202c3235,0x646461090a3b3534,0x662509203436662e,0x6625202c33353164\n"
".quad 0x6625202c32353164,0x6d090a3b36343164,0x09203436662e766f,0x202c343531646625\n"
".quad 0x3030306566336430,0x3030303030303030,0x30202f2f093b3030,0x2e6c756d090a352e\n"
".quad 0x6466250920343666,0x646625202c353531,0x646625202c333531,0x6f6d090a3b343531\n"
".quad 0x2509203436662e76,0x30202c3635316466,0x3030303066666264,0x3030303030303030\n"
".quad 0x312d202f2f093b30,0x6d722e646461090a,0x662509203436662e,0x6625202c37353164\n"
".quad 0x6625202c35353164,0x6d090a3b36353164,0x09203436662e766f,0x202c383531646625\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x672e70746573090a\n"
".quad 0x2509203436662e65,0x646625202c323470,0x646625202c373531,0x2140090a3b383531\n"
".quad 0x6172622032347025,0x38315f744c240920,0x3b3035363334345f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38\n"
".quad 0x0a30093333330933,0x2e6d722e6c756d09,0x6466250920343666,0x646625202c393531\n"
".quad 0x646625202c373531,0x6f6d090a3b373531,0x2509203436662e76,0x30202c3036316466\n"
".quad 0x3030303066666264,0x3030303030303030,0x312d202f2f093b30,0x70722e646461090a\n"
".quad 0x662509203436662e,0x6625202c31363164,0x6625202c35353164,0x6d090a3b30363164\n"
".quad 0x36662e70722e6c75,0x3631646625092034,0x3631646625202c32,0x3631646625202c31\n"
".quad 0x2e617262090a3b31,0x444c240920696e75,0x5a5f5f69646e6557,0x4965726175717336\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x31375f3639315f5f\n"
".quad 0x38315f744c240a3b,0x3a3035363334345f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38,0x0a30093433330933\n"
".quad 0x3436662e766f6d09,0x3336316466250920,0x306666626430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x646461090a312d20,0x203436662e70722e,0x2c31363164662509\n"
".quad 0x2c35353164662520,0x3b33363164662520,0x36662e766f6d090a,0x3631646625092034\n"
".quad 0x3030306430202c34,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e656c2e70,0x202c333470250920,0x202c313631646625,0x0a3b343631646625\n"
".quad 0x2033347025214009,0x744c240920617262,0x393334345f38315f,0x3c2f2f200a3b3630\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c,0x6c2e090a38333133\n"
".quad 0x353333093309636f,0x2e6c756d090a3009,0x09203436662e6d72,0x202c393531646625\n"
".quad 0x202c313631646625,0x0a3b313631646625,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x646625202c323631,0x646625202c373531,0x7262090a3b373531,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x5f3639315f5f3253,0x5f744c240a3b3137,0x30393334345f3831\n"
".quad 0x6c3c2f2f200a3a36,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0937333309330963,0x722e6c756d090a30,0x2509203436662e70\n"
".quad 0x25202c3536316466,0x25202c3735316466,0x090a3b3735316466,0x662e70722e6c756d\n"
".quad 0x3164662509203436,0x31646625202c3636,0x31646625202c3136,0x78616d090a3b3136\n"
".quad 0x662509203436662e,0x6625202c32363164,0x6625202c35363164,0x6d090a3b36363164\n"
".quad 0x09203436662e766f,0x202c393531646625,0x3030303030306430,0x3030303030303030\n"
".quad 0x30202f2f093b3030,0x646e6557444c240a,0x757173365a5f5f69,0x3231456449657261\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x39315f5f32534b52,0x2f200a3a31375f36\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434\n"
".quad 0x33093309636f6c2e,0x6f6d090a30093130,0x2509203436662e76,0x30202c3736316466\n"
".quad 0x3030303030303464,0x3030303030303030,0x0a32202f2f093b30,0x2e70722e6c756d09\n"
".quad 0x6466250920343666,0x646625202c383631,0x646625202c373631,0x6f6d090a3b323531\n"
".quad 0x2509203436662e76,0x30202c3936316466,0x3030303030303464,0x3030303030303030\n"
".quad 0x0a32202f2f093b30,0x2e70722e6c756d09,0x6466250920343666,0x646625202c303731\n"
".quad 0x646625202c393631,0x6f6d090a3b363431,0x2509203436662e76,0x30202c3137316466\n"
".quad 0x3030303030303464,0x3030303030303030,0x0a32202f2f093b30,0x2e6d722e6c756d09\n"
".quad 0x6466250920343666,0x646625202c323731,0x646625202c313731,0x6f6d090a3b323531\n"
".quad 0x2509203436662e76,0x30202c3337316466,0x3030303030303464,0x3030303030303030\n"
".quad 0x0a32202f2f093b30,0x2e6d722e6c756d09,0x6466250920343666,0x646625202c343731\n"
".quad 0x646625202c333731,0x616d090a3b363431,0x2509203436662e78,0x25202c3537316466\n"
".quad 0x25202c3836316466,0x090a3b3037316466,0x662e70722e646461,0x3164662509203436\n"
".quad 0x31646625202c3637,0x31646625202c3537,0x6e696d090a3b3135,0x662509203436662e\n"
".quad 0x6625202c37373164,0x6625202c32373164,0x61090a3b34373164,0x36662e6d722e6464\n"
".quad 0x3731646625092034,0x3731646625202c38,0x3531646625202c37,0x2e766f6d090a3b31\n"
".quad 0x6466250920343666,0x306430202c393731,0x3030303030303030,0x3b30303030303030\n"
".quad 0x73090a30202f2f09,0x33752e65672e7465,0x2509203436662e32,0x646625202c393472\n"
".quad 0x646625202c363731,0x656e090a3b393731,0x2509203233732e67,0x347225202c303572\n"
".quad 0x2e766f6d090a3b39,0x6466250920343666,0x306430202c303831,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x33752e656c2e7465,0x2509203436662e32\n"
".quad 0x646625202c313572,0x646625202c383731,0x656e090a3b303831,0x2509203233732e67\n"
".quad 0x357225202c323572,0x2e646e61090a3b31,0x3572250920323362,0x2c30357225202c33\n"
".quad 0x090a3b3235722520,0x203233752e766f6d,0x30202c3435722509,0x2e70746573090a3b\n"
".quad 0x09203233732e7165,0x7225202c34347025,0x34357225202c3335,0x3434702540090a3b\n"
".quad 0x4c24092061726220,0x3535345f38315f74,0x2f2f200a3b383339,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3033093309636f6c\n"
".quad 0x766f6d090a300932,0x662509203436662e,0x6430202c31383164,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x2e656e2e70746573,0x3470250920343666\n"
".quad 0x3731646625202c35,0x3831646625202c36,0x2e766f6d090a3b31,0x6466250920343666\n"
".quad 0x306430202c323831,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x2e75656e2e707465,0x3470250920343666,0x3731646625202c36,0x3831646625202c38\n"
".quad 0x70252140090a3b32,0x0920617262203634,0x345f38315f744c24,0x200a3b3439313635\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f\n"
".quad 0x093309636f6c2e09,0x40090a3009333033,0x7262203534702521,0x315f744c24092061\n"
".quad 0x3035343635345f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x313334345f38315f,0x636f6c2e090a3833,0x3009343033093309,0x6d722e6c756d090a\n"
".quad 0x662509203436662e,0x6625202c33383164,0x646625202c373264,0x756d090a3b353531\n"
".quad 0x3436662e70722e6c,0x3438316466250920,0x2c3732646625202c,0x3b35353164662520\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x6625202c35383164,0x6625202c39353164\n"
".quad 0x61090a3b33383164,0x36662e70722e6464,0x3831646625092034,0x3631646625202c36\n"
".quad 0x3831646625202c32,0x2e766f6d090a3b34,0x6466250920343666,0x306430202c373831\n"
".quad 0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09,0x33752e71652e7465\n"
".quad 0x2509203436662e32,0x646625202c353572,0x646625202c363831,0x656e090a3b373831\n"
".quad 0x2509203233732e67,0x357225202c363572,0x2e766f6d090a3b35,0x6466250920343666\n"
".quad 0x306430202c383831,0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09\n"
".quad 0x33752e71652e7465,0x2509203436662e32,0x646625202c373572,0x646625202c353831\n"
".quad 0x656e090a3b383831,0x2509203233732e67,0x357225202c383572,0x2e646e61090a3b37\n"
".quad 0x3572250920323362,0x2c36357225202c39,0x090a3b3835722520,0x203233752e766f6d\n"
".quad 0x30202c3036722509,0x2e70746573090a3b,0x09203233732e7165,0x7225202c37347025\n"
".quad 0x30367225202c3935,0x3734702540090a3b,0x4c24092061726220,0x3332365f38315f74\n"
".quad 0x2f2f200a3b343738,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c,0x345f38315f744c24\n"
".quad 0x2e090a3833313334,0x3632093309636f6c,0x766f6d090a300932,0x662509203436662e\n"
".quad 0x6625202c39383164,0x6d090a3b35383164,0x09203436662e766f,0x202c303931646625\n"
".quad 0x0a3b363831646625,0x3233732e766f6d09,0x202c313672250920,0x2e617262090a3b30\n"
".quad 0x444c240920696e75,0x5a5f5f69646e6557,0x657a5f7669643431,0x31747261705f6f72\n"
".quad 0x746e693231456449,0x70675f6c61767265,0x534b52455f544975,0x5f62525f34535f32\n"
".quad 0x0a3b38365f363931,0x365f38315f744c24,0x200a3a3437383332,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f,0x093309636f6c2e09\n"
".quad 0x6d090a3009303732,0x09203436662e766f,0x202c313931646625,0x3030303030306430\n"
".quad 0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a,0x2509203436662e74\n"
".quad 0x646625202c383470,0x646625202c363831,0x2140090a3b313931,0x6172622038347025\n"
".quad 0x38315f744c240920,0x3b3236393635345f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38,0x0a30093237320933\n"
".quad 0x2e70722e76696409,0x6466250920343666,0x646625202c303931,0x646625202c363831\n"
".quad 0x6f6d090a3b363731,0x2509203436662e76,0x30202c3938316466,0x3030303066666664\n"
".quad 0x3030303030303030,0x692d202f2f093b30,0x2e766f6d090a666e,0x3672250920323373\n"
".quad 0x62090a3b31202c31,0x0920696e752e6172,0x69646e6557444c24,0x76696434315a5f5f\n"
".quad 0x61705f6f72657a5f,0x3231456449317472,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x5f34535f32534b52,0x365f3639315f6252,0x315f744c240a3b38,0x3236393635345f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x313334345f38315f\n"
".quad 0x636f6c2e090a3833,0x3009333732093309,0x36662e766f6d090a,0x3931646625092034\n"
".quad 0x3030306430202c32,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e746c2e70,0x202c393470250920,0x202c353831646625,0x0a3b323931646625\n"
".quad 0x2039347025214009,0x744c240920617262,0x323735345f38315f,0x3c2f2f200a3b3831\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c,0x6f6d090a38333133\n"
".quad 0x2509203436662e76,0x30202c3039316466,0x3030303066663764,0x3030303030303030\n"
".quad 0x6e69202f2f093b30,0x662e766f6d090a66,0x3164662509203436,0x66666430202c3938\n"
".quad 0x3030303030303066,0x093b303030303030,0x0a666e692d202f2f,0x3233732e766f6d09\n"
".quad 0x202c313672250920,0x2e617262090a3b30,0x444c240920696e75,0x5a5f5f69646e6557\n"
".quad 0x657a5f7669643431,0x31747261705f6f72,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x5f62525f34535f32,0x0a3b38365f363931,0x345f38315f744c24\n"
".quad 0x200a3a3831323735,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3833313334345f,0x093309636f6c2e09,0x64090a3009383732,0x36662e70722e7669\n"
".quad 0x3931646625092034,0x3831646625202c30,0x3731646625202c35,0x2e766f6d090a3b38\n"
".quad 0x6466250920343666,0x666430202c393831,0x3030303030306666,0x3b30303030303030\n"
".quad 0x666e692d202f2f09,0x33732e766f6d090a,0x2c31367225092032,0x57444c240a3b3120\n"
".quad 0x315a5f5f69646e65,0x72657a5f76696434,0x4931747261705f6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315f62525f34535f,0x200a3a38365f3639\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f\n"
".quad 0x093309636f6c2e09,0x6d090a3009343033,0x09203436662e766f,0x202c333931646625\n"
".quad 0x0a3b393831646625,0x3436662e766f6d09,0x3439316466250920,0x303931646625202c\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x365f3639315f6c65,0x315f744c240a3b33,0x3035343635345f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x313334345f38315f\n"
".quad 0x636f6c2e090a3833,0x3009363033093309,0x6d722e6c756d090a,0x662509203436662e\n"
".quad 0x6625202c33383164,0x646625202c373264,0x756d090a3b353531,0x3436662e70722e6c\n"
".quad 0x3438316466250920,0x2c3732646625202c,0x3b35353164662520,0x6d722e646461090a\n"
".quad 0x662509203436662e,0x6625202c35383164,0x6625202c39353164,0x61090a3b33383164\n"
".quad 0x36662e70722e6464,0x3831646625092034,0x3631646625202c36,0x3831646625202c32\n"
".quad 0x2e766f6d090a3b34,0x6466250920343666,0x306430202c353931,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x33752e71652e7465,0x2509203436662e32\n"
".quad 0x646625202c323672,0x646625202c363831,0x656e090a3b353931,0x2509203233732e67\n"
".quad 0x367225202c333672,0x2e766f6d090a3b32,0x6466250920343666,0x306430202c363931\n"
".quad 0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09,0x33752e71652e7465\n"
".quad 0x2509203436662e32,0x646625202c343672,0x646625202c353831,0x656e090a3b363931\n"
".quad 0x2509203233732e67,0x367225202c353672,0x2e646e61090a3b34,0x3672250920323362\n"
".quad 0x2c33367225202c36,0x090a3b3536722520,0x203233752e766f6d,0x30202c3736722509\n"
".quad 0x2e70746573090a3b,0x09203233732e7165,0x7225202c30357025,0x37367225202c3636\n"
".quad 0x3035702540090a3b,0x4c24092061726220,0x3432365f38315f74,0x2f2f200a3b363833\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334\n"
".quad 0x3432093309636f6c,0x766f6d090a300934,0x662509203436662e,0x6625202c37393164\n"
".quad 0x6d090a3b35383164,0x09203436662e766f,0x202c383931646625,0x0a3b363831646625\n"
".quad 0x696e752e61726209,0x6e6557444c240920,0x6432315a5f5f6964,0x746167656e5f7669\n"
".quad 0x3231456449657669,0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52\n"
".quad 0x365f3639315f5f31,0x315f744c240a3b36,0x3638333432365f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x313334345f38315f,0x636f6c2e090a3833\n"
".quad 0x3009393432093309,0x36662e766f6d090a,0x3931646625092034,0x3030306430202c39\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x746573090a30202f,0x3436662e746c2e70\n"
".quad 0x202c313570250920,0x202c363831646625,0x0a3b393931646625,0x2031357025214009\n"
".quad 0x744c240920617262,0x373735345f38315f,0x3c2f2f200a3b3033,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x34345f38315f744c,0x6c2e090a38333133,0x303532093309636f\n"
".quad 0x2e766964090a3009,0x09203436662e6d72,0x202c373931646625,0x202c363831646625\n"
".quad 0x0a3b383731646625,0x3436662e766f6d09,0x3839316466250920,0x306666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x7262090a666e6920,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x5f76696432315a5f,0x657669746167656e,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f5f31534b525f32,0x0a3b36365f363931\n"
".quad 0x345f38315f744c24,0x200a3a3033373735,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3833313334345f,0x093309636f6c2e09,0x6d090a3009313532\n"
".quad 0x09203436662e766f,0x202c303032646625,0x3030303030306430,0x3030303030303030\n"
".quad 0x30202f2f093b3030,0x6c2e70746573090a,0x2509203436662e74,0x646625202c323570\n"
".quad 0x646625202c353831,0x2140090a3b303032,0x6172622032357025,0x38315f744c240920\n"
".quad 0x3b3638393735345f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x33313334345f3831,0x662e766f6d090a38,0x3164662509203436,0x66376430202c3839\n"
".quad 0x3030303030303066,0x093b303030303030,0x090a666e69202f2f,0x203436662e766f6d\n"
".quad 0x2c37393164662509,0x3030666666643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x7262090a666e692d,0x240920696e752e61,0x5f69646e6557444c,0x5f76696432315a5f\n"
".quad 0x657669746167656e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x5f5f31534b525f32,0x0a3b36365f363931,0x345f38315f744c24,0x200a3a3638393735\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f\n"
".quad 0x093309636f6c2e09,0x64090a3009343532,0x36662e70722e7669,0x3931646625092034\n"
".quad 0x3831646625202c38,0x3731646625202c35,0x2e766f6d090a3b38,0x6466250920343666\n"
".quad 0x666430202c373931,0x3030303030306666,0x3b30303030303030,0x666e692d202f2f09\n"
".quad 0x646e6557444c240a,0x696432315a5f5f69,0x69746167656e5f76,0x6932314564496576\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b,0x36365f3639315f5f\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x313334345f38315f\n"
".quad 0x636f6c2e090a3833,0x3009363033093309,0x36662e766f6d090a,0x3931646625092034\n"
".quad 0x3931646625202c33,0x2e766f6d090a3b37,0x6466250920343666,0x646625202c343931\n"
".quad 0x6f6d090a3b383931,0x2509203233732e76,0x0a3b30202c313672,0x696e752e61726209\n"
".quad 0x6e6557444c240920,0x746e695f5f5f6964,0x616e5f6c616e7265,0x6c656e72656b5f6e\n"
".quad 0x3b33365f3639315f,0x5f38315f744c240a,0x0a3a343931363534,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38,0x3309636f6c2e090a\n"
".quad 0x090a300938303309,0x6220353470252140,0x5f744c2409206172,0x34323835345f3831\n"
".quad 0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0939303309330963,0x722e6c756d090a30,0x2509203436662e6d\n"
".quad 0x25202c3338316466,0x6625202c37326466,0x6d090a3b35353164,0x36662e70722e6c75\n"
".quad 0x3831646625092034,0x3732646625202c34,0x353531646625202c,0x722e646461090a3b\n"
".quad 0x2509203436662e6d,0x25202c3538316466,0x25202c3935316466,0x090a3b3338316466\n"
".quad 0x662e70722e646461,0x3164662509203436,0x31646625202c3638,0x31646625202c3236\n"
".quad 0x766f6d090a3b3438,0x662509203436662e,0x6430202c31303264,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573,0x09203436662e3233\n"
".quad 0x6625202c38367225,0x6625202c36383164,0x6e090a3b31303264,0x09203233732e6765\n"
".quad 0x7225202c39367225,0x766f6d090a3b3836,0x662509203436662e,0x6430202c32303264\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x752e71652e746573\n"
".quad 0x09203436662e3233,0x6625202c30377225,0x6625202c35383164,0x6e090a3b32303264\n"
".quad 0x09203233732e6765,0x7225202c31377225,0x646e61090a3b3037,0x722509203233622e\n"
".quad 0x39367225202c3237,0x0a3b31377225202c,0x3233752e766f6d09,0x202c333772250920\n"
".quad 0x70746573090a3b30,0x203233732e71652e,0x25202c3335702509,0x377225202c323772\n"
".quad 0x35702540090a3b33,0x2409206172622033,0x32365f38315f744c,0x2f200a3b38393834\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434\n"
".quad 0x32093309636f6c2e,0x6f6d090a30093632,0x2509203436662e76,0x25202c3330326466\n"
".quad 0x090a3b3538316466,0x203436662e766f6d,0x2c34303264662509,0x3b36383164662520\n"
".quad 0x6e752e617262090a,0x6557444c24092069,0x32315a5f5f69646e,0x69736f705f766964\n"
".quad 0x3145644965766974,0x61767265746e6932,0x5f54497570675f6c,0x4b525f32534b5245\n"
".quad 0x5f3639315f5f3153,0x5f744c240a3b3436,0x39383432365f3831,0x6c3c2f2f200a3a38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x0931333209330963,0x662e766f6d090a30,0x3264662509203436,0x30306430202c3530\n"
".quad 0x3030303030303030,0x093b303030303030,0x6573090a30202f2f,0x36662e746c2e7074\n"
".quad 0x2c34357025092034,0x2c36383164662520,0x3b35303264662520,0x343570252140090a\n"
".quad 0x4c24092061726220,0x3835345f38315f74,0x2f2f200a3b343537,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3332093309636f6c\n"
".quad 0x766964090a300932,0x203436662e70722e,0x2c34303264662509,0x2c36383164662520\n"
".quad 0x3b36373164662520,0x36662e766f6d090a,0x3032646625092034,0x6666666430202c33\n"
".quad 0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f,0x20696e752e617262\n"
".quad 0x646e6557444c2409,0x696432315a5f5f69,0x697469736f705f76,0x6932314564496576\n"
".quad 0x5f6c61767265746e,0x52455f5449757067,0x31534b525f32534b,0x34365f3639315f5f\n"
".quad 0x38315f744c240a3b,0x3a3435373835345f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38,0x0a30093333320933\n"
".quad 0x3436662e766f6d09,0x3630326466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e746c2e,0x25202c3535702509\n"
".quad 0x25202c3538316466,0x090a3b3630326466,0x6220353570252140,0x5f744c2409206172\n"
".quad 0x31303935345f3831,0x6c3c2f2f200a3b30,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x766f6d090a383331,0x662509203436662e,0x6430202c34303264\n"
".quad 0x3030303030666637,0x3030303030303030,0x666e69202f2f093b,0x36662e766f6d090a\n"
".quad 0x3032646625092034,0x6666666430202c33,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x090a666e692d202f,0x20696e752e617262,0x646e6557444c2409,0x696432315a5f5f69\n"
".quad 0x697469736f705f76,0x6932314564496576,0x5f6c61767265746e,0x52455f5449757067\n"
".quad 0x31534b525f32534b,0x34365f3639315f5f,0x38315f744c240a3b,0x3a3031303935345f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831\n"
".quad 0x09636f6c2e090a38,0x0a30093633320933,0x2e6d722e76696409,0x6466250920343666\n"
".quad 0x646625202c333032,0x646625202c353831,0x6f6d090a3b363731,0x2509203436662e76\n"
".quad 0x30202c3430326466,0x3030303066663764,0x3030303030303030,0x6e69202f2f093b30\n"
".quad 0x6e6557444c240a66,0x6432315a5f5f6964,0x7469736f705f7669,0x3231456449657669\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x534b525f32534b52,0x365f3639315f5f31\n"
".quad 0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0939303309330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x32646625202c3339,0x766f6d090a3b3330,0x662509203436662e,0x6625202c34393164\n"
".quad 0x6d090a3b34303264,0x09203233732e766f,0x3b30202c31367225,0x6e752e617262090a\n"
".quad 0x6557444c24092069,0x6e695f5f5f69646e,0x6e5f6c616e726574,0x656e72656b5f6e61\n"
".quad 0x33365f3639315f6c,0x38315f744c240a3b,0x3a3234323835345f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38\n"
".quad 0x0a30093131330933,0x3436662e766f6d09,0x3439316466250920,0x386666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x6f6d090a6e616e20,0x2509203436662e76\n"
".quad 0x30202c3339316466,0x3030303866663764,0x3030303030303030,0x616e202f2f093b30\n"
".quad 0x732e766f6d090a6e,0x3136722509203233,0x7262090a3b30202c,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x6e7265746e695f5f,0x6b5f6e616e5f6c61,0x39315f6c656e7265\n"
".quad 0x4c240a3b33365f36,0x3535345f38315f74,0x2f2f200a3a383339,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3133093309636f6c\n"
".quad 0x766f6d090a300933,0x662509203436662e,0x6430202c37303264,0x3030303030303030\n"
".quad 0x3030303030303030,0x090a30202f2f093b,0x2e746c2e70746573,0x3570250920343666\n"
".quad 0x3731646625202c36,0x3032646625202c36,0x70252140090a3b37,0x0920617262203635\n"
".quad 0x365f38315f744c24,0x200a3b3236373932,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3833313334345f,0x093309636f6c2e09,0x6d090a3009323931\n"
".quad 0x36662e70722e6c75,0x3831646625092034,0x3732646625202c34,0x353531646625202c\n"
".quad 0x722e646461090a3b,0x2509203436662e70,0x25202c3638316466,0x25202c3236316466\n"
".quad 0x090a3b3438316466,0x203436662e766f6d,0x2c38303264662509,0x3b36383164662520\n"
".quad 0x3309636f6c2e090a,0x090a300933393109,0x662e6d722e6c756d,0x3164662509203436\n"
".quad 0x32646625202c3338,0x3531646625202c37,0x2e646461090a3b35,0x09203436662e6d72\n"
".quad 0x202c353831646625,0x202c393531646625,0x0a3b333831646625,0x3436662e766f6d09\n"
".quad 0x3930326466250920,0x353831646625202c,0x752e617262090a3b,0x5f744c240920696e\n"
".quad 0x30353932365f3831,0x315f744c240a3b36,0x3236373932365f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x313334345f38315f,0x636f6c2e090a3833\n"
".quad 0x3009363931093309,0x6d722e6c756d090a,0x662509203436662e,0x6625202c33383164\n"
".quad 0x646625202c373264,0x6461090a3b353531,0x3436662e6d722e64,0x3538316466250920\n"
".quad 0x393531646625202c,0x333831646625202c,0x662e766f6d090a3b,0x3264662509203436\n"
".quad 0x31646625202c3830,0x6f6c2e090a3b3538,0x0937393109330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e70,0x25202c3438316466,0x6625202c37326466,0x61090a3b35353164\n"
".quad 0x36662e70722e6464,0x3831646625092034,0x3631646625202c36,0x3831646625202c32\n"
".quad 0x2e766f6d090a3b34,0x6466250920343666,0x646625202c393032,0x744c240a3b363831\n"
".quad 0x353932365f38315f,0x3c2f2f200a3a3630,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x34345f38315f744c,0x6f6d090a38333133,0x2509203436662e76,0x30202c3031326466\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x746c2e7074657309\n"
".quad 0x702509203436662e,0x31646625202c3735,0x32646625202c3638,0x252140090a3b3031\n"
".quad 0x2061726220373570,0x5f38315f744c2409,0x0a3b343732303336,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38,0x3309636f6c2e090a\n"
".quad 0x090a300931303209,0x203436662e766f6d,0x2c31313264662509,0x3b38373164662520\n"
".quad 0x3309636f6c2e090a,0x090a300932303209,0x203436662e766f6d,0x2c32313264662509\n"
".quad 0x3b36373164662520,0x6e752e617262090a,0x315f744c24092069,0x3033353033365f38\n"
".quad 0x38315f744c240a3b,0x3a3437323033365f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x33313334345f3831,0x662e766f6d090a38,0x3264662509203436\n"
".quad 0x30306430202c3331,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x36662e746c2e7074,0x2c38357025092034,0x2c35383164662520,0x3b33313264662520\n"
".quad 0x383570252140090a,0x4c24092061726220,0x3033365f38315f74,0x2f2f200a3b363837\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x345f38315f744c24,0x40090a3833313334\n"
".quad 0x7262203635702521,0x315f744c24092061,0x3839323133365f38,0x6f6c3c2f2f200a3b\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x313334345f38315f,0x636f6c2e090a3833\n"
".quad 0x3009363032093309,0x36662e766f6d090a,0x3132646625092034,0x3731646625202c31\n"
".quad 0x636f6c2e090a3b36,0x3009373032093309,0x36662e766f6d090a,0x3132646625092034\n"
".quad 0x3731646625202c32,0x2e617262090a3b36,0x744c240920696e75,0x353033365f38315f\n"
".quad 0x5f744c240a3b3033,0x39323133365f3831,0x6c3c2f2f200a3a38,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331,0x0930313209330963\n"
".quad 0x662e766f6d090a30,0x3264662509203436,0x31646625202c3131,0x6f6c2e090a3b3837\n"
".quad 0x0931313209330963,0x662e766f6d090a30,0x3264662509203436,0x31646625202c3231\n"
".quad 0x617262090a3b3837,0x4c240920696e752e,0x3033365f38315f74,0x744c240a3b303335\n"
".quad 0x373033365f38315f,0x3c2f2f200a3a3638,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x34345f38315f744c,0x6c2e090a38333133,0x353132093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x646625202c313132,0x6c2e090a3b363731,0x363132093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x646625202c323132,0x744c240a3b383731\n"
".quad 0x353033365f38315f,0x5f744c240a3a3033,0x31303033365f3831,0x6c3c2f2f200a3a38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x0933313309330963,0x722e766964090a30,0x2509203436662e6d,0x25202c3339316466\n"
".quad 0x25202c3830326466,0x090a3b3131326466,0x662e70722e766964,0x3164662509203436\n"
".quad 0x32646625202c3439,0x32646625202c3930,0x766f6d090a3b3231,0x722509203233732e\n"
".quad 0x240a3b30202c3136,0x5f69646e6557444c,0x6e7265746e695f5f,0x6b5f6e616e5f6c61\n"
".quad 0x39315f6c656e7265,0x2f200a3a33365f36,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a383331333434,0x31093309636f6c2e,0x656e090a30093637\n"
".quad 0x2509203436662e67,0x25202c3431326466,0x090a3b3439316466,0x662e6d722e646461\n"
".quad 0x3264662509203436,0x31646625202c3531,0x32646625202c3535,0x67656e090a3b3431\n"
".quad 0x662509203436662e,0x6625202c36313264,0x61090a3b33393164,0x36662e70722e6464\n"
".quad 0x3132646625092034,0x3531646625202c37,0x3132646625202c35,0x2e78616d090a3b36\n"
".quad 0x6466250920343666,0x646625202c383132,0x646625202c353132,0x696d090a3b323531\n"
".quad 0x2509203436662e6e,0x25202c3931326466,0x25202c3731326466,0x090a3b3634316466\n"
".quad 0x2e656c2e70746573,0x3570250920343666,0x3132646625202c39,0x3132646625202c38\n"
".quad 0x70252140090a3b39,0x0920617262203935,0x345f38315f744c24,0x200a3b3636303237\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f\n"
".quad 0x093309636f6c2e09,0x6d090a3009373731,0x09203436662e766f,0x202c303232646625\n"
".quad 0x0a3b383132646625,0x3436662e766f6d09,0x3132326466250920,0x393132646625202c\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x365f3639315f6c65,0x315f744c240a3b31,0x3636303237345f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32333320656e,0x62616c2064616568,0x744c242064656c65,0x313334345f38315f\n"
".quad 0x636f6c2e090a3833,0x3009393731093309,0x36662e766f6d090a,0x3232646625092034\n"
".quad 0x6666376430202c31,0x3030303030303038,0x2f093b3030303030,0x6d090a6e616e202f\n"
".quad 0x09203436662e766f,0x202c303232646625,0x3030386666376430,0x3030303030303030\n"
".quad 0x6e202f2f093b3030,0x6557444c240a6e61,0x6e695f5f5f69646e,0x6e5f6c616e726574\n"
".quad 0x656e72656b5f6e61,0x31365f3639315f6c,0x6f6c3c2f2f200a3a,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x313334345f38315f,0x636f6c2e090a3833,0x3009343531093409\n"
".quad 0x36662e766f6d090a,0x3232646625092034,0x3232646625202c32,0x2e766f6d090a3b30\n"
".quad 0x6466250920343666,0x646625202c333232,0x6f6d090a3b323232,0x2509203436662e76\n"
".quad 0x25202c3432326466,0x090a3b3132326466,0x203436662e766f6d,0x2c35323264662509\n"
".quad 0x3b34323264662520,0x33732e766f6d090a,0x2c34377225092032,0x746573090a3b3020\n"
".quad 0x3233732e656e2e70,0x202c303670250920,0x7225202c31367225,0x252140090a3b3437\n"
".quad 0x2061726220303670,0x5f38315f744c2409,0x0a3b363039353336,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38,0x3309636f6c2e090a\n"
".quad 0x090a300931393209,0x662e70722e6c756d,0x3164662509203436,0x32646625202c3438\n"
".quad 0x3531646625202c37,0x2e646461090a3b35,0x09203436662e7072,0x202c363831646625\n"
".quad 0x202c323631646625,0x0a3b343831646625,0x3436662e766f6d09,0x3632326466250920\n"
".quad 0x303030306430202c,0x3030303030303030,0x2f2f093b30303030,0x70746573090a3020\n"
".quad 0x203436662e746c2e,0x25202c3136702509,0x25202c3638316466,0x090a3b3632326466\n"
".quad 0x6220313670252140,0x5f744c2409206172,0x35333438345f3831,0x6c3c2f2f200a3b34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x0932393209330963,0x722e766964090a30,0x2509203436662e6d,0x25202c3732326466\n"
".quad 0x25202c3638316466,0x090a3b3837316466,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644932747261,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x34535f32534b5245,0x39355f3639315f5f,0x38315f744c240a3b\n"
".quad 0x3a3435333438345f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x33313334345f3831,0x09636f6c2e090a38,0x0a30093439320933,0x2e6d722e6c756d09\n"
".quad 0x6466250920343666,0x646625202c383232,0x31646625202c3732,0x646461090a3b3535\n"
".quad 0x203436662e6d722e,0x2c39323264662509,0x2c39353164662520,0x3b38323264662520\n"
".quad 0x6d722e766964090a,0x662509203436662e,0x6625202c37323264,0x6625202c39323264\n"
".quad 0x4c240a3b36373164,0x5f5f69646e655744,0x7a5f76696434315a,0x747261705f6f7265\n"
".quad 0x6e69323145644932,0x675f6c6176726574,0x4b52455f54497570,0x315f5f34535f3253\n"
".quad 0x200a3a39355f3639,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3833313334345f,0x093309636f6c2e09,0x6d090a3009363731,0x09203436662e766f\n"
".quad 0x202c303332646625,0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x646461090a666e69,0x203436662e6d722e,0x2c31333264662509,0x2c35353164662520\n"
".quad 0x3b30333264662520,0x36662e67656e090a,0x3332646625092034,0x3232646625202c32\n"
".quad 0x2e646461090a3b37,0x09203436662e7072,0x202c333332646625,0x202c353531646625\n"
".quad 0x0a3b323332646625,0x3436662e78616d09,0x3433326466250920,0x313332646625202c\n"
".quad 0x323531646625202c,0x662e6e696d090a3b,0x3264662509203436,0x32646625202c3533\n"
".quad 0x31646625202c3333,0x746573090a3b3634,0x3436662e656c2e70,0x202c323670250920\n"
".quad 0x202c343332646625,0x0a3b353332646625,0x2032367025214009,0x744c240920617262\n"
".quad 0x363438345f38315f,0x3c2f2f200a3b3031,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x34345f38315f744c,0x6c2e090a38333133,0x373731093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x646625202c363332,0x6f6d090a3b343332,0x2509203436662e76\n"
".quad 0x25202c3733326466,0x090a3b3533326466,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x65746e695f5f5f69,0x6e616e5f6c616e72,0x5f6c656e72656b5f,0x0a3b37355f363931\n"
".quad 0x345f38315f744c24,0x200a3a3031363438,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3833313334345f,0x093309636f6c2e09,0x6d090a3009393731\n"
".quad 0x09203436662e766f,0x202c373332646625,0x3030386666376430,0x3030303030303030\n"
".quad 0x6e202f2f093b3030,0x2e766f6d090a6e61,0x6466250920343666,0x376430202c363332\n"
".quad 0x3030303030386666,0x3b30303030303030,0x0a6e616e202f2f09,0x69646e6557444c24\n"
".quad 0x7265746e695f5f5f,0x5f6e616e5f6c616e,0x315f6c656e72656b,0x200a3a37355f3639\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323333,0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f\n"
".quad 0x093409636f6c2e09,0x6d090a3009373531,0x09203436662e766f,0x202c383332646625\n"
".quad 0x0a3b363332646625,0x3436662e766f6d09,0x3933326466250920,0x373332646625202c\n"
".quad 0x752e617262090a3b,0x5f744c240920696e,0x35363533365f3831,0x315f744c240a3b30\n"
".quad 0x3630393533365f38,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x313334345f38315f,0x2e766f6d090a3833,0x6466250920343666,0x376430202c393332\n"
".quad 0x3030303030386666,0x3b30303030303030,0x0a6e616e202f2f09,0x3436662e766f6d09\n"
".quad 0x3833326466250920,0x386666376430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x744c240a6e616e20,0x363533365f38315f,0x3c2f2f200a3a3035,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x34345f38315f744c,0x6c2e090a38333133,0x323631093409636f\n"
".quad 0x2e646461090a3009,0x6466250920343666,0x646625202c303432,0x646625202c343232\n"
".quad 0x6573090a3b323232,0x36662e71652e7074,0x2c33367025092034,0x2c30343264662520\n"
".quad 0x3b30343264662520,0x333670252140090a,0x4c24092061726220,0x3138365f38315f74\n"
".quad 0x2f2f200a3b363839,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c,0x345f38315f744c24\n"
".quad 0x2e090a3833313334,0x3031093409636f6c,0x746573090a300938,0x36662e75656e2e70\n"
".quad 0x2c34367025092034,0x2c30343264662520,0x3b30343264662520,0x343670252140090a\n"
".quad 0x4c24092061726220,0x3034365f38315f74,0x2f2f200a3b383532,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3838093309636f6c\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x306430202c313432,0x3030303030303030\n"
".quad 0x3b30303030303030,0x62090a30202f2f09,0x0920696e752e6172,0x69646e6557444c24\n"
".quad 0x74646977355a5f5f,0x32315f5445644968,0x6c61767265746e69,0x5f3053497570675f\n"
".quad 0x35355f3639315f45,0x38315f744c240a3b,0x3a3835323034365f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38\n"
".quad 0x090a300930390933,0x203436662e67656e,0x2c32343264662509,0x3b32323264662520\n"
".quad 0x70722e646461090a,0x662509203436662e,0x6625202c31343264,0x6625202c34323264\n"
".quad 0x4c240a3b32343264,0x5f5f69646e655744,0x496874646977355a,0x6e6932315f544564\n"
".quad 0x675f6c6176726574,0x5f455f3053497570,0x0a3a35355f363931,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38,0x3409636f6c2e090a\n"
".quad 0x090a300938303109,0x203436662e766f6d,0x2c33343264662509,0x3030656633643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x6c756d090a352e30,0x662509203436662e\n"
".quad 0x6625202c34343264,0x6625202c30343264,0x61090a3b33343264,0x09203436662e7362\n"
".quad 0x202c353432646625,0x0a3b343432646625,0x3436662e766f6d09,0x3634326466250920\n"
".quad 0x306265336430202c,0x3030306137663663,0x2f2f093b30303030,0x090a36302d653120\n"
".quad 0x203436662e6c756d,0x2c37343264662509,0x2c35343264662520,0x3b36343264662520\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x646625202c353670,0x646625202c313432\n"
".quad 0x2540090a3b373432,0x2061726220353670,0x5f38315f744c2409,0x0a3b363837363432\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38\n"
".quad 0x3309636f6c2e090a,0x090a300932333309,0x203436662e766f6d,0x2c38343264662509\n"
".quad 0x3030666662643020,0x3030303030303030,0x202f2f093b303030,0x2e646461090a312d\n"
".quad 0x09203436662e6d72,0x202c393432646625,0x202c323232646625,0x0a3b383432646625\n"
".quad 0x3436662e766f6d09,0x3035326466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e65672e,0x25202c3636702509\n"
".quad 0x25202c3934326466,0x090a3b3035326466,0x6220363670252140,0x5f744c2409206172\n"
".quad 0x39383639345f3831,0x6c3c2f2f200a3b38,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x0933333309330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e6d,0x25202c3135326466,0x25202c3934326466,0x090a3b3934326466\n"
".quad 0x203436662e766f6d,0x2c32353264662509,0x3030666662643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e646461090a312d,0x09203436662e7072,0x202c333532646625\n"
".quad 0x202c343232646625,0x0a3b323532646625,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x646625202c343532,0x646625202c333532,0x7262090a3b333532,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x5f3639315f5f3253,0x5f744c240a3b3135,0x39383639345f3831\n"
".quad 0x6c3c2f2f200a3a38,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0934333309330963,0x662e766f6d090a30,0x3264662509203436\n"
".quad 0x66626430202c3535,0x3030303030303066,0x093b303030303030,0x61090a312d202f2f\n"
".quad 0x36662e70722e6464,0x3532646625092034,0x3232646625202c33,0x3532646625202c34\n"
".quad 0x2e766f6d090a3b35,0x6466250920343666,0x306430202c363532,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e656c2e707465,0x3736702509203436\n"
".quad 0x333532646625202c,0x363532646625202c,0x3670252140090a3b,0x2409206172622037\n"
".quad 0x39345f38315f744c,0x2f200a3b34353137,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a383331333434,0x33093309636f6c2e,0x756d090a30093533\n"
".quad 0x3436662e6d722e6c,0x3135326466250920,0x333532646625202c,0x333532646625202c\n"
".quad 0x722e6c756d090a3b,0x2509203436662e70,0x25202c3435326466,0x25202c3934326466\n"
".quad 0x090a3b3934326466,0x20696e752e617262,0x646e6557444c2409,0x757173365a5f5f69\n"
".quad 0x3231456449657261,0x6c61767265746e69,0x455f54497570675f,0x39315f5f32534b52\n"
".quad 0x4c240a3b31355f36,0x3739345f38315f74,0x2f2f200a3a343531,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3333093309636f6c\n"
".quad 0x6c756d090a300937,0x203436662e70722e,0x2c37353264662509,0x2c39343264662520\n"
".quad 0x3b39343264662520,0x70722e6c756d090a,0x662509203436662e,0x6625202c38353264\n"
".quad 0x6625202c33353264,0x6d090a3b33353264,0x09203436662e7861,0x202c343532646625\n"
".quad 0x202c373532646625,0x0a3b383532646625,0x3436662e766f6d09,0x3135326466250920\n"
".quad 0x303030306430202c,0x3030303030303030,0x2f2f093b30303030,0x6557444c240a3020\n"
".quad 0x73365a5f5f69646e,0x4564496572617571,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x5f5f32534b52455f,0x0a3a31355f363931,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3833313334345f38,0x3409636f6c2e090a,0x090a300938303109\n"
".quad 0x662e6d722e6c756d,0x3264662509203436,0x32646625202c3935,0x3232646625202c37\n"
".quad 0x2e6c756d090a3b32,0x09203436662e6d72,0x202c303632646625,0x25202c3732646625\n"
".quad 0x090a3b3432326466,0x662e70722e6c756d,0x3264662509203436,0x32646625202c3136\n"
".quad 0x3232646625202c37,0x2e6c756d090a3b32,0x09203436662e7072,0x202c323632646625\n"
".quad 0x25202c3732646625,0x090a3b3432326466,0x203436662e6e696d,0x2c33363264662509\n"
".quad 0x2c39353264662520,0x3b30363264662520,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x6625202c34363264,0x6625202c31353264,0x6d090a3b33363264,0x09203436662e7861\n"
".quad 0x202c353632646625,0x202c313632646625,0x0a3b323632646625,0x2e70722e64646109\n"
".quad 0x6466250920343666,0x646625202c363632,0x646625202c343532,0x6461090a3b353632\n"
".quad 0x2509203436662e64,0x25202c3736326466,0x25202c3436326466,0x090a3b3636326466\n"
".quad 0x75656e2e70746573,0x702509203436662e,0x32646625202c3836,0x32646625202c3736\n"
".quad 0x252140090a3b3736,0x2061726220383670,0x5f38315f744c2409,0x0a3b303737303436\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38\n"
".quad 0x3309636f6c2e090a,0x6d090a3009383809,0x09203436662e766f,0x202c383632646625\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6e752e617262090a\n"
".quad 0x6557444c24092069,0x77355a5f5f69646e,0x5445644968746469,0x7265746e6932315f\n"
".quad 0x497570675f6c6176,0x3639315f455f3053,0x744c240a3b33355f,0x373034365f38315f\n"
".quad 0x3c2f2f200a3a3037,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c\n"
".quad 0x6c2e090a38333133,0x093039093309636f,0x662e67656e090a30,0x3264662509203436\n"
".quad 0x32646625202c3936,0x646461090a3b3436,0x203436662e70722e,0x2c38363264662509\n"
".quad 0x2c36363264662520,0x3b39363264662520,0x646e6557444c240a,0x646977355a5f5f69\n"
".quad 0x315f544564496874,0x61767265746e6932,0x3053497570675f6c,0x355f3639315f455f\n"
".quad 0x6c3c2f2f200a3a33,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0938303109340963,0x662e766f6d090a30,0x3264662509203436\n"
".quad 0x65336430202c3037,0x3061376636633062,0x093b303030303030,0x36302d6531202f2f\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x646625202c393670,0x646625202c383632\n"
".quad 0x2140090a3b303732,0x6172622039367025,0x38315f744c240920,0x3b3638393138365f\n"
".quad 0x5f38315f744c240a,0x0a3a363837363432,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3833313334345f38,0x33732e766f6d090a,0x2c35377225092032\n"
".quad 0x617262090a3b3120,0x4c240920696e752e,0x3934325f38315f74,0x744c240a3b383538\n"
".quad 0x393138365f38315f,0x5f744c240a3a3638,0x34303734325f3831,0x6c3c2f2f200a3a32\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x766f6d090a383331\n"
".quad 0x722509203233732e,0x240a3b30202c3537,0x34325f38315f744c,0x2f200a3a38353839\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434\n"
".quad 0x31093409636f6c2e,0x6f6d090a30093236,0x2509203233752e76,0x0a3b30202c363772\n"
".quad 0x71652e7074657309,0x702509203233732e,0x35377225202c3037,0x0a3b36377225202c\n"
".quad 0x6220303770254009,0x5f744c2409206172,0x38323134365f3831,0x6c3c2f2f200a3b32\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x0933363109340963,0x732e747663090a30,0x09203233732e3436,0x25202c3132647225\n"
".quad 0x6c756d090a3b3572,0x33732e656469772e,0x3232647225092032,0x31202c357225202c\n"
".quad 0x2e646461090a3b36,0x6472250920343675,0x31647225202c3332,0x3b3232647225202c\n"
".quad 0x6f6c672e7473090a,0x203436662e6c6162,0x2b33326472255b09,0x32646625202c5d30\n"
".quad 0x2e7473090a3b3232,0x662e6c61626f6c67,0x6472255b09203436,0x25202c5d382b3332\n"
".quad 0x090a3b3432326466,0x203233732e646461,0x7225202c35722509,0x3633353536202c35\n"
".quad 0x6f6c2e7473090a3b,0x203233732e6c6163,0x616475635f5f5b09,0x5f616475635f5f5f\n"
".quad 0x61765f6c61636f6c,0x5f34373837365f72,0x635f6e6f6e5f3434,0x7365725f74736e6f\n"
".quad 0x323432335f746c75,0x25202c5d382b3030,0x6f6c2e090a3b3572,0x0934363109340963\n"
".quad 0x662e766f6d090a30,0x3264662509203436,0x66376430202c3532,0x3030303030303866\n"
".quad 0x093b303030303030,0x090a6e616e202f2f,0x203436662e766f6d,0x2c33323264662509\n"
".quad 0x3038666637643020,0x3030303030303030,0x202f2f093b303030,0x5f744c240a6e616e\n"
".quad 0x38323134365f3831,0x6c3c2f2f200a3a32,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x0937363109340963,0x3670252140090a30\n"
".quad 0x2409206172622030,0x38365f38315f744c,0x2f200a3b34353732,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434,0x203436662e646461\n"
".quad 0x2c31373264662509,0x2c39333264662520,0x3b38333264662520,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x646625202c313770,0x646625202c313732,0x2140090a3b313732\n"
".quad 0x6172622031377025,0x38315f744c240920,0x3b3031303338365f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38\n"
".quad 0x0a30093830310934,0x3436662e67656e09,0x3237326466250920,0x383332646625202c\n"
".quad 0x722e646461090a3b,0x2509203436662e70,0x25202c3337326466,0x25202c3933326466\n"
".quad 0x090a3b3237326466,0x203436662e766f6d,0x2c34373264662509,0x3030656633643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x6c756d090a352e30,0x662509203436662e\n"
".quad 0x6625202c35373264,0x6625202c31373264,0x61090a3b34373264,0x09203436662e7362\n"
".quad 0x202c363732646625,0x0a3b353732646625,0x3436662e766f6d09,0x3737326466250920\n"
".quad 0x306265336430202c,0x3030306137663663,0x2f2f093b30303030,0x090a36302d653120\n"
".quad 0x203436662e6c756d,0x2c38373264662509,0x2c36373264662520,0x3b37373264662520\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x646625202c323770,0x646625202c333732\n"
".quad 0x2540090a3b383732,0x2061726220323770,0x5f38315f744c2409,0x0a3b323633313732\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38\n"
".quad 0x3309636f6c2e090a,0x090a300932333309,0x203436662e766f6d,0x2c39373264662509\n"
".quad 0x3030666662643020,0x3030303030303030,0x202f2f093b303030,0x2e646461090a312d\n"
".quad 0x09203436662e6d72,0x202c303832646625,0x202c383332646625,0x0a3b393732646625\n"
".quad 0x3436662e766f6d09,0x3138326466250920,0x303030306430202c,0x3030303030303030\n"
".quad 0x2f2f093b30303030,0x70746573090a3020,0x203436662e65672e,0x25202c3337702509\n"
".quad 0x25202c3038326466,0x090a3b3138326466,0x6220333770252140,0x5f744c2409206172\n"
".quad 0x35393930355f3831,0x6c3c2f2f200a3b34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x0933333309330963,0x722e6c756d090a30\n"
".quad 0x2509203436662e6d,0x25202c3135326466,0x25202c3038326466,0x090a3b3038326466\n"
".quad 0x203436662e766f6d,0x2c32383264662509,0x3030666662643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e646461090a312d,0x09203436662e7072,0x202c333832646625\n"
".quad 0x202c393332646625,0x0a3b323832646625,0x2e70722e6c756d09,0x6466250920343666\n"
".quad 0x646625202c343532,0x646625202c333832,0x7262090a3b333832,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x7261757173365a5f,0x6e69323145644965,0x675f6c6176726574\n"
".quad 0x4b52455f54497570,0x5f3639315f5f3253,0x5f744c240a3b3534,0x35393930355f3831\n"
".quad 0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0934333309330963,0x662e766f6d090a30,0x3264662509203436\n"
".quad 0x66626430202c3438,0x3030303030303066,0x093b303030303030,0x61090a312d202f2f\n"
".quad 0x36662e70722e6464,0x3832646625092034,0x3332646625202c33,0x3832646625202c39\n"
".quad 0x2e766f6d090a3b34,0x6466250920343666,0x306430202c353832,0x3030303030303030\n"
".quad 0x3b30303030303030,0x73090a30202f2f09,0x662e656c2e707465,0x3437702509203436\n"
".quad 0x333832646625202c,0x353832646625202c,0x3770252140090a3b,0x2409206172622034\n"
".quad 0x31355f38315f744c,0x2f200a3b30313230,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a383331333434,0x33093309636f6c2e,0x756d090a30093533\n"
".quad 0x3436662e6d722e6c,0x3135326466250920,0x333832646625202c,0x333832646625202c\n"
".quad 0x722e6c756d090a3b,0x2509203436662e70,0x25202c3435326466,0x25202c3038326466\n"
".quad 0x090a3b3038326466,0x20696e752e617262,0x646e6557444c2409,0x757173365a5f5f69\n"
".quad 0x3231456449657261,0x6c61767265746e69,0x455f54497570675f,0x39315f5f32534b52\n"
".quad 0x4c240a3b35345f36,0x3031355f38315f74,0x2f2f200a3a303132,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x345f38315f744c24,0x2e090a3833313334,0x3333093309636f6c\n"
".quad 0x6c756d090a300937,0x203436662e70722e,0x2c36383264662509,0x2c30383264662520\n"
".quad 0x3b30383264662520,0x70722e6c756d090a,0x662509203436662e,0x6625202c37383264\n"
".quad 0x6625202c33383264,0x6d090a3b33383264,0x09203436662e7861,0x202c343532646625\n"
".quad 0x202c363832646625,0x0a3b373832646625,0x3436662e766f6d09,0x3135326466250920\n"
".quad 0x303030306430202c,0x3030303030303030,0x2f2f093b30303030,0x6557444c240a3020\n"
".quad 0x73365a5f5f69646e,0x4564496572617571,0x767265746e693231,0x54497570675f6c61\n"
".quad 0x5f5f32534b52455f,0x0a3a35345f363931,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3833313334345f38,0x3409636f6c2e090a,0x090a300938303109\n"
".quad 0x662e6d722e6c756d,0x3264662509203436,0x32646625202c3838,0x3332646625202c37\n"
".quad 0x2e6c756d090a3b38,0x09203436662e6d72,0x202c393832646625,0x25202c3732646625\n"
".quad 0x090a3b3933326466,0x662e70722e6c756d,0x3264662509203436,0x32646625202c3039\n"
".quad 0x3332646625202c37,0x2e6c756d090a3b38,0x09203436662e7072,0x202c313932646625\n"
".quad 0x25202c3732646625,0x090a3b3933326466,0x203436662e6e696d,0x2c32393264662509\n"
".quad 0x2c38383264662520,0x3b39383264662520,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x6625202c33393264,0x6625202c31353264,0x6d090a3b32393264,0x09203436662e7861\n"
".quad 0x202c343932646625,0x202c303932646625,0x0a3b313932646625,0x2e70722e64646109\n"
".quad 0x6466250920343666,0x646625202c353932,0x646625202c343532,0x6461090a3b343932\n"
".quad 0x2509203436662e64,0x25202c3639326466,0x25202c3339326466,0x090a3b3539326466\n"
".quad 0x75656e2e70746573,0x702509203436662e,0x32646625202c3537,0x32646625202c3639\n"
".quad 0x252140090a3b3639,0x2061726220353770,0x5f38315f744c2409,0x0a3b323034363436\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32333320,0x6c6562616c206461,0x315f744c24206465,0x3833313334345f38\n"
".quad 0x3309636f6c2e090a,0x6d090a3009383809,0x09203436662e766f,0x202c383632646625\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6e752e617262090a\n"
".quad 0x6557444c24092069,0x77355a5f5f69646e,0x5445644968746469,0x7265746e6932315f\n"
".quad 0x497570675f6c6176,0x3639315f455f3053,0x744c240a3b37345f,0x343634365f38315f\n"
".quad 0x3c2f2f200a3a3230,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c\n"
".quad 0x6c2e090a38333133,0x093039093309636f,0x662e67656e090a30,0x3264662509203436\n"
".quad 0x32646625202c3739,0x646461090a3b3339,0x203436662e70722e,0x2c38363264662509\n"
".quad 0x2c35393264662520,0x3b37393264662520,0x646e6557444c240a,0x646977355a5f5f69\n"
".quad 0x315f544564496874,0x61767265746e6932,0x3053497570675f6c,0x345f3639315f455f\n"
".quad 0x6c3c2f2f200a3a37,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x6f6c2e090a383331,0x0938303109340963,0x662e766f6d090a30,0x3264662509203436\n"
".quad 0x65336430202c3839,0x3061376636633062,0x093b303030303030,0x36302d6531202f2f\n"
".quad 0x6c2e70746573090a,0x2509203436662e65,0x646625202c363770,0x646625202c383632\n"
".quad 0x2140090a3b383932,0x6172622036377025,0x38315f744c240920,0x3b3031303338365f\n"
".quad 0x5f38315f744c240a,0x0a3a323633313732,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3833313334345f38,0x33732e766f6d090a,0x2c37377225092032\n"
".quad 0x617262090a3b3120,0x4c240920696e752e,0x3437325f38315f74,0x744c240a3b343334\n"
".quad 0x303338365f38315f,0x5f744c240a3a3031,0x31363137325f3831,0x6c3c2f2f200a3a38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x766f6d090a383331\n"
".quad 0x722509203233732e,0x240a3b30202c3737,0x37325f38315f744c,0x2f200a3a34333434\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079\n"
".quad 0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434\n"
".quad 0x31093409636f6c2e,0x6f6d090a30093736,0x2509203233752e76,0x0a3b30202c383772\n"
".quad 0x71652e7074657309,0x702509203233732e,0x37377225202c3737,0x0a3b38377225202c\n"
".quad 0x6220373770254009,0x5f744c2409206172,0x35373238365f3831,0x6c3c2f2f200a3b34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x0938363109340963,0x732e747663090a30,0x09203233732e3436,0x25202c3432647225\n"
".quad 0x6c756d090a3b3572,0x33732e656469772e,0x3532647225092032,0x31202c357225202c\n"
".quad 0x2e646461090a3b36,0x6472250920343675,0x31647225202c3632,0x3b3532647225202c\n"
".quad 0x6f6c672e7473090a,0x203436662e6c6162,0x2b36326472255b09,0x32646625202c5d30\n"
".quad 0x2e7473090a3b3833,0x662e6c61626f6c67,0x6472255b09203436,0x25202c5d382b3632\n"
".quad 0x090a3b3933326466,0x203233732e646461,0x7225202c35722509,0x3633353536202c35\n"
".quad 0x6f6c2e7473090a3b,0x203233732e6c6163,0x616475635f5f5b09,0x5f616475635f5f5f\n"
".quad 0x61765f6c61636f6c,0x5f34373837365f72,0x635f6e6f6e5f3434,0x7365725f74736e6f\n"
".quad 0x323432335f746c75,0x25202c5d382b3030,0x6f6c2e090a3b3572,0x3032320931330963\n"
".quad 0x2e646c090a300936,0x732e6c61626f6c67,0x2c39377225092038,0x736e6f635f5f5b20\n"
".quad 0x2b393438746e6174,0x766f6d090a3b5d30,0x722509203233732e,0x090a3b30202c3038\n"
".quad 0x2e656e2e70746573,0x3770250920323373,0x2c39377225202c38,0x090a3b3038722520\n"
".quad 0x6220383770252140,0x5f744c2409206172,0x33303438365f3831,0x6c3c2f2f200a3b34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x766f6d090a383331\n"
".quad 0x722509203233732e,0x090a3b30202c3138,0x203233732e766f6d,0x30202c3238722509\n"
".quad 0x732e766f6d090a3b,0x3338722509203233,0x6f6d090a3b30202c,0x2509203436752e76\n"
".quad 0x3b30202c37326472,0x672e61747663090a,0x36752e6c61626f6c,0x3832647225092034\n"
".quad 0x736e6f635f5f202c,0x3b393438746e6174,0x5f38315f744c240a,0x0a3a363234373436\n"
".quad 0x706f6f6c3c2f2f20,0x6220706f6f4c203e,0x656e696c2079646f,0x2e090a3134313120\n"
".quad 0x3109313209636f6c,0x6d090a3009313431,0x09203233732e766f,0x7225202c34387225\n"
".quad 0x766f6d090a3b3138,0x722509203233732e,0x090a3b31202c3538,0x203436752e766f6d\n"
".quad 0x202c393264722509,0x3434373634343831,0x3535393037333730,0x6573090a3b313631\n"
".quad 0x3233752e74672e74,0x722509203436752e,0x32647225202c3638,0x3932647225202c37\n"
".quad 0x732e67656e090a3b,0x3738722509203233,0x0a3b36387225202c,0x3233732e766f6d09\n"
".quad 0x202c383872250920,0x746573090a3b3335,0x2e3233752e74672e,0x3872250920323373\n"
".quad 0x2c34387225202c39,0x090a3b3838722520,0x203233732e67656e,0x25202c3039722509\n"
".quad 0x6f6d090a3b393872,0x2509203436752e76,0x3831202c30336472,0x3730343437363434\n"
".quad 0x3631353539303733,0x2e746573090a3b31,0x752e3233752e7165,0x3139722509203436\n"
".quad 0x2c3732647225202c,0x0a3b303364722520,0x3233732e67656e09,0x202c323972250920\n"
".quad 0x61090a3b31397225,0x09203233622e646e,0x7225202c33397225,0x32397225202c3039\n"
".quad 0x33622e726f090a3b,0x2c34397225092032,0x25202c3738722520,0x656e090a3b333972\n"
".quad 0x2509203233732e67,0x397225202c353972,0x74636c73090a3b34,0x3233732e3233732e\n"
".quad 0x202c333872250920,0x7225202c33387225,0x35397225202c3538,0x752e627573090a3b\n"
".quad 0x3639722509203233,0x202c34387225202c,0x766f6d090a3b3834,0x722509203233752e\n"
".quad 0x090a3b39202c3739,0x2e74672e70746573,0x3770250920323375,0x2c36397225202c39\n"
".quad 0x090a3b3739722520,0x7262203937702540,0x315f744c24092061,0x3833393734365f38\n"
".quad 0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x2c3134313120656e,0x616c206461656820,0x4c242064656c6562,0x3734365f38315f74\n"
".quad 0x6f6c2e090a363234,0x3431310931320963,0x747663090a300938,0x3233732e3436732e\n"
".quad 0x2c31336472250920,0x090a3b3639722520,0x752e6f6c2e6c756d,0x3364722509203436\n"
".quad 0x3732647225202c32,0x61090a3b3031202c,0x09203436752e6464,0x25202c3732647225\n"
".quad 0x7225202c31336472,0x7262090a3b323364,0x240920696e752e61,0x34365f38315f744c\n"
".quad 0x4c240a3b32383637,0x3734365f38315f74,0x2f2f200a3a383339,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x313120656e696c20,0x64616568202c3134\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a363234373436,0x09313209636f6c2e\n"
".quad 0x090a300930353131,0x203233732e766f6d,0x31202c3238722509,0x38315f744c240a3b\n"
".quad 0x3a3238363734365f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x202c313431312065,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x343734365f38315f,0x636f6c2e090a3632,0x3235313109313209,0x2e646461090a3009\n"
".quad 0x6472250920343675,0x32647225202c3832,0x6c090a3b31202c38,0x6c61626f6c672e64\n"
".quad 0x387225092038732e,0x326472255b202c31,0x6d090a3b5d302b38,0x09203233752e766f\n"
".quad 0x3b30202c38397225,0x6e2e70746573090a,0x2509203233732e65,0x387225202c303870\n"
".quad 0x3b38397225202c31,0x203038702540090a,0x744c240920617262,0x343734365f38315f\n"
".quad 0x3c2f2f200a3b3632,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c\n"
".quad 0x7262090a38333133,0x240920696e752e61,0x34365f38315f744c,0x4c240a3b34313936\n"
".quad 0x3438365f38315f74,0x2f2f200a3a343330,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x333320656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x345f38315f744c24,0x6d090a3833313334,0x09203233732e766f,0x3b30202c32387225\n"
".quad 0x33732e766f6d090a,0x2c33387225092032,0x766f6d090a3b3020,0x722509203436752e\n"
".quad 0x0a3b30202c373264,0x365f38315f744c24,0x200a3a3431393634,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f,0x3233752e766f6d09\n"
".quad 0x202c393972250920,0x70746573090a3b30,0x203233732e71652e,0x25202c3138702509\n"
".quad 0x397225202c333872,0x38702540090a3b39,0x2409206172622031,0x34365f38315f744c\n"
".quad 0x2f200a3b30353438,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a383331333434,0x203436732e766f6d,0x202c373264722509,0x5f744c240a3b312d\n"
".quad 0x35343834365f3831,0x6c3c2f2f200a3a30,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x3531310931320963,0x766f6d090a300938\n"
".quad 0x722509203436752e,0x0a3b30202c333364,0x3233732e766f6d09,0x2c30303172250920\n"
".quad 0x746573090a3b3020,0x3233732e656e2e70,0x202c323870250920,0x7225202c32387225\n"
".quad 0x6573090a3b303031,0x09203436752e706c,0x25202c3732647225,0x7225202c33336472\n"
".quad 0x387025202c373264,0x636f6c2e090a3b32,0x3009393631093409,0x36622e646e61090a\n"
".quad 0x3433647225092034,0x2c3732647225202c,0x3939353330353420,0x3934303733373236\n"
".quad 0x622e726f090a3b35,0x3364722509203436,0x3433647225202c35,0x323131323239202c\n"
".quad 0x3031343037333230,0x090a3b3036353039,0x203436622e646e61,0x202c363364722509\n"
".quad 0x34202c3533647225,0x3236393935333035,0x3b35393430373337,0x3436622e726f090a\n"
".quad 0x2c37336472250920,0x202c363364722520,0x3230323131323239,0x3039303134303733\n"
".quad 0x6f6d090a3b303635,0x2509203436622e76,0x25202c3939326466,0x2e090a3b37336472\n"
".quad 0x3209313309636f6c,0x40090a3009363032,0x7262203837702521,0x315f744c24092061\n"
".quad 0x3039323438365f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32333320656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x313334345f38315f,0x2e766f6d090a3833,0x3872250920323373,0x6d090a3b30202c31\n"
".quad 0x09203233732e766f,0x3b30202c32387225,0x33732e766f6d090a,0x2c33387225092032\n"
".quad 0x766f6d090a3b3020,0x722509203436752e,0x0a3b30202c373264,0x6c672e6174766309\n"
".quad 0x3436752e6c61626f,0x2c38326472250920,0x74736e6f635f5f20,0x0a3b393438746e61\n"
".quad 0x365f38315f744c24,0x200a3a3437343934,0x3e706f6f6c3c2f2f,0x6f6220706f6f4c20\n"
".quad 0x20656e696c207964,0x6c2e090a31343131,0x313109313209636f,0x6f6d090a30093134\n"
".quad 0x2509203233732e76,0x7225202c31303172,0x766f6d090a3b3138,0x722509203233732e\n"
".quad 0x0a3b31202c323031,0x3436752e766f6d09,0x2c38336472250920,0x3437363434383120\n"
".quad 0x3539303733373034,0x73090a3b31363135,0x33752e74672e7465,0x2509203436752e32\n"
".quad 0x7225202c33303172,0x647225202c373264,0x67656e090a3b3833,0x722509203233732e\n"
".quad 0x317225202c343031,0x766f6d090a3b3330,0x722509203233732e,0x3b3335202c353031\n"
".quad 0x74672e746573090a,0x3233732e3233752e,0x2c36303172250920,0x202c313031722520\n"
".quad 0x090a3b3530317225,0x203233732e67656e,0x202c373031722509,0x090a3b3630317225\n"
".quad 0x203436752e766f6d,0x202c393364722509,0x3434373634343831,0x3535393037333730\n"
".quad 0x6573090a3b313631,0x3233752e71652e74,0x722509203436752e,0x647225202c383031\n"
".quad 0x33647225202c3732,0x2e67656e090a3b39,0x3172250920323373,0x30317225202c3930\n"
".quad 0x2e646e61090a3b38,0x3172250920323362,0x30317225202c3031,0x3930317225202c37\n"
".quad 0x33622e726f090a3b,0x3131317225092032,0x2c3430317225202c,0x0a3b303131722520\n"
".quad 0x3233732e67656e09,0x2c32313172250920,0x0a3b313131722520,0x33732e74636c7309\n"
".quad 0x2509203233732e32,0x387225202c333872,0x3230317225202c33,0x3b3231317225202c\n"
".quad 0x33752e627573090a,0x3331317225092032,0x2c3130317225202c,0x6f6d090a3b383420\n"
".quad 0x2509203233752e76,0x3b39202c34313172,0x672e70746573090a,0x2509203233752e74\n"
".quad 0x317225202c333870,0x31317225202c3331,0x38702540090a3b34,0x2409206172622033\n"
".quad 0x34365f38315f744c,0x2f200a3b36383939,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3120656e696c2079,0x616568202c313431,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3437343934365f,0x313209636f6c2e09,0x0a30093834313109\n"
".quad 0x3436732e74766309,0x722509203233732e,0x317225202c303464,0x6c756d090a3b3331\n"
".quad 0x203436752e6f6c2e,0x202c313464722509,0x31202c3732647225,0x2e646461090a3b30\n"
".quad 0x6472250920343675,0x34647225202c3732,0x3134647225202c30,0x752e617262090a3b\n"
".quad 0x5f744c240920696e,0x33373934365f3831,0x315f744c240a3b30,0x3638393934365f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x2c3134313120656e,0x616c206461656820,0x4c242064656c6562,0x3934365f38315f74\n"
".quad 0x6f6c2e090a343734,0x3531310931320963,0x766f6d090a300930,0x722509203233732e\n"
".quad 0x240a3b31202c3238,0x34365f38315f744c,0x2f200a3a30333739,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3120656e696c2079,0x616568202c313431\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3437343934365f,0x313209636f6c2e09\n"
".quad 0x0a30093235313109,0x3436752e64646109,0x2c38326472250920,0x202c383264722520\n"
".quad 0x672e646c090a3b31,0x38732e6c61626f6c,0x202c313872250920,0x302b38326472255b\n"
".quad 0x2e766f6d090a3b5d,0x3172250920323375,0x090a3b30202c3531,0x2e656e2e70746573\n"
".quad 0x3870250920323373,0x2c31387225202c34,0x0a3b353131722520,0x6220343870254009\n"
".quad 0x5f744c2409206172,0x37343934365f3831,0x6c3c2f2f200a3b34,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3334345f38315f74,0x617262090a383331,0x4c240920696e752e\n"
".quad 0x3834365f38315f74,0x744c240a3b323639,0x323438365f38315f,0x3c2f2f200a3a3039\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c,0x6f6d090a38333133\n"
".quad 0x2509203233732e76,0x0a3b30202c323872,0x3233732e766f6d09,0x202c333872250920\n"
".quad 0x2e766f6d090a3b30,0x6472250920343675,0x240a3b30202c3732,0x34365f38315f744c\n"
".quad 0x2f200a3a32363938,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3320656e696c2079,0x64616568202c3233,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a383331333434,0x203233752e766f6d,0x202c363131722509,0x70746573090a3b30\n"
".quad 0x203233732e71652e,0x25202c3538702509,0x317225202c333872,0x702540090a3b3631\n"
".quad 0x0920617262203538,0x365f38315f744c24,0x200a3b3839343035,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f,0x3436732e766f6d09\n"
".quad 0x2c37326472250920,0x744c240a3b312d20,0x343035365f38315f,0x3c2f2f200a3a3839\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c,0x6c2e090a38333133\n"
".quad 0x313109313209636f,0x6f6d090a30093835,0x2509203436752e76,0x3b30202c32346472\n"
".quad 0x33732e766f6d090a,0x3731317225092032,0x6573090a3b30202c,0x33732e656e2e7074\n"
".quad 0x2c36387025092032,0x25202c3238722520,0x73090a3b37313172,0x203436752e706c65\n"
".quad 0x202c373264722509,0x25202c3234647225,0x7025202c37326472,0x6f6c2e090a3b3638\n"
".quad 0x0939363109340963,0x662e766f6d090a30,0x3264662509203436,0x32646625202c3833\n"
".quad 0x646e61090a3b3939,0x722509203436622e,0x647225202c333464,0x33303534202c3732\n"
".quad 0x3733373236393935,0x6f090a3b35393430,0x2509203436622e72,0x7225202c34346472\n"
".quad 0x323239202c333464,0x3037333230323131,0x3036353039303134,0x622e646e61090a3b\n"
".quad 0x3464722509203436,0x3434647225202c35,0x393533303534202c,0x3430373337323639\n"
".quad 0x2e726f090a3b3539,0x6472250920343662,0x34647225202c3634,0x3131323239202c35\n"
".quad 0x3134303733323032,0x0a3b303635303930,0x3436622e766f6d09,0x3933326466250920\n"
".quad 0x3b3634647225202c,0x5f38315f744c240a,0x0a3a343537323836,0x325f38315f744c24\n"
".quad 0x200a3a3035383037,0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20\n"
".quad 0x20656e696c207964,0x616568202c323333,0x656c6562616c2064,0x38315f744c242064\n"
".quad 0x0a3833313334345f,0x093409636f6c2e09,0x73090a3009393131,0x2e75656e2e707465\n"
".quad 0x3870250920343666,0x3531646625202c37,0x3531646625202c33,0x70252140090a3b33\n"
".quad 0x0920617262203738,0x365f38315f744c24,0x200a3b3031303135,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f,0x093309636f6c2e09\n"
".quad 0x6f6d090a30093838,0x2509203436662e76,0x30202c3030336466,0x3030303030303064\n"
".quad 0x3030303030303030,0x0a30202f2f093b30,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x6977355a5f5f6964,0x5f54456449687464,0x767265746e693231,0x53497570675f6c61\n"
".quad 0x5f3639315f455f30,0x5f744c240a3b3334,0x31303135365f3831,0x6c3c2f2f200a3a30\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331\n"
".quad 0x3009303909330963,0x36662e67656e090a,0x3033646625092034,0x3531646625202c31\n"
".quad 0x2e646461090a3b32,0x09203436662e7072,0x202c303033646625,0x202c363431646625\n"
".quad 0x0a3b313033646625,0x69646e6557444c24,0x74646977355a5f5f,0x32315f5445644968\n"
".quad 0x6c61767265746e69,0x5f3053497570675f,0x33345f3639315f45,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32333320656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x313334345f38315f,0x636f6c2e090a3833\n"
".quad 0x3009393131093409,0x36662e646461090a,0x3033646625092034,0x3232646625202c32\n"
".quad 0x3232646625202c35,0x70746573090a3b33,0x203436662e71652e,0x25202c3838702509\n"
".quad 0x25202c3230336466,0x090a3b3230336466,0x6220383870252140,0x5f744c2409206172\n"
".quad 0x34353438365f3831,0x6c3c2f2f200a3b36,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x0930323109340963,0x662e67656e090a30\n"
".quad 0x3364662509203436,0x32646625202c3330,0x646461090a3b3332,0x203436662e70722e\n"
".quad 0x2c34303364662509,0x2c35323264662520,0x3b33303364662520,0x36662e766f6d090a\n"
".quad 0x3033646625092034,0x6566336430202c35,0x3030383431656166,0x2f093b3030303030\n"
".quad 0x090a39392e30202f,0x203436662e6c756d,0x2c36303364662509,0x2c30303364662520\n"
".quad 0x3b35303364662520,0x672e70746573090a,0x2509203436662e74,0x646625202c393870\n"
".quad 0x646625202c343033,0x2140090a3b363033,0x6172622039387025,0x38315f744c240920\n"
".quad 0x3b3634353438365f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x33313334345f3831,0x752e617262090a38,0x5f744c240920696e,0x31373537325f3831\n"
".quad 0x315f744c240a3b34,0x3634353438365f38,0x38315f744c240a3a,0x3a3632323637325f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831\n"
".quad 0x662e646461090a38,0x3264662509203436,0x32646625202c3137,0x32646625202c3933\n"
".quad 0x746573090a3b3833,0x3436662e71652e70,0x202c303970250920,0x202c313732646625\n"
".quad 0x0a3b313732646625,0x2030397025214009,0x744c240920617262,0x303538365f38315f\n"
".quad 0x3c2f2f200a3b3835,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c\n"
".quad 0x656e090a38333133,0x2509203436662e67,0x25202c3730336466,0x090a3b3833326466\n"
".quad 0x662e70722e646461,0x3364662509203436,0x32646625202c3830,0x33646625202c3933\n"
".quad 0x766f6d090a3b3730,0x662509203436662e,0x6430202c39303364,0x3431656166656633\n"
".quad 0x3030303030303038,0x392e30202f2f093b,0x662e6c756d090a39,0x3364662509203436\n"
".quad 0x33646625202c3031,0x33646625202c3030,0x746573090a3b3930,0x3436662e74672e70\n"
".quad 0x202c313970250920,0x202c383033646625,0x0a3b303133646625,0x2031397025214009\n"
".quad 0x744c240920617262,0x303538365f38315f,0x5f744c240a3b3835,0x31373537325f3831\n"
".quad 0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562,0x3334345f38315f74\n"
".quad 0x766f6d090a383331,0x722509203233732e,0x0a3b31202c383131,0x696e752e61726209\n"
".quad 0x38315f744c240920,0x3b3831303837325f,0x5f38315f744c240a,0x0a3a383530353836\n"
".quad 0x325f38315f744c24,0x200a3a3037393537,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3833313334345f,0x3233732e766f6d09,0x2c38313172250920\n"
".quad 0x5f744c240a3b3020,0x31303837325f3831,0x6c3c2f2f200a3a38,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331,0x0931373109340963\n"
".quad 0x752e766f6d090a30,0x3131722509203233,0x73090a3b30202c39,0x732e71652e707465\n"
".quad 0x3239702509203233,0x2c3831317225202c,0x0a3b393131722520,0x6220323970254009\n"
".quad 0x5f744c2409206172,0x34353235365f3831,0x6c3c2f2f200a3b36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3334345f38315f74,0x6f6c2e090a383331,0x0934373109340963\n"
".quad 0x662e766f6d090a30,0x3264662509203436,0x31646625202c3332,0x766f6d090a3b3235\n"
".quad 0x662509203436662e,0x6625202c35323264,0x2e090a3b35353164,0x3731093409636f6c\n"
".quad 0x766f6d090a300935,0x662509203436662e,0x6625202c38333264,0x6d090a3b35353164\n"
".quad 0x09203436662e766f,0x202c393332646625,0x0a3b363431646625,0x3233732e766f6d09\n"
".quad 0x2c30323172250920,0x766f6d090a3b3020,0x722509203233732e,0x0a3b31202c313231\n"
".quad 0x656e2e7074657309,0x702509203233732e,0x32317225202c3036,0x3032317225202c31\n"
".quad 0x662e646461090a3b,0x3364662509203436,0x31646625202c3131,0x31646625202c3535\n"
".quad 0x746573090a3b3235,0x3436662e71652e70,0x202c383870250920,0x202c313133646625\n"
".quad 0x0a3b313133646625,0x365f38315f744c24,0x200a3a3634353235,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323333\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3833313334345f,0x2038387025214009\n"
".quad 0x744c240920617262,0x333335365f38315f,0x3c2f2f200a3b3431,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32333320656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x34345f38315f744c,0x6c2e090a38333133,0x333831093409636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x646625202c353431,0x6f6d090a3b333232\n"
".quad 0x2509203436662e76,0x25202c3634316466,0x090a3b3532326466,0x31093409636f6c2e\n"
".quad 0x2140090a30093538,0x6172622030367025,0x38315f744c240920,0x3b3833313334345f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831\n"
".quad 0x662e646461090a38,0x3364662509203436,0x32646625202c3231,0x32646625202c3933\n"
".quad 0x746573090a3b3833,0x3436662e71652e70,0x202c333970250920,0x202c323133646625\n"
".quad 0x0a3b323133646625,0x2033397025214009,0x744c240920617262,0x313334345f38315f\n"
".quad 0x3c2f2f200a3b3833,0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f\n"
".quad 0x32333320656e696c,0x6c2064616568202c,0x242064656c656261,0x34345f38315f744c\n"
".quad 0x6c2e090a38333133,0x393831093409636f,0x6c2e646c090a3009,0x3233732e6c61636f\n"
".quad 0x2c32323172250920,0x616475635f5f5b20,0x5f616475635f5f5f,0x61765f6c61636f6c\n"
".quad 0x5f30383637365f72,0x635f6e6f6e5f3233,0x726f775f74736e6f,0x3236343031325f6b\n"
".quad 0x5d383430322b3237,0x732e646461090a3b,0x3231722509203233,0x3232317225202c33\n"
".quad 0x7473090a3b31202c,0x732e6c61636f6c2e,0x635f5f5b09203233,0x75635f5f5f616475\n"
".quad 0x6c61636f6c5f6164,0x3637365f7261765f,0x6f6e5f32335f3038,0x5f74736e6f635f6e\n"
".quad 0x3031325f6b726f77,0x30322b3237323634,0x317225202c5d3834,0x747663090a3b3332\n"
".quad 0x3233732e3436732e,0x2c37346472250920,0x0a3b333231722520,0x6469772e6c756d09\n"
".quad 0x2509203233732e65,0x7225202c38346472,0x3b3631202c333231,0x36752e646461090a\n"
".quad 0x3934647225092034,0x2c3032647225202c,0x0a3b383464722520,0x203436662e747309\n"
".quad 0x2b39346472255b09,0x32646625202c5d30,0x2e646c090a3b3833,0x33732e6c61636f6c\n"
".quad 0x3432317225092032,0x6475635f5f5b202c,0x616475635f5f5f61,0x765f6c61636f6c5f\n"
".quad 0x30383637365f7261,0x5f6e6f6e5f32335f,0x6f775f74736e6f63,0x36343031325f6b72\n"
".quad 0x383430322b323732,0x2e747663090a3b5d,0x203233732e343673,0x202c303564722509\n"
".quad 0x090a3b3432317225,0x656469772e6c756d,0x722509203233732e,0x317225202c313564\n"
".quad 0x0a3b3631202c3432,0x3436752e64646109,0x2c32356472250920,0x202c303264722520\n"
".quad 0x090a3b3135647225,0x09203436662e7473,0x382b32356472255b,0x3332646625202c5d\n"
".quad 0x2e617262090a3b39,0x744c240920696e75,0x313334345f38315f,0x5f744c240a3b3833\n"
".quad 0x31333335365f3831,0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32333320656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3334345f38315f74,0x6f6c2e090a383331,0x0932393109340963,0x3670252140090a30\n"
".quad 0x2409206172622030,0x38365f38315f744c,0x2f200a3b32383036,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3320656e696c2079,0x64616568202c3233\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a383331333434,0x203436662e646461\n"
".quad 0x2c33313364662509,0x2c39333264662520,0x3b38333264662520,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x646625202c343970,0x646625202c333133,0x2140090a3b333133\n"
".quad 0x6172622034397025,0x38315f744c240920,0x3b3238303638365f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3233332065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831,0x09636f6c2e090a38\n"
".quad 0x0a30093639310934,0x3436662e766f6d09,0x3534316466250920,0x383332646625202c\n"
".quad 0x662e766f6d090a3b,0x3164662509203436,0x32646625202c3634,0x6f6c2e090a3b3933\n"
".quad 0x0932393109340963,0x752e617262090a30,0x5f744c240920696e,0x33313334345f3831\n"
".quad 0x315f744c240a3b38,0x3238303638365f38,0x38315f744c240a3a,0x3a3031383937325f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3233332065,0x6562616c20646165,0x5f744c242064656c,0x33313334345f3831\n"
".quad 0x6f6c2e646c090a38,0x203233732e6c6163,0x202c333231722509,0x5f616475635f5f5b\n"
".quad 0x6c5f616475635f5f,0x7261765f6c61636f,0x335f30383637365f,0x6f635f6e6f6e5f32\n"
".quad 0x6b726f775f74736e,0x373236343031325f,0x3b5d383430322b32,0x33752e766f6d090a\n"
".quad 0x3532317225092032,0x73090a3b312d202c,0x732e656e2e707465,0x3539702509203233\n"
".quad 0x2c3332317225202c,0x0a3b353231722520,0x6220353970254009,0x5f744c2409206172\n"
".quad 0x32383335365f3831,0x2e617262090a3b36,0x744c240920696e75,0x3b3431355f38315f\n"
".quad 0x5f38315f744c240a,0x0a3a363238333536,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32333320,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3833313334345f38,0x3409636f6c2e090a,0x090a300935303209\n"
".quad 0x203233732e627573,0x202c333231722509,0x31202c3332317225,0x6f6c2e7473090a3b\n"
".quad 0x203233732e6c6163,0x616475635f5f5b09,0x5f616475635f5f5f,0x61765f6c61636f6c\n"
".quad 0x5f30383637365f72,0x635f6e6f6e5f3233,0x726f775f74736e6f,0x3236343031325f6b\n"
".quad 0x5d383430322b3237,0x3b3332317225202c,0x36732e747663090a,0x2509203233732e34\n"
".quad 0x7225202c33356472,0x756d090a3b333231,0x732e656469772e6c,0x3564722509203233\n"
".quad 0x3332317225202c34,0x61090a3b3631202c,0x09203436752e6464,0x25202c3535647225\n"
".quad 0x7225202c30326472,0x646c090a3b343564,0x662509203436662e,0x255b202c35343164\n"
".quad 0x5d36312b35356472,0x36662e646c090a3b,0x3431646625092034,0x356472255b202c36\n"
".quad 0x090a3b5d34322b35,0x20696e752e617262,0x5f38315f744c2409,0x0a3b383331333434\n"
".quad 0x315f38315f744c24,0x6c2e090a3a363230,0x373433093409636f,0x61747663090a3009\n"
".quad 0x752e6c61636f6c2e,0x3564722509203436,0x6475635f5f202c36,0x616475635f5f5f61\n"
".quad 0x765f6c61636f6c5f,0x34373837365f7261,0x5f6e6f6e5f34345f,0x65725f74736e6f63\n"
".quad 0x3432335f746c7573,0x7473090a3b303032,0x752e6d617261702e,0x635f5f5b09203436\n"
".quad 0x616d726170616475,0x656e39315a5f5f31,0x746e695f6e6f7477,0x65725f6c61767265\n"
".quad 0x353536694c644963,0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f\n"
".quad 0x746e693231496b63,0x70675f6c61767265,0x315458455f544975,0x45455f305458455f\n"
".quad 0x2c5d695f33534b52,0x0a3b363564722520,0x6f6c2e6174766309,0x203436752e6c6163\n"
".quad 0x202c373564722509,0x5f5f616475635f5f,0x5f695f616475635f,0x0a3b343831343631\n"
".quad 0x617261702e747309,0x5b09203436752e6d,0x6170616475635f5f,0x315a5f5f32616d72\n"
".quad 0x5f6e6f7477656e39,0x6c61767265746e69,0x694c64496365725f,0x694c453633353536\n"
".quad 0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f,0x35647225202c5d69\n"
".quad 0x2e766f6d090a3b37,0x3172250920323373,0x3b347225202c3632,0x7261702e7473090a\n"
".quad 0x09203233752e6d61,0x70616475635f5f5b,0x5a5f5f33616d7261,0x6e6f7477656e3931\n"
".quad 0x61767265746e695f,0x4c64496365725f6c,0x4c45363335353669,0x5276454538323169\n"
".quad 0x6c61626f6c673231,0x31496b636174735f,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x5458455f31545845,0x33534b5245455f30,0x317225202c5d695f,0x6c6163090a3b3632\n"
".quad 0x5a5f20696e752e6c,0x6e6f7477656e3931,0x61767265746e695f,0x4c64496365725f6c\n"
".quad 0x4c45363335353669,0x5276454538323169,0x6c61626f6c673231,0x31496b636174735f\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x5458455f31545845,0x33534b5245455f30\n"
".quad 0x635f5f28202c695f,0x616d726170616475,0x656e39315a5f5f31,0x746e695f6e6f7477\n"
".quad 0x65725f6c61767265,0x353536694c644963,0x383231694c453633,0x6c67323152764545\n"
".quad 0x6174735f6c61626f,0x746e693231496b63,0x70675f6c61767265,0x315458455f544975\n"
".quad 0x45455f305458455f,0x202c695f33534b52,0x6170616475635f5f,0x315a5f5f32616d72\n"
".quad 0x5f6e6f7477656e39,0x6c61767265746e69,0x694c64496365725f,0x694c453633353536\n"
".quad 0x3152764545383231,0x5f6c61626f6c6732,0x3231496b63617473,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x305458455f315458,0x5f33534b5245455f,0x6475635f5f202c69\n"
".quad 0x5f33616d72617061,0x7477656e39315a5f,0x7265746e695f6e6f,0x496365725f6c6176\n"
".quad 0x3633353536694c64,0x4545383231694c45,0x626f6c6732315276,0x6b636174735f6c61\n"
".quad 0x7265746e69323149,0x497570675f6c6176,0x455f315458455f54,0x4b5245455f305458\n"
".quad 0x090a3b29695f3353,0x33093409636f6c2e,0x646c090a30093834,0x732e6c61636f6c2e\n"
".quad 0x2c35722509203233,0x616475635f5f5b20,0x5f616475635f5f5f,0x61765f6c61636f6c\n"
".quad 0x5f34373837365f72,0x635f6e6f6e5f3434,0x7365725f74736e6f,0x323432335f746c75\n"
".quad 0x090a3b5d382b3030,0x20696e752e617262,0x5f38315f744c2409,0x744c240a3b343135\n"
".quad 0x303530325f38315f,0x09636f6c2e090a3a,0x0a30093237320934,0x3233732e766f6d09\n"
".quad 0x202c303172250920,0x6c2e7473090a3b30,0x3233732e6c61636f,0x6475635f5f5b0920\n"
".quad 0x616475635f5f5f61,0x765f6c61636f6c5f,0x30313837365f7261,0x5f6e6f6e5f32335f\n"
".quad 0x6f775f74736e6f63,0x31323438345f6b72,0x2c5d383430322b36,0x090a3b3031722520\n"
".quad 0x6c61636f6c2e7473,0x5f5b09203436662e,0x5f5f5f616475635f,0x636f6c5f61647563\n"
".quad 0x365f7261765f6c61,0x5f32335f30313837,0x736e6f635f6e6f6e,0x345f6b726f775f74\n"
".quad 0x5d302b3631323438,0x0a3b31646625202c,0x61636f6c2e747309,0x5b09203436662e6c\n"
".quad 0x5f5f616475635f5f,0x6f6c5f616475635f,0x5f7261765f6c6163,0x32335f3031383736\n"
".quad 0x6e6f635f6e6f6e5f,0x5f6b726f775f7473,0x382b363132343834,0x3b32646625202c5d\n"
".quad 0x6c2e61747663090a,0x3436752e6c61636f,0x2c38356472250920,0x5f616475635f5f20\n"
".quad 0x6c5f616475635f5f,0x7261765f6c61636f,0x335f30313837365f,0x6f635f6e6f6e5f32\n"
".quad 0x6b726f775f74736e,0x3b3631323438345f,0x5f38315f744c240a,0x0a3a343935343536\n"
".quad 0x706f6f6c3c2f2f20,0x6220706f6f4c203e,0x656e696c2079646f,0x656e202c32373220\n"
".quad 0x656420676e697473,0x202c31203a687470,0x6574616d69747365,0x7461726574692064\n"
".quad 0x6e75203a736e6f69,0x2e090a6e776f6e6b,0x3732093409636f6c,0x766f6d090a300936\n"
".quad 0x722509203233732e,0x317225202c373231,0x2e627573090a3b30,0x3172250920323373\n"
".quad 0x3732317225202c30,0x7473090a3b31202c,0x732e6c61636f6c2e,0x635f5f5b09203233\n"
".quad 0x75635f5f5f616475,0x6c61636f6c5f6164,0x3837365f7261765f,0x6f6e5f32335f3031\n"
".quad 0x5f74736e6f635f6e,0x3438345f6b726f77,0x383430322b363132,0x3b30317225202c5d\n"
".quad 0x36732e747663090a,0x2509203233732e34,0x7225202c39356472,0x6c756d090a3b3031\n"
".quad 0x33732e656469772e,0x3036647225092032,0x202c30317225202c,0x646461090a3b3631\n"
".quad 0x722509203436752e,0x647225202c313664,0x35647225202c3036,0x662e646c090a3b38\n"
".quad 0x3364662509203436,0x6472255b202c3431,0x0a3b5d36312b3136,0x203436662e646c09\n"
".quad 0x2c35313364662509,0x2b31366472255b20,0x6c2e090a3b5d3432,0x383732093409636f\n"
".quad 0x2e646461090a3009,0x6466250920343666,0x646625202c363133,0x646625202c343133\n"
".quad 0x6573090a3b353133,0x36662e71652e7074,0x2c36397025092034,0x2c36313364662520\n"
".quad 0x3b36313364662520,0x363970252140090a,0x4c24092061726220,0x3638365f38315f74\n"
".quad 0x2f2f200a3b343935,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c,0x365f38315f744c24\n"
".quad 0x2e090a3439353435,0x3031093409636f6c,0x67656e090a300938,0x662509203436662e\n"
".quad 0x6625202c37313364,0x61090a3b34313364,0x36662e70722e6464,0x3133646625092034\n"
".quad 0x3133646625202c38,0x3133646625202c35,0x2e766f6d090a3b37,0x6466250920343666\n"
".quad 0x336430202c393133,0x3030303030306566,0x3b30303030303030,0x0a352e30202f2f09\n"
".quad 0x3436662e6c756d09,0x3032336466250920,0x363133646625202c,0x393133646625202c\n"
".quad 0x662e736261090a3b,0x3364662509203436,0x33646625202c3132,0x766f6d090a3b3032\n"
".quad 0x662509203436662e,0x6430202c32323364,0x3766366330626533,0x3030303030303061\n"
".quad 0x2d6531202f2f093b,0x2e6c756d090a3630,0x6466250920343666,0x646625202c333233\n"
".quad 0x646625202c313233,0x6573090a3b323233,0x36662e656c2e7074,0x2c37397025092034\n"
".quad 0x2c38313364662520,0x3b33323364662520,0x203739702540090a,0x744c240920617262\n"
".quad 0x323238335f38315f,0x3c2f2f200a3b3031,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x35365f38315f744c,0x6c2e090a34393534,0x323333093309636f,0x2e766f6d090a3009\n"
".quad 0x6466250920343666,0x626430202c343233,0x3030303030306666,0x3b30303030303030\n"
".quad 0x090a312d202f2f09,0x662e6d722e646461,0x3364662509203436,0x33646625202c3532\n"
".quad 0x33646625202c3431,0x766f6d090a3b3432,0x662509203436662e,0x6430202c36323364\n"
".quad 0x3030303030303030,0x3030303030303030,0x090a30202f2f093b,0x2e65672e70746573\n"
".quad 0x3970250920343666,0x3233646625202c38,0x3233646625202c35,0x70252140090a3b36\n"
".quad 0x0920617262203839,0x355f38315f744c24,0x200a3b3431333532,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f,0x093309636f6c2e09\n"
".quad 0x6d090a3009333333,0x36662e6d722e6c75,0x3631646625092034,0x353233646625202c\n"
".quad 0x353233646625202c,0x662e766f6d090a3b,0x3364662509203436,0x66626430202c3732\n"
".quad 0x3030303030303066,0x093b303030303030,0x61090a312d202f2f,0x36662e70722e6464\n"
".quad 0x3233646625092034,0x3133646625202c38,0x3233646625202c35,0x2e6c756d090a3b37\n"
".quad 0x09203436662e7072,0x25202c3931646625,0x25202c3832336466,0x090a3b3832336466\n"
".quad 0x20696e752e617262,0x646e6557444c2409,0x757173365a5f5f69,0x3231456449657261\n"
".quad 0x6c61767265746e69,0x455f54497570675f,0x39315f5f32534b52,0x4c240a3b31335f36\n"
".quad 0x3532355f38315f74,0x2f2f200a3a343133,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x365f38315f744c24,0x2e090a3439353435,0x3333093309636f6c,0x766f6d090a300934\n"
".quad 0x662509203436662e,0x6430202c39323364,0x3030303030666662,0x3030303030303030\n"
".quad 0x0a312d202f2f093b,0x2e70722e64646109,0x6466250920343666,0x646625202c383233\n"
".quad 0x646625202c353133,0x6f6d090a3b393233,0x2509203436662e76,0x30202c3033336466\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x656c2e7074657309\n"
".quad 0x702509203436662e,0x33646625202c3939,0x33646625202c3832,0x252140090a3b3033\n"
".quad 0x2061726220393970,0x5f38315f744c2409,0x0a3b303735353235,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3439353435365f38,0x3309636f6c2e090a\n"
".quad 0x090a300935333309,0x662e6d722e6c756d,0x3164662509203436,0x3233646625202c36\n"
".quad 0x3233646625202c38,0x2e6c756d090a3b38,0x09203436662e7072,0x25202c3931646625\n"
".quad 0x25202c3532336466,0x090a3b3532336466,0x20696e752e617262,0x646e6557444c2409\n"
".quad 0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69,0x455f54497570675f\n"
".quad 0x39315f5f32534b52,0x4c240a3b31335f36,0x3532355f38315f74,0x2f2f200a3a303735\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435\n"
".quad 0x3333093309636f6c,0x6c756d090a300937,0x203436662e70722e,0x2c31333364662509\n"
".quad 0x2c35323364662520,0x3b35323364662520,0x70722e6c756d090a,0x662509203436662e\n"
".quad 0x6625202c32333364,0x6625202c38323364,0x6d090a3b38323364,0x09203436662e7861\n"
".quad 0x25202c3931646625,0x25202c3133336466,0x090a3b3233336466,0x203436662e766f6d\n"
".quad 0x202c363164662509,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x646e6557444c240a,0x757173365a5f5f69,0x3231456449657261,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x39315f5f32534b52,0x2f200a3a31335f36,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536,0x31093409636f6c2e\n"
".quad 0x7663090a30093830,0x3436662e6e722e74,0x662509203233732e,0x7225202c33333364\n"
".quad 0x2e67656e090a3b34,0x6466250920343666,0x646625202c343333,0x6f6d090a3b333333\n"
".quad 0x2509203436662e76,0x30202c3533336466,0x3030303066653364,0x3030303030303030\n"
".quad 0x2e31202f2f093b30,0x302d653838353235,0x662e6c756d090a35,0x3264662509203436\n"
".quad 0x3333646625202c37,0x3333646625202c34,0x2e6c756d090a3b35,0x09203436662e6d72\n"
".quad 0x202c363333646625,0x25202c3732646625,0x090a3b3431336466,0x662e6d722e6c756d\n"
".quad 0x3364662509203436,0x32646625202c3733,0x3133646625202c37,0x2e6c756d090a3b35\n"
".quad 0x09203436662e7072,0x202c383333646625,0x25202c3732646625,0x090a3b3431336466\n"
".quad 0x662e70722e6c756d,0x3364662509203436,0x32646625202c3933,0x3133646625202c37\n"
".quad 0x2e6e696d090a3b35,0x6466250920343666,0x646625202c303433,0x646625202c363333\n"
".quad 0x6461090a3b373333,0x3436662e6d722e64,0x3134336466250920,0x2c3631646625202c\n"
".quad 0x3b30343364662520,0x36662e78616d090a,0x3433646625092034,0x3333646625202c32\n"
".quad 0x3333646625202c38,0x2e646461090a3b39,0x09203436662e7072,0x202c333433646625\n"
".quad 0x25202c3931646625,0x090a3b3234336466,0x203436662e646461,0x2c34343364662509\n"
".quad 0x2c31343364662520,0x3b33343364662520,0x6e2e70746573090a,0x09203436662e7565\n"
".quad 0x25202c3030317025,0x25202c3434336466,0x090a3b3434336466,0x2030303170252140\n"
".quad 0x744c240920617262,0x333535365f38315f,0x3c2f2f200a3b3236,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x35365f38315f744c,0x6c2e090a34393534,0x093838093309636f\n"
".quad 0x662e766f6d090a30,0x3364662509203436,0x3030306430202c37,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x617262090a30202f,0x4c240920696e752e,0x5f5f69646e655744\n"
".quad 0x496874646977355a,0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570\n"
".quad 0x0a3b33335f363931,0x365f38315f744c24,0x200a3a3236333535,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f,0x093309636f6c2e09\n"
".quad 0x656e090a30093039,0x2509203436662e67,0x25202c3534336466,0x090a3b3134336466\n"
".quad 0x662e70722e646461,0x3364662509203436,0x3433646625202c37,0x3433646625202c33\n"
".quad 0x6557444c240a3b35,0x77355a5f5f69646e,0x5445644968746469,0x7265746e6932315f\n"
".quad 0x497570675f6c6176,0x3639315f455f3053,0x2f2f200a3a33335f,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435,0x3031093409636f6c\n"
".quad 0x766f6d090a300938,0x662509203436662e,0x6430202c36343364,0x3766366330626533\n"
".quad 0x3030303030303061,0x2d6531202f2f093b,0x70746573090a3630,0x203436662e656c2e\n"
".quad 0x202c313031702509,0x25202c3733646625,0x090a3b3634336466,0x2031303170252140\n"
".quad 0x744c240920617262,0x353638365f38315f,0x5f744c240a3b3439,0x31323238335f3831\n"
".quad 0x6c3c2f2f200a3a30,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74\n"
".quad 0x766f6d090a343935,0x722509203233732e,0x0a3b31202c383231,0x696e752e61726209\n"
".quad 0x38315f744c240920,0x3b3238323538335f,0x5f38315f744c240a,0x0a3a343935363836\n"
".quad 0x335f38315f744c24,0x200a3a3636343238,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3439353435365f,0x3233732e766f6d09,0x2c38323172250920\n"
".quad 0x5f744c240a3b3020,0x38323538335f3831,0x6c3c2f2f200a3a32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935,0x0938373209340963\n"
".quad 0x752e766f6d090a30,0x3231722509203233,0x73090a3b30202c39,0x732e71652e707465\n"
".quad 0x3031702509203233,0x3832317225202c32,0x3b3932317225202c,0x323031702540090a\n"
".quad 0x4c24092061726220,0x3635365f38315f74,0x2f2f200a3b303331,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435,0x3832093409636f6c\n"
".quad 0x747663090a300930,0x3233732e3436732e,0x2c32366472250920,0x6d090a3b35722520\n"
".quad 0x2e656469772e6c75,0x6472250920323373,0x2c357225202c3336,0x6461090a3b363120\n"
".quad 0x2509203436752e64,0x7225202c34366472,0x36647225202c3164,0x672e7473090a3b33\n"
".quad 0x36662e6c61626f6c,0x366472255b092034,0x6625202c5d302b34,0x73090a3b34313364\n"
".quad 0x6c61626f6c672e74,0x255b09203436662e,0x2c5d382b34366472,0x3b35313364662520\n"
".quad 0x33732e646461090a,0x202c357225092032,0x353536202c357225,0x2e7473090a3b3633\n"
".quad 0x33732e6c61636f6c,0x75635f5f5b092032,0x6475635f5f5f6164,0x5f6c61636f6c5f61\n"
".quad 0x373837365f726176,0x6e6f6e5f34345f34,0x725f74736e6f635f,0x32335f746c757365\n"
".quad 0x2c5d382b30303234,0x62090a3b35722520,0x0920696e752e6172,0x365f38315f744c24\n"
".quad 0x240a3b3437383535,0x35365f38315f744c,0x2f200a3a30333136,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536,0x33093309636f6c2e\n"
".quad 0x6f6d090a30093233,0x2509203436662e76,0x30202c3734336466,0x3030303065663364\n"
".quad 0x3030303030303030,0x2e30202f2f093b30,0x662e6c756d090a35,0x3364662509203436\n"
".quad 0x33646625202c3834,0x33646625202c3631,0x766f6d090a3b3734,0x662509203436662e\n"
".quad 0x6430202c39343364,0x3030303030666662,0x3030303030303030,0x0a312d202f2f093b\n"
".quad 0x2e6d722e64646109,0x6466250920343666,0x646625202c303533,0x646625202c383433\n"
".quad 0x6f6d090a3b393433,0x2509203436662e76,0x30202c3135336466,0x3030303030303064\n"
".quad 0x3030303030303030,0x0a30202f2f093b30,0x65672e7074657309,0x702509203436662e\n"
".quad 0x646625202c333031,0x646625202c303533,0x2140090a3b313533,0x7262203330317025\n"
".quad 0x315f744c24092061,0x3833333632355f38,0x6f6c3c2f2f200a3b,0x74726150203e706f\n"
".quad 0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568\n"
".quad 0x744c242064656c65,0x353435365f38315f,0x636f6c2e090a3439,0x3009333333093309\n"
".quad 0x6d722e6c756d090a,0x662509203436662e,0x646625202c353464,0x646625202c303533\n"
".quad 0x6f6d090a3b303533,0x2509203436662e76,0x30202c3235336466,0x3030303066666264\n"
".quad 0x3030303030303030,0x312d202f2f093b30,0x70722e646461090a,0x662509203436662e\n"
".quad 0x6625202c33353364,0x6625202c38343364,0x6d090a3b32353364,0x36662e70722e6c75\n"
".quad 0x3834646625092034,0x333533646625202c,0x333533646625202c,0x752e617262090a3b\n"
".quad 0x57444c240920696e,0x365a5f5f69646e65,0x6449657261757173,0x7265746e69323145\n"
".quad 0x497570675f6c6176,0x5f32534b52455f54,0x3b39325f3639315f,0x5f38315f744c240a\n"
".quad 0x0a3a383333363235,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3439353435365f38,0x3309636f6c2e090a,0x090a300934333309,0x203436662e766f6d\n"
".quad 0x2c34353364662509,0x3030666662643020,0x3030303030303030,0x202f2f093b303030\n"
".quad 0x2e646461090a312d,0x09203436662e7072,0x202c333533646625,0x202c383433646625\n"
".quad 0x0a3b343533646625,0x3436662e766f6d09,0x3535336466250920,0x303030306430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x70746573090a3020,0x203436662e656c2e\n"
".quad 0x202c343031702509,0x202c333533646625,0x0a3b353533646625,0x3430317025214009\n"
".quad 0x4c24092061726220,0x3632355f38315f74,0x2f2f200a3b343935,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435,0x3333093309636f6c\n"
".quad 0x6c756d090a300935,0x203436662e6d722e,0x202c353464662509,0x202c333533646625\n"
".quad 0x0a3b333533646625,0x2e70722e6c756d09,0x6466250920343666,0x33646625202c3834\n"
".quad 0x33646625202c3035,0x617262090a3b3035,0x4c240920696e752e,0x5f5f69646e655744\n"
".quad 0x657261757173365a,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x325f3639315f5f32,0x315f744c240a3b39,0x3439353632355f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x353435365f38315f,0x636f6c2e090a3439\n"
".quad 0x3009373333093309,0x70722e6c756d090a,0x662509203436662e,0x6625202c36353364\n"
".quad 0x6625202c30353364,0x6d090a3b30353364,0x36662e70722e6c75,0x3533646625092034\n"
".quad 0x3533646625202c37,0x3533646625202c33,0x2e78616d090a3b33,0x6466250920343666\n"
".quad 0x33646625202c3834,0x33646625202c3635,0x766f6d090a3b3735,0x662509203436662e\n"
".quad 0x306430202c353464,0x3030303030303030,0x3b30303030303030,0x4c240a30202f2f09\n"
".quad 0x5f5f69646e655744,0x657261757173365a,0x746e693231456449,0x70675f6c61767265\n"
".quad 0x534b52455f544975,0x325f3639315f5f32,0x6c3c2f2f200a3a39,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935,0x0931303309330963\n"
".quad 0x662e766f6d090a30,0x3364662509203436,0x30346430202c3835,0x3030303030303030\n"
".quad 0x093b303030303030,0x756d090a32202f2f,0x3436662e70722e6c,0x3935336466250920\n"
".quad 0x383533646625202c,0x343133646625202c,0x662e766f6d090a3b,0x3364662509203436\n"
".quad 0x30346430202c3036,0x3030303030303030,0x093b303030303030,0x756d090a32202f2f\n"
".quad 0x3436662e70722e6c,0x3136336466250920,0x303633646625202c,0x353133646625202c\n"
".quad 0x662e766f6d090a3b,0x3364662509203436,0x30346430202c3236,0x3030303030303030\n"
".quad 0x093b303030303030,0x756d090a32202f2f,0x3436662e6d722e6c,0x3336336466250920\n"
".quad 0x323633646625202c,0x343133646625202c,0x662e766f6d090a3b,0x3364662509203436\n"
".quad 0x30346430202c3436,0x3030303030303030,0x093b303030303030,0x756d090a32202f2f\n"
".quad 0x3436662e6d722e6c,0x3536336466250920,0x343633646625202c,0x353133646625202c\n"
".quad 0x722e747663090a3b,0x33732e3436662e6e,0x3633646625092032,0x0a3b347225202c36\n"
".quad 0x3436662e67656e09,0x3736336466250920,0x363633646625202c,0x662e766f6d090a3b\n"
".quad 0x3364662509203436,0x65336430202c3836,0x3030303030303066,0x093b303030303030\n"
".quad 0x3532352e31202f2f,0x090a35302d653838,0x203436662e6c756d,0x202c373264662509\n"
".quad 0x202c373633646625,0x0a3b383633646625,0x3436662e766f6d09,0x3936336466250920\n"
".quad 0x303030636430202c,0x3030303030303030,0x2f2f093b30303030,0x646461090a322d20\n"
".quad 0x662509203436662e,0x6625202c30373364,0x646625202c373264,0x616d090a3b393633\n"
".quad 0x2509203436662e78,0x25202c3137336466,0x25202c3935336466,0x090a3b3136336466\n"
".quad 0x662e70722e646461,0x3364662509203436,0x33646625202c3237,0x33646625202c3137\n"
".quad 0x6e696d090a3b3037,0x662509203436662e,0x6625202c33373364,0x6625202c33363364\n"
".quad 0x61090a3b35363364,0x36662e6d722e6464,0x3733646625092034,0x3733646625202c34\n"
".quad 0x3733646625202c33,0x2e766f6d090a3b30,0x6466250920343666,0x306430202c353733\n"
".quad 0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09,0x33752e65672e7465\n"
".quad 0x2509203436662e32,0x6625202c30333172,0x6625202c32373364,0x6e090a3b35373364\n"
".quad 0x09203233732e6765,0x25202c3133317225,0x6d090a3b30333172,0x09203436662e766f\n"
".quad 0x202c363733646625,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x656c2e746573090a,0x3436662e3233752e,0x2c32333172250920,0x2c34373364662520\n"
".quad 0x3b36373364662520,0x33732e67656e090a,0x3333317225092032,0x3b3233317225202c\n"
".quad 0x33622e646e61090a,0x3433317225092032,0x2c3133317225202c,0x0a3b333331722520\n"
".quad 0x3233752e766f6d09,0x2c35333172250920,0x746573090a3b3020,0x3233732e71652e70\n"
".quad 0x2c35303170250920,0x202c343331722520,0x090a3b3533317225,0x6220353031702540\n"
".quad 0x5f744c2409206172,0x32363833355f3831,0x6c3c2f2f200a3b36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935,0x0932303309330963\n"
".quad 0x662e766f6d090a30,0x3364662509203436,0x30306430202c3737,0x3030303030303030\n"
".quad 0x093b303030303030,0x6573090a30202f2f,0x36662e656e2e7074,0x3630317025092034\n"
".quad 0x323733646625202c,0x373733646625202c,0x662e766f6d090a3b,0x3364662509203436\n"
".quad 0x30306430202c3837,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x662e75656e2e7074,0x3031702509203436,0x3733646625202c37,0x3733646625202c34\n"
".quad 0x70252140090a3b38,0x2061726220373031,0x5f38315f744c2409,0x0a3b323838383335\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465,0x3439353435365f38\n"
".quad 0x3309636f6c2e090a,0x090a300933303309,0x2036303170252140,0x744c240920617262\n"
".quad 0x313933355f38315f,0x3c2f2f200a3b3833,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x35365f38315f744c,0x6c2e090a34393534,0x343033093309636f,0x2e6c756d090a3009\n"
".quad 0x09203436662e6d72,0x202c393733646625,0x25202c3732646625,0x090a3b3834336466\n"
".quad 0x662e70722e6c756d,0x3364662509203436,0x32646625202c3038,0x3433646625202c37\n"
".quad 0x2e646461090a3b38,0x09203436662e6d72,0x202c313833646625,0x25202c3534646625\n"
".quad 0x090a3b3937336466,0x662e70722e646461,0x3364662509203436,0x34646625202c3238\n"
".quad 0x3833646625202c38,0x2e766f6d090a3b30,0x6466250920343666,0x306430202c333833\n"
".quad 0x3030303030303030,0x3b30303030303030,0x73090a30202f2f09,0x33752e71652e7465\n"
".quad 0x2509203436662e32,0x6625202c36333172,0x6625202c32383364,0x6e090a3b33383364\n"
".quad 0x09203233732e6765,0x25202c3733317225,0x6d090a3b36333172,0x09203436662e766f\n"
".quad 0x202c343833646625,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x71652e746573090a,0x3436662e3233752e,0x2c38333172250920,0x2c31383364662520\n"
".quad 0x3b34383364662520,0x33732e67656e090a,0x3933317225092032,0x3b3833317225202c\n"
".quad 0x33622e646e61090a,0x3034317225092032,0x2c3733317225202c,0x0a3b393331722520\n"
".quad 0x3233752e766f6d09,0x2c31343172250920,0x746573090a3b3020,0x3233732e71652e70\n"
".quad 0x2c38303170250920,0x202c303431722520,0x090a3b3134317225,0x6220383031702540\n"
".quad 0x5f744c2409206172,0x38343036365f3831,0x6c3c2f2f200a3b32,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935,0x0932363209330963\n"
".quad 0x662e766f6d090a30,0x3864662509203436,0x3833646625202c30,0x2e766f6d090a3b31\n"
".quad 0x6466250920343666,0x33646625202c3138,0x766f6d090a3b3238,0x722509203233732e\n"
".quad 0x090a3b30202c3632,0x20696e752e617262,0x646e6557444c2409,0x696434315a5f5f69\n"
".quad 0x705f6f72657a5f76,0x3145644931747261,0x61767265746e6932,0x5f54497570675f6c\n"
".quad 0x34535f32534b5245,0x5f3639315f62525f,0x5f744c240a3b3632,0x38343036365f3831\n"
".quad 0x6c3c2f2f200a3a32,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74\n"
".quad 0x6f6c2e090a343935,0x0930373209330963,0x662e766f6d090a30,0x3364662509203436\n"
".quad 0x30306430202c3538,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x36662e746c2e7074,0x3930317025092034,0x323833646625202c,0x353833646625202c\n"
".quad 0x3170252140090a3b,0x0920617262203930,0x355f38315f744c24,0x200a3b3035363933\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f\n"
".quad 0x093309636f6c2e09,0x64090a3009323732,0x36662e70722e7669,0x3138646625092034\n"
".quad 0x323833646625202c,0x323733646625202c,0x662e766f6d090a3b,0x3864662509203436\n"
".quad 0x6666666430202c30,0x3030303030303030,0x2f093b3030303030,0x090a666e692d202f\n"
".quad 0x203233732e766f6d,0x31202c3632722509,0x752e617262090a3b,0x57444c240920696e\n"
".quad 0x315a5f5f69646e65,0x72657a5f76696434,0x4931747261705f6f,0x65746e6932314564\n"
".quad 0x7570675f6c617672,0x32534b52455f5449,0x315f62525f34535f,0x240a3b36325f3639\n"
".quad 0x33355f38315f744c,0x2f200a3a30353639,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a343935343536,0x32093309636f6c2e,0x6f6d090a30093337\n"
".quad 0x2509203436662e76,0x30202c3638336466,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e,0x646625202c303131\n"
".quad 0x646625202c313833,0x2140090a3b363833,0x7262203031317025,0x315f744c24092061\n"
".quad 0x3630393933355f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x353435365f38315f,0x2e766f6d090a3439,0x6466250920343666,0x66376430202c3138\n"
".quad 0x3030303030303066,0x093b303030303030,0x090a666e69202f2f,0x203436662e766f6d\n"
".quad 0x202c303864662509,0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030\n"
".quad 0x766f6d090a666e69,0x722509203233732e,0x090a3b30202c3632,0x20696e752e617262\n"
".quad 0x646e6557444c2409,0x696434315a5f5f69,0x705f6f72657a5f76,0x3145644931747261\n"
".quad 0x61767265746e6932,0x5f54497570675f6c,0x34535f32534b5245,0x5f3639315f62525f\n"
".quad 0x5f744c240a3b3632,0x30393933355f3831,0x6c3c2f2f200a3a36,0x726150203e706f6f\n"
".quad 0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820\n"
".quad 0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935,0x0938373209330963\n"
".quad 0x722e766964090a30,0x2509203436662e70,0x6625202c31386466,0x6625202c31383364\n"
".quad 0x6d090a3b34373364,0x09203436662e766f,0x30202c3038646625,0x3030303066666664\n"
".quad 0x3030303030303030,0x692d202f2f093b30,0x2e766f6d090a666e,0x3272250920323373\n"
".quad 0x4c240a3b31202c36,0x5f5f69646e655744,0x7a5f76696434315a,0x747261705f6f7265\n"
".quad 0x6e69323145644931,0x675f6c6176726574,0x4b52455f54497570,0x62525f34535f3253\n"
".quad 0x3a36325f3639315f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x39353435365f3831,0x09636f6c2e090a34,0x0a30093430330933,0x3436662e766f6d09\n"
".quad 0x2c34386466250920,0x0a3b303864662520,0x3436662e766f6d09,0x2c35386466250920\n"
".quad 0x0a3b313864662520,0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964\n"
".quad 0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b31325f3639315f,0x5f38315f744c240a\n"
".quad 0x0a3a383331393335,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3439353435365f38,0x3309636f6c2e090a,0x090a300936303309,0x662e6d722e6c756d\n"
".quad 0x3364662509203436,0x32646625202c3937,0x3433646625202c37,0x2e6c756d090a3b38\n"
".quad 0x09203436662e7072,0x202c303833646625,0x25202c3732646625,0x090a3b3834336466\n"
".quad 0x662e6d722e646461,0x3364662509203436,0x34646625202c3138,0x3733646625202c35\n"
".quad 0x2e646461090a3b39,0x09203436662e7072,0x202c323833646625,0x25202c3834646625\n"
".quad 0x090a3b3038336466,0x203436662e766f6d,0x2c37383364662509,0x3030303030643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x652e746573090a30,0x36662e3233752e71\n"
".quad 0x3234317225092034,0x323833646625202c,0x373833646625202c,0x732e67656e090a3b\n"
".quad 0x3431722509203233,0x3234317225202c33,0x662e766f6d090a3b,0x3364662509203436\n"
".quad 0x30306430202c3838,0x3030303030303030,0x093b303030303030,0x6573090a30202f2f\n"
".quad 0x3233752e71652e74,0x722509203436662e,0x646625202c343431,0x646625202c313833\n"
".quad 0x656e090a3b383833,0x2509203233732e67,0x7225202c35343172,0x6e61090a3b343431\n"
".quad 0x2509203233622e64,0x7225202c36343172,0x317225202c333431,0x766f6d090a3b3534\n"
".quad 0x722509203233752e,0x0a3b30202c373431,0x71652e7074657309,0x702509203233732e\n"
".quad 0x317225202c313131,0x34317225202c3634,0x31702540090a3b37,0x0920617262203131\n"
".quad 0x365f38315f744c24,0x200a3b3439393036,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3439353435365f,0x093309636f6c2e09,0x6d090a3009343432\n"
".quad 0x09203436662e766f,0x25202c3838646625,0x090a3b3138336466,0x203436662e766f6d\n"
".quad 0x202c393864662509,0x0a3b323833646625,0x696e752e61726209,0x6e6557444c240920\n"
".quad 0x6432315a5f5f6964,0x746167656e5f7669,0x3231456449657669,0x6c61767265746e69\n"
".quad 0x455f54497570675f,0x534b525f32534b52,0x325f3639315f5f31,0x315f744c240a3b34\n"
".quad 0x3439393036365f38,0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x353435365f38315f,0x636f6c2e090a3439,0x3009393432093309,0x36662e766f6d090a\n"
".quad 0x3833646625092034,0x3030306430202c39,0x3030303030303030,0x2f093b3030303030\n"
".quad 0x746573090a30202f,0x3436662e746c2e70,0x2c32313170250920,0x2c32383364662520\n"
".quad 0x3b39383364662520,0x313170252140090a,0x2409206172622032,0x34355f38315f744c\n"
".quad 0x2f200a3b38313430,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a343935343536,0x32093309636f6c2e,0x6964090a30093035,0x3436662e6d722e76\n"
".quad 0x2c38386466250920,0x2c32383364662520,0x3b34373364662520,0x36662e766f6d090a\n"
".quad 0x3938646625092034,0x306666376430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x7262090a666e6920,0x240920696e752e61,0x5f69646e6557444c,0x5f76696432315a5f\n"
".quad 0x657669746167656e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x5f5f31534b525f32,0x0a3b34325f363931,0x355f38315f744c24,0x200a3a3831343034\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f\n"
".quad 0x093309636f6c2e09,0x6d090a3009313532,0x09203436662e766f,0x202c303933646625\n"
".quad 0x3030303030306430,0x3030303030303030,0x30202f2f093b3030,0x6c2e70746573090a\n"
".quad 0x2509203436662e74,0x6625202c33313170,0x6625202c31383364,0x40090a3b30393364\n"
".quad 0x6220333131702521,0x5f744c2409206172,0x37363034355f3831,0x6c3c2f2f200a3b34\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74,0x766f6d090a343935\n"
".quad 0x662509203436662e,0x376430202c393864,0x3030303030306666,0x3b30303030303030\n"
".quad 0x0a666e69202f2f09,0x3436662e766f6d09,0x2c38386466250920,0x3030666666643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x7262090a666e692d,0x240920696e752e61\n"
".quad 0x5f69646e6557444c,0x5f76696432315a5f,0x657669746167656e,0x746e693231456449\n"
".quad 0x70675f6c61767265,0x534b52455f544975,0x5f5f31534b525f32,0x0a3b34325f363931\n"
".quad 0x355f38315f744c24,0x200a3a3437363034,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3439353435365f,0x093309636f6c2e09,0x64090a3009343532\n"
".quad 0x36662e70722e7669,0x3938646625092034,0x313833646625202c,0x343733646625202c\n"
".quad 0x662e766f6d090a3b,0x3864662509203436,0x6666666430202c38,0x3030303030303030\n"
".quad 0x2f093b3030303030,0x240a666e692d202f,0x5f69646e6557444c,0x5f76696432315a5f\n"
".quad 0x657669746167656e,0x746e693231456449,0x70675f6c61767265,0x534b52455f544975\n"
".quad 0x5f5f31534b525f32,0x0a3a34325f363931,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3439353435365f38,0x3309636f6c2e090a,0x090a300936303309\n"
".quad 0x203436662e766f6d,0x202c343864662509,0x090a3b3838646625,0x203436662e766f6d\n"
".quad 0x202c353864662509,0x090a3b3938646625,0x203233732e766f6d,0x30202c3632722509\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x325f3639315f6c65,0x315f744c240a3b31,0x3238383833355f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x353435365f38315f\n"
".quad 0x636f6c2e090a3439,0x3009383033093309,0x303170252140090a,0x2409206172622036\n"
".quad 0x34355f38315f744c,0x2f200a3b30333930,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a343935343536,0x33093309636f6c2e,0x756d090a30093930\n"
".quad 0x3436662e6d722e6c,0x3937336466250920,0x2c3732646625202c,0x3b38343364662520\n"
".quad 0x70722e6c756d090a,0x662509203436662e,0x6625202c30383364,0x646625202c373264\n"
".quad 0x6461090a3b383433,0x3436662e6d722e64,0x3138336466250920,0x2c3534646625202c\n"
".quad 0x3b39373364662520,0x70722e646461090a,0x662509203436662e,0x6625202c32383364\n"
".quad 0x646625202c383464,0x6f6d090a3b303833,0x2509203436662e76,0x30202c3139336466\n"
".quad 0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30,0x2e71652e74657309\n"
".quad 0x203436662e323375,0x202c383431722509,0x202c323833646625,0x0a3b313933646625\n"
".quad 0x3233732e67656e09,0x2c39343172250920,0x0a3b383431722520,0x3436662e766f6d09\n"
".quad 0x3239336466250920,0x303030306430202c,0x3030303030303030,0x2f2f093b30303030\n"
".quad 0x2e746573090a3020,0x662e3233752e7165,0x3531722509203436,0x3833646625202c30\n"
".quad 0x3933646625202c31,0x2e67656e090a3b32,0x3172250920323373,0x35317225202c3135\n"
".quad 0x2e646e61090a3b30,0x3172250920323362,0x34317225202c3235,0x3135317225202c39\n"
".quad 0x752e766f6d090a3b,0x3531722509203233,0x73090a3b30202c33,0x732e71652e707465\n"
".quad 0x3131702509203233,0x3235317225202c34,0x3b3335317225202c,0x343131702540090a\n"
".quad 0x4c24092061726220,0x3136365f38315f74,0x2f2f200a3b363035,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435,0x3232093309636f6c\n"
".quad 0x766f6d090a300936,0x662509203436662e,0x646625202c343964,0x6f6d090a3b313833\n"
".quad 0x2509203436662e76,0x6625202c35396466,0x62090a3b32383364,0x0920696e752e6172\n"
".quad 0x69646e6557444c24,0x76696432315a5f5f,0x76697469736f705f,0x6e69323145644965\n"
".quad 0x675f6c6176726574,0x4b52455f54497570,0x5f31534b525f3253,0x3b32325f3639315f\n"
".quad 0x5f38315f744c240a,0x0a3a363035313636,0x706f6f6c3c2f2f20,0x6f2074726150203e\n"
".quad 0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461\n"
".quad 0x315f744c24206465,0x3439353435365f38,0x3309636f6c2e090a,0x090a300931333209\n"
".quad 0x203436662e766f6d,0x2c33393364662509,0x3030303030643020,0x3030303030303030\n"
".quad 0x202f2f093b303030,0x2e70746573090a30,0x09203436662e746c,0x25202c3531317025\n"
".quad 0x25202c3238336466,0x090a3b3339336466,0x2035313170252140,0x744c240920617262\n"
".quad 0x343134355f38315f,0x3c2f2f200a3b3234,0x6150203e706f6f6c,0x6f6c20666f207472\n"
".quad 0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c,0x242064656c656261\n"
".quad 0x35365f38315f744c,0x6c2e090a34393534,0x323332093309636f,0x2e766964090a3009\n"
".quad 0x09203436662e7072,0x25202c3539646625,0x25202c3238336466,0x090a3b3237336466\n"
".quad 0x203436662e766f6d,0x202c343964662509,0x3030306666666430,0x3030303030303030\n"
".quad 0x2d202f2f093b3030,0x617262090a666e69,0x4c240920696e752e,0x5f5f69646e655744\n"
".quad 0x705f76696432315a,0x496576697469736f,0x65746e6932314564,0x7570675f6c617672\n"
".quad 0x32534b52455f5449,0x315f5f31534b525f,0x240a3b32325f3639,0x34355f38315f744c\n"
".quad 0x2f200a3a32343431,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a343935343536,0x32093309636f6c2e,0x6f6d090a30093333,0x2509203436662e76\n"
".quad 0x30202c3439336466,0x3030303030303064,0x3030303030303030,0x0a30202f2f093b30\n"
".quad 0x746c2e7074657309,0x702509203436662e,0x646625202c363131,0x646625202c313833\n"
".quad 0x2140090a3b343933,0x7262203631317025,0x315f744c24092061,0x3839363134355f38\n"
".quad 0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x353435365f38315f\n"
".quad 0x2e766f6d090a3439,0x6466250920343666,0x66376430202c3539,0x3030303030303066\n"
".quad 0x093b303030303030,0x090a666e69202f2f,0x203436662e766f6d,0x202c343964662509\n"
".quad 0x3030306666666430,0x3030303030303030,0x2d202f2f093b3030,0x617262090a666e69\n"
".quad 0x4c240920696e752e,0x5f5f69646e655744,0x705f76696432315a,0x496576697469736f\n"
".quad 0x65746e6932314564,0x7570675f6c617672,0x32534b52455f5449,0x315f5f31534b525f\n"
".quad 0x240a3b32325f3639,0x34355f38315f744c,0x2f200a3a38393631,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536,0x32093309636f6c2e\n"
".quad 0x6964090a30093633,0x3436662e6d722e76,0x2c34396466250920,0x2c31383364662520\n"
".quad 0x3b32373364662520,0x36662e766f6d090a,0x3539646625092034,0x306666376430202c\n"
".quad 0x3030303030303030,0x2f2f093b30303030,0x444c240a666e6920,0x5a5f5f69646e6557\n"
".quad 0x6f705f7669643231,0x6449657669746973,0x7265746e69323145,0x497570675f6c6176\n"
".quad 0x5f32534b52455f54,0x39315f5f31534b52,0x2f200a3a32325f36,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536,0x33093309636f6c2e\n"
".quad 0x6f6d090a30093930,0x2509203436662e76,0x6625202c34386466,0x6f6d090a3b343964\n"
".quad 0x2509203436662e76,0x6625202c35386466,0x6f6d090a3b353964,0x2509203233732e76\n"
".quad 0x0a3b30202c363272,0x696e752e61726209,0x6e6557444c240920,0x746e695f5f5f6964\n"
".quad 0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3b31325f3639315f,0x5f38315f744c240a\n"
".quad 0x0a3a303339303435,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3439353435365f38,0x3309636f6c2e090a,0x090a300931313309,0x203436662e766f6d\n"
".quad 0x202c353864662509,0x3030386666376430,0x3030303030303030,0x6e202f2f093b3030\n"
".quad 0x2e766f6d090a6e61,0x6466250920343666,0x66376430202c3438,0x3030303030303866\n"
".quad 0x093b303030303030,0x090a6e616e202f2f,0x203233732e766f6d,0x30202c3632722509\n"
".quad 0x752e617262090a3b,0x57444c240920696e,0x695f5f5f69646e65,0x5f6c616e7265746e\n"
".quad 0x6e72656b5f6e616e,0x325f3639315f6c65,0x315f744c240a3b31,0x3632363833355f38\n"
".quad 0x6f6c3c2f2f200a3a,0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220\n"
".quad 0x202c32373220656e,0x62616c2064616568,0x744c242064656c65,0x353435365f38315f\n"
".quad 0x636f6c2e090a3439,0x3009333133093309,0x36662e766f6d090a,0x3933646625092034\n"
".quad 0x3030306430202c35,0x3030303030303030,0x2f093b3030303030,0x746573090a30202f\n"
".quad 0x3436662e746c2e70,0x2c37313170250920,0x2c32373364662520,0x3b35393364662520\n"
".quad 0x313170252140090a,0x2409206172622037,0x36365f38315f744c,0x2f200a3b30373336\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536\n"
".quad 0x31093309636f6c2e,0x756d090a30093239,0x3436662e70722e6c,0x3038336466250920\n"
".quad 0x2c3732646625202c,0x3b38343364662520,0x70722e646461090a,0x662509203436662e\n"
".quad 0x6625202c32383364,0x646625202c383464,0x6f6d090a3b303833,0x2509203436662e76\n"
".quad 0x6625202c39396466,0x2e090a3b32383364,0x3931093309636f6c,0x6c756d090a300933\n"
".quad 0x203436662e6d722e,0x2c39373364662509,0x202c373264662520,0x0a3b383433646625\n"
".quad 0x2e6d722e64646109,0x6466250920343666,0x646625202c313833,0x33646625202c3534\n"
".quad 0x766f6d090a3b3937,0x662509203436662e,0x6625202c30303164,0x62090a3b31383364\n"
".quad 0x0920696e752e6172,0x365f38315f744c24,0x240a3b3431313636,0x36365f38315f744c\n"
".quad 0x2f200a3a30373336,0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c\n"
".quad 0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420\n"
".quad 0x090a343935343536,0x31093309636f6c2e,0x756d090a30093639,0x3436662e6d722e6c\n"
".quad 0x3937336466250920,0x2c3732646625202c,0x3b38343364662520,0x6d722e646461090a\n"
".quad 0x662509203436662e,0x6625202c31383364,0x646625202c353464,0x6f6d090a3b393733\n"
".quad 0x2509203436662e76,0x6625202c39396466,0x2e090a3b31383364,0x3931093309636f6c\n"
".quad 0x6c756d090a300937,0x203436662e70722e,0x2c30383364662509,0x202c373264662520\n"
".quad 0x0a3b383433646625,0x2e70722e64646109,0x6466250920343666,0x646625202c323833\n"
".quad 0x33646625202c3834,0x766f6d090a3b3038,0x662509203436662e,0x6625202c30303164\n"
".quad 0x4c240a3b32383364,0x3636365f38315f74,0x2f2f200a3a343131,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x6d090a3439353435,0x09203436662e766f\n"
".quad 0x202c363933646625,0x3030303030306430,0x3030303030303030,0x30202f2f093b3030\n"
".quad 0x6c2e70746573090a,0x2509203436662e74,0x6625202c38313170,0x6625202c32383364\n"
".quad 0x40090a3b36393364,0x6220383131702521,0x5f744c2409206172,0x38383636365f3831\n"
".quad 0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74\n"
".quad 0x6f6c2e090a343935,0x0931303209330963,0x662e766f6d090a30,0x3164662509203436\n"
".quad 0x33646625202c3230,0x6f6c2e090a3b3437,0x0932303209330963,0x662e766f6d090a30\n"
".quad 0x3164662509203436,0x33646625202c3330,0x617262090a3b3237,0x4c240920696e752e\n"
".quad 0x3736365f38315f74,0x744c240a3b383331,0x383636365f38315f,0x3c2f2f200a3a3238\n"
".quad 0x6150203e706f6f6c,0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c\n"
".quad 0x6c2064616568202c,0x242064656c656261,0x35365f38315f744c,0x6f6d090a34393534\n"
".quad 0x2509203436662e76,0x30202c3739336466,0x3030303030303064,0x3030303030303030\n"
".quad 0x0a30202f2f093b30,0x746c2e7074657309,0x702509203436662e,0x646625202c393131\n"
".quad 0x646625202c313833,0x2140090a3b373933,0x7262203931317025,0x315f744c24092061\n"
".quad 0x3439333736365f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x353435365f38315f,0x70252140090a3439,0x2061726220373131,0x5f38315f744c2409\n"
".quad 0x0a3b363039373636,0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066\n"
".quad 0x656e696c2079646f,0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465\n"
".quad 0x3439353435365f38,0x3309636f6c2e090a,0x090a300936303209,0x203436662e766f6d\n"
".quad 0x2c32303164662509,0x3b32373364662520,0x3309636f6c2e090a,0x090a300937303209\n"
".quad 0x203436662e766f6d,0x2c33303164662509,0x3b32373364662520,0x6e752e617262090a\n"
".quad 0x315f744c24092069,0x3833313736365f38,0x38315f744c240a3b,0x3a3630393736365f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831\n"
".quad 0x09636f6c2e090a34,0x0a30093031320933,0x3436662e766f6d09,0x3230316466250920\n"
".quad 0x343733646625202c,0x09636f6c2e090a3b,0x0a30093131320933,0x3436662e766f6d09\n"
".quad 0x3330316466250920,0x343733646625202c,0x752e617262090a3b,0x5f744c240920696e\n"
".quad 0x33313736365f3831,0x315f744c240a3b38,0x3439333736365f38,0x6f6c3c2f2f200a3a\n"
".quad 0x74726150203e706f,0x706f6f6c20666f20,0x696c2079646f6220,0x202c32373220656e\n"
".quad 0x62616c2064616568,0x744c242064656c65,0x353435365f38315f,0x636f6c2e090a3439\n"
".quad 0x3009353132093309,0x36662e766f6d090a,0x3031646625092034,0x3733646625202c32\n"
".quad 0x636f6c2e090a3b32,0x3009363132093309,0x36662e766f6d090a,0x3031646625092034\n"
".quad 0x3733646625202c33,0x315f744c240a3b34,0x3833313736365f38,0x38315f744c240a3a\n"
".quad 0x3a3632363636365f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x39353435365f3831,0x09636f6c2e090a34,0x0a30093331330933,0x2e6d722e76696409\n"
".quad 0x6466250920343666,0x39646625202c3438,0x3031646625202c39,0x2e766964090a3b32\n"
".quad 0x09203436662e7072,0x25202c3538646625,0x25202c3030316466,0x090a3b3330316466\n"
".quad 0x203233732e766f6d,0x30202c3632722509,0x6e6557444c240a3b,0x746e695f5f5f6964\n"
".quad 0x616e5f6c616e7265,0x6c656e72656b5f6e,0x3a31325f3639315f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831,0x09636f6c2e090a34\n"
".quad 0x0a30093637310933,0x3436662e67656e09,0x3839336466250920,0x3b3538646625202c\n"
".quad 0x6d722e646461090a,0x662509203436662e,0x6625202c39393364,0x6625202c38343364\n"
".quad 0x6e090a3b38393364,0x09203436662e6765,0x202c303034646625,0x090a3b3438646625\n"
".quad 0x662e70722e646461,0x3464662509203436,0x33646625202c3130,0x34646625202c3834\n"
".quad 0x78616d090a3b3030,0x662509203436662e,0x6625202c32303464,0x6625202c39393364\n"
".quad 0x6d090a3b34313364,0x09203436662e6e69,0x202c333034646625,0x202c313034646625\n"
".quad 0x0a3b353133646625,0x656c2e7074657309,0x702509203436662e,0x646625202c303231\n"
".quad 0x646625202c323034,0x2140090a3b333034,0x7262203032317025,0x315f744c24092061\n"
".quad 0x3435373435355f38,0x6f6c3c2f2f200a3b,0x74726150203e706f,0x706f6f6c20666f20\n"
".quad 0x696c2079646f6220,0x202c32373220656e,0x62616c2064616568,0x744c242064656c65\n"
".quad 0x353435365f38315f,0x636f6c2e090a3439,0x3009373731093309,0x36662e766f6d090a\n"
".quad 0x3131646625092034,0x3034646625202c31,0x2e766f6d090a3b32,0x6466250920343666\n"
".quad 0x646625202c323131,0x7262090a3b333034,0x240920696e752e61,0x5f69646e6557444c\n"
".quad 0x6e7265746e695f5f,0x6b5f6e616e5f6c61,0x39315f6c656e7265,0x4c240a3b39315f36\n"
".quad 0x3435355f38315f74,0x2f2f200a3a343537,0x50203e706f6f6c3c,0x6c20666f20747261\n"
".quad 0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c\n"
".quad 0x365f38315f744c24,0x2e090a3439353435,0x3731093309636f6c,0x766f6d090a300939\n"
".quad 0x662509203436662e,0x6430202c32313164,0x3030303038666637,0x3030303030303030\n"
".quad 0x6e616e202f2f093b,0x36662e766f6d090a,0x3131646625092034,0x6666376430202c31\n"
".quad 0x3030303030303038,0x2f093b3030303030,0x4c240a6e616e202f,0x5f5f69646e655744\n"
".quad 0x616e7265746e695f,0x656b5f6e616e5f6c,0x3639315f6c656e72,0x2f2f200a3a39315f\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435\n"
".quad 0x3932093409636f6c,0x766f6d090a300933,0x662509203436662e,0x6625202c34303464\n"
".quad 0x6d090a3b31313164,0x09203436662e766f,0x202c343131646625,0x0a3b343034646625\n"
".quad 0x3436662e766f6d09,0x3530346466250920,0x323131646625202c,0x662e766f6d090a3b\n"
".quad 0x3164662509203436,0x34646625202c3631,0x766f6d090a3b3530,0x722509203233732e\n"
".quad 0x0a3b30202c343531,0x656e2e7074657309,0x702509203233732e,0x36327225202c3932\n"
".quad 0x3b3435317225202c,0x393270252140090a,0x4c24092061726220,0x3237365f38315f74\n"
".quad 0x2f2f200a3b343135,0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f\n"
".quad 0x373220656e696c20,0x2064616568202c32,0x2064656c6562616c,0x365f38315f744c24\n"
".quad 0x2e090a3439353435,0x3932093309636f6c,0x6c756d090a300931,0x203436662e70722e\n"
".quad 0x2c30383364662509,0x202c373264662520,0x0a3b383433646625,0x2e70722e64646109\n"
".quad 0x6466250920343666,0x646625202c323833,0x33646625202c3834,0x766f6d090a3b3038\n"
".quad 0x662509203436662e,0x6430202c36303464,0x3030303030303030,0x3030303030303030\n"
".quad 0x090a30202f2f093b,0x2e746c2e70746573,0x3170250920343666,0x33646625202c3132\n"
".quad 0x34646625202c3238,0x252140090a3b3630,0x6172622031323170,0x38315f744c240920\n"
".quad 0x3b3234303736355f,0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f\n"
".quad 0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c\n"
".quad 0x39353435365f3831,0x09636f6c2e090a34,0x0a30093239320933,0x2e6d722e76696409\n"
".quad 0x6466250920343666,0x646625202c383131,0x646625202c323833,0x7262090a3b343733\n"
".quad 0x240920696e752e61,0x5f69646e6557444c,0x5f76696434315a5f,0x7261705f6f72657a\n"
".quad 0x6932314564493274,0x5f6c61767265746e,0x52455f5449757067,0x5f5f34535f32534b\n"
".quad 0x0a3b37315f363931,0x355f38315f744c24,0x200a3a3234303736,0x3e706f6f6c3c2f2f\n"
".quad 0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732\n"
".quad 0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f,0x093309636f6c2e09\n"
".quad 0x6d090a3009343932,0x36662e6d722e6c75,0x3034646625092034,0x3732646625202c37\n"
".quad 0x383433646625202c,0x722e646461090a3b,0x2509203436662e6d,0x25202c3830346466\n"
".quad 0x6625202c35346466,0x64090a3b37303464,0x36662e6d722e7669,0x3131646625092034\n"
".quad 0x3034646625202c38,0x3733646625202c38,0x6557444c240a3b32,0x34315a5f5f69646e\n"
".quad 0x6f72657a5f766964,0x644932747261705f,0x7265746e69323145,0x497570675f6c6176\n"
".quad 0x5f32534b52455f54,0x5f3639315f5f3453,0x3c2f2f200a3a3731,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x35365f38315f744c,0x6c2e090a34393534,0x363731093309636f\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x666430202c393034,0x3030303030306666\n"
".quad 0x3b30303030303030,0x666e692d202f2f09,0x6d722e646461090a,0x662509203436662e\n"
".quad 0x6625202c30313464,0x6625202c38343364,0x6e090a3b39303464,0x09203436662e6765\n"
".quad 0x202c313134646625,0x0a3b383131646625,0x2e70722e64646109,0x6466250920343666\n"
".quad 0x646625202c323134,0x646625202c383433,0x616d090a3b313134,0x2509203436662e78\n"
".quad 0x25202c3331346466,0x25202c3031346466,0x090a3b3431336466,0x203436662e6e696d\n"
".quad 0x2c34313464662509,0x2c32313464662520,0x3b35313364662520,0x6c2e70746573090a\n"
".quad 0x2509203436662e65,0x6625202c32323170,0x6625202c33313464,0x40090a3b34313464\n"
".quad 0x6220323231702521,0x5f744c2409206172,0x39323736355f3831,0x6c3c2f2f200a3b38\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935\n"
".quad 0x0937373109330963,0x662e766f6d090a30,0x3164662509203436,0x34646625202c3732\n"
".quad 0x766f6d090a3b3331,0x662509203436662e,0x6625202c38323164,0x62090a3b34313464\n"
".quad 0x0920696e752e6172,0x69646e6557444c24,0x7265746e695f5f5f,0x5f6e616e5f6c616e\n"
".quad 0x315f6c656e72656b,0x240a3b35315f3639,0x36355f38315f744c,0x2f200a3a38393237\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536\n"
".quad 0x31093309636f6c2e,0x6f6d090a30093937,0x2509203436662e76,0x30202c3832316466\n"
".quad 0x3030303866663764,0x3030303030303030,0x616e202f2f093b30,0x662e766f6d090a6e\n"
".quad 0x3164662509203436,0x66376430202c3732,0x3030303030303866,0x093b303030303030\n"
".quad 0x240a6e616e202f2f,0x5f69646e6557444c,0x6e7265746e695f5f,0x6b5f6e616e5f6c61\n"
".quad 0x39315f6c656e7265,0x2f200a3a35315f36,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a343935343536,0x32093409636f6c2e,0x6f6d090a30093839\n"
".quad 0x2509203436662e76,0x25202c3932316466,0x090a3b3732316466,0x203436662e766f6d\n"
".quad 0x2c30333164662509,0x3b38323164662520,0x6e752e617262090a,0x315f744c24092069\n"
".quad 0x3835323237365f38,0x38315f744c240a3b,0x3a3431353237365f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831,0x662e766f6d090a34\n"
".quad 0x3164662509203436,0x66376430202c3033,0x3030303030303866,0x093b303030303030\n"
".quad 0x090a6e616e202f2f,0x203436662e766f6d,0x2c39323164662509,0x3038666637643020\n"
".quad 0x3030303030303030,0x202f2f093b303030,0x5f744c240a6e616e,0x35323237365f3831\n"
".quad 0x6c3c2f2f200a3a38,0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070\n"
".quad 0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74\n"
".quad 0x6f6c2e090a343935,0x0939313109340963,0x2e70746573090a30,0x203436662e75656e\n"
".quad 0x202c333231702509,0x202c363133646625,0x0a3b363133646625,0x3332317025214009\n"
".quad 0x4c24092061726220,0x3637365f38315f74,0x2f2f200a3b363638,0x50203e706f6f6c3c\n"
".quad 0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20,0x2064616568202c32\n"
".quad 0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435,0x3838093309636f6c\n"
".quad 0x2e766f6d090a3009,0x6466250920343666,0x306430202c313331,0x3030303030303030\n"
".quad 0x3b30303030303030,0x62090a30202f2f09,0x0920696e752e6172,0x69646e6557444c24\n"
".quad 0x74646977355a5f5f,0x32315f5445644968,0x6c61767265746e69,0x5f3053497570675f\n"
".quad 0x33315f3639315f45,0x38315f744c240a3b,0x3a3636383637365f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831,0x09636f6c2e090a34\n"
".quad 0x090a300930390933,0x203436662e67656e,0x2c35313464662509,0x3b34313364662520\n"
".quad 0x70722e646461090a,0x662509203436662e,0x6625202c31333164,0x6625202c35313364\n"
".quad 0x4c240a3b35313464,0x5f5f69646e655744,0x496874646977355a,0x6e6932315f544564\n"
".quad 0x675f6c6176726574,0x5f455f3053497570,0x0a3a33315f363931,0x706f6f6c3c2f2f20\n"
".quad 0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f,0x6568202c32373220\n"
".quad 0x6c6562616c206461,0x315f744c24206465,0x3439353435365f38,0x3409636f6c2e090a\n"
".quad 0x090a300939313109,0x203436662e646461,0x2c36313464662509,0x2c35303464662520\n"
".quad 0x3b34303464662520,0x652e70746573090a,0x2509203436662e71,0x6625202c34323170\n"
".quad 0x6625202c36313464,0x40090a3b36313464,0x6220343231702521,0x5f744c2409206172\n"
".quad 0x36333738365f3831,0x6c3c2f2f200a3b32,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3435365f38315f74,0x6f6c2e090a343935,0x0930323109340963,0x2e70746573090a30\n"
".quad 0x203436662e75656e,0x202c353231702509,0x202c363134646625,0x0a3b363134646625\n"
".quad 0x3532317025214009,0x4c24092061726220,0x3737365f38315f74,0x2f2f200a3b383733\n"
".quad 0x50203e706f6f6c3c,0x6c20666f20747261,0x79646f6220706f6f,0x373220656e696c20\n"
".quad 0x2064616568202c32,0x2064656c6562616c,0x365f38315f744c24,0x2e090a3439353435\n"
".quad 0x3838093309636f6c,0x2e766f6d090a3009,0x6466250920343666,0x306430202c343331\n"
".quad 0x3030303030303030,0x3b30303030303030,0x62090a30202f2f09,0x0920696e752e6172\n"
".quad 0x69646e6557444c24,0x74646977355a5f5f,0x32315f5445644968,0x6c61767265746e69\n"
".quad 0x5f3053497570675f,0x31315f3639315f45,0x38315f744c240a3b,0x3a3837333737365f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831\n"
".quad 0x09636f6c2e090a34,0x090a300930390933,0x203436662e67656e,0x2c37313464662509\n"
".quad 0x3b34303464662520,0x70722e646461090a,0x662509203436662e,0x6625202c34333164\n"
".quad 0x6625202c35303464,0x4c240a3b37313464,0x5f5f69646e655744,0x496874646977355a\n"
".quad 0x6e6932315f544564,0x675f6c6176726574,0x5f455f3053497570,0x0a3a31315f363931\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465,0x3439353435365f38\n"
".quad 0x3409636f6c2e090a,0x090a300930323109,0x203436662e766f6d,0x2c38313464662509\n"
".quad 0x6166656633643020,0x3030303038343165,0x202f2f093b303030,0x756d090a39392e30\n"
".quad 0x2509203436662e6c,0x25202c3931346466,0x25202c3133316466,0x090a3b3831346466\n"
".quad 0x2e74672e70746573,0x3170250920343666,0x31646625202c3632,0x34646625202c3433\n"
".quad 0x252140090a3b3931,0x6172622036323170,0x38315f744c240920,0x3b3236333738365f\n"
".quad 0x6f6f6c3c2f2f200a,0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62\n"
".quad 0x68202c3237322065,0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831\n"
".quad 0x752e617262090a34,0x5f744c240920696e,0x35383737335f3831,0x315f744c240a3b38\n"
".quad 0x3236333738365f38,0x38315f744c240a3a,0x3a3037333837335f,0x6f6f6c3c2f2f200a\n"
".quad 0x2074726150203e70,0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065\n"
".quad 0x6562616c20646165,0x5f744c242064656c,0x39353435365f3831,0x662e646461090a34\n"
".quad 0x3464662509203436,0x31646625202c3032,0x31646625202c3033,0x746573090a3b3932\n"
".quad 0x3436662e71652e70,0x2c37323170250920,0x2c30323464662520,0x3b30323464662520\n"
".quad 0x323170252140090a,0x2409206172622037,0x38365f38315f744c,0x2f200a3b34373837\n"
".quad 0x203e706f6f6c3c2f,0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079\n"
".quad 0x64616568202c3237,0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536\n"
".quad 0x203436662e67656e,0x2c31323464662509,0x3b39323164662520,0x70722e646461090a\n"
".quad 0x662509203436662e,0x6625202c32323464,0x6625202c30333164,0x6d090a3b31323464\n"
".quad 0x09203436662e766f,0x202c333234646625,0x6561666566336430,0x3030303030383431\n"
".quad 0x30202f2f093b3030,0x6c756d090a39392e,0x662509203436662e,0x6625202c34323464\n"
".quad 0x6625202c31333164,0x73090a3b33323464,0x662e74672e707465,0x3231702509203436\n"
".quad 0x3234646625202c38,0x3234646625202c32,0x70252140090a3b34,0x2061726220383231\n"
".quad 0x5f38315f744c2409,0x0a3b343738373836,0x335f38315f744c24,0x200a3a3835383737\n"
".quad 0x3e706f6f6c3c2f2f,0x666f207472615020,0x6f6220706f6f6c20,0x20656e696c207964\n"
".quad 0x616568202c323732,0x656c6562616c2064,0x38315f744c242064,0x0a3439353435365f\n"
".quad 0x3233732e766f6d09,0x2c35353172250920,0x617262090a3b3120,0x4c240920696e752e\n"
".quad 0x3038335f38315f74,0x744c240a3b323631,0x383738365f38315f,0x5f744c240a3a3437\n"
".quad 0x31313837335f3831,0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3435365f38315f74,0x766f6d090a343935,0x722509203233732e,0x0a3b30202c353531\n"
".quad 0x335f38315f744c24,0x200a3a3236313038,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3439353435365f,0x093409636f6c2e09,0x6d090a3009323033\n"
".quad 0x09203233752e766f,0x30202c3635317225,0x2e70746573090a3b,0x09203233732e7165\n"
".quad 0x25202c3932317025,0x7225202c35353172,0x2540090a3b363531,0x6172622039323170\n"
".quad 0x38315f744c240920,0x3b3230343837365f,0x6f6f6c3c2f2f200a,0x2074726150203e70\n"
".quad 0x20706f6f6c20666f,0x6e696c2079646f62,0x68202c3237322065,0x6562616c20646165\n"
".quad 0x5f744c242064656c,0x39353435365f3831,0x09636f6c2e090a34,0x0a30093630330934\n"
".quad 0x3436662e766f6d09,0x3431316466250920,0x343133646625202c,0x662e766f6d090a3b\n"
".quad 0x3164662509203436,0x33646625202c3631,0x6f6c2e090a3b3834,0x0937303309340963\n"
".quad 0x662e766f6d090a30,0x3164662509203436,0x33646625202c3932,0x766f6d090a3b3834\n"
".quad 0x662509203436662e,0x6625202c30333164,0x6d090a3b35313364,0x09203233732e766f\n"
".quad 0x30202c3735317225,0x732e766f6d090a3b,0x3531722509203233,0x73090a3b31202c38\n"
".quad 0x732e656e2e707465,0x3932702509203233,0x2c3835317225202c,0x0a3b373531722520\n"
".quad 0x365f38315f744c24,0x200a3a3230343837,0x3e706f6f6c3c2f2f,0x666f207472615020\n"
".quad 0x6f6220706f6f6c20,0x20656e696c207964,0x616568202c323732,0x656c6562616c2064\n"
".quad 0x38315f744c242064,0x0a3439353435365f,0x3436662e64646109,0x3532346466250920\n"
".quad 0x343131646625202c,0x363131646625202c,0x2e70746573090a3b,0x09203436662e7165\n"
".quad 0x25202c3033317025,0x25202c3532346466,0x090a3b3532346466,0x2030333170252140\n"
".quad 0x744c240920617262,0x393837365f38315f,0x3c2f2f200a3b3431,0x6150203e706f6f6c\n"
".quad 0x6f6c20666f207472,0x2079646f6220706f,0x32373220656e696c,0x6c2064616568202c\n"
".quad 0x242064656c656261,0x35365f38315f744c,0x6c2e090a34393534,0x333133093409636f\n"
".quad 0x6c2e7473090a3009,0x3233732e6c61636f,0x6475635f5f5b0920,0x616475635f5f5f61\n"
".quad 0x765f6c61636f6c5f,0x30313837365f7261,0x5f6e6f6e5f32335f,0x6f775f74736e6f63\n"
".quad 0x31323438345f6b72,0x2c5d383430322b36,0x0a3b373231722520,0x3436752e64646109\n"
".quad 0x2c35366472250920,0x202c303664722520,0x090a3b3835647225,0x203436752e646461\n"
".quad 0x202c363664722509,0x31202c3536647225,0x662e7473090a3b36,0x6472255b09203436\n"
".quad 0x25202c5d302b3636,0x090a3b3431316466,0x6c61636f6c2e646c,0x722509203233732e\n"
".quad 0x5f5f5b202c393531,0x635f5f5f61647563,0x61636f6c5f616475,0x37365f7261765f6c\n"
".quad 0x6e5f32335f303138,0x74736e6f635f6e6f,0x38345f6b726f775f,0x3430322b36313234\n"
".quad 0x747663090a3b5d38,0x3233732e3436732e,0x2c37366472250920,0x0a3b393531722520\n"
".quad 0x6469772e6c756d09,0x2509203233732e65,0x7225202c38366472,0x3b3631202c393531\n"
".quad 0x36752e646461090a,0x3936647225092034,0x2c3835647225202c,0x0a3b383664722520\n"
".quad 0x203436662e747309,0x2b39366472255b09,0x31646625202c5d38,0x5f744c240a3b3631\n"
".quad 0x31393837365f3831,0x6c3c2f2f200a3a34,0x726150203e706f6f,0x6f6f6c20666f2074\n"
".quad 0x6c2079646f622070,0x2c32373220656e69,0x616c206461656820,0x4c242064656c6562\n"
".quad 0x3435365f38315f74,0x6f6c2e090a343935,0x0936313309340963,0x3270252140090a30\n"
".quad 0x2409206172622039,0x38365f38315f744c,0x2f200a3b36383338,0x203e706f6f6c3c2f\n"
".quad 0x20666f2074726150,0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237\n"
".quad 0x64656c6562616c20,0x5f38315f744c2420,0x090a343935343536,0x203436662e646461\n"
".quad 0x2c36323464662509,0x2c30333164662520,0x3b39323164662520,0x652e70746573090a\n"
".quad 0x2509203436662e71,0x6625202c31333170,0x6625202c36323464,0x40090a3b36323464\n"
".quad 0x6220313331702521,0x5f744c2409206172,0x38333838365f3831,0x6c3c2f2f200a3b36\n"
".quad 0x726150203e706f6f,0x6f6f6c20666f2074,0x6c2079646f622070,0x2c32373220656e69\n"
".quad 0x616c206461656820,0x4c242064656c6562,0x3435365f38315f74,0x6f6c2e090a343935\n"
".quad 0x0938313309340963,0x6f6c2e646c090a30,0x203233732e6c6163,0x202c303631722509\n"
".quad 0x5f616475635f5f5b,0x6c5f616475635f5f,0x7261765f6c61636f,0x335f30313837365f\n"
".quad 0x6f635f6e6f6e5f32,0x6b726f775f74736e,0x2b3631323438345f,0x090a3b5d38343032\n"
".quad 0x203233732e646461,0x25202c3031722509,0x3b31202c30363172,0x636f6c2e7473090a\n"
".quad 0x09203233732e6c61,0x5f616475635f5f5b,0x6c5f616475635f5f,0x7261765f6c61636f\n"
".quad 0x335f30313837365f,0x6f635f6e6f6e5f32,0x6b726f775f74736e,0x2b3631323438345f\n"
".quad 0x25202c5d38343032,0x7663090a3b303172,0x33732e3436732e74,0x3037647225092032\n"
".quad 0x0a3b30317225202c,0x6469772e6c756d09,0x2509203233732e65,0x7225202c31376472\n"
".quad 0x0a3b3631202c3031,0x3436752e64646109,0x2c32376472250920,0x202c383564722520\n"
".quad 0x090a3b3137647225,0x09203436662e7473,0x302b32376472255b,0x3231646625202c5d\n"
".quad 0x6c2e646c090a3b39,0x3233732e6c61636f,0x2c31363172250920,0x616475635f5f5b20\n"
".quad 0x5f616475635f5f5f,0x61765f6c61636f6c,0x5f30313837365f72,0x635f6e6f6e5f3233\n"
".quad 0x726f775f74736e6f,0x3631323438345f6b,0x0a3b5d383430322b,0x3436732e74766309\n"
".quad 0x722509203233732e,0x317225202c333764,0x6c756d090a3b3136,0x33732e656469772e\n"
".quad 0x3437647225092032,0x2c3136317225202c,0x6461090a3b363120,0x2509203436752e64\n"
".quad 0x7225202c35376472,0x647225202c383564,0x2e7473090a3b3437,0x72255b0920343666\n"
".quad 0x202c5d382b353764,0x0a3b303331646625,0x365f38315f744c24,0x240a3a3638333838\n"
".quad 0x38335f38315f744c,0x2f200a3a36383131,0x203e706f6f6c3c2f,0x20666f2074726150\n"
".quad 0x646f6220706f6f6c,0x3220656e696c2079,0x64616568202c3237,0x64656c6562616c20\n"
".quad 0x5f38315f744c2420,0x090a343935343536,0x33093409636f6c2e,0x646c090a30093631\n"
".quad 0x732e6c61636f6c2e,0x3031722509203233,0x6475635f5f5b202c,0x616475635f5f5f61\n"
".quad 0x765f6c61636f6c5f,0x30313837365f7261,0x5f6e6f6e5f32335f,0x6f775f74736e6f63\n"
".quad 0x31323438345f6b72,0x3b5d383430322b36,0x5f38315f744c240a,0x0a3a343738353536\n"
".quad 0x706f6f6c3c2f2f20,0x6f2074726150203e,0x6220706f6f6c2066,0x656e696c2079646f\n"
".quad 0x6568202c32373220,0x6c6562616c206461,0x315f744c24206465,0x3439353435365f38\n"
".quad 0x33752e766f6d090a,0x3236317225092032,0x73090a3b312d202c,0x732e656e2e707465\n"
".quad 0x3331702509203233,0x2c30317225202c32,0x0a3b323631722520,0x2032333170254009\n"
".quad 0x744c240920617262,0x353435365f38315f,0x5f744c240a3b3439,0x0a3a3431355f3831\n"
".quad 0x093409636f6c2e09,0x73090a3009353533,0x09203233732e7268,0x25202c3336317225\n"
".quad 0x0a3b3133202c3572,0x3233732e766f6d09,0x2c34363172250920,0x0a3b353335353620\n"
".quad 0x3233622e646e6109,0x2c35363172250920,0x202c333631722520,0x090a3b3436317225\n"
".quad 0x203233732e646461,0x202c363631722509,0x25202c3536317225,0x726873090a3b3572\n"
".quad 0x722509203233732e,0x317225202c373631,0x0a3b3631202c3636,0x617261702e646c09\n"
".quad 0x2509203436752e6d,0x5f5b202c36376472,0x726170616475635f,0x657430325a5f5f6d\n"
".quad 0x7265746e695f7473,0x7477656e5f6c6176,0x3150764564496e6f,0x61767265746e6932\n"
".quad 0x5f54497570675f6c,0x5f695f3253695045,0x73746c757365726e,0x2e747663090a3b5d\n"
".quad 0x203233732e343673,0x202c373764722509,0x756d090a3b347225,0x732e656469772e6c\n"
".quad 0x3764722509203233,0x202c347225202c38,0x2e646461090a3b34,0x6472250920343675\n"
".quad 0x37647225202c3937,0x3837647225202c36,0x33732e7473090a3b,0x376472255b092032\n"
".quad 0x7225202c5d302b39,0x6c2e090a3b373631,0x363533093409636f,0x74697865090a3009\n"
".quad 0x6e6557444c240a3b,0x657430325a5f5f64,0x7265746e695f7473,0x7477656e5f6c6176\n"
".quad 0x3150764564496e6f,0x61767265746e6932,0x5f54497570675f6c,0x3a695f3253695045\n"
".quad 0x5f202f2f207d090a,0x5f7473657430325a,0x6c61767265746e69,0x496e6f7477656e5f\n"
".quad 0x6e69323150764564,0x675f6c6176726574,0x6950455f54497570,0x2e090a0a695f3253\n"
".quad 0x20656c6269736976,0x5a5f20636e75662e,0x7265746e6932314e,0x497570675f6c6176\n"
".quad 0x2820764531434564,0x2e206d617261702e,0x75635f5f20343675,0x31666d7261706164\n"
".quad 0x6e6932314e5a5f5f,0x675f6c6176726574,0x4531434564497570,0x2e090a7b090a2976\n"
".quad 0x3234093309636f6c,0x6257444c240a3009,0x4e5a5f5f6e696765,0x767265746e693231\n"
".quad 0x64497570675f6c61,0x090a3a7645314345,0x444c240a3b746572,0x4e5a5f5f646e6557\n"
".quad 0x767265746e693231,0x64497570675f6c61,0x090a3a7645314345,0x4e5a5f202f2f207d\n"
".quad 0x767265746e693231,0x64497570675f6c61,0x090a0a7645314345,0x656c62697369762e\n"
".quad 0x5f20636e75662e20,0x65746e6932314e5a,0x7570675f6c617672,0x4b52453143456449\n"
".quad 0x702e28205f325364,0x36752e206d617261,0x616475635f5f2034,0x5f5f31666d726170\n"
".quad 0x65746e6932314e5a,0x7570675f6c617672,0x4b52453143456449,0x702e202c5f325364\n"
".quad 0x36752e206d617261,0x616475635f5f2034,0x5f5f32666d726170,0x65746e6932314e5a\n"
".quad 0x7570675f6c617672,0x4b52453143456449,0x702e202c5f325364,0x36752e206d617261\n"
".quad 0x616475635f5f2034,0x5f5f33666d726170,0x65746e6932314e5a,0x7570675f6c617672\n"
".quad 0x4b52453143456449,0x7b090a295f325364,0x2e206765722e090a,0x3c64722520343675\n"
".quad 0x65722e090a3b3e38,0x25203436662e2067,0x090a3b3e343c6466,0x34093309636f6c2e\n"
".quad 0x57444c240a300938,0x5a5f5f6e69676562,0x7265746e6932314e,0x497570675f6c6176\n"
".quad 0x644b524531434564,0x646c090a3a5f3253,0x752e6d617261702e,0x3164722509203436\n"
".quad 0x6475635f5f5b202c,0x5f31666d72617061,0x746e6932314e5a5f,0x70675f6c61767265\n"
".quad 0x5245314345644975,0x0a3b5d5f3253644b,0x3436732e766f6d09,0x202c326472250920\n"
".quad 0x6c090a3b31647225,0x2e6d617261702e64,0x6472250920343675,0x75635f5f5b202c33\n"
".quad 0x32666d7261706164,0x6e6932314e5a5f5f,0x675f6c6176726574,0x4531434564497570\n"
".quad 0x3b5d5f3253644b52,0x36732e766f6d090a,0x2c34647225092034,0x090a3b3364722520\n"
".quad 0x6d617261702e646c,0x722509203436752e,0x635f5f5b202c3564,0x666d726170616475\n"
".quad 0x6932314e5a5f5f33,0x5f6c61767265746e,0x3143456449757067,0x5d5f3253644b5245\n"
".quad 0x732e766f6d090a3b,0x3664722509203436,0x0a3b35647225202c,0x203436662e646c09\n"
".quad 0x5b202c3164662509,0x3b5d302b34647225,0x3436662e7473090a,0x2b326472255b0920\n"
".quad 0x31646625202c5d30,0x36662e646c090a3b,0x2c32646625092034,0x302b366472255b20\n"
".quad 0x662e7473090a3b5d,0x6472255b09203436,0x6625202c5d382b32,0x6f6c2e090a3b3264\n"
".quad 0x3009393409330963,0x240a3b746572090a,0x5f5f646e6557444c,0x65746e6932314e5a\n"
".quad 0x7570675f6c617672,0x4b52453143456449,0x7d090a3a5f325364,0x314e5a5f202f2f20\n"
".quad 0x61767265746e6932,0x4564497570675f6c,0x3253644b52453143,0x7369762e090a0a5f\n"
".quad 0x75662e20656c6269,0x7261702e2820636e,0x203436752e206d61,0x6572616475635f5f\n"
".quad 0x314b4e5a5f5f6674,0x61767265746e6932,0x4564497570675f6c,0x76457265776f6c35\n"
".quad 0x32314b4e5a5f2029,0x6c61767265746e69,0x354564497570675f,0x2076457265776f6c\n"
".quad 0x206d617261702e28,0x635f5f203436752e,0x666d726170616475,0x32314b4e5a5f5f31\n"
".quad 0x6c61767265746e69,0x354564497570675f,0x2976457265776f6c,0x65722e090a7b090a\n"
".quad 0x25203436752e2067,0x090a3b3e353c6472,0x36093309636f6c2e,0x57444c240a300930\n"
".quad 0x5a5f5f6e69676562,0x65746e6932314b4e,0x7570675f6c617672,0x65776f6c35456449\n"
".quad 0x646c090a3a764572,0x752e6d617261702e,0x3164722509203436,0x6475635f5f5b202c\n"
".quad 0x5f31666d72617061,0x6e6932314b4e5a5f,0x675f6c6176726574,0x6f6c354564497570\n"
".quad 0x0a3b5d7645726577,0x3436732e766f6d09,0x202c326472250920,0x2e090a3b31647225\n"
".quad 0x3136093309636f6c,0x2e766f6d090a3009,0x6472250920343673,0x3b32647225202c33\n"
".quad 0x7261702e7473090a,0x09203436752e6d61,0x72616475635f5f5b,0x4b4e5a5f5f667465\n"
".quad 0x767265746e693231,0x64497570675f6c61,0x457265776f6c3545,0x33647225202c5d76\n"
".quad 0x0a3b746572090a3b,0x5f646e6557444c24,0x6e6932314b4e5a5f,0x675f6c6176726574\n"
".quad 0x6f6c354564497570,0x090a3a7645726577,0x4e5a5f202f2f207d,0x7265746e6932314b\n"
".quad 0x497570675f6c6176,0x7265776f6c354564,0x69762e090a0a7645,0x662e20656c626973\n"
".quad 0x61702e2820636e75,0x3436752e206d6172,0x72616475635f5f20,0x4b4e5a5f5f667465\n"
".quad 0x767265746e693231,0x64497570675f6c61,0x4572657070753545,0x314b4e5a5f202976\n"
".quad 0x61767265746e6932,0x4564497570675f6c,0x7645726570707535,0x6d617261702e2820\n"
".quad 0x5f5f203436752e20,0x6d72617061647563,0x314b4e5a5f5f3166,0x61767265746e6932\n"
".quad 0x4564497570675f6c,0x7645726570707535,0x722e090a7b090a29,0x203436752e206765\n"
".quad 0x0a3b3e353c647225,0x093309636f6c2e09,0x444c240a30093636,0x5f5f6e6967656257\n"
".quad 0x746e6932314b4e5a,0x70675f6c61767265,0x7070753545644975,0x6c090a3a76457265\n"
".quad 0x2e6d617261702e64,0x6472250920343675,0x75635f5f5b202c31,0x31666d7261706164\n"
".quad 0x6932314b4e5a5f5f,0x5f6c61767265746e,0x7535456449757067,0x3b5d764572657070\n"
".quad 0x36732e766f6d090a,0x2c32647225092034,0x090a3b3164722520,0x36093309636f6c2e\n"
".quad 0x646461090a300937,0x722509203436752e,0x32647225202c3364,0x7473090a3b38202c\n"
".quad 0x752e6d617261702e,0x635f5f5b09203436,0x5f66746572616475,0x6e6932314b4e5a5f\n"
".quad 0x675f6c6176726574,0x7075354564497570,0x202c5d7645726570,0x72090a3b33647225\n"
".quad 0x57444c240a3b7465,0x4b4e5a5f5f646e65,0x767265746e693231,0x64497570675f6c61\n"
".quad 0x4572657070753545,0x2f2f207d090a3a76,0x6932314b4e5a5f20,0x5f6c61767265746e\n"
".quad 0x7535456449757067,0x0a0a764572657070,0x0000000000000000\n"
".text");

extern "C" {

extern const unsigned long long __deviceText_$compute_20$[26827];

}

asm(
".section .rodata\n"
".align 32\n"
"__deviceText_$sm_20$:\n"
".quad 0x33010102464c457f,0x0000000000000004,0x0000000100be0002,0x0000000000000000\n"
".quad 0x00000000000047a0,0x0000000000000040,0x0038004000140114,0x0001000c00400004\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000300000001,0x0000000000000000,0x0000000000000000,0x0000000000000340\n"
".quad 0x0000000000000165,0x0000000000000000,0x0000000000000004,0x0000000000000000\n"
".quad 0x000000030000000b,0x0000000000000000,0x0000000000000000,0x00000000000004a5\n"
".quad 0x00000000000000d0,0x0000000000000000,0x0000000000000001,0x0000000000000000\n"
".quad 0x0000000200000013,0x0000000000000000,0x0000000000000000,0x0000000000000575\n"
".quad 0x00000000000001b0,0x0000000d00000002,0x0000000000000001,0x0000000000000018\n"
".quad 0x0000000100000036,0x0000000000000006,0x0000000000000000,0x0000000000000725\n"
".quad 0x0000000000003f78,0x3b00000600000003,0x0000000000000004,0x0000000000000000\n"
".quad 0x00000001000000ff,0x0000000000000002,0x0000000000000000,0x000000000000469d\n"
".quad 0x0000000000000044,0x0000000400000000,0x0000000000000004,0x0000000000000000\n"
".quad 0x00000001000000ba,0x0000000000000002,0x0000000000000000,0x00000000000046e1\n"
".quad 0x0000000000000008,0x0000000400000000,0x0000000000000004,0x0000000000000000\n"
".quad 0x0000000100000072,0x0000000000000002,0x0000000000000000,0x00000000000046e9\n"
".quad 0x0000000000000070,0x0000000400000000,0x0000000000000001,0x0000000000000000\n"
".quad 0x0000000100000143,0x0000000000000002,0x0000000000000000,0x0000000000004759\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000000000008,0x0000000000000000\n"
".quad 0x0000000900000152,0x0000000000000000,0x0000000000000000,0x000000000000475d\n"
".quad 0x0000000000000010,0x0000000800000003,0x0000000000000004,0x0000000000000010\n"
".quad 0x000000010000001b,0x0000000000000003,0x0000000000000000,0x000000000000476d\n"
".quad 0x0000000000000001,0x0000000000000000,0x0000000000000004,0x0000000000000000\n"
".quad 0x00000001000000b1,0x0000000000000002,0x0000000000000000,0x000000000000476e\n"
".quad 0x0000000000000030,0x0000000000000000,0x0000000000000001,0x0000000000000000\n"
".quad 0x7472747368732e00,0x747274732e006261,0x746d79732e006261,0x672e766e2e006261\n"
".quad 0x6e692e6c61626f6c,0x672e766e2e007469,0x742e006c61626f6c,0x30325a5f2e747865\n"
".quad 0x746e695f74736574,0x656e5f6c61767265,0x764564496e6f7477,0x7265746e69323150\n"
".quad 0x497570675f6c6176,0x5f32536950455f54,0x6e692e766e2e0069,0x7430325a5f2e6f66\n"
".quad 0x65746e695f747365,0x77656e5f6c617672,0x50764564496e6f74,0x767265746e693231\n"
".quad 0x54497570675f6c61,0x695f32536950455f,0x666e692e766e2e00,0x6f632e766e2e006f\n"
".quad 0x3631746e6174736e,0x73657430325a5f2e,0x767265746e695f74,0x6f7477656e5f6c61\n"
".quad 0x323150764564496e,0x6c61767265746e69,0x455f54497570675f,0x2e00695f32536950\n"
".quad 0x74736e6f632e766e,0x325a5f2e30746e61,0x6e695f7473657430,0x6e5f6c6176726574\n"
".quad 0x4564496e6f747765,0x65746e6932315076,0x7570675f6c617672,0x32536950455f5449\n"
".quad 0x632e766e2e00695f,0x31746e6174736e6f,0x6e2e6c65722e0034,0x6174736e6f632e76\n"
".quad 0x5a5f00003431746e,0x695f747365743032,0x5f6c61767265746e,0x64496e6f7477656e\n"
".quad 0x746e693231507645,0x70675f6c61767265,0x536950455f544975,0x75635f5f00695f32\n"
".quad 0x5f30326d735f6164,0x665f75725f766964,0x6475635f5f003436,0x645f30326d735f61\n"
".quad 0x36665f64725f7669,0x656e39315a5f0034,0x746e695f6e6f7477,0x65725f6c61767265\n"
".quad 0x353536694c644963,0x383231694c453633,0x6c67323152764545,0x6174735f6c61626f\n"
".quad 0x746e693231496b63,0x70675f6c61767265,0x315458455f544975,0x45455f305458455f\n"
".quad 0x5f00695f33534b52,0x6e6174736e6f635f,0x0000000039343874,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000001000300,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000002000300,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000003000300,0x0000000000000000,0x0000000000000000,0x000000000a000300\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000300,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000004000300,0x003f780000000000,0x0000000000000000\n"
".quad 0x0000000007000300,0x0000000000000000,0x0000000000000000,0x000000000b000300\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000006000300,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000005000300,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000008000300,0x0000000000000000,0x0000000000000000,0x0000000009000300\n"
".quad 0x0000000000000000,0x0000010000000000,0x0000000004101200,0x0029f80000000000\n"
".quad 0x0000370000000000,0x0029f80004001200,0x0004200000000000,0x00004e0000000000\n"
".quad 0x002e180004001200,0x0004200000000000,0x0000650000000000,0x0032380004001200\n"
".quad 0x000d400000000000,0x0000c20000000000,0x000000000a001100,0x0000010000000000\n"
".quad 0x005de40000000000,0x001c042800440400,0x009c042c00000094,0xf21c862c00000084\n"
".quad 0xf25c861400000083,0x105d031400000093,0x011de44800c040c0,0x015de428004000c0\n"
".quad 0x019de428004000d0,0x01dde428004000e0,0xf1dc2328004000f0,0x0cdcc3190e400103\n"
".quad 0x111cc54000000008,0x121ca5c800000000,0x1cdc85c800000040,0x0c9de4c800000060\n"
".quad 0x0001e728000000cc,0x001de440000000e0,0x01dc232800400100,0x0001e7190ec00004\n"
".quad 0x001de440000030a0,0x01dc232800400100,0x0001e7190ec00008,0x001de74000007220\n"
".quad 0x101c034000007340,0x011de44800c00080,0x015de428004000c0,0x019de428004000d0\n"
".quad 0x01dde428004000e0,0x0d5c0328004000f0,0x1fdc854801400010,0x111cc5c800002080\n"
".quad 0x001de4c800000080,0xfd9c4328000000fc,0x00000748000000ff,0x0c1de4600000a200\n"
".quad 0x001c032800000000,0x0000074800fffffc,0x0c5e036000000720,0x0d1ce36000c00010\n"
".quad 0x101c855000c00040,0x109c03c800002080,0x40dc4348010000d7,0x261ca548000000db\n"
".quad 0x259ca58400000040,0x869c018400000060,0xa1dc014800000059,0x0021e7190e000069\n"
".quad 0xa09c0140000005c0,0x019de25000cff801,0x01dde21a80000000,0xb11c4418fac31bdc\n"
".quad 0x609d011000000009,0x411c014900000061,0x21dc015000000018,0x0001e7198e000010\n"
".quad 0x809c0140000004a0,0x0000074880effc01,0x21dc016000000220,0x0021e71b0e0000fc\n"
".quad 0x619c014000000080,0x211c014900effc01,0x609c015080000008,0x001de75100000018\n"
".quad 0x611c014000000140,0x41dc014900effc01,0x410001198e0000fc,0x2080015080000010\n"
".quad 0x0081e75100000008,0x20a00140000000a0,0x41a0015100000008,0x0121e45100000010\n"
".quad 0x0161e428000000fc,0x20a00128000000fc,0x319e14081e000018,0x631e0118000000cd\n"
".quad 0xc21c015000cfbc00,0xc29c015080000060,0xc19c015080000058,0xc31c015100000060\n"
".quad 0x821c015100000058,0x619c01080e000028,0x411c01081e000030,0x021de24880000020\n"
".quad 0x219c011a80000000,0x025de24900000018,0x409c0118fac31bdc,0x21dc014800000018\n"
".quad 0x0081e41e8e000008,0x00c1e428000000fc,0x60a10128000000fc,0x21dc014900000010\n"
".quad 0x0021e7198e000020,0x71dc144000000020,0xf1dc140c0e00001c,0x0000070c0e00001c\n"
".quad 0x0021e760000026c0,0x00dde44000000100,0x209ce32800400080,0x211ca35000c00043\n"
".quad 0x2c9c032007c00043,0x215c434800c40003,0x1c9c854800400090,0x461ca5c800000060\n"
".quad 0x459cb59400000000,0xa71c019400000020,0x0000075000cff801,0xc11c016000000240\n"
".quad 0x41dc014880effc01,0x0021e71b0e0000fc,0xc19c014000000080,0x409c014900effc01\n"
".quad 0x641c015080000010,0x001de75100000018,0xc09c014000000140,0x21dc014900effc01\n"
".quad 0x208001198e0000fc,0x4400015080000008,0x0081e75100000010,0x41200140000000a0\n"
".quad 0x21a0015100000010,0x00a1e45100000008,0x00e1e428000000fc,0x44200128000000fc\n"
".quad 0x819c11081e000018,0x311e045100d00001,0x821c0118000000cd,0x629c015080d00001\n"
".quad 0x479e015080d00001,0x611c015000cfbc00,0x829c015100d00001,0xe21c01080e000028\n"
".quad 0x611c014800f00001,0x000007081e000010,0xab9c0160000013c0,0x4b1c014880000020\n"
".quad 0xe1dc014900000020,0xc1dc01198e0000fe,0x0021e71b000000fe,0xe3dc014000000ce0\n"
".quad 0xc1dc011e8e0000fe,0x0025e71a8e0000fe,0x0021e740000007e0,0xe11c0140000003e0\n"
".quad 0xe19c015100000071,0x011c015080000071,0x249c014900000011,0x41dc014880000018\n"
".quad 0x21dc01190e0000fc,0x0021e719000000fd,0x001df44000000020,0x41dc0128000000fc\n"
".quad 0x0021e7188e0000fc,0x01dde440000000c0,0x019de428000000b4,0x01000728000000b0\n"
".quad 0x049de45000009460,0x04dde228000000fc,0x001df21bffc00000,0x21dc011800000004\n"
".quad 0x0021e7188e0000fd,0x011de440000000a0,0x015de228000000fc,0x049de419ffc00000\n"
".quad 0x04dde228000000fc,0x001df41bffc00000,0x015de428000000fc,0x011de4280000004c\n"
".quad 0x01dde42800000048,0x019de428000000bc,0x01000728000000b8,0x049de45000009280\n"
".quad 0x04dde228000000fc,0x001df21bffc00000,0xe11c011800000004,0xe19c015100000071\n"
".quad 0x0000075080000071,0x011c016000000360,0x249c014900000011,0x41dc014880000018\n"
".quad 0x21dc01190e0000fc,0x0001f419000000fd,0x41dc014000000000,0x0021e7188e0000fc\n"
".quad 0x01dde440000000e0,0x019de428000000bc,0x01000728000000b8,0x049de4500000a100\n"
".quad 0x04dde42800000010,0x011de42800000014,0x015df228000000fc,0x21dc0119ffc00000\n"
".quad 0x0021e7188e0000fd,0x011de44000000080,0x015de228000000fc,0x049de419ffc00000\n"
".quad 0x04ddf228000000fc,0x015de41bffc00000,0x011de4280000004c,0x01dde42800000048\n"
".quad 0x019de428000000bc,0x01000728000000b8,0x049de45000008ea0,0x04ddf228000000fc\n"
".quad 0x001df41bffc00000,0x0021e728000000fc,0xe11c0140000003e0,0xe19c015100000071\n"
".quad 0x0000075080000071,0x011c016000000360,0x249c014900000011,0x41dc014880000018\n"
".quad 0x21dc01190e0000fc,0x0001f419000000fd,0x41dc014000000000,0x0021e7188e0000fc\n"
".quad 0x01dde440000000a0,0x019de428000000b4,0x01000728000000b0,0x049de45000008c80\n"
".quad 0x04ddf228000000fc,0x21dc011bffc00000,0x0021e7188e0000fd,0x011de44000000080\n"
".quad 0x015de228000000fc,0x049de419ffc00000,0x04ddf228000000fc,0x015de41bffc00000\n"
".quad 0x011de4280000004c,0x01dde42800000048,0x019de428000000b4,0x01000728000000b0\n"
".quad 0x049de45000009b60,0x04dde42800000010,0x011de42800000014,0x015df228000000fc\n"
".quad 0x001df419ffc00000,0x011de428000000fc,0x015de228000000fc,0x049de419ffe00000\n"
".quad 0x04dde228000000fc,0x001df419ffe00000,0xc1dc0128000000fc,0x00a1e7188e0000fe\n"
".quad 0xe100014000000120,0xe180015100000071,0x0100015080000071,0x2500014900000011\n"
".quad 0x0181e44880000018,0x01c1e42800000010,0x0201e42800000014,0x0241e42800000050\n"
".quad 0x0081e72800000054,0xe1a0014000000100,0xe120015080000071,0x2220015100000071\n"
".quad 0x01a0014880000018,0x0121e44900000011,0x0161e42800000020,0x0521e42800000024\n"
".quad 0x0561e42800000018,0x63dc01280000001c,0x000007188e0000fc,0x0025e76000000280\n"
".quad 0x019de44000000080,0x01dde428000000b8,0x0ddde428000000bc,0x0e1df428000000b0\n"
".quad 0x83dc0128000000b4,0x0025e7188e0000fc,0x0021e74000000120,0x019de44000000080\n"
".quad 0x01dde428000000b0,0x0ddde428000000b4,0x0e1df428000000b0,0x019de428000000b4\n"
".quad 0x01dde428000000b8,0x0ddde428000000bc,0x0e1df428000000b8,0x019de428000000bc\n"
".quad 0x01dde428000000b0,0x0ddde428000000b4,0x0e1df428000000b8,0x01000728000000bc\n"
".quad 0x049de450000094e0,0x04dde42800000010,0x01dde42800000014,0x019de428000000e0\n"
".quad 0x015de428000000dc,0x011de42800000054,0x0100072800000050,0x001df45000008380\n"
".quad 0xc11d0128000000fc,0xc19d014880000011,0x449c014900000049,0x651c01081e000060\n"
".quad 0x21dc01080e000058,0x0081e7198e000051,0x0521e44000000080,0x0561e228000000fc\n"
".quad 0x04a1e419ffe00000,0x04e1e228000000fc,0x01dc2319ffe00000,0x0000071a8e0000fc\n"
".quad 0x0ddc0460000003e0,0x0021e7080e00001c,0xe11c014000000320,0x0000075100000071\n"
".quad 0x011c0160000001a0,0x41dc014900000011,0x0021e7188e0000fc,0x01dde44000000080\n"
".quad 0x019de428000000bc,0x01000728000000b8,0x001df45000009120,0xe11c014000000000\n"
".quad 0x01dde45080000071,0x019de428000000b4,0x211c0128000000b0,0x0100074880000010\n"
".quad 0x001df45000009060,0xc11d014000000000,0xc09c014900000011,0x411c014880fffc01\n"
".quad 0x209c01080e000058,0x21dc01081e000060,0x0001f4198e000010,0x011de44000000000\n"
".quad 0x015de228000000fc,0x009de419ffe00000,0x00ddf228000000fc,0x011de419ffe00000\n"
".quad 0x015de228000000fc,0x009de419ffe00000,0x00ddf228000000fc,0x419c0119ffe00000\n"
".quad 0xa3dc014800000049,0x0000071e8e000069,0x61dc016000000320,0x0205e4190e000018\n"
".quad 0x0245e428000000fc,0x62250128000000fc,0x0021e74900000061,0x61dc014000000120\n"
".quad 0x029de21e8e000018,0x02dde21a00000000,0x0181e418ffbeb850,0x01c1e428000000fc\n"
".quad 0x829c0128000000fc,0x41a1015000000028,0x61dc014900000049,0x0001e71a0e000028\n"
".quad 0x419c014000000120,0x61dc014800000008,0x0021e7190e000018,0x029de240000000e0\n"
".quad 0x02dde21a00000000,0x419d0118ffbeb850,0x821c014900000008,0x61dc015000000028\n"
".quad 0x0021e71a0e000020,0x71dc144000000020,0xf1dc140c0e00001c,0x00a1e70c0e00001c\n"
".quad 0x73c0044000000140,0x0481e40c0e00001c,0x04c1e42800000060,0x0101e42800000064\n"
".quad 0x0141e42800000058,0x1dc004280000005c,0x0501e4080e00001c,0x0081e42800000070\n"
".quad 0x0541e42800000070,0x00c1e42800000074,0x219c012800000074,0x61dc014800000051\n"
".quad 0x00a1e7190e000018,0x1180034000000120,0x1c008548010000d7,0x41c043c800002080\n"
".quad 0x6480a548000000db,0x1000859400000040,0x0180e3c000002080,0x0200a35000c00040\n"
".quad 0x624043206bc00040,0x8500a5480000001b,0x71dc039400000020,0x0000071a8e0000ff\n"
".quad 0x0021e76000000220,0x419c0140000001e0,0x61dc014800000008,0x00a1e7190e000018\n"
".quad 0x1000854000000180,0x018003c000002080,0x6000e34800c00004,0x6200a35000c00040\n"
".quad 0x118085206bc00040,0x624043c800002080,0x8080a54800000003,0x1000859400000000\n"
".quad 0x0080e3c000002080,0x0180a35000c00040,0x61c043206bc00040,0x6100a5480000000b\n"
".quad 0x001df49400000020,0x101c954000000000,0x01dc23c000002080,0x0001e71a8efffffc\n"
".quad 0x001df44003ffd160,0x101c034000000000,0x311e044800c020a0,0x019de218000000cd\n"
".quad 0x0d1c031bfffffffc,0x471e014801400010,0x009de45000cfbc00,0x00dde428004000c0\n"
".quad 0x041de428004000d0,0x119c8528004000e0,0x045de4c8000040a0,0xfd5c4328004000f0\n"
".quad 0xc49c0148000000ff,0x0000074800f00001,0x001de468000071c0,0x0000074000000000\n"
".quad 0x279c017000003fe0,0x0000074800000040,0xeb1c016000000260,0xc11c015000cff801\n"
".quad 0x41dc014880effc02,0x0021e71b0e0000fc,0xc19c014000000080,0x451c014900effc02\n"
".quad 0x659c015080000010,0x001de75100000018,0xc19c014000000140,0x61dc014900effc02\n"
".quad 0x650001198e0000fc,0x4580015080000018,0x0081e75100000010,0x41200140000000a0\n"
".quad 0x61a0015100000010,0x0521e45100000018,0x0561e428000000fc,0x45a00128000000fc\n"
".quad 0x221c11081e000018,0x029c015080d00000,0x211c015080d00001,0x019c015100d00000\n"
".quad 0x821c015100d00001,0x000007080e000028,0x411c0160000013e0,0x8c1c01081e000018\n"
".quad 0x4b9c014880000048,0x01dc014900000048,0xe1dc01198e0000ff,0x0021e71b000000fe\n"
".quad 0x03dc014000000ce0,0xe1dc011e8e0000ff,0x0025e71a8e0000fe,0x0021e740000007e0\n"
".quad 0xc11c0140000003e0,0xc19c0151000000b1,0x611c0150800000b1,0x461c014900000011\n"
".quad 0x41dc014880000019,0x81dc01190e0000fc,0x0021e719000000fd,0x001df44000000020\n"
".quad 0x41dc0128000000fc,0x0021e7188e0000fc,0x01dde440000000c0,0x019de428000000bc\n"
".quad 0x01000728000000b8,0x061de45000006cc0,0x065de228000000fc,0x001df21bffc00000\n"
".quad 0x81dc011800000004,0x0021e7188e0000fd,0x011de440000000a0,0x015de228000000fc\n"
".quad 0x061de419ffc00000,0x065de228000000fc,0x001df41bffc00000,0x015de428000000fc\n"
".quad 0x011de42800000064,0x01dde42800000060,0x019de428000000c4,0x01000728000000c0\n"
".quad 0x061de45000006ae0,0x065de228000000fc,0x001df21bffc00000,0xc11c011800000004\n"
".quad 0xc19c0151000000b1,0x00000750800000b1,0x611c016000000360,0x461c014900000011\n"
".quad 0x41dc014880000019,0x81dc01190e0000fc,0x0001f419000000fd,0x41dc014000000000\n"
".quad 0x0021e7188e0000fc,0x01dde440000000e0,0x019de428000000c4,0x01000728000000c0\n"
".quad 0x061de45000007960,0x065de42800000010,0x011de42800000014,0x015df228000000fc\n"
".quad 0x81dc0119ffc00000,0x0021e7188e0000fd,0x011de44000000080,0x015de228000000fc\n"
".quad 0x061de419ffc00000,0x065df228000000fc,0x015de41bffc00000,0x011de42800000064\n"
".quad 0x01dde42800000060,0x019de428000000c4,0x01000728000000c0,0x061de45000006700\n"
".quad 0x065df228000000fc,0x001df41bffc00000,0x0021e728000000fc,0xc11c0140000003e0\n"
".quad 0xc19c0151000000b1,0x00000750800000b1,0x611c016000000360,0x461c014900000011\n"
".quad 0x41dc014880000019,0x81dc01190e0000fc,0x0001f419000000fd,0x41dc014000000000\n"
".quad 0x0021e7188e0000fc,0x01dde440000000a0,0x019de428000000bc,0x01000728000000b8\n"
".quad 0x061de450000064e0,0x065df228000000fc,0x81dc011bffc00000,0x0021e7188e0000fd\n"
".quad 0x011de44000000080,0x015de228000000fc,0x061de419ffc00000,0x065df228000000fc\n"
".quad 0x015de41bffc00000,0x011de42800000064,0x01dde42800000060,0x019de428000000bc\n"
".quad 0x01000728000000b8,0x061de450000073c0,0x065de42800000010,0x011de42800000014\n"
".quad 0x015df228000000fc,0x001df419ffc00000,0x011de428000000fc,0x015de228000000fc\n"
".quad 0x061de419ffe00000,0x065de228000000fc,0x001df419ffe00000,0xe1dc0128000000fc\n"
".quad 0x00a1e7188e0000fe,0xc100014000000120,0xc1800151000000b1,0x61000150800000b1\n"
".quad 0x4680014900000011,0x0181e44880000019,0x01c1e42800000010,0x0201e42800000014\n"
".quad 0x0241e42800000068,0x0081e7280000006c,0xc1a0014000000100,0xc1200150800000b1\n"
".quad 0x42200151000000b1,0x61a0014880000019,0x0121e44900000011,0x0161e42800000020\n"
".quad 0x06a1e42800000024,0x06e1e42800000018,0x63dc01280000001c,0x000007188e0000fc\n"
".quad 0x0025e76000000280,0x019de44000000080,0x01dde428000000c0,0x0d9de428000000c4\n"
".quad 0x0dddf428000000b8,0x83dc0128000000bc,0x0025e7188e0000fc,0x0021e74000000120\n"
".quad 0x019de44000000080,0x01dde428000000b8,0x0d9de428000000bc,0x0dddf428000000b8\n"
".quad 0x019de428000000bc,0x01dde428000000c0,0x0d9de428000000c4,0x0dddf428000000c0\n"
".quad 0x019de428000000c4,0x01dde428000000b8,0x0d9de428000000bc,0x0dddf428000000c0\n"
".quad 0x01000728000000c4,0x061de45000006d40,0x065de42800000010,0x01dde42800000014\n"
".quad 0x019de428000000dc,0x015de428000000d8,0x011de4280000006c,0x0100072800000068\n"
".quad 0x001df45000005be0,0xc11d0128000000fc,0xc19d014880000012,0x461c014900000062\n"
".quad 0x669c01081e000008,0x81dc01080e000040,0x0081e7198e000069,0x06a1e44000000080\n"
".quad 0x06e1e228000000fc,0x0621e419ffe00000,0x0661e228000000fc,0x01dc2319ffe00000\n"
".quad 0x0000071a8e0000fc,0x0d9c0460000003e0,0x0021e7080e00001c,0xc11c014000000320\n"
".quad 0x00000751000000b1,0x611c0160000001a0,0x41dc014900000011,0x0021e7188e0000fc\n"
".quad 0x01dde44000000080,0x019de428000000c4,0x01000728000000c0,0x001df45000006980\n"
".quad 0xc11c014000000000,0x01dde450800000b1,0x019de428000000bc,0x411c0128000000b8\n"
".quad 0x0100074880000011,0x001df450000068c0,0xc19d014000000000,0xc11c014900000012\n"
".quad 0x619c014880fffc02,0x411c01080e000040,0x41dc01081e000008,0x0001f4198e000018\n"
".quad 0x019de44000000000,0x01dde228000000fc,0x011de419ffe00000,0x015df228000000fc\n"
".quad 0x019de419ffe00000,0x01dde228000000fc,0x011de419ffe00000,0x015df228000000fc\n"
".quad 0xa21c0119ffe00000,0x0000074800000061,0x81dc016000000640,0x0021e7190e000020\n"
".quad 0x81dc0140000005e0,0x821c011e8e000020,0x031de25000cff800,0x035de21a80000000\n"
".quad 0xb29c4418fac31bdc,0x0201e41000000021,0x0241e428000000fc,0xa29c0128000000fc\n"
".quad 0xa221015000000030,0x81dc014900000061,0x0001e7198e000028,0x829c014000000460\n"
".quad 0x0000074880effc01,0xa1dc016000000220,0x0021e71b0e0000fc,0xa31c014000000080\n"
".quad 0xa21c014900effc01,0xc29c015080000028,0x001de75100000030,0xa21c014000000140\n"
".quad 0x81dc014900effc01,0x820001198e0000fc,0xa280015080000020,0x0081e75100000028\n"
".quad 0xa2a00140000000a0,0x8320015100000028,0x0221e45100000020,0x0261e428000000fc\n"
".quad 0xa2a00128000000fc,0xc31c11081e000030,0xc39c015080000061,0xc51c015080000069\n"
".quad 0xc31c01080e000038,0xc39c015100000061,0x821c015100000069,0xc31c014880000050\n"
".quad 0x039de2081e000038,0x03dde21a80000000,0xa31c0118fac31bdc,0x829c014900000030\n"
".quad 0xa1dc014800000030,0x0281e41e8e000028,0x02c1e428000000fc,0xc2a10128000000fc\n"
".quad 0xa1dc014900000020,0x0021e7198e000038,0x71dc144000000020,0xf1dc140c0e00001c\n"
".quad 0x00a1e70c0e00001c,0x0201e44000000180,0x2000e32800400080,0x2200a35000c00043\n"
".quad 0x2c80032011c00043,0x0240434800c40003,0x1c80854800400090,0x8680a5c800000060\n"
".quad 0x8600a59400000020,0x0681e49400000000,0x06c1e228000000fc,0x0601e419ffe00000\n"
".quad 0x0641e228000000fc,0x61dc0319ffe00000,0x0000071a8e0000ff,0x0021f460000010c0\n"
".quad 0x621c014000000000,0x0000074800000010,0x81dc0160000005e0,0x0021e7190e000020\n"
".quad 0x821c014000000580,0x031de25000cff800,0x035de21a80000000,0xb29c4418fac31bdc\n"
".quad 0x621d011000000021,0xa29c014900000010,0x81dc015000000030,0x0001e7198e000028\n"
".quad 0x421c014000000460,0x0000074880effc00,0x81dc016000000220,0x0021e71b0e0000fc\n"
".quad 0x629c014000000080,0x851c014900effc00,0xa39c015080000020,0x001de75100000028\n"
".quad 0x629c014000000140,0xa1dc014900effc00,0xa50001198e0000fc,0x8380015080000028\n"
".quad 0x0081e75100000020,0x82200140000000a0,0xa2a0015100000020,0x0521e45100000028\n"
".quad 0x0561e428000000fc,0x83a00128000000fc,0xc21c11081e000028,0xc29c015080000011\n"
".quad 0x831c015080000019,0xc21c01080e000028,0xc29c015100000011,0x821c015100000019\n"
".quad 0x429c01081e000028,0xe21c014880000031,0x039de24900000020,0x03dde21a80000000\n"
".quad 0xa31c0118fac31bdc,0xc1dc014800000020,0x0301e41e8e000030,0x0341e428000000fc\n"
".quad 0x83210128000000fc,0xc1dc014900000028,0x0021e7198e000038,0x71dc144000000020\n"
".quad 0xf1dc140c0e00001c,0x0021f40c0e00001c,0x021de44000000000,0x201ce32800400080\n"
".quad 0x221ca35000c00043,0x2c9c032011c00043,0x025c434800c40003,0x001de44800400090\n"
".quad 0x1c9c852800780000,0x811ca5c800000060,0x819ca59400000000,0x001c259400000020\n"
".quad 0x01dc238000000000,0x0021e71a8e0000fc,0xf5dc0440000002e0,0x001de40c0e00001c\n"
".quad 0x019de428000000fc,0x01dde428000000fc,0x011de428000000fc,0x015de42800780000\n"
".quad 0x001c0328000000fc,0x03dc034800ffff40,0x0005e71a0ec00024,0x625c0340000000e0\n"
".quad 0x021c235001c00028,0x619c437000c0047c,0x71dc0320ffc00028,0x019c03208cc00028\n"
".quad 0x81dc434801000024,0x001de7480000001c,0x75dc044000000020,0x411c030c0e00001c\n"
".quad 0x515c434801c00004,0x401c2548000000fc,0x03dc238400000000,0x0005e71a8e0000fc\n"
".quad 0x001de74003fffe00,0xf5dc044000000060,0x019de40c0e00001c,0x01dde428000000fc\n"
".quad 0x003de728000000fc,0x019de24000000040,0x01dde21bfffffffc,0xf01c041bfffffffc\n"
".quad 0xf11c04200400001f,0x001c02200400001b,0x001c4238003ffffc,0x001c0239ffe00000\n"
".quad 0x015c4238003ffffc,0x0021e739ffe00000,0xf3dc0440000002e0,0x001de40c0e00001c\n"
".quad 0x029de428000000fc,0x02dde428000000fc,0x019de428000000fc,0x01dde42800780000\n"
".quad 0x001c0328000000fc,0x01dc034800ffff40,0x0001e71a0ec00024,0xa25c0340000000e0\n"
".quad 0x021c235001c00028,0xa29c437000c0047c,0xb2dc0320ffc00028,0x029c032094c00028\n"
".quad 0x82dc434801000024,0x001de7480000002c,0x73dc044000000020,0x619c030c0e00001c\n"
".quad 0x71dc434801c00004,0x601c2548000000fc,0x01dc238400000000,0x0001e71a8e0000fc\n"
".quad 0x001de74003fffe00,0xf3dc044000000060,0x029de40c0e00001c,0x02dde428000000fc\n"
".quad 0x003de728000000fc,0x029de24000000040,0x02dde21bfffffffc,0xf01c041bfffffffc\n"
".quad 0xf19c04200200002f,0x001c02200200002b,0x001c4238003ffffc,0x001c0239ffe00000\n"
".quad 0x01dc5238003ffffc,0xa21c0139ffe00000,0xe3dc014800000061,0x0000071e8e000079\n"
".quad 0x81dc0160000002c0,0x0205e4190e000020,0x0245e428000000fc,0x02250128000000fc\n"
".quad 0x0021e74900000009,0x031de240000000c0,0x035de21a00000000,0xa29d0118ffbeb850\n"
".quad 0x831c014900000061,0xa3dc015000000030,0x0005e71a0e000030,0x629c014000000120\n"
".quad 0xa3dc014800000010,0x0025e7190e000028,0x031de240000000e0,0x035de21a00000000\n"
".quad 0x629d0118ffbeb850,0x821c014900000010,0xa3dc015000000030,0x0025e71a0e000020\n"
".quad 0x73dc144000000020,0xf3dc140c0e00001c,0x00a5e70c0e00001c,0x71c4044000000180\n"
".quad 0xc204010c0e00001c,0x0185e4480000000a,0x0d84042800000040,0x01c5e4080e00001c\n"
".quad 0x0605e42800000044,0x0645e42800000008,0x0685e4280000000c,0x0105e428000000b0\n"
".quad 0x06c5e428000000b0,0x0145e428000000b4,0x81c40128000000b4,0x0021e7190e000020\n"
".quad 0x61dc0340000002c0,0x009de41a8e0000ff,0x00dde42800000060,0x041de42800000064\n"
".quad 0x045de42800000068,0x0021e7280000006c,0x621c01b000000000,0x81dc014800000010\n"
".quad 0x0021e7190e000020,0x101c85b000000000,0x021c03c0000040a0,0x801ce34800c00004\n"
".quad 0x829ca35000c00040,0x121c852069c00040,0x52dc43c8000040a0,0xa11ca54800000003\n"
".quad 0x101c859400000000,0x011ce3c0000040a0,0x021ca35000c00040,0x525c432069c00040\n"
".quad 0x819ca54800000013,0x001de79400000020,0x61dc03b000000000,0x0021e71a8e0000ff\n"
".quad 0x609c014000000100,0x21dc014800000010,0x0021e7190e000008,0x009de440000000a0\n"
".quad 0x00dde42800000010,0x041de42800000014,0x045de42800000018,0x001de7280000001c\n"
".quad 0x101c85b000000000,0x01dc23c0000040a0,0x0021e71a8efffffc,0x001c03a800000000\n"
".quad 0x009ce34800fffffc,0x011ca35000c00040,0x101c852069c00040,0x515c43c8000040a0\n"
".quad 0x409ca5480000000b,0x441ca58400000040,0x001de78400000060,0x001de7b000000000\n"
".quad 0x101c034003ffbfe0,0x021de44800c00040,0x011c0328000000cc,0x101c034801400010\n"
".quad 0xf15c434800c00000,0x019c0348000000ff,0xf1dc434801400010,0x01000748000000ff\n"
".quad 0x1c9c8550000052e0,0x001de7c000000060,0x101c034000003060,0x011de44800c00080\n"
".quad 0x015de428004000c0,0x019de428004000d0,0x01dde428004000e0,0x0d5c0328004000f0\n"
".quad 0x1fdc854801400010,0x111cc5c800002080,0x001de4c800000080,0xfd9c4328000000fc\n"
".quad 0x00000748000000ff,0x0c1de46000002f00,0x001c032800000000,0x0000074800fffffc\n"
".quad 0x0c5e036000000720,0x0d1ce36000c00010,0x101c855000c00040,0x111c03c800002080\n"
".quad 0x415c4348010000d7,0x441ca548000000db,0x409ca58400000040,0x049c018400000060\n"
".quad 0x21dc014800000009,0x0021e7190e000049,0x211c0140000005c0,0x021de25000cff801\n"
".quad 0x025de21a80000000,0xb19c4418fac31bdc,0x211d011000000011,0x619c014900000040\n"
".quad 0x41dc015000000020,0x0001e7198e000018,0x011c0140000004a0,0x0000074880effc01\n"
".quad 0x41dc016000000220,0x0021e71b0e0000fc,0x219c014000000080,0x431c014900effc00\n"
".quad 0x629c015080000010,0x001de75100000018,0x219c014000000140,0x61dc014900effc00\n"
".quad 0x630001198e0000fc,0x4280015080000018,0x0081e75100000010,0x41200140000000a0\n"
".quad 0x61a0015100000010,0x0321e45100000018,0x0361e428000000fc,0x42a00128000000fc\n"
".quad 0x311e14081e000018,0x439e0118000000cd,0xe19c015000cfbc00,0xe21c015080000040\n"
".quad 0xe11c015080000008,0xe39c015100000040,0x619c015100000008,0x411c01080e000020\n"
".quad 0xc19c01081e000038,0xa11c014880000018,0x029de24900000010,0x02dde21a80000000\n"
".quad 0x621c0118fac31bdc,0x81dc014800000010,0x0201e41e8e000020,0x0241e428000000fc\n"
".quad 0x42210128000000fc,0x81dc014900000018,0x0021e7198e000028,0x71dc144000000020\n"
".quad 0xf1dc140c0e00001c,0x0000070c0e00001c,0x0021e760000026c0,0x015de44000000100\n"
".quad 0x211ce32800400080,0x219ca35000c00043,0x2c9c03200bc00043,0x41dc434800c40003\n"
".quad 0x1c9c854800400090,0x641ca5c800000060,0x609cb59400000000,0x251c019400000020\n"
".quad 0x0000075000cff801,0x411c016000000240,0x41dc014880effc01,0x0021e71b0e0000fc\n"
".quad 0x419c014000000080,0x4b9c014900effc01,0x6b1c015080000010,0x001de75100000018\n"
".quad 0x419c014000000140,0x61dc014900effc01,0x6b8001198e0000fc,0x4b00015080000018\n"
".quad 0x0081e75100000010,0x41200140000000a0,0x61a0015100000010,0x0ba1e45100000018\n"
".quad 0x0be1e428000000fc,0x4b200128000000fc,0x019c11081e000018,0x311e045100d00001\n"
".quad 0x021c0118000000cd,0x229c015080d00001,0x459e015080d00000,0x211c015000cfbc00\n"
".quad 0x829c015100d00000,0x621c01080e000028,0x611c014800f00001,0x000007081e000010\n"
".quad 0xa69c0160000013c0,0x461c014880000020,0xa1dc014900000020,0x81dc01198e0000fd\n"
".quad 0x0021e71b000000fd,0xa3dc014000000ce0,0x81dc011e8e0000fd,0x0025e71a8e0000fd\n"
".quad 0x0021e740000007e0,0x611c0140000003e0,0x619c015100000051,0xc11c015080000051\n"
".quad 0xe79c014900000012,0x41dc01488000001a,0xe1dc01190e0000fc,0x0021e719000000fd\n"
".quad 0x001df44000000020,0x41dc0128000000fc,0x0021e7188e0000fc,0x01dde440000000c0\n"
".quad 0x019de42800000064,0x0100072800000060,0x079de45000002120,0x07dde228000000fc\n"
".quad 0x001df21bffc00000,0xe1dc011800000004,0x0021e7188e0000fd,0x011de440000000a0\n"
".quad 0x015de228000000fc,0x079de419ffc00000,0x07dde228000000fc,0x001df41bffc00000\n"
".quad 0x015de428000000fc,0x011de4280000007c,0x01dde42800000078,0x019de4280000006c\n"
".quad 0x0100072800000068,0x079de45000001f40,0x07dde228000000fc,0x001df21bffc00000\n"
".quad 0x611c011800000004,0x619c015100000051,0x0000075080000051,0xc11c016000000360\n"
".quad 0xe79c014900000012,0x41dc01488000001a,0xe1dc01190e0000fc,0x0001f419000000fd\n"
".quad 0x41dc014000000000,0x0021e7188e0000fc,0x01dde440000000e0,0x019de4280000006c\n"
".quad 0x0100072800000068,0x079de45000002dc0,0x07dde42800000010,0x011de42800000014\n"
".quad 0x015df228000000fc,0xe1dc0119ffc00000,0x0021e7188e0000fd,0x011de44000000080\n"
".quad 0x015de228000000fc,0x079de419ffc00000,0x07ddf228000000fc,0x015de41bffc00000\n"
".quad 0x011de4280000007c,0x01dde42800000078,0x019de4280000006c,0x0100072800000068\n"
".quad 0x079de45000001b60,0x07ddf228000000fc,0x001df41bffc00000,0x0021e728000000fc\n"
".quad 0x611c0140000003e0,0x619c015100000051,0x0000075080000051,0xc11c016000000360\n"
".quad 0xe79c014900000012,0x41dc01488000001a,0xe1dc01190e0000fc,0x0001f419000000fd\n"
".quad 0x41dc014000000000,0x0021e7188e0000fc,0x01dde440000000a0,0x019de42800000064\n"
".quad 0x0100072800000060,0x079de45000001940,0x07ddf228000000fc,0xe1dc011bffc00000\n"
".quad 0x0021e7188e0000fd,0x011de44000000080,0x015de228000000fc,0x079de419ffc00000\n"
".quad 0x07ddf228000000fc,0x015de41bffc00000,0x011de4280000007c,0x01dde42800000078\n"
".quad 0x019de42800000064,0x0100072800000060,0x079de45000002820,0x07dde42800000010\n"
".quad 0x011de42800000014,0x015df228000000fc,0x001df419ffc00000,0x011de428000000fc\n"
".quad 0x015de228000000fc,0x079de419ffe00000,0x07dde228000000fc,0x001df419ffe00000\n"
".quad 0x81dc0128000000fc,0x00a1e7188e0000fd,0x6100014000000120,0x6180015100000051\n"
".quad 0xc100015080000051,0xe700014900000012,0x0181e4488000001a,0x01c1e42800000010\n"
".quad 0x0201e42800000014,0x0241e42800000070,0x0081e72800000074,0x61a0014000000100\n"
".quad 0x6120015080000051,0xe220015100000051,0xc1a001488000001a,0x0121e44900000012\n"
".quad 0x0161e42800000020,0x0721e42800000024,0x0761e42800000018,0x63dc01280000001c\n"
".quad 0x000007188e0000fc,0x0025e76000000280,0x019de44000000080,0x01dde42800000068\n"
".quad 0x0ddde4280000006c,0x0e1df42800000060,0x83dc012800000064,0x0025e7188e0000fc\n"
".quad 0x0021e74000000120,0x019de44000000080,0x01dde42800000060,0x0ddde42800000064\n"
".quad 0x0e1df42800000060,0x019de42800000064,0x01dde42800000068,0x0ddde4280000006c\n"
".quad 0x0e1df42800000068,0x019de4280000006c,0x01dde42800000060,0x0ddde42800000064\n"
".quad 0x0e1df42800000068,0x010007280000006c,0x079de450000021a0,0x07dde42800000010\n"
".quad 0x01dde42800000014,0x019de428000000e0,0x015de428000000dc,0x011de42800000074\n"
".quad 0x0100072800000070,0x001df45000001040,0x411d0128000000fc,0x419d014880000011\n"
".quad 0x479c014900000079,0x671c01081e000040,0xe1dc01080e000008,0x0081e7198e000071\n"
".quad 0x0721e44000000080,0x0761e228000000fc,0x07a1e419ffe00000,0x07e1e228000000fc\n"
".quad 0x01dc2319ffe00000,0x0000071a8e0000fc,0x0ddc0460000003e0,0x0021e7080e00001c\n"
".quad 0x611c014000000320,0x0000075100000051,0xc11c0160000001a0,0x41dc014900000012\n"
".quad 0x0021e7188e0000fc,0x01dde44000000080,0x019de4280000006c,0x0100072800000068\n"
".quad 0x001df45000001de0,0x611c014000000000,0x01dde45080000051,0x019de42800000064\n"
".quad 0xe11c012800000060,0x0100074880000012,0x001df45000001d20,0x411d014000000000\n"
".quad 0x419c014900000011,0x411c014880fffc01,0x619c01080e000008,0x61dc01081e000040\n"
".quad 0x0001f4198e000010,0x011de44000000000,0x015de228000000fc,0x019de419ffe00000\n"
".quad 0x01ddf228000000fc,0x011de419ffe00000,0x015de228000000fc,0x019de419ffe00000\n"
".quad 0x01ddf228000000fc,0xc21c0119ffe00000,0x23dc014800000079,0x0000071e8e000049\n"
".quad 0x81dc016000000320,0x0305e4190e000020,0x0345e428000000fc,0x23250128000000fc\n"
".quad 0x0021e74900000040,0x81dc014000000120,0x029de21e8e000020,0x02dde21a00000000\n"
".quad 0x0201e418ffbeb850,0x0241e428000000fc,0xc29c0128000000fc,0xc221015000000028\n"
".quad 0x81dc014900000079,0x0001e71a0e000028,0x421c014000000120,0x81dc014800000018\n"
".quad 0x0021e7190e000020,0x029de240000000e0,0x02dde21a00000000,0x421d0118ffbeb850\n"
".quad 0xc29c014900000018,0x81dc015000000028,0x0021e71a0e000028,0x71dc144000000020\n"
".quad 0xf1dc140c0e00001c,0x00a1e70c0e00001c,0x73c0044000000140,0x0781e40c0e00001c\n"
".quad 0x07c1e42800000040,0x0101e42800000044,0x0141e42800000008,0x1dc004280000000c\n"
".quad 0x0701e4080e00001c,0x0181e42800000050,0x0741e42800000050,0x01c1e42800000054\n"
".quad 0xe09c012800000054,0x21dc014800000071,0x00a1e7190e000008,0x1080034000000120\n"
".quad 0x1c008548010000d7,0x40c043c800002080,0x2780a548000000db,0x1000859400000040\n"
".quad 0x0080e3c000002080,0x0200a35000c00040,0x624043206bc00040,0x8700a5480000000b\n"
".quad 0x71dc039400000020,0x0000071a8e0000ff,0x0021e76000000220,0x409c0140000001e0\n"
".quad 0x21dc014800000018,0x00a1e7190e000008,0x1000854000000180,0x008003c000002080\n"
".quad 0x2000e34800c00004,0x2200a35000c00040,0x108085206bc00040,0x624043c800002080\n"
".quad 0x8180a54800000003,0x1000859400000000,0x0080e3c000002080,0x0180a35000c00040\n"
".quad 0x61c043206bc00040,0x6100a5480000000b,0x001df49400000020,0x101c954000000000\n"
".quad 0x01dc23c000002080,0x0001e71a8efffffc,0x001df44003ffd160,0x001de74000000000\n"
".quad 0x001de74000000020,0x201c234000000000,0x00dde45800c0007f,0x309ce328004000a0\n"
".quad 0x001c035000c00013,0x311ca36800c3fffc,0x001c032007c00013,0x215c4348000000c8\n"
".quad 0x001c2348004000b0,0x401c855800c00040,0x001de79400000000,0x701c038000000000\n"
".quad 0x521c036000c00004,0x039de46000c00004,0x001c032800000010,0x831c035800c00054\n"
".quad 0x03dde45800c00054,0x025c032800000014,0xc21c034800fffffc,0x029de44800fffffc\n"
".quad 0x91dc032800000018,0x02dde41a0ec01ff4,0x81dc03280000001c,0x0021e71a20c01ff4\n"
".quad 0xe1dc814000000560,0x0001e7198edffc00,0x515c424000000040,0x001de73800200000\n"
".quad 0xa1dc814000000e40,0x0001e7198edffc00,0x715c424000000060,0x011de43800200000\n"
".quad 0x001de72800000018,0xe3dc014000000da0,0xa5dc01190e0000fc,0x11dc04190e0000fc\n"
".quad 0x0001e70c0e000008,0xe7dc814000000080,0xa1dc81190edffc00,0x002de7190edffc00\n"
".quad 0x0021e74000000080,0x011de44000000060,0x015de228000000fc,0x001de71bffe00000\n"
".quad 0x01dc044000000c40,0x0021e70c0e000044,0x701c834000000080,0x011de46800000014\n"
".quad 0x015c0228000000fc,0x001de73a00000000,0x31dc044000000b80,0x0021e70c0e000048\n"
".quad 0x701c8340000000a0,0x011de46800000014,0x001c0228000000fc,0x015c423a00000000\n"
".quad 0x001de739ffc00000,0x81dc234000000aa0,0x0081e71b0e0000fc,0xe120014000000040\n"
".quad 0x0361e25000d0d400,0x0341e41bffffff28,0x91dc2328000000fc,0x0001e71b0e0000fc\n"
".quad 0xa19c014000000080,0xd35c035000d0d400,0x001de74800c000d8,0x035de44000000020\n"
".quad 0x021c0328000000fc,0x029de24800fff004,0x025de21800000004,0x81de8318ffc00000\n"
".quad 0x021de2410000001c,0xc39c031800000000,0x72dc004800fff004,0xc31d03c800000018\n"
".quad 0xe15e834800000000,0x681e014100000014,0x039c012010000028,0x081c01201400002a\n"
".quad 0x429c015000000082,0x039c015000000028,0x681e01201c00003a,0x621e012008000028\n"
".quad 0x029c012010000038,0x821c01201400003a,0x619e01201c000038,0x611c012008000028\n"
".quad 0x539c032114000020,0xe01c036000c00004,0xc31c035800c00054,0xc31c034800000000\n"
".quad 0xc35c034800000034,0xd1dc034800fffffc,0x0001e71a0ec01ff4,0xc01d034000000060\n"
".quad 0x015e834800000000,0x001de74000000014,0xc35c034000000580,0x501c024800fff004\n"
".quad 0xd1dc233a00000000,0x0001e7198ec00ffc,0x015de24000000080,0xf11c2319ffc00000\n"
".quad 0x515c233100ffffff,0x001de73100400014,0xd1dc234000000460,0x03dc231b0effef30\n"
".quad 0x0001e7190e0000fc,0xf11c044000000060,0xf15c042012c00007,0x001de720020000ff\n"
".quad 0x639c0140000003a0,0xc35c032194000020,0xc81e034800c000fc,0xf3dc024800ffff84\n"
".quad 0xd1dc0338003ffffc,0xe8dc03198ec00080,0xf3dc425800000080,0x091de43800400000\n"
".quad 0xe85c032800000080,0xf89c036000000034,0xd820036000000034,0xc31e034800ffff80\n"
".quad 0x619c014800c00004,0x235c032094000020,0xf21d03480000008e,0x1fdd034800000093\n"
".quad 0xe3600348010000fe,0xc7dc036000000080,0xe25c03198ec00080,0xf29c035800000030\n"
".quad 0xd5dc636000000020,0xc22c031a8e0000fc,0x41dc014800ffff80,0x911c031a8e000018\n"
".quad 0xf12c234800000028,0x01dc045800000020,0xf15c230c02000048,0x4100035800000030\n"
".quad 0x5140434801c00004,0x515c4348000000fc,0x001de76800000000,0x701c039000000000\n"
".quad 0x521c036000c00004,0x039de46000c00004,0x001c032800000010,0x831c035800c00054\n"
".quad 0x03dde45800c00054,0x025c032800000014,0xc21c034800fffffc,0x029de44800fffffc\n"
".quad 0x91dc032800000018,0x02dde41a0ec01ff4,0x81dc03280000001c,0x0021e71a20c01ff4\n"
".quad 0xe1dc814000000560,0x0001e7198edffc00,0x515c424000000040,0x001de73800200000\n"
".quad 0xa1dc814000000e40,0x0001e7198edffc00,0x715c424000000060,0x011de43800200000\n"
".quad 0x001de72800000018,0xe3dc014000000da0,0xa5dc01190e0000fc,0x11dc04190e0000fc\n"
".quad 0x0001e70c0e000008,0xe7dc814000000080,0xa1dc81190edffc00,0x002de7190edffc00\n"
".quad 0x0021e74000000080,0x011de44000000060,0x015de228000000fc,0x001de71bffe00000\n"
".quad 0x01dc044000000c40,0x0021e70c0e000044,0x701c834000000080,0x011de46800000014\n"
".quad 0x015c0228000000fc,0x001de73a00000000,0x31dc044000000b80,0x0021e70c0e000048\n"
".quad 0x701c8340000000a0,0x011de46800000014,0x001c0228000000fc,0x015c423a00000000\n"
".quad 0x001de739ffc00000,0x81dc234000000aa0,0x0081e71b0e0000fc,0xe120014000000040\n"
".quad 0x0361e25000d0d400,0x0341e41bffffff28,0x91dc2328000000fc,0x0001e71b0e0000fc\n"
".quad 0xa19c014000000080,0xd35c035000d0d400,0x001de74800c000d8,0x035de44000000020\n"
".quad 0x021c0328000000fc,0x029de24800fff004,0x025de21800000004,0x81de8318ffc00000\n"
".quad 0x021de2410000001c,0xc39c031800000000,0x72dc004800fff004,0xc31d03c800000018\n"
".quad 0xe15e834800000000,0x681e014100000014,0x039c012010000028,0x081c01201400002a\n"
".quad 0x429c015000000082,0x039c015000000028,0x681e01201c00003a,0x621e012008000028\n"
".quad 0x029c012010000038,0x821c01201400003a,0x619e01201c000038,0x611c012008000028\n"
".quad 0x539c032094000020,0xe01c036000c00004,0xc31c035800c00054,0xc31c034800000000\n"
".quad 0xc35c034800000034,0xd1dc034800fffffc,0x0001e71a0ec01ff4,0xc01d034000000060\n"
".quad 0x015e834800000000,0x001de74000000014,0xc35c034000000580,0x501c024800fff004\n"
".quad 0xd3dc233a00000000,0x01dc23198ec00ffc,0x0005e71a8e0000fc,0x015de24000000080\n"
".quad 0xf11c0419ffc00000,0x515c042000ffffff,0x001de72000400014,0xd3dc234000000440\n"
".quad 0x0005e71b0effef30,0xf11c044000000060,0xf15c042010c00007,0x001de720000000ff\n"
".quad 0x639c0140000003a0,0xc35c032194000020,0xc81e034800c000fc,0xf3dc024800ffff84\n"
".quad 0xd3dc0338003ffffc,0xe8dc03198ec00080,0xf3dc425800000080,0x091de43800400000\n"
".quad 0xe85c032800000080,0xf89c036000000034,0xd824036000000034,0xc31e034800ffff80\n"
".quad 0x619c014800c00004,0x235c032114000020,0xf21d03480000008e,0x1fdd034800000093\n"
".quad 0xe3640348010000fe,0xc7dc036000000080,0xe25c03198ec00080,0xf29c035800000030\n"
".quad 0xd5dc636000000020,0xc22c031a8e0000fc,0x43dc014800ffff80,0x911c031a8e000018\n"
".quad 0xf12c234800000028,0x11dc045800000020,0xf15c230c00000048,0x4100035800000030\n"
".quad 0x5140434801c00004,0x515c4348000000fc,0x001de76800000000,0x105d039000000000\n"
".quad 0x0000074800c002c0,0x169ca56000000780,0x109ca5c8000001a0,0x1b1cc5c800000180\n"
".quad 0x1e9c85c8000001c0,0x669ca5c800000230,0x609ca58400000020,0x0b1de48400000000\n"
".quad 0x0b5de42800000010,0x0e9de42800000014,0xab9c012800000020,0xe1dc014800000009\n"
".quad 0x0021e7190e0000ba,0xe11c0140000005e0,0xe1dc015000cff802,0x029de21e8e0000ba\n"
".quad 0x02dde21a80000000,0xb31c4418fac31bdc,0x0101e41000000011,0x0141e428000000fc\n"
".quad 0xc29c0128000000fc,0xa121015000000028,0x41dc014900000009,0x0001e7198e000028\n"
".quad 0x229c014000000460,0xa11c014880effc00,0xa1dc014900effc01,0x0021e71b0e0000fc\n"
".quad 0xa31c014000000060,0x429c015080000028,0x001de75100000010,0x41dc014000000120\n"
".quad 0x430001198e0000fc,0xa280015080000010,0x0081e75100000028,0xa2a00140000000a0\n"
".quad 0x4120015100000028,0x0321e45100000010,0x0361e428000000fc,0xa2a00128000000fc\n"
".quad 0x311e04081e000010,0x411e011800000021,0x439c015000cfbc00,0x481c015080000008\n"
".quad 0x489c015080000068,0x411c015100000008,0x039c015100000068,0x411c01080e00003a\n"
".quad 0xc31c01081e000088,0x039de24880000038,0xa29c011a80000000,0x03dde24900000010\n"
".quad 0xc11c0118fac31bdc,0x41dc014800000028,0x0101e41e8e000010,0x0141e428000000fc\n"
".quad 0xa1210128000000fc,0x41dc014900000030,0x0021e7198e000038,0x71dc144000000020\n"
".quad 0xf1dc140c0e00001c,0x0021e70c0e00001c,0xc01c854000000220,0xc11ca58400000022\n"
".quad 0x029ca38400000002,0x001ce32009c00040,0x52dc435000c00040,0xa09ca54800000000\n"
".quad 0xc01c859400000000,0xc11ca58400000022,0x621ca58400000002,0x011ca38400000020\n"
".quad 0x001ce32009c00040,0x515c435000c00040,0x421ca54800000000,0xc01c859400000020\n"
".quad 0x001c038400000022,0xc01c854800c40000,0x001de79400000022,0x161ca54000002a40\n"
".quad 0x1c1cc5c800000120,0xe61c01c800000140,0x811c015000cff802,0x41dc014880effc01\n"
".quad 0x0021e71b0e0000fc,0x819c014000000080,0x4c1c014900effc01,0x6c9c015080000010\n"
".quad 0x001de75100000018,0x819c014000000140,0x61dc014900effc01,0x6c0001198e0000fc\n"
".quad 0x4c80015080000018,0x0081e75100000010,0x41200140000000a0,0x61a0015100000010\n"
".quad 0x0c21e45100000018,0x0c61e428000000fc,0x4ca00128000000fc,0x1d1cc5081e000018\n"
".quad 0x339e04c8000000c0,0x229c011800000021,0xa31c015080d00000,0xed1e015080d00001\n"
".quad 0x1e1ca55000cfbc00,0xc31c01c800000100,0x221c01080e000028,0xa39c015100d00000\n"
".quad 0x429c015100d00001,0x141cc54800f00003,0xe21c01c800000000,0xce1c01081e000020\n"
".quad 0x011de44880000028,0x8d9c0128000000fc,0x81dc014900000028,0x015de2198e0000ff\n"
".quad 0x019de419ffe00000,0x01dde228000000fc,0x61dc0119ffe00000,0x171cc51b000000ff\n"
".quad 0x151cc5c800000080,0x041de4c800000040,0x049de428000000fc,0x111cc528000000fc\n"
".quad 0x045de2c800000240,0x04dde219ffe00000,0x00000719ffe00000,0x0021e76000001540\n"
".quad 0x83dc014000000ea0,0x61dc011e8e0000ff,0x0025e71a8e0000ff,0x0021e74000000920\n"
".quad 0x419c0140000004a0,0x411c015100000063,0x279c015080000063,0x071c01490000001b\n"
".quad 0xe1dc014880000013,0xc1dc01190e0000fd,0x0021e719000000fd,0x001df44000000020\n"
".quad 0xe1dc0128000000fc,0x0021e7188e0000fd,0x015de44000000140,0x011de4280000007c\n"
".quad 0x01dde42800000078,0x019de428000000dc,0x01000728000000d8,0x079de45003ffcc80\n"
".quad 0x07dde42800000010,0x071de42800000014,0x075de228000000fc,0x001df21bffc00000\n"
".quad 0xc1dc011800000004,0x0021e7188e0000fd,0x079de440000000a0,0x07dde228000000fc\n"
".quad 0x071de419ffc00000,0x075de228000000fc,0x001df41bffc00000,0x015de428000000fc\n"
".quad 0x011de42800000074,0x01dde42800000070,0x019de428000000e4,0x01000728000000e0\n"
".quad 0x079de45003ffca60,0x07dde42800000010,0x071de42800000014,0x075de228000000fc\n"
".quad 0x001df21bffc00000,0x419c011800000004,0x411c015100000063,0x0000075080000063\n"
".quad 0x279c0160000003e0,0x071c01490000001b,0xe1dc014880000013,0xc1dc01190e0000fd\n"
".quad 0x0001f419000000fd,0xe1dc014000000000,0x0021e7188e0000fd,0x015de44000000120\n"
".quad 0x011de4280000007c,0x01dde42800000078,0x019de428000000e4,0x01000728000000e0\n"
".quad 0x071de45003ffd860,0x075de42800000010,0x079de42800000014,0x07ddf228000000fc\n"
".quad 0xc1dc0119ffc00000,0x0021e7188e0000fd,0x079de44000000080,0x07dde228000000fc\n"
".quad 0x071de419ffc00000,0x075df228000000fc,0x015de41bffc00000,0x011de42800000074\n"
".quad 0x01dde42800000070,0x019de428000000e4,0x01000728000000e0,0x079de45003ffc600\n"
".quad 0x07dde42800000010,0x071de42800000014,0x075df228000000fc,0x001df41bffc00000\n"
".quad 0x0021e728000000fc,0x419c014000000460,0x411c015100000063,0x0000075080000063\n"
".quad 0x279c0160000003e0,0x071c01490000001b,0xe1dc014880000013,0xc1dc01190e0000fd\n"
".quad 0x0001f419000000fd,0xe1dc014000000000,0x0021e7188e0000fd,0x015de44000000120\n"
".quad 0x011de4280000007c,0x01dde42800000078,0x019de428000000dc,0x01000728000000d8\n"
".quad 0x079de45003ffc360,0x07dde42800000010,0x071de42800000014,0x075df228000000fc\n"
".quad 0xc1dc011bffc00000,0x0021e7188e0000fd,0x079de44000000080,0x07dde228000000fc\n"
".quad 0x071de419ffc00000,0x075df228000000fc,0x015de41bffc00000,0x011de42800000074\n"
".quad 0x01dde42800000070,0x019de428000000dc,0x01000728000000d8,0x071de45003ffd200\n"
".quad 0x075de42800000010,0x079de42800000014,0x07ddf228000000fc,0x001df419ffc00000\n"
".quad 0x079de428000000fc,0x07dde228000000fc,0x071de419ffe00000,0x075de228000000fc\n"
".quad 0x001df419ffe00000,0x61dc0128000000fc,0x00a1e7188e0000ff,0x4100014000000120\n"
".quad 0x4180015100000063,0x2100015080000063,0x0500014900000013,0x0181e4488000001b\n"
".quad 0x01c1e42800000010,0x0201e42800000014,0x0241e42800000050,0x0081e72800000054\n"
".quad 0x41a0014000000100,0x4120015080000063,0x0220015100000063,0x21a001488000001b\n"
".quad 0x0121e44900000013,0x0161e42800000020,0x0521e42800000024,0x0561e42800000018\n"
".quad 0x63dc01280000001c,0x000007188e0000fc,0x0025e76000000280,0x019de44000000080\n"
".quad 0x01dde428000000e0,0x059de428000000e4,0x05ddf428000000d8,0x83dc0128000000dc\n"
".quad 0x0025e7188e0000fc,0x0021e74000000120,0x019de44000000080,0x01dde428000000d8\n"
".quad 0x059de428000000dc,0x05ddf428000000d8,0x019de428000000dc,0x01dde428000000e0\n"
".quad 0x059de428000000e4,0x05ddf428000000e0,0x019de428000000e4,0x01dde428000000d8\n"
".quad 0x059de428000000dc,0x05ddf428000000e0,0x01000728000000e4,0x071de45003ffcb80\n"
".quad 0x075de42800000010,0x01dde42800000014,0x019de4280000005c,0x015de42800000058\n"
".quad 0x011de42800000054,0x0100072800000050,0x079de45003ffba20,0x07dde42800000010\n"
".quad 0x001df42800000014,0x819d0128000000fc,0x811d014880000079,0x171cc54900000071\n"
".quad 0x251c01c800000280,0xa59c01081e000018,0x175e85080e000011,0x41dc01c000000090\n"
".quad 0x179ea5198e000059,0x0081e7c0000000a0,0x05a1e44000000080,0x05e1e228000000fc\n"
".quad 0x0521e419ffe00000,0x0561e228000000fc,0x01dc2319ffe00000,0x151cc51a8e0000fc\n"
".quad 0x000007c800000280,0x071c0460000003e0,0x0021f4080e00001c,0x411c014000000000\n"
".quad 0x0000075100000063,0x211c0160000001a0,0x41dc014900000013,0x0021e7188e0000fc\n"
".quad 0x01dde44000000080,0x019de428000000e4,0x01000728000000e0,0x001df45003ffc700\n"
".quad 0x411c014000000000,0x01dde45080000063,0x019de428000000dc,0x011c0128000000d8\n"
".quad 0x0100074880000013,0x001df45003ffc640,0x829d014000000000,0x821c014900000011\n"
".quad 0x019de44880fffc01,0xa49c0128000000fc,0x241c01080e000029,0x01dde2081e000020\n"
".quad 0x01dc0119ffc00000,0x111cc5198e000049,0x0081e7c800000240,0x04a1e44000000080\n"
".quad 0x04e1e228000000fc,0x0421e419ffe00000,0x0461e228000000fc,0x141cd519ffe00000\n"
".quad 0x619c01c800000240,0xe3dc014800000051,0x1c1ec51e8e0000ba,0x61dc01c000000140\n"
".quad 0x0105e4190e000018,0x0145e428000000fc,0xa1250128000000fc,0x1d1ec54900000009\n"
".quad 0x1e1ea5c0000000c0,0x000007c000000100,0x0021e760000002a0,0x61dc014000000120\n"
".quad 0x021de21e8e000018,0x025de21a00000000,0x0181e418ffbeb850,0x01c1e428000000fc\n"
".quad 0x421c0128000000fc,0x61a1015000000020,0x61dc014900000051,0x0001e71a0e000020\n"
".quad 0x219c014000000120,0x61dc014800000041,0x0021e7190e000018,0x021de240000000e0\n"
".quad 0x025de21a00000000,0x219d0118ffbeb850,0x411c014900000041,0x61dc015000000020\n"
".quad 0x0021e71a0e000010,0x71dc144000000020,0xf1dc140c0e00001c,0x00a1e70c0e00001c\n"
".quad 0x73c00440000001a0,0x1080a50c0e00001c,0x1600a5c800000280,0x1600c5c8000002a0\n"
".quad 0x170004c800000240,0x0501e4080e00001c,0x0541e42800000008,0x0581e4280000000c\n"
".quad 0x0401e42800000060,0x05c1e42800000060,0x0441e42800000064,0x0481e42800000064\n"
".quad 0x04c1e42800000068,0xc1dc03280000006c,0x161ea51a8e0000fd,0x171e85c000000120\n"
".quad 0x000007c000000080,0x0021f46000000180,0x211c014000000000,0x41dc014800000041\n"
".quad 0x0021f4190e000010,0x101c034000000000,0x015de44800c00240,0x011de428000000b4\n"
".quad 0x019c0328000000b0,0x021de44801400010,0xf1dc4328000000e8,0x01000748000000ff\n"
".quad 0x151cd55003ffcd60,0x611c01c000000280,0x141ec54800000051,0x151ec5c000000000\n"
".quad 0x41dc01c000000040,0x0021e7190e000010,0x101c0340000000e0,0x015de44800c00280\n"
".quad 0x011de428000000b4,0x019c0328000000b0,0x021de44801400010,0xf1dc4328000000e8\n"
".quad 0x01000748000000ff,0x109ea55003ffcbc0,0x169ea5c000000180,0x1b1ec5c0000001a0\n"
".quad 0x1e9e85c0000001c0,0x105c03c000000230,0x001de74800c002c0,0x0000009000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0xefffff1999999900,0x00000000100c047f,0x0000100000000800,0x080a040000002000\n"
".quad 0x2400200000000a00,0x0c17040024190300,0x200003ffffffff00,0x0c17040011f00000\n"
".quad 0x100002ffffffff00,0x0c17040041f00000,0x080001ffffffff00,0x0c17040021f00000\n"
".quad 0x000000ffffffff00,0x080d040021f00000,0x000020002d021c00,0x0000000000000000\n"
".quad 0x0000010000000000,0x1104000000001100,0x00b0000000100008,0x000f000811040000\n"
".quad 0x1104000000000000,0x00000000000e0008,0x000d000811040000,0x0000000010300000\n"
".quad 0x0000000500000006,0x00000000000047a0,0x0000000000000000,0x0000000000000000\n"
".quad 0x00000000000000e0,0x00000000000000e0,0x0000000000000004,0x00000d0560000000\n"
".quad 0x0000000000000725,0x0000000000000000,0x0000000000000000,0x0000000000004034\n"
".quad 0x0000000000004034,0x0000000000000004,0x0000000500000001,0x0000000000004759\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000014,0x0000000000000014\n"
".quad 0x0000000000000004,0x0000000600000001,0x000000000000476d,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000001,0x0000000000000001,0x0000000000000004\n"
".quad 0x0000000000000000\n"
".text");

extern "C" {

extern const unsigned long long __deviceText_$sm_20$[2321];

}

static __cudaFatPtxEntry __ptxEntries [] = {{(char*)"compute_20",(char*)__deviceText_$compute_20$},{0,0}};
static __cudaFatCubinEntry __cubinEntries[] = {{0,0}};
static __cudaFatDebugEntry __debugEntries0 = {0, 0, 0, 0} ;
static __cudaFatElfEntry __elfEntries0 = {0, 0, 0, 0} ;
static __cudaFatElfEntry __elfEntries1 = {(char*)"sm_20", (char*)__deviceText_$sm_20$, &__elfEntries0, (unsigned int)sizeof(__deviceText_$sm_20$)};



static __cudaFatCudaBinary __fatDeviceText __attribute__ ((section (".nvFatBinSegment")))= {0x1ee55a01,0x00000004,0xa14f518d,(char*)"d25b54377c969872",(char*)"/home/andrew/repositories/gpuocelot/tests/cuda3.2/tests/Interval/interval.cu",(char*)" ",__ptxEntries,__cubinEntries,&__debugEntries0,0,0,0,0,0,0xf2a95c4d,&__elfEntries1};
# 3 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.stub.c" 2
typedef interval_gpu<double> _Z12interval_gpuIdE;
struct __T20 { _Z12interval_gpuIdE *__par0;int *__par1; _Z12interval_gpuIdE __par2;int __par3;int __dummy_field;};
static void __device_stub__Z20test_interval_newtonIdEvP12interval_gpuIT_EPiS2_i( _Z12interval_gpuIdE *, int *, _Z12interval_gpuIdE&, int);
static void __sti____cudaRegisterAll_43_tmpxft_000003ac_00000000_4_interval_cpp1_ii_d373785b(void) __attribute__((__constructor__));
static void __device_stub__Z20test_interval_newtonIdEvP12interval_gpuIT_EPiS2_i( _Z12interval_gpuIdE *__par0, int *__par1, _Z12interval_gpuIdE&__par2, int __par3){ struct __T20 *__T228 = 0;
if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T228->__par0) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par1, sizeof(__par1), (size_t)&__T228->__par1) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par2, sizeof(__par2), (size_t)&__T228->__par2) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par3, sizeof(__par3), (size_t)&__T228->__par3) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _Z12interval_gpuIdE *, int *, _Z12interval_gpuIdE, int))test_interval_newton<double> )); (void)cudaLaunch(((char *)((void ( *)( _Z12interval_gpuIdE *, int *, _Z12interval_gpuIdE, int))test_interval_newton<double> ))); };}
template<> void __wrapper__device_stub_test_interval_newton<T>( _Z12interval_gpuIdE *&__cuda_0,int *&__cuda_1, _Z12interval_gpuIdE &__cuda_2,int &__cuda_3){__device_stub__Z20test_interval_newtonIdEvP12interval_gpuIT_EPiS2_i( __cuda_0,__cuda_1,__cuda_2,__cuda_3);}
static void __sti____cudaRegisterAll_43_tmpxft_000003ac_00000000_4_interval_cpp1_ii_d373785b(void){__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); atexit(__cudaUnregisterBinaryUtil);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _Z12interval_gpuIdE *, int *, _Z12interval_gpuIdE, int))test_interval_newton<double> ), (char*)"_Z20test_interval_newtonIdEvP12interval_gpuIT_EPiS2_i", "_Z20test_interval_newtonIdEvP12interval_gpuIT_EPiS2_i", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);}
# 1 "/tmp/tmpxft_000003ac_00000000-1_interval.cudafe1.stub.c" 2
