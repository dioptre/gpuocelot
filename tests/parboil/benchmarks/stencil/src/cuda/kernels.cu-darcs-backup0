
#include "common.h"

#define COARSEN_FACTOR 2


__global__ void block2D_hybrid_coarsen_x(float fac,float *A0,float *Anext, int nx, int ny, int nz)
{

	//thread coarsening along x direction
	int inx=threadIdx.x;
	int iny=threadIdx.y;
	int inx2=threadIdx.x+blockDim.x;
	int i = blockIdx.x*blockDim.x*COARSEN_FACTOR+inx;
	int i2= blockIdx.x*blockDim.x*COARSEN_FACTOR+inx2;
    int j = blockIdx.y*blockDim.y+iny;
	
	//memory shared memory
	__shared__ float sh_A0[BLOCK_SIZE_Y/2][BLOCK_SIZE_X*2];
	sh_A0[iny][inx]=0.0f;
	sh_A0[iny][inx2]=0.0f;
	__syncthreads();

	//get reasonable region for load and store
	bool w_region =  i>0 && j>0 &&(i<nx-1) &&(j<ny-1) ;
	bool w_region2 =  j>0 &&(i2<nx-1) &&(j<ny-1) ;
	bool x_l_bound = (inx==0);
	bool x_h_bound = (inx2==(blockDim.x*2-1));
	bool y_l_bound = (iny==0);
	bool y_h_bound = (iny==(blockDim.y-1));
	
	
	//register for bottom and top planes
	//because of thread coarsening, we need to doulbe registers
	float bottom,bottom2,top,top2;

	//load data for bottom and current 
	bottom=A0[Index3D (nx, ny, i, j, 0)];
	bottom2=A0[Index3D (nx, ny, i2, j, 0)];
	sh_A0[iny][inx]=A0[Index3D (nx, ny, i, j, 1)];
	sh_A0[iny][inx2]=A0[Index3D (nx, ny, i2, j, 1)];
	__syncthreads();
	
	//inner loop for z direction
	for(int k=1;k<nz-1;k++)
	{

		//load data for top plane
		top=A0[Index3D (nx, ny, i, j, k+1)];
		top2=A0[Index3D (nx, ny, i2, j, k+1)];
		float a_left_right,a_top,a_down;
		float partial;
		
		if(w_region)
		{
			//get partial results
			partial=bottom - 6.0f * sh_A0[iny][inx]  / (fac*fac);
			
			//load required data on xy planes
			//if it on shared memory, load from shared memory
			//if not, load from global memory
			if(x_l_bound)
			{
				a_left_right=A0[Index3D (nx, ny, i-1, j, k )];
			}
			else
			{
				a_left_right=sh_A0[iny][inx-1];
			}

			if(y_l_bound)
			{
				a_down=A0[Index3D (nx, ny, i, j-1, k )];
			}
			else
			{
				a_down=sh_A0[iny-1][inx];
			}
			
			if(y_h_bound)
			{
				a_top=A0[Index3D (nx, ny, i, j+1, k )];
			}
			else
			{
				a_top=sh_A0[iny+1][inx];
			}
	
			Anext[Index3D (nx, ny, i, j, k)] = a_left_right + sh_A0[iny][inx+1] + a_top + a_down +  top + partial;
			

		}
		
		//do again for next virtual block
		if(w_region2)
		{
			
			partial=bottom2 - 6.0f * sh_A0[iny][inx2]  / (fac*fac);
			if(x_h_bound)
			{
				a_left_right=A0[Index3D (nx, ny, i2+1, j, k )];
			}
			else
			{
				a_left_right=sh_A0[iny][inx2+1];
			}

			if(y_l_bound)
			{
				a_down=A0[Index3D (nx, ny, i2, j-1, k )];
			}
			else
			{
				a_down=sh_A0[iny-1][inx2];
			}
			
			if(y_h_bound)
			{
				a_top=A0[Index3D (nx, ny, i2, j+1, k )];
			}
			else
			{
				a_top=sh_A0[iny+1][inx2];
			}
	
			Anext[Index3D (nx, ny, i2, j, k)] = a_left_right + sh_A0[iny][inx2-1] + a_top + a_down +  top2 +partial ;
			

		}
		
		__syncthreads();
		
		//swap data
		bottom=sh_A0[iny][inx];
		sh_A0[iny][inx]=top;
		bottom2=sh_A0[iny][inx2];
		sh_A0[iny][inx2]=top2;
		__syncthreads();
	}
}


